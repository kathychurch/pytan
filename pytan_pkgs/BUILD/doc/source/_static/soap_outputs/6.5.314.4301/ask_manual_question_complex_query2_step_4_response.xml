<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <soap:Body xmlns:t="urn:TaniumSOAP" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <t:return>
      <command>GetObject</command>
      <session>1-698-457dcc4ba72ab687aa4f742e528b30f1aa521a9579572ecfcc7812b22edf5aac5fcbaa37a1e5d2054f1960d1bf19d2c5a7ced1afa6fd53d829387ea3197ebfe8</session>
      <server_version>6.5.314.4301</server_version>
      <ID></ID>
      <IDType></IDType>
      <ContextID></ContextID>
      <result_object>
        <sensors>
          <sensor>
            <id>136</id>
            <name>Last Logged In User</name>
            <hash>7318847</hash>
            <string_count>5</string_count>
            <category>User</category>
            <description>If no user is logged in, returns the last user to log in is reported.  If a user is currently logged in, that user is returned.
Example: DOMAIN\Jane.Doe</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Last Logged In User
&amp;#039;========================================

&amp;#039; This sensor will report the user that was logged in the last time
&amp;#039; the sensor was run.  If there is no user logged in, it will return
&amp;#039; the last user to log in.
&amp;#039;
&amp;#039; note - for this sensor to be effective, it must be reissued as a saved question

Option Explicit
Const HKLM = &amp;amp;h80000002

Dim objWMIService, objReg, colComputer
Dim objComputer, strLastUser, strLastLastUser


On Error Resume Next


Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)

&amp;#039; Get the last logged in user from registry
strLastUser = GetLastUser(objReg)

If Err.Number &amp;lt;&amp;gt; 0 Then
	&amp;#039;WScript.Echo &amp;quot;setting initially, line 24&amp;quot; &amp;amp; Err.Description
	Err.Number = 0
End If

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
Set colComputer = objWMIService.ExecQuery (&amp;quot;Select UserName from Win32_ComputerSystem&amp;quot;)

For Each objComputer in colComputer
	If IsNull(strLastUser) Or strLastUser = &amp;quot;&amp;quot; Or strLastUser = False Then &amp;#039; first run or error, try to set
		If Err.Number &amp;lt;&amp;gt; 0 Then
			&amp;#039; WScript.Echo &amp;quot;line 34&amp;quot; &amp;amp; Err.Description
			Err.Number = 0
		End If
		If objComputer.UserName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then &amp;#039;someone is currently logged in
			If Err.Number &amp;lt;&amp;gt; 0 Then
				&amp;#039; WScript.Echo &amp;quot;line 39&amp;quot; &amp;amp; Err.Description
				Err.Number = 0
			End If		 
			SetLastUser objReg, objComputer.UserName

			strLastUser = objComputer.UserName &amp;#039; this may set to no value if nobody is logged in
			If Err.Number &amp;lt;&amp;gt; 0 Then
				&amp;#039; WScript.Echo &amp;quot;setting on line 37&amp;quot; &amp;amp; Err.Description
				Err.Number = 0
			End If
		Else &amp;#039; nobody is logged in and it&amp;#039;s not yet been run
			SetLastUser objReg,&amp;quot;Uninitialized - waiting for login&amp;quot;
		End If
	Else &amp;#039; this has previously been set, overwrite the registry value if someone is logged in
		If objComputer.UserName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then &amp;#039; if someone is logged in
			SetLastUser objReg, objComputer.UserName
		Else &amp;#039; No one is logged in and it&amp;#039;s been run before
&amp;#039;			WScript.Echo &amp;quot;no user logged in and strLastUser is &amp;quot; &amp;amp; strLastUser
			SetLastUser objReg,&amp;quot;Uninitialized - waiting for login&amp;quot;
		End If
	End If
	
	&amp;#039; whether anyone is logged in or nobody is logged in, echo out
	&amp;#039; value in the registry which is either a login or the uninitialized phrase
	strLastUser = GetLastUser(objReg) &amp;#039; pull again now that it&amp;#039;s been set
	If Err.Number &amp;lt;&amp;gt; 0 Then
		&amp;#039;WScript.Echo &amp;quot;setting again, line 52&amp;quot; &amp;amp; Err.Description
		Err.Number = 0
	End If
	WScript.Echo strLastUser
Next


&amp;#039; Cleanup
Set colComputer = Nothing
Set objWMIService = Nothing
Set objReg = Nothing

Function GetLastUser(objRegistry)
&amp;#039; This function will look into the Tanium Registry Key to get the last logged in user
	
	Const HKLM = &amp;amp;h80000002
	
	Dim strLastUserRegValueData, strTaniumPath, Result
	
	strTaniumPath = GetTaniumRegistryPath()
	
	Result = objReg.GetStringValue(HKLM,strTaniumPath &amp;amp; &amp;quot;\Sensor Data&amp;quot;,&amp;quot;LastLoggedInUser&amp;quot;,strLastUserRegValueData)

	If strLastUserRegValueData = &amp;quot;&amp;quot; Then &amp;#039; data is not initialized
		GetLastUser = False
	Else
		GetLastUser = strLastUserRegValueData
	End If
	
End Function &amp;#039;GetLastUser

Function SetLastUser(objRegistry, strUserName)
&amp;#039; This function will look into the Tanium Registry Key to push the currently
&amp;#039; logged in user to the front of the array and push the previous last to the end
	
	Const HKLM = &amp;amp;h80000002
	
	Dim strTaniumPath, strLastUser
	
	strTaniumPath = GetTaniumRegistryPath()
	
	If Not RegKeyExists(objRegistry, HKLM, strTaniumPath &amp;amp; &amp;quot;\Sensor Data&amp;quot;) Then
		objRegistry.CreateKey HKLM, strTaniumPath &amp;amp; &amp;quot;\Sensor Data&amp;quot;
	End If
	
	objReg.SetStringValue HKLM,strTaniumPath &amp;amp; &amp;quot;\Sensor Data&amp;quot;,&amp;quot;LastLoggedInUser&amp;quot;,strUserName
	
End Function &amp;#039;SetLastUser
	

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
last | head -n1 | awk &amp;#039;{print $1}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
last | head -n1 | awk &amp;#039;{print $1}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get last logged in user
last | head -1 | cut -d &amp;#039; &amp;#039; -f1</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
          </sensor>
        </sensors>
      </result_object>
      <ResultXML></ResultXML>
      <options>
        <include_hidden_flag>0</include_hidden_flag>
        <suppress_object_list>1</suppress_object_list>
      </options>
    </t:return>
  </soap:Body>
</soap:Envelope>