{
    "get_action_by_id": {
        "desc": "Get an action by id",
        "xml_desc": "Get an action object by id",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "action", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.ActionList)",
            "all([isinstance(x, taniumpy.Action) for x in response])"
        ]
    },
    "get_group_by_name": {
        "desc": "Get a group by name",
        "xml_desc": "Get a group object by name",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "group", "name": "All Computers"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.GroupList)",
            "all([isinstance(x, taniumpy.Group) for x in response])"
        ]
    },
    "get_package_by_name": {
        "desc": "Get a package by name",
        "xml_desc": "Get a package object by name",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "package", "name": "Distribute Tanium Standard Utilities"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.PackageSpecList)",
            "all([isinstance(x, taniumpy.PackageSpec) for x in response])"
        ]
    },
    "get_question_by_id": {
        "desc": "Get a question by id",
        "xml_desc": "Get a question object by id",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "question", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.QuestionList)",
            "all([isinstance(x, taniumpy.Question) for x in response])"
        ]
    },
    "get_saved_action_by_name": {
        "desc": "Get a saved action by name",
        "xml_desc": "Get a saved action object by name",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {
            "objtype": "saved_action",
            "name": "Distribute Tanium Standard Utilities"
        },
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SavedActionList)",
            "all([isinstance(x, taniumpy.SavedAction) for x in response])"
        ]
    },
    "get_saved_question_by_name": {
        "desc": "Get saved question by name",
        "xml_desc": "Get saved question object by name",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {
            "objtype": "saved_question",
            "name": "Installed Applications"
        },
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SavedQuestionList)",
            "all([isinstance(x, taniumpy.SavedQuestion) for x in response])"
        ]
    },
    "get_saved_question_by_names": {
        "desc": "Get two saved questions by name",
        "xml_desc": "Get two saved question objects by name",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {
            "objtype": "saved_question",
            "name": ["Installed Applications", "Computer Name"]
        },
        "tests": [
            "len(response) == 2",
            "isinstance(response, taniumpy.SavedQuestionList)",
            "all([isinstance(x, taniumpy.SavedQuestion) for x in response])"
        ]
    },
    "get_sensor_by_name": {
        "desc": "Get a sensor by name",
        "xml_desc": "Get a sensor object by name",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "sensor", "name": "Computer Name"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_sensor_by_id": {
        "desc": "Get a sensor by id",
        "xml_desc": "Get a sensor object by id",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "sensor", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_sensor_by_hash": {
        "desc": "Get a sensor by hash",
        "xml_desc": "Get a sensor object by hash",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "sensor", "hash": "322086833"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_sensor_by_names": {
        "desc": "Get multiple sensors by name",
        "xml_desc": "Get multiple sensor objects by name",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {
            "objtype": "sensor",
            "name": ["Computer Name", "Action Statuses"]
        },
        "tests": [
            "len(response) == 2",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_sensor_by_mixed": {
        "desc": "Get multiple sensors by id, name, and hash",
        "xml_desc": "Get multiple sensor objects by id, name, and hash",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {
            "objtype": "sensor",
            "name": ["Computer Name"],
            "id": [1, 2],
            "hash": ["322086833"]
        },
        "tests": [
            "len(response) == 4",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_setting_by_name": {
        "desc": "Get a system setting by name",
        "xml_desc": "Get a system setting object by name",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "setting", "name": "control_address"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SystemSettingList)",
            "all([isinstance(x, taniumpy.SystemSetting) for x in response])"
        ]
    },
    "get_user_by_id": {
        "desc": "Get a user by id",
        "xml_desc": "Get a user object by id",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "user", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.UserList)",
            "all([isinstance(x, taniumpy.User) for x in response])"
        ]
    },
    "get_user_by_name": {
        "desc": "Get a user by name",
        "xml_desc": "Get a user object by name",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "user", "name": "Administrator"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.UserList)",
            "all([isinstance(x, taniumpy.User) for x in response])"
        ]
    },
    "get_userrole_by_id": {
        "desc": "Get a user role by id.",
        "xml_desc": "Get a user role object by id.",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "userrole", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.UserRoleList)",
            "all([isinstance(x, taniumpy.UserRole) for x in response])"
        ]
    },
    "get_whitelisted_url_by_id": {
        "desc": "Get a whitelisted url by id",
        "xml_desc": "Get a whitelisted url object by id",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "whitelisted_url", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.WhiteListedUrlList)",
            "all([isinstance(x, taniumpy.WhiteListedUrl) for x in response])"
        ]
    },
    "get_leader_clients": {
        "desc": "Get all clients that are Leader status",
        "priority": "1",
        "method": "get",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "client", "status": "Leader"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SystemStatusList)",
            "all([isinstance(x, taniumpy.ClientStatus) for x in response])"
        ]
    },
    "get_all_actions": {
        "desc": "Get all actions",
        "xml_desc": "Get all action objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "action"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.ActionList)",
            "all([isinstance(x, taniumpy.Action) for x in response])"
        ]
    },
    "get_all_clients": {
        "desc": "Get all clients",
        "xml_desc": "Get all client objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "client"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SystemStatusList)",
            "all([isinstance(x, taniumpy.ClientStatus) for x in response])"
        ]
    },
    "get_all_groups": {
        "desc": "Get all groups",
        "xml_desc": "Get all group objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "group"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.GroupList)",
            "all([isinstance(x, taniumpy.Group) for x in response])"
        ]
    },
    "get_all_packages": {
        "desc": "Get all packages",
        "xml_desc": "Get all package objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "package"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.PackageSpecList)",
            "all([isinstance(x, taniumpy.PackageSpec) for x in response])"
        ]
    },
    "get_all_questions": {
        "desc": "Get all questions",
        "xml_desc": "Get all question objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "question"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.QuestionList)",
            "all([isinstance(x, taniumpy.Question) for x in response])"
        ]
    },
    "get_all_saved_actions": {
        "desc": "Get all saved actions",
        "xml_desc": "Get all saved action objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "saved_action"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SavedActionList)",
            "all([isinstance(x, taniumpy.SavedAction) for x in response])"
        ]
    },
    "get_all_saved_questions": {
        "desc": "Get all saved questions",
        "xml_desc": "Get all saved question objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "saved_question"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SavedQuestionList)",
            "all([isinstance(x, taniumpy.SavedQuestion) for x in response])"
        ]
    },
    "get_all_sensors": {
        "desc": "Get all sensors",
        "xml_desc": "Get all sensor objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "sensor"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_all_settings": {
        "desc": "Get all system settings",
        "xml_desc": "Get all system setting objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "setting"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SystemSettingList)",
            "all([isinstance(x, taniumpy.SystemSetting) for x in response])"
        ]
    },
    "get_all_users": {
        "desc": "Get all users",
        "xml_desc": "Get all user objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "user"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.UserList)",
            "all([isinstance(x, taniumpy.User) for x in response])"
        ]
    },
    "get_all_userroless": {
        "desc": "Get all user roles",
        "xml_desc": "Get all user role objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "userrole"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.UserRoleList)",
            "all([isinstance(x, taniumpy.UserRole) for x in response])"
        ]
    },
    "get_all_whitelisted_urls": {
        "desc": "Get all whitelisted urls",
        "xml_desc": "Get all whitelisted url objects",
        "priority": "2",
        "method": "get_all",
        "method_template": "valid_response",
        "response_template": "object",
        "args": {"objtype": "whitelisted_url"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.WhiteListedUrlList)",
            "all([isinstance(x, taniumpy.WhiteListedUrl) for x in response])"
        ]
    }
}
