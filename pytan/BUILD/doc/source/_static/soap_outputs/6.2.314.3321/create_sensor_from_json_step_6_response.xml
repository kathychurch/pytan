<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <soap:Body xmlns:t="urn:TaniumSOAP" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <t:return>
      <command>DeleteObject</command>
      <session>25-1580-345d6c9cdb2f1c246eb306037b8c67c3c196bdb877f00c79e811bed0c3d8bad7bbf55c64f6ae417b29b989aa53ead243029d1167d515c64c7aa5a6b41cad1fd8</session>
      <ID></ID>
      <IDType></IDType>
      <ContextID></ContextID>
      <object_list>
        <sensor>
          <category>File System</category>
          <creation_time>2015-09-05T05:04:27</creation_time>
          <delimiter>,</delimiter>
          <description>Finds the specified folder and provides the full path if the folder exists on the client machine. Takes regular expression to match.
Example: C:\WINDOWS\System32</description>
          <exclude_from_parse_flag>1</exclude_from_parse_flag>
          <hash>839342978</hash>
          <hidden_flag>0</hidden_flag>
          <id>855</id>
          <ignore_case_flag>1</ignore_case_flag>
          <last_modified_by>Administrator</last_modified_by>
          <max_age_seconds>600</max_age_seconds>
          <metadata>
            <item>
              <admin_flag>0</admin_flag>
              <name>defined</name>
              <value>McAfee</value>
            </item>
          </metadata>
          <modification_time>2015-09-05T05:04:27</modification_time>
          <name>Folder Name Search with RegEx Match API TEST</name>
          <parameter_definition>{"parameters":[{"maxChars":0,"validationExpressions":[{"expression":"\\S{3}","helpString":"Value must be at least 3 characters","flags":"","model":"com.tanium.models::ValidationExpression","parameterType":"com.tanium.models::ValidationExpression"}],"label":"Search for Folder Name","key":"dirname","restrict":null,"value":"","helpString":"Enter the folder name to search for","promptText":"e.g Program Files","defaultValue":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"},{"maxChars":0,"validationExpressions":[{"expression":"\\S{3}","helpString":"Value must be at least 3 characters","flags":"","model":"com.tanium.models::ValidationExpression","parameterType":"com.tanium.models::ValidationExpression"}],"label":"Regular Expression","key":"regexp","restrict":null,"value":"","helpString":"Enter the regular expression to search for.","promptText":"e.g. test*.exe","defaultValue":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"},{"label":"Case sensitive?","key":"casesensitive","value":"","helpString":"Enter Yes/No for case sensitivity of search.","requireSelection":true,"promptText":"","defaultValue":"","values":["No","Yes"],"parameterType":"com.tanium.components.parameters::DropDownParameter","model":"com.tanium.components.parameters::DropDownParameter"},{"label":"Global","key":"global","value":"","helpString":"Enter Yes/No whether the search is global.","requireSelection":true,"promptText":"","defaultValue":"","values":["No","Yes"],"parameterType":"com.tanium.components.parameters::DropDownParameter","model":"com.tanium.components.parameters::DropDownParameter"}],"model":"com.tanium.components.parameters::ParametersArray","parameterType":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
          <queries>
            <query>
              <platform>Windows</platform>
              <script>'========================================
' Folder Name Search with RegEx Match
'========================================
'@INCLUDE=utils/SensorRandomization/SensorRandomizationFunctions.vbs
Option Explicit

SensorRandomize()

Dim Pattern,strRegExp,strGlobalArg,strCaseSensitiveArg
Dim bGlobal,bCaseSensitive

Pattern = unescape("||dirname||")
strRegExp = Trim(Unescape("||regexp||"))
strGlobalArg = Trim(Unescape("||global||"))
strCaseSensitiveArg = Trim(Unescape("||casesensitive||"))

bGlobal = GetTrueFalseArg("global",strGlobalArg)
bCaseSensitive = GetTrueFalseArg("casesensitive",strCaseSensitiveArg)

Const SYSTEM_FOLDER = 1, TEMP_FOLDER = 2, FOR_READING = 1

Dim FSO, WshShell, Drives, Drive, TextStream, OutputFilename, strLine

Set FSO = CreateObject("Scripting.FileSystemObject")
Set WshShell = CreateObject("WScript.Shell")

OutputFilename = TempName() ' a temporary file in system's temp dir

' Go through file system, refresh output file for filename
If Not FSO.FileExists(OutputFilename) Then
	
	If FSO.FileExists(OutputFilename) Then FSO.DeleteFile OutputFilename

	' Get the collection of local drives.
	Set Drives = FSO.Drives
	For Each Drive in Drives
		If Drive.DriveType = 2 Then ' 2 = Fixed drive
			' Run the Dir command that looks for the filename pattern.
			RunCommand "dir " &amp;Chr(34)&amp; Drive.DriveLetter &amp; ":\" &amp; Pattern &amp; Chr(34)&amp;" /a:D /B /S", OutputFilename, true
		End If
	Next
End If

' Open the output file, echo each line, and then close and delete it.
Set TextStream = FSO.OpenTextFile(OutputFileName, FOR_READING)
Do While Not TextStream.AtEndOfStream
	strLine = TextStream.ReadLine()
	If RegExpMatch(strRegExp,strLine,bGlobal,bCaseSensitive) Then
		WScript.Echo strLine
	End If
Loop


TextStream.Close()
 
If FSO.FileExists(OutputFileName) Then
	On Error Resume Next
	FSO.DeleteFile OutputFileName, True
	On Error Goto 0
End If

Function RegExpMatch(strPattern,strToMatch,bGlobal,bIsCaseSensitive)

	Dim re
	Set re = New RegExp
	With re
	  .Pattern = strPattern
	  .Global = bGlobal
	  .IgnoreCase = Not bIsCaseSensitive
	End With
	
	RegExpMatch = re.Test(strToMatch)

End Function 'RegExpMatch


Function GetTrueFalseArg(strArgName,strArgValue)
	' Checks for valid values, will fail with error message
	
	Dim bArgVal
	bArgVal = False
	Select Case LCase(strArgValue)
		Case "true"
			bArgVal = True
		Case "yes"
			bArgVal = True
		Case "false"
			bArgVal = False
		Case "no"
			bArgVal = False
		Case Else
			WScript.Echo "Error: Argument '"&amp;strArgName&amp;"' must be True or False, quitting"
			PrintUsage
	End Select
	GetTrueFalseArg = bArgVal

End Function 'GetTrueFalseArg


' Returns the name of a temporary file in the Temp directory.
Function TempName()
	Dim Result
	Do
 		Result = FSO.BuildPath(FSO.GetSpecialFolder(TEMP_FOLDER), FSO.GetTempName())
		WScript.Sleep 200 'avoid potential busy loop
	Loop While FSO.FileExists(Result)
	
	TempName = Result
End Function 'TempName

' Runs a command with Cmd.exe and redirects its output to a temporary
' file. The function returns the name of the temporary file that holds
' the command's output.
Function RunCommand(Command, OutputFilename, b64BitNecessary)
	' 64BitNecessary true when you need to examine the 64-bit areas like system32
	Dim CommandLine,WshShell,strPRogramFilesx86,strDOSCall,objFSO
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	Set WshShell = CreateObject("WScript.Shell")
	
	strDOSCall = "%ComSpec% /C "
	
	' if 64-bit OS *and* we must examine in 64-bit mode to avoid FS Redirection
	strProgramFilesx86=WshShell.ExpandEnvironmentStrings("%ProgramFiles%")
	If objFSO.FolderExists(strProgramFilesx86) And b64BitNecessary Then ' quick check for x64
		strDOSCall = FixFileSystemRedirectionForPath(WshShell.ExpandEnvironmentStrings(strDOSCall))
	End If
		
	CommandLine = WshShell.ExpandEnvironmentStrings(strDOSCall &amp; Command &amp; " &gt;&gt; """ &amp; OutputFileName &amp; """")
	WshShell.Run CommandLine, 0, True
End Function 'RunCommand

Function FixFileSystemRedirectionForPath(strFilePath)
' This function will fix a folder location so that
' a 32-bit program can be passed the windows\system32 directory
' as a parameter.
' Even if the sensor or action runs in 64-bit mode, a 32-bit
' program called in a 64-bit environment cannot access
' the system32 directory - it would be redirected to syswow64.
' you would not want to do this for 64-bit programs.
	
	Dim objFSO, strSystem32Location,objShell
	Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	Set objShell = CreateObject("Wscript.Shell")

	strProgramFilesx86=objShell.ExpandEnvironmentStrings("%ProgramFiles%")

	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strProgramFilesx86=objShell.ExpandEnvironmentStrings("%ProgramFiles(x86)%")
	
	If objFSO.FolderExists(strProgramFilesx86) Then ' quick check for x64
		If InStr(strFilePath,strSystem32Location) = 1 Then
			strRestOfPath = Replace(strFilePath,strSystem32Location,"")
			strNewSystem32Location = Replace(strSystem32Location,"system32","sysnative")
			strFilePath = strNewSystem32Location&amp;strRestOfPath
		End If
	End If
	FixFileSystemRedirectionForPath = strFilePath
	
	'Cleanup
	Set objFSO = Nothing
End Function 'FixFileSystemRedirectionForPath
'------------ INCLUDES after this line. Do not edit past this point -----
'- Begin file: utils/SensorRandomization/SensorRandomizationFunctions.vbs
'' -- Begin Random Sleep Functions -- ''

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function ' SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function ' SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function ' SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
' sleeps for a random period of time, intSleepTime is in seconds
' if the sensor randomize flag is on
' RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
' not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;"\Sensor Data\Random Sleep"
	
	Set objShell = CreateObject("WScript.Shell")
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead("HKLM\"&amp;strRandomizeRegPath&amp;"\SensorRandomizeFlag")
	intRandomizeScalingPercentage = objShell.RegRead("HKLM\"&amp;strRandomizeRegPath&amp;"\SensorRandomizeScalingPercentage")
	On Error Goto 0
	If intRandomizeFlag &gt; 0 Then
		If intRandomizeScalingPercentage &gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho "Randomize scaling percentage of " _ 
				&amp; intRandomizeScalingPercentage &amp; " applied, new sleep time is " &amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 ' convert to milliseconds
		' wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		' assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho "Sleeping for " &amp; intSensorRandomizeWaitTime &amp; " milliseconds"
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho "Done sleeping, continuing ..."
	Else 
		SensorRandomizeEcho "SensorRandomize Not Enabled - No Op"
	End If
End Function 'SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
' for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID / Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID / Timer
	End If
End Function 'SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
'SensorRandomizeGetTaniumRegistryPath works in x64 or x32
'looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject("WScript.Shell")
    
	keyNativePath = "Software\Tanium\Tanium Client"
	keyWoWPath = "Software\Wow6432Node\Tanium\Tanium Client"
    
    ' first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead("HKLM\"&amp;keyNativePath&amp;"\Path")
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = "" Then
  		' Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead("HKLM\"&amp;keyWoWPath&amp;"\Path")
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = "" Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo "Error: Cannot locate Tanium Registry Path"
  	End If
End Function 'SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
'' This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = "ComputerID"
    Set objShell = CreateObject("WScript.Shell")
    On Error Resume Next
    intClientID = objShell.RegRead("HKLM\"&amp;strKeyPath&amp;"\"&amp;strValueName)
    If Err.Number &lt;&gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function 'SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function 'SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub 'SensorRandomizeEcho
' -- End Random Sleep Functions --'
'- End file: utils/SensorRandomization/SensorRandomizationFunctions.vbs</script>
              <script_type>VBScript</script_type>
            </query>
            <query>
              <platform>Linux</platform>
              <script>#!/bin/bash
#||dirname||||regexp||||casesensitive||||global||
echo Windows Only</script>
              <script_type>UnixShell</script_type>
            </query>
            <query>
              <platform>Mac</platform>
              <script>#!/bin/bash
#||dirname||||regexp||||casesensitive||||global||
echo Windows Only</script>
              <script_type>UnixShell</script_type>
            </query>
          </queries>
          <source_id>0</source_id>
          <string_count>0</string_count>
          <value_type>String</value_type>
        </sensor>
      </object_list>
      <options></options>
      <ResultXML></ResultXML>
      <result_object>
        <sensor>
          <id>855</id>
        </sensor>
      </result_object>
    </t:return>
  </soap:Body>
</soap:Envelope>