<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <soap:Body xmlns:t="urn:TaniumSOAP" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <t:return>
      <command>GetObject</command>
      <session>25-1662-f64ef8a82f6c3e6365a81cbf872e10fa89b4a08b84f4c344c6fa2cf3b2487cdaa00554f27f4259c98b16b889bac62886beccdbcfe0db4f41c4f44ca808747c35</session>
      <ID></ID>
      <IDType></IDType>
      <ContextID></ContextID>
      <result_object>
        <saved_question>
          <id>92</id>
          <name>Installed Applications</name>
          <question>
            <id>6218</id>
            <expire_seconds>0</expire_seconds>
            <skip_lock_flag>0</skip_lock_flag>
            <expiration>2015-09-05T05:56:29</expiration>
            <user>
              <id>25</id>
              <name>Administrator</name>
            </user>
            <management_rights_group>
              <id>0</id>
            </management_rights_group>
            <saved_question>
              <id>92</id>
            </saved_question>
            <name></name>
            <query_text>Get Installed Applications from all machines</query_text>
            <hidden_flag>0</hidden_flag>
            <action_tracking_flag>0</action_tracking_flag>
            <selects>
              <select>
                <sensor>
                  <id>41</id>
                  <name>Installed Applications</name>
                  <hash>1511329504</hash>
                  <string_count>3577</string_count>
                  <category>Applications</category>
                  <description>List of the applications and versions of those applications installed on the client machine.
Example: Mozilla Firefox | 16.0.1</description>
                  <creation_time>2015-08-07T11:45:36</creation_time>
                  <modification_time>2015-08-07T11:45:36</modification_time>
                  <last_modified_by>Jim Olsen</last_modified_by>
                  <queries>
                    <query>
                      <platform>Windows</platform>
                      <script>&amp;#039;========================================
&amp;#039; Installed Applications
&amp;#039;========================================
&amp;#039;@INCLUDE=utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039; This sensor will return information in the uninstall areas of the registry.
&amp;#039; There are two hidden columns which can be filtered on despite the fact that
&amp;#039; they&amp;#039;re hidden, and can also feed actions.
&amp;#039; if the uninstallstring is msi based, it is altered to show the
&amp;#039; silent uninstall options and marked as &amp;quot;Is Uninstallable&amp;quot;
&amp;#039; finally, if it&amp;#039;s a user installed application, it will note that
&amp;#039; The columns look like:
&amp;#039; Name|Version|Silent Uninstall String|Uninstallable

SensorRandomize()

Set objRegistry = Getx64RegistryProvider()

keyPath = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&amp;quot;
key64Path = &amp;quot;SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall&amp;quot;

Const HKLM = &amp;amp;H80000002
Const HKEY_USERS = &amp;amp;H80000003

&amp;#039; list out 32-bit applications on a 64-bit system
If RegKeyExists(HKLM, key64Path) Then
	objRegistry.EnumKey HKLM, key64Path, arrSubKeys
	GetApplications HKLM,key64path,arrSubKeys
End If

&amp;#039; list out 32-bit applications on a 32-bit system, or 64-bit applications
&amp;#039; on a 64-bit system.
If RegKeyExists(HKLM, keyPath) Then
	objRegistry.EnumKey HKLM, keypath, arrSubKeys
	GetApplications HKLM,keypath,arrSubKeys
End If

&amp;#039; Also list out applications installed to HKEY_Users areas
&amp;#039; which will be appended to the arrSubKeys
objRegistry.EnumKey HKEY_USERS, &amp;quot;&amp;quot;, arrUserKeys
For Each strSIDkey In arrUserKeys
	If RegKeyExists(HKEY_USERS, strSIDKEY&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath) Then
		objRegistry.EnumKey HKEY_USERS, strSIDkey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath, arrSubKeys
		GetApplications HKEY_USERS,strSIDKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath,arrSubKeys
	End If
Next


Function GetApplications(HIVE, keypath,arrSubKeys)
	Set applications = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
	On Error Resume Next
	For Each key in arrSubKeys
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;DisplayName&amp;quot;, displayName
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;DisplayVersion&amp;quot;, version
		objRegistry.GetDWORDValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;SystemComponent&amp;quot;, systemComponent	
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;UninstallString&amp;quot;, uninstallString	
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;ParentKeyName&amp;quot;, parentKey	
		&amp;#039; on error goto 0
		&amp;#039; assume it&amp;#039;s not uninstallable
		bUninstallable = &amp;quot;Not Uninstallable&amp;quot;
				
		If displayName &amp;lt;&amp;gt; &amp;quot;&amp;quot; _
			And Not IsNull(uninstallString) _ 
			And IsNull(parentKey) _
			And InStr(displayName, &amp;quot;Hotfix&amp;quot;) = 0 _
			And InStr(displayName, &amp;quot;Update for&amp;quot;) = 0 _
	 		And InStr(displayName, &amp;quot;Security Update for&amp;quot;) = 0 _
	 	Then 
	 		If InStr(LCase(uninstallString), &amp;quot;msiexec&amp;quot;) Then
	 			&amp;#039; replace any /I with /X and add silent flags
	 			uninstallString = Replace(uninstallString,&amp;quot;/I&amp;quot;,&amp;quot;/X&amp;quot;) &amp;amp; &amp;quot; /qn /noreboot&amp;quot; 
	  			bUninstallable = &amp;quot;Is Uninstallable&amp;quot;
	  		End If
	 		If IsNull(systemComponent) Or systemComponent = 0 Then
				If IsNull(version) Then
					version = GetVersionInString(displayName)
				End If
				&amp;#039; This is a multi-column sensor.  Last two columns are hidden.

				displayString = displayName &amp;amp; &amp;quot;|&amp;quot; &amp;amp; version &amp;amp; &amp;quot;|&amp;quot; &amp;amp; uninstallString &amp;amp; &amp;quot;|&amp;quot; &amp;amp; bUninstallable

				&amp;#039; treat displayString as the unique value - cannot be listed twice.
				If Not applications.Exists(displayString) Then
					applications.Add displayString, &amp;quot;&amp;quot;
				End If 	
			End If 	
		End If 
	Next
	On Error Goto 0
	
	SortDictionary applications, 1 &amp;#039; This calls a sorting function specific to dictionaries
	arrApplicationsKeys = applications.Keys
	For Each application In arrApplicationsKeys
		&amp;#039; final output of the sensor
		WScript.Echo CleanCharacters(application)
	Next
End Function &amp;#039;GetApplications

Function RegKeyExists(sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function SortDictionary(objDict, intSort)
 &amp;#039;   objDict - the dictionary to sort
 &amp;#039;   intSort - the field to sort (1=key, 2=item)
 
   &amp;#039; declare constants
   Const dictKey  = 1
   Const dictItem = 2
 
   &amp;#039; declare our variables
   Dim strDict()
   Dim objKey
   Dim strKey,strItem
   Dim X,Y,Z
 
   &amp;#039; get the dictionary count
   Z = objDict.Count
 
   &amp;#039; we need more than one item to warrant sorting
   If Z &amp;gt; 1 Then
     &amp;#039; create an array to store dictionary information
     ReDim strDict(Z,2)
     X = 0
     &amp;#039; populate the string array
     For Each objKey In objDict
         strDict(X,dictKey)  = CStr(objKey)
         strDict(X,dictItem) = CStr(objDict(objKey))
         X = X + 1
     Next
 
     &amp;#039; perform a a shell sort of the string array
     For X = 0 To (Z - 2)
       For Y = X To (Z - 1)
         If StrComp(strDict(X,intSort),strDict(Y,intSort),vbTextCompare) &amp;gt; 0 Then
             strKey  = strDict(X,dictKey)
             strItem = strDict(X,dictItem)
             strDict(X,dictKey)  = strDict(Y,dictKey)
             strDict(X,dictItem) = strDict(Y,dictItem)
             strDict(Y,dictKey)  = strKey
             strDict(Y,dictItem) = strItem
         End If
       Next
     Next
 
     &amp;#039; erase the contents of the dictionary object
     objDict.RemoveAll
 
     &amp;#039; repopulate the dictionary with the sorted information
     For X = 0 To (Z - 1)
       objDict.Add strDict(X,dictKey), strDict(X,dictItem)
     Next
 
   End If
 End Function &amp;#039;SortDictionary

Function GetVersionInString(ByVal strTemp)
&amp;#039; examines a string and returns a version string at the end of it
	Dim strOut
	strOut = &amp;quot;&amp;quot;
	If Not IsNull(strTemp) Then
		strTemp = StrReverse(strTemp)
		Dim strLookAtChar,intCurPos
		Dim bNumbersStartMarked : bNumbersStartMarked = False

		For intCurPos = 1 To Len(strTemp)		
			strLookAtChar = Mid(strTemp,intCurPos,1)
			If IsNumeric(strLookAtChar) Or strLookAtChar = &amp;quot;.&amp;quot; Or strLookAtChar = &amp;quot;-&amp;quot; Then
				bNumbersStartMarked = True
				strOut = strOut &amp;amp; strLookAtChar
			End If
		If bNumbersStartMarked And ( (Not IsNumeric(strLookAtChar) And strLookAtChar &amp;lt;&amp;gt; &amp;quot;.&amp;quot; And strLookAtChar &amp;lt;&amp;gt; &amp;quot;-&amp;quot;) ) Then
			Exit For
		End If	
		Next
		strOut = StrReverse(strOut)
	Else
		strOut = &amp;quot;&amp;quot;
	End If
	
	If Len(strOut) = 0 Then strOut = &amp;quot;N/A&amp;quot;
	
	GetVersionInString = strOut
	
End Function &amp;#039;GetVersionInString

Function CleanCharacters(strTest)
&amp;#039; String returned will not have characters in the output which
&amp;#039; are not friendly to the console app
	strPattern = &amp;quot;[^\x20-\x7E]&amp;quot;
	strReplace = &amp;quot;&amp;quot;
	Set objRegExp = New RegExp
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	objRegExp.Pattern = strPattern
	objRegExp.Global = True
	CleanCharacters = objRegExp.Replace(strTest, strReplace)
End Function

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039;&amp;#039; -- Begin Random Sleep Functions -- &amp;#039;&amp;#039;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &amp;#039; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&amp;#039; sleeps for a random period of time, intSleepTime is in seconds
&amp;#039; if the sensor randomize flag is on
&amp;#039; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&amp;#039; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;amp;&amp;quot;\Sensor Data\Random Sleep&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeFlag&amp;quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeScalingPercentage&amp;quot;)
	On Error Goto 0
	If intRandomizeFlag &amp;gt; 0 Then
		If intRandomizeScalingPercentage &amp;gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &amp;quot;Randomize scaling percentage of &amp;quot; _ 
				&amp;amp; intRandomizeScalingPercentage &amp;amp; &amp;quot; applied, new sleep time is &amp;quot; &amp;amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &amp;#039; convert to milliseconds
		&amp;#039; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&amp;#039; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &amp;quot;Sleeping for &amp;quot; &amp;amp; intSensorRandomizeWaitTime &amp;amp; &amp;quot; milliseconds&amp;quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &amp;quot;Done sleeping, continuing ...&amp;quot;
	Else 
		SensorRandomizeEcho &amp;quot;SensorRandomize Not Enabled - No Op&amp;quot;
	End If
End Function &amp;#039;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&amp;#039; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &amp;lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID / Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID / Timer
	End If
End Function &amp;#039;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&amp;#039;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&amp;#039;&amp;#039; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &amp;quot;ComputerID&amp;quot;
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strKeyPath&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strValueName)
    If Err.Number &amp;lt;&amp;gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &amp;#039;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &amp;lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &amp;#039;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &amp;#039;SensorRandomizeEcho
&amp;#039; -- End Random Sleep Functions --&amp;#039;
&amp;#039;- End file: utils/SensorRandomization/SensorRandomizationFunctions.vbs</script>
                      <script_type>VBScript</script_type>
                    </query>
                    <query>
                      <platform>Linux</platform>
                      <script>#!/bin/sh
# Detects which OS and if it is Linux then it will detect which Linux
# Distribution.

# Can be used as a starting point for shell scripts that need to work differently on
# Mac, and various flavors of Linux

OS=`uname -s`

GetVersionFromFile()
{
    VERSION=`cat $1 | tr &amp;quot;\n&amp;quot; &amp;#039; &amp;#039; | sed s/.*VERSION.*=\ // `
}

if [ &amp;quot;${OS}&amp;quot; = &amp;quot;Linux&amp;quot; ] ; then
    KERNEL=`uname -r`
    if [ -f /etc/redhat-release ] ; then
        # Redhat based system
        rpm -qa --queryformat &amp;quot;%{NAME}|%{VERSION}|nothing|Not Uninstallable\n&amp;quot;
    elif [ -f /etc/SuSE-release ] ; then
        # SuSE / OpenSuSE based system
        rpm -qa --queryformat &amp;quot;%{NAME}|%{VERSION}|nothing|Not Uninstallable\n&amp;quot;
    elif [ -f /etc/lsb-release ] ; then
        # Usually Ubuntu -- this is a Linux Standard Based system, which
        # Ubuntu is by far the biggest.  But general LSB commands should work
        dpkg -l | awk &amp;#039;{print $2&amp;quot;|&amp;quot;$3&amp;quot;|nothing|Not Uninstallable&amp;quot;}&amp;#039;
    elif [ -f /etc/debian_version ] ; then
        # Debian -- note that Ubuntu is Debian based, but Debian does not have a
        # lsb-release file
        dpkg -l | awk &amp;#039;{print $2&amp;quot;|&amp;quot;$3&amp;quot;|nothing|Not Uninstallable&amp;quot;}&amp;#039;
        #else
	# a less common distribution.  Most all really popular distributions will
        # be caught by the tree above.
    fi
#else
   # not Linux -- could be anything, BSD / Solaris / AIX / etc
fi

echo ${OSSTR}</script>
                      <script_type>UnixShell</script_type>
                    </query>
                    <query>
                      <platform>Mac</platform>
                      <script>#!/bin/bash

notcontains() {
    string=&amp;quot;$1&amp;quot;
    substring=&amp;quot;$2&amp;quot;
    if test &amp;quot;${string#*$substring}&amp;quot; != &amp;quot;$string&amp;quot;
    then
        return 1    # $substring is not in $string
    else
        return 0    # $substring is in $string
    fi
}

ftemp=$(mktemp -t &amp;#039;apps.xml&amp;#039;)
system_profiler -xml SPApplicationsDataType &amp;gt; &amp;quot;$ftemp&amp;quot;

count=1

while true
do
        app=`/usr/libexec/PlistBuddy -c &amp;quot;Print :0:_items:$count:_name&amp;quot; $ftemp 2&amp;gt;/dev/null`
        version=`/usr/libexec/PlistBuddy -c &amp;quot;Print :0:_items:$count:version&amp;quot; $ftemp 2&amp;gt;/dev/null`
        if [ -z &amp;quot;$app&amp;quot; ]; then
                break
        fi
        test=&amp;quot;VMware&amp;quot;
        if notcontains &amp;quot;$version&amp;quot; &amp;quot;$test&amp;quot;; then
                echo $app&amp;quot;|&amp;quot;$version&amp;quot;|nothing|Not Uninstallable&amp;quot;
        fi
        let count=count+1
done
rm -rf &amp;quot;$ftemp&amp;quot;</script>
                      <script_type>UnixShell</script_type>
                    </query>
                  </queries>
                  <source_id>0</source_id>
                  <parameter_definition></parameter_definition>
                  <value_type>String</value_type>
                  <max_age_seconds>600</max_age_seconds>
                  <ignore_case_flag>1</ignore_case_flag>
                  <hidden_flag>0</hidden_flag>
                  <exclude_from_parse_flag>1</exclude_from_parse_flag>
                  <delimiter>|</delimiter>
                  <subcolumns>
                    <subcolumn>
                      <name>Name</name>
                      <index>0</index>
                      <value_type>String</value_type>
                      <ignore_case_flag>1</ignore_case_flag>
                      <hidden_flag>0</hidden_flag>
                    </subcolumn>
                    <subcolumn>
                      <name>Version</name>
                      <index>1</index>
                      <value_type>Version</value_type>
                      <ignore_case_flag>1</ignore_case_flag>
                      <hidden_flag>0</hidden_flag>
                    </subcolumn>
                    <subcolumn>
                      <name>Silent Uninstall String</name>
                      <index>2</index>
                      <value_type>String</value_type>
                      <ignore_case_flag>1</ignore_case_flag>
                      <hidden_flag>1</hidden_flag>
                    </subcolumn>
                    <subcolumn>
                      <name>Uninstallable</name>
                      <index>3</index>
                      <value_type>String</value_type>
                      <ignore_case_flag>1</ignore_case_flag>
                      <hidden_flag>1</hidden_flag>
                    </subcolumn>
                  </subcolumns>
                  <metadata>
                    <item>
                      <name>defined</name>
                      <value>Tanium</value>
                      <admin_flag>0</admin_flag>
                    </item>
                  </metadata>
                </sensor>
                <filter>
                  <operator>Less</operator>
                  <value_type>String</value_type>
                  <value></value>
                  <not_flag>0</not_flag>
                  <max_age_seconds>0</max_age_seconds>
                  <ignore_case_flag>1</ignore_case_flag>
                  <all_values_flag>0</all_values_flag>
                  <substring_flag>0</substring_flag>
                  <substring_start>0</substring_start>
                  <substring_length>0</substring_length>
                  <delimiter></delimiter>
                  <delimiter_index>0</delimiter_index>
                  <utf8_flag>0</utf8_flag>
                  <aggregation></aggregation>
                  <all_times_flag>0</all_times_flag>
                  <start_time>2001-01-01T00:00:00</start_time>
                  <end_time>2001-01-01T00:00:00</end_time>
                </filter>
              </select>
            </selects>
            <force_computer_id_flag>0</force_computer_id_flag>
          </question>
          <public_flag>1</public_flag>
          <hidden_flag>0</hidden_flag>
          <issue_seconds>120</issue_seconds>
          <issue_seconds_never_flag>0</issue_seconds_never_flag>
          <expire_seconds>600</expire_seconds>
          <sort_column>0</sort_column>
          <query_text>Get Installed Applications from all machines</query_text>
          <packages></packages>
          <row_count_flag>0</row_count_flag>
          <keep_seconds>3600</keep_seconds>
          <archive_enabled_flag>0</archive_enabled_flag>
          <most_recent_question_id>6218</most_recent_question_id>
          <user>
            <id>1</id>
            <name>Jim Olsen</name>
          </user>
          <archive_owner>
            <id>1</id>
            <name>Jim Olsen</name>
          </archive_owner>
          <mod_time>2015-08-07T11:48:55</mod_time>
          <mod_user>
            <name>Jim Olsen</name>
          </mod_user>
          <action_tracking_flag>0</action_tracking_flag>
          <metadata>
            <item>
              <name>defined</name>
              <value>Tanium</value>
              <admin_flag>0</admin_flag>
            </item>
            <item>
              <name>category</name>
              <value>Tanium</value>
              <admin_flag>0</admin_flag>
            </item>
          </metadata>
        </saved_question>
      </result_object>
      <ResultXML></ResultXML>
      <options>
        <suppress_object_list>1</suppress_object_list>
      </options>
    </t:return>
  </soap:Body>
</soap:Envelope>