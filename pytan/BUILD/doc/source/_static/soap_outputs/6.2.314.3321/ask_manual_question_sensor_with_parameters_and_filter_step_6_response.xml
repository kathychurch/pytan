<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <soap:Body xmlns:t="urn:TaniumSOAP" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <t:return>
      <command>GetObject</command>
      <session>25-1654-94a80067fafd857c77fb770837506f0f3cbc30649785e6556cf513e0d92b0fcf532eac20784d05b48ec6c8cbf0f58d2d6a2b1b58e6c4bce23e71c8fa88ec166e</session>
      <ID></ID>
      <IDType></IDType>
      <ContextID></ContextID>
      <result_object>
        <question>
          <id>6207</id>
          <context_group>
            <id>0</id>
          </context_group>
          <expire_seconds>0</expire_seconds>
          <skip_lock_flag>0</skip_lock_flag>
          <expiration>2015-09-05T05:52:31</expiration>
          <user>
            <id>25</id>
            <name>Administrator</name>
          </user>
          <management_rights_group>
            <id>0</id>
          </management_rights_group>
          <saved_question>
            <id>0</id>
          </saved_question>
          <name></name>
          <query_text>Get Folder Name Search with RegEx Match[No, Program Files, No, , Microsoft.*] contains "Shared" from all machines</query_text>
          <hidden_flag>0</hidden_flag>
          <action_tracking_flag>0</action_tracking_flag>
          <selects>
            <select>
              <sensor>
                <id>4294967021</id>
                <name>Folder Name Search with RegEx Match[No, Program Files, No, , Microsoft.*]</name>
                <hash>2945657520</hash>
                <string_count>6</string_count>
                <category></category>
                <description></description>
                <queries>
                  <query>
                    <platform>Windows</platform>
                    <script>&amp;#039;========================================
&amp;#039; Folder Name Search with RegEx Match
&amp;#039;========================================
&amp;#039;@INCLUDE=utils/SensorRandomization/SensorRandomizationFunctions.vbs
Option Explicit

SensorRandomize()

Dim Pattern,strRegExp,strGlobalArg,strCaseSensitiveArg
Dim bGlobal,bCaseSensitive

Pattern = unescape(&amp;quot;Program%20Files&amp;quot;)
strRegExp = Trim(Unescape(&amp;quot;&amp;quot;))
strGlobalArg = Trim(Unescape(&amp;quot;No&amp;quot;))
strCaseSensitiveArg = Trim(Unescape(&amp;quot;No&amp;quot;))

bGlobal = GetTrueFalseArg(&amp;quot;global&amp;quot;,strGlobalArg)
bCaseSensitive = GetTrueFalseArg(&amp;quot;casesensitive&amp;quot;,strCaseSensitiveArg)

Const SYSTEM_FOLDER = 1, TEMP_FOLDER = 2, FOR_READING = 1

Dim FSO, WshShell, Drives, Drive, TextStream, OutputFilename, strLine

Set FSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
Set WshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

OutputFilename = TempName() &amp;#039; a temporary file in system&amp;#039;s temp dir

&amp;#039; Go through file system, refresh output file for filename
If Not FSO.FileExists(OutputFilename) Then
	
	If FSO.FileExists(OutputFilename) Then FSO.DeleteFile OutputFilename

	&amp;#039; Get the collection of local drives.
	Set Drives = FSO.Drives
	For Each Drive in Drives
		If Drive.DriveType = 2 Then &amp;#039; 2 = Fixed drive
			&amp;#039; Run the Dir command that looks for the filename pattern.
			RunCommand &amp;quot;dir &amp;quot; &amp;amp;Chr(34)&amp;amp; Drive.DriveLetter &amp;amp; &amp;quot;:\&amp;quot; &amp;amp; Pattern &amp;amp; Chr(34)&amp;amp;&amp;quot; /a:D /B /S&amp;quot;, OutputFilename, true
		End If
	Next
End If

&amp;#039; Open the output file, echo each line, and then close and delete it.
Set TextStream = FSO.OpenTextFile(OutputFileName, FOR_READING)
Do While Not TextStream.AtEndOfStream
	strLine = TextStream.ReadLine()
	If RegExpMatch(strRegExp,strLine,bGlobal,bCaseSensitive) Then
		WScript.Echo strLine
	End If
Loop


TextStream.Close()
 
If FSO.FileExists(OutputFileName) Then
	On Error Resume Next
	FSO.DeleteFile OutputFileName, True
	On Error Goto 0
End If

Function RegExpMatch(strPattern,strToMatch,bGlobal,bIsCaseSensitive)

	Dim re
	Set re = New RegExp
	With re
	  .Pattern = strPattern
	  .Global = bGlobal
	  .IgnoreCase = Not bIsCaseSensitive
	End With
	
	RegExpMatch = re.Test(strToMatch)

End Function &amp;#039;RegExpMatch


Function GetTrueFalseArg(strArgName,strArgValue)
	&amp;#039; Checks for valid values, will fail with error message
	
	Dim bArgVal
	bArgVal = False
	Select Case LCase(strArgValue)
		Case &amp;quot;true&amp;quot;
			bArgVal = True
		Case &amp;quot;yes&amp;quot;
			bArgVal = True
		Case &amp;quot;false&amp;quot;
			bArgVal = False
		Case &amp;quot;no&amp;quot;
			bArgVal = False
		Case Else
			WScript.Echo &amp;quot;Error: Argument &amp;#039;&amp;quot;&amp;amp;strArgName&amp;amp;&amp;quot;&amp;#039; must be True or False, quitting&amp;quot;
			PrintUsage
	End Select
	GetTrueFalseArg = bArgVal

End Function &amp;#039;GetTrueFalseArg


&amp;#039; Returns the name of a temporary file in the Temp directory.
Function TempName()
	Dim Result
	Do
 		Result = FSO.BuildPath(FSO.GetSpecialFolder(TEMP_FOLDER), FSO.GetTempName())
		WScript.Sleep 200 &amp;#039;avoid potential busy loop
	Loop While FSO.FileExists(Result)
	
	TempName = Result
End Function &amp;#039;TempName

&amp;#039; Runs a command with Cmd.exe and redirects its output to a temporary
&amp;#039; file. The function returns the name of the temporary file that holds
&amp;#039; the command&amp;#039;s output.
Function RunCommand(Command, OutputFilename, b64BitNecessary)
	&amp;#039; 64BitNecessary true when you need to examine the 64-bit areas like system32
	Dim CommandLine,WshShell,strPRogramFilesx86,strDOSCall,objFSO
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	Set WshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	
	strDOSCall = &amp;quot;%ComSpec% /C &amp;quot;
	
	&amp;#039; if 64-bit OS *and* we must examine in 64-bit mode to avoid FS Redirection
	strProgramFilesx86=WshShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)
	If objFSO.FolderExists(strProgramFilesx86) And b64BitNecessary Then &amp;#039; quick check for x64
		strDOSCall = FixFileSystemRedirectionForPath(WshShell.ExpandEnvironmentStrings(strDOSCall))
	End If
		
	CommandLine = WshShell.ExpandEnvironmentStrings(strDOSCall &amp;amp; Command &amp;amp; &amp;quot; &amp;gt;&amp;gt; &amp;quot;&amp;quot;&amp;quot; &amp;amp; OutputFileName &amp;amp; &amp;quot;&amp;quot;&amp;quot;&amp;quot;)
	WshShell.Run CommandLine, 0, True
End Function &amp;#039;RunCommand

Function FixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.
	
	Dim objFSO, strSystem32Location,objShell
	Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)
	
	If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
		If InStr(strFilePath,strSystem32Location) = 1 Then
			strRestOfPath = Replace(strFilePath,strSystem32Location,&amp;quot;&amp;quot;)
			strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
			strFilePath = strNewSystem32Location&amp;amp;strRestOfPath
		End If
	End If
	FixFileSystemRedirectionForPath = strFilePath
	
	&amp;#039;Cleanup
	Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039;&amp;#039; -- Begin Random Sleep Functions -- &amp;#039;&amp;#039;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &amp;#039; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&amp;#039; sleeps for a random period of time, intSleepTime is in seconds
&amp;#039; if the sensor randomize flag is on
&amp;#039; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&amp;#039; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;amp;&amp;quot;\Sensor Data\Random Sleep&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeFlag&amp;quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeScalingPercentage&amp;quot;)
	On Error Goto 0
	If intRandomizeFlag &amp;gt; 0 Then
		If intRandomizeScalingPercentage &amp;gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &amp;quot;Randomize scaling percentage of &amp;quot; _ 
				&amp;amp; intRandomizeScalingPercentage &amp;amp; &amp;quot; applied, new sleep time is &amp;quot; &amp;amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &amp;#039; convert to milliseconds
		&amp;#039; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&amp;#039; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &amp;quot;Sleeping for &amp;quot; &amp;amp; intSensorRandomizeWaitTime &amp;amp; &amp;quot; milliseconds&amp;quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &amp;quot;Done sleeping, continuing ...&amp;quot;
	Else 
		SensorRandomizeEcho &amp;quot;SensorRandomize Not Enabled - No Op&amp;quot;
	End If
End Function &amp;#039;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&amp;#039; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &amp;lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID / Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID / Timer
	End If
End Function &amp;#039;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&amp;#039;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&amp;#039;&amp;#039; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &amp;quot;ComputerID&amp;quot;
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strKeyPath&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strValueName)
    If Err.Number &amp;lt;&amp;gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &amp;#039;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &amp;lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &amp;#039;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &amp;#039;SensorRandomizeEcho
&amp;#039; -- End Random Sleep Functions --&amp;#039;
&amp;#039;- End file: utils/SensorRandomization/SensorRandomizationFunctions.vbs</script>
                    <script_type>VBScript</script_type>
                  </query>
                </queries>
                <source_id>381</source_id>
                <parameters>
                  <parameter>
                    <key>||casesensitive||</key>
                    <value>No</value>
                  </parameter>
                  <parameter>
                    <key>||dirname||</key>
                    <value>Program Files</value>
                  </parameter>
                  <parameter>
                    <key>||global||</key>
                    <value>No</value>
                  </parameter>
                  <parameter>
                    <key>||regexp||</key>
                    <value></value>
                  </parameter>
                  <parameter>
                    <key>||regex||</key>
                    <value>Microsoft.*</value>
                  </parameter>
                </parameters>
                <parameter_definition>{"parameters":[{"maxChars":0,"validationExpressions":[{"expression":"\\S{3}","helpString":"Value must be at least 3 characters","flags":"","model":"com.tanium.models::ValidationExpression","parameterType":"com.tanium.models::ValidationExpression"}],"label":"Search for Folder Name","key":"dirname","restrict":null,"value":"","helpString":"Enter the folder name to search for","promptText":"e.g Program Files","defaultValue":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"},{"maxChars":0,"validationExpressions":[{"expression":"\\S{3}","helpString":"Value must be at least 3 characters","flags":"","model":"com.tanium.models::ValidationExpression","parameterType":"com.tanium.models::ValidationExpression"}],"label":"Regular Expression","key":"regexp","restrict":null,"value":"","helpString":"Enter the regular expression to search for.","promptText":"e.g. test*.exe","defaultValue":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"},{"label":"Case sensitive?","key":"casesensitive","value":"","helpString":"Enter Yes/No for case sensitivity of search.","requireSelection":true,"promptText":"","defaultValue":"","values":["No","Yes"],"parameterType":"com.tanium.components.parameters::DropDownParameter","model":"com.tanium.components.parameters::DropDownParameter"},{"label":"Global","key":"global","value":"","helpString":"Enter Yes/No whether the search is global.","requireSelection":true,"promptText":"","defaultValue":"","values":["No","Yes"],"parameterType":"com.tanium.components.parameters::DropDownParameter","model":"com.tanium.components.parameters::DropDownParameter"}],"model":"com.tanium.components.parameters::ParametersArray","parameterType":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
                <value_type>String</value_type>
                <max_age_seconds>600</max_age_seconds>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
                <exclude_from_parse_flag>1</exclude_from_parse_flag>
                <delimiter>,</delimiter>
              </sensor>
              <filter>
                <operator>RegexMatch</operator>
                <value_type>String</value_type>
                <value>.*Shared.*</value>
                <not_flag>0</not_flag>
                <max_age_seconds>0</max_age_seconds>
                <ignore_case_flag>1</ignore_case_flag>
                <all_values_flag>0</all_values_flag>
                <substring_flag>0</substring_flag>
                <substring_start>0</substring_start>
                <substring_length>0</substring_length>
                <delimiter></delimiter>
                <delimiter_index>0</delimiter_index>
                <utf8_flag>0</utf8_flag>
                <aggregation></aggregation>
                <all_times_flag>0</all_times_flag>
                <start_time>2001-01-01T00:00:00</start_time>
                <end_time>2001-01-01T00:00:00</end_time>
              </filter>
            </select>
          </selects>
          <force_computer_id_flag>0</force_computer_id_flag>
          <group>
            <and_flag>1</and_flag>
            <not_flag>0</not_flag>
            <sub_groups>
              <group>
                <id>618</id>
                <type>0</type>
                <and_flag>1</and_flag>
                <not_flag>0</not_flag>
                <filters></filters>
                <sub_groups></sub_groups>
                <deleted_flag>0</deleted_flag>
              </group>
            </sub_groups>
          </group>
        </question>
      </result_object>
      <ResultXML></ResultXML>
      <options>
        <suppress_object_list>1</suppress_object_list>
      </options>
    </t:return>
  </soap:Body>
</soap:Envelope>