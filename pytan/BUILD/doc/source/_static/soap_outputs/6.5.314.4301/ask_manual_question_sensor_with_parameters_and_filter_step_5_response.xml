<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <soap:Body xmlns:t="urn:TaniumSOAP" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <t:return>
      <command>GetObject</command>
      <session>1-692-39cedd0ba8f7255c8d68bfb02b1ad433001a9587e6062777f412cf4ef1cc0aa3b69ebb408b0c0ea7eb8fc36887c8d98014bc40bc5ba2801054d4e878eeeb4ffe</session>
      <server_version>6.5.314.4301</server_version>
      <ID></ID>
      <IDType></IDType>
      <ContextID></ContextID>
      <result_object>
        <question>
          <id>803</id>
          <context_group>
            <id>0</id>
          </context_group>
          <expire_seconds>0</expire_seconds>
          <skip_lock_flag>0</skip_lock_flag>
          <expiration>2015-09-14T20:22:14</expiration>
          <user>
            <id>1</id>
            <name>Administrator</name>
          </user>
          <management_rights_group>
            <id>0</id>
          </management_rights_group>
          <saved_question>
            <id>0</id>
          </saved_question>
          <name></name>
          <query_text>Get Folder Contents[C:\Program Files] containing "Shared" from all machines</query_text>
          <hidden_flag>0</hidden_flag>
          <action_tracking_flag>0</action_tracking_flag>
          <selects>
            <select>
              <sensor>
                <id>4294967144</id>
                <name>Folder Contents[C:\Program Files]</name>
                <hash>3209993970</hash>
                <string_count>0</string_count>
                <category></category>
                <description></description>
                <queries>
                  <query>
                    <platform>Windows</platform>
                    <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                    <script_type>VBScript</script_type>
                  </query>
                </queries>
                <source_id>510</source_id>
                <parameters>
                  <parameter>
                    <key>||folderPath||</key>
                    <value>C:\Program Files</value>
                  </parameter>
                </parameters>
                <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
                <value_type>String</value_type>
                <max_age_seconds>600</max_age_seconds>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
                <exclude_from_parse_flag>1</exclude_from_parse_flag>
                <delimiter>,</delimiter>
              </sensor>
              <filter>
                <operator>RegexMatch</operator>
                <value_type>String</value_type>
                <value>.*Shared.*</value>
                <not_flag>0</not_flag>
                <max_age_seconds>0</max_age_seconds>
                <ignore_case_flag>1</ignore_case_flag>
                <all_values_flag>0</all_values_flag>
                <substring_flag>0</substring_flag>
                <substring_start>0</substring_start>
                <substring_length>0</substring_length>
                <delimiter></delimiter>
                <delimiter_index>0</delimiter_index>
                <utf8_flag>0</utf8_flag>
                <aggregation></aggregation>
                <all_times_flag>0</all_times_flag>
                <start_time>2001-01-01T00:00:00</start_time>
                <end_time>2001-01-01T00:00:00</end_time>
              </filter>
            </select>
          </selects>
          <force_computer_id_flag>0</force_computer_id_flag>
          <group>
            <and_flag>1</and_flag>
            <not_flag>0</not_flag>
            <sub_groups>
              <group>
                <id>331</id>
                <type>0</type>
                <and_flag>1</and_flag>
                <not_flag>0</not_flag>
                <filters></filters>
                <sub_groups></sub_groups>
                <deleted_flag>0</deleted_flag>
              </group>
            </sub_groups>
          </group>
        </question>
      </result_object>
      <ResultXML></ResultXML>
      <options>
        <suppress_object_list>1</suppress_object_list>
      </options>
    </t:return>
  </soap:Body>
</soap:Envelope>