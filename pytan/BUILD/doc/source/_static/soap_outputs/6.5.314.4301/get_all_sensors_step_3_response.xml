<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <soap:Body xmlns:t="urn:TaniumSOAP" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <t:return>
      <command>GetObject</command>
      <session>1-676-cef177056e8f3639ccbbb6d72bb2e93b1acdd137db66e4b7f5dfb0eb2561d169fbd97fdbffd5db90b376cb350a3b8ff17dfe96c8482cd6aced80def328febd4b</session>
      <server_version>6.5.314.4301</server_version>
      <ID></ID>
      <IDType></IDType>
      <ContextID></ContextID>
      <result_object>
        <sensors>
          <sensor>
            <id>1</id>
            <name>Action Statuses</name>
            <hash>1792443391</hash>
            <string_count>118</string_count>
            <category>Reserved</category>
            <description>The recorded state of each action a client has taken recently in the form of id:status.
Example: 1:Completed</description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Reserved</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>0</cache_row_id>
          </sensor>
          <sensor>
            <id>2</id>
            <name>Computer ID</name>
            <hash>3556221173</hash>
            <string_count>4</string_count>
            <category>Reserved</category>
            <description>A unique identifier of each computer for internal use.
Example: 4202979704</description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Reserved</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>300</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>1</cache_row_id>
          </sensor>
          <sensor>
            <id>3</id>
            <name>Computer Name</name>
            <hash>3409330187</hash>
            <string_count>5</string_count>
            <category>Reserved</category>
            <description>The assigned name of the client machine.
Example: workstation-1.company.com</description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select CSName from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>2</cache_row_id>
          </sensor>
          <sensor>
            <id>4</id>
            <name>Download Statuses</name>
            <hash>322086833</hash>
            <string_count>43</string_count>
            <category>Reserved</category>
            <description>The recorded state of each download a client has made recently in the form of hash:completion percentage.
Example: 05839407baccdfccfd8e2c1ffc0ff27541cc053d15b52cfd4ed904510e59b428:100</description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Reserved</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>3</cache_row_id>
          </sensor>
          <sensor>
            <id>8</id>
            <name>Tanium Client Version</name>
            <hash>435957060</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>Version number of the Tanium Client on the client machine.
Example: 4.1.314.7020</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client Version
&amp;#039;========================================

Option Explicit


Dim fso, filePath, objFile

Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

If GetTaniumDir(&amp;quot;&amp;quot;) = False Then 
	WScript.Echo &amp;quot;Not installed&amp;quot;
	WScript.Quit
End If 

filePath = GetTaniumDir(&amp;quot;&amp;quot;) &amp;amp; &amp;quot;taniumclient.exe&amp;quot;

If fso.FileExists(filePath) Then
	Set objFile = fso.GetFile(filePath)
	WScript.Echo fso.GetFileVersion(objFile)
Else
	WScript.Echo &amp;quot;Not installed&amp;quot;
End If

Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
		If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
			strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
		End If	
	
		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		If fso.FolderExists(strPath) Then
			If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
				&amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
				GeneratePath strPath &amp;amp; strSubDir, fso
			End If
			GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
		Else
			&amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
			WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
			GetTaniumDir = False
		End If
	Else
		WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
		GetTaniumDir = False
	End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
	GeneratePath = False

	If Not fso.FolderExists(pFolderPath) Then
		If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
			GeneratePath = True
			Call fso.CreateFolder(pFolderPath)
		End If
	Else
		GeneratePath = True
	End If
End Function &amp;#039;GeneratePath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

if ver=`grep -i &amp;quot;^version=&amp;quot; *Client.ini`
then
        echo &amp;quot;$ver&amp;quot; | awk -F= &amp;#039;{print $2}&amp;#039;
else
        echo &amp;quot;Version not specified in ini file&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

if ver=`grep -i &amp;quot;^version=&amp;quot; *Client.ini`
then
        echo &amp;quot;$ver&amp;quot; | awk -F= &amp;#039;{print $2}&amp;#039;
else
        echo &amp;quot;Version not specified in ini file&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

if ver=`grep -i &amp;quot;^version=&amp;quot; *Client.ini`
then
        echo &amp;quot;$ver&amp;quot; | awk -F= &amp;#039;{print $2}&amp;#039;
else
        echo &amp;quot;Version not specified in ini file&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

if ver=`grep -i &amp;quot;^version=&amp;quot; *Client.ini`
then
        echo &amp;quot;$ver&amp;quot; | awk -F= &amp;#039;{print $2}&amp;#039;
else
        echo &amp;quot;Version not specified in ini file&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>5</cache_row_id>
          </sensor>
          <sensor>
            <id>10</id>
            <name>Tanium Client Core Health</name>
            <hash>824239263</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Determines whether the Tanium Client is able to execute the default content set successfully.  Returns any error conditions.
Example: Error: Windows Script Host version must be at least 5.6</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client Core Health
&amp;#039;========================================

Option Explicit

On Error Resume Next

&amp;#039; Hold whether to report a final error state
Dim bGlobalError : bGlobalError = False

&amp;#039; Global objects the functions may as well use
Dim objFSO,objReg

Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)

&amp;#039; First try the very basic access (FSO and registry access)

If Not TestFSO Then
	WScript.Echo &amp;quot;Error: Cannot properly access filesystem&amp;quot;
	WScript.Quit
End If

If Not TestRegistry Then
	WScript.Echo &amp;quot;Error: Cannot properly access registry via WMI&amp;quot;
	WScript.Quit
End If


TestWSHVersionTooLow bGlobalError
TestWMI bGlobalError

If bGlobalError Then
	&amp;#039; Do not report &amp;quot;Yes&amp;quot;
Else
	WScript.Echo &amp;quot;Healthy&amp;quot;
End If

Function TestWMI(ByRef bGlobalError)
&amp;#039; Tests basic WMI
	Dim locale,objWMIService,colItems,objItem
	locale = &amp;quot;&amp;quot;
	On Error Resume Next
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_OperatingSystem&amp;quot;,,48)

	For Each objItem in colItems
		locale = objItem.Locale
	Next
	On Error Goto 0
	If MyIsNumeric(locale) Then
		&amp;#039; None
	Else
		WScript.Echo &amp;quot;Error: WMI cannot retrieve a basic property&amp;quot;
		bGlobalError = True
	End If
End Function &amp;#039;TestWMI

Function TestWSHVersionTooLow(ByRef bGlobalError)
&amp;#039; this function ensures wsh version 5.6
	Dim WSHVersion
	WSHVersion = &amp;quot;&amp;quot;
	WSHVersion = WScript.Version
	If Not MyIsNumeric(WSHVersion) Then
		WScript.Echo &amp;quot;Error: Unknown Windows Script Host version&amp;quot;
		bGlobalError = True
	Else
		WSHVersion = CDbl(WSHVersion)
		If WSHVersion &amp;lt; 5.6 Then
			WScript.Echo &amp;quot;Error: Windows Script Host version must be at least 5.6&amp;quot;
			bGlobalError = True
		End If
	End If
End Function &amp;#039;TestWSHVersionTooLow

Function TestRegistry
&amp;#039; this function will return true if a registry access test via WMI succeeds

	Const HKLM = &amp;amp;h80000002
	
	Dim aValueNames, aValueTypes
	On Error Resume Next
	If objReg.EnumValues(HKLM, &amp;quot;SYSTEM&amp;quot;, aValueNames, aValueTypes) = 0 Then
		TestRegistry = True
	Else
		TestRegistry = False
	End If
	On Error Goto 0

End Function &amp;#039;TestRegistry

Function TestFSO
&amp;#039; this function will return true if an FSO call succeeds

	Dim strWinDir
	&amp;#039;Every machine has a windir
	On Error Resume Next
	strWinDir = objFSO.GetSpecialFolder(0)
	
	If Not objFSO.FolderExists(strWinDir) Then
		TestFSO = False
	Else
		TestFSO = True
	End If
	On Error Goto 0

End Function &amp;#039;TestFSO

Function MyIsNumeric(strTemp)
	Dim i,d
	If IsNull(strTemp) Then
		MyIsNumeric = False
		Exit Function
	End If
	If strTemp = &amp;quot;&amp;quot; Then
		MyIsNumeric = False
		Exit Function
	End If
	
    MyIsNumeric = True
    For i = 1 to Len(strTemp) 
        d = Mid(strTemp, i, 1) 
        If Asc(d) &amp;lt; 48 OR Asc(d) &amp;gt; 57 Then 
            isReallyNumeric = False 
            Exit For 
        End If 
    Next 
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

echo Healthy</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

echo Healthy</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>6</cache_row_id>
          </sensor>
          <sensor>
            <id>12</id>
            <name>Online</name>
            <hash>131549066</hash>
            <string_count>2</string_count>
            <category>Miscellaneous</category>
            <description>Returns, in all cases, the word True.  This sensor is used in many ways, including to find a common target for machines which may have responded to a question with a 'where' clause - get "online from machines where IP address starts with 192.168.10." will allow you to target the respondents with an action or count responses.
Example:True</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Online
&amp;#039;========================================

Wscript.echo &amp;quot;True&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

echo &amp;quot;True&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

echo &amp;quot;True&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
echo &amp;quot;True&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>7</cache_row_id>
          </sensor>
          <sensor>
            <id>14</id>
            <name>Operating System</name>
            <hash>45421433</hash>
            <string_count>4</string_count>
            <category>Operating System</category>
            <description>Returns the name of the Operating System from all machines.  This name may be localized.
Example: Windows Server 2008 R2 Enterprise</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Operating System
&amp;#039;========================================

Set oWsh = WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)    
Set oWshSysEnv = oWsh.Environment(&amp;quot;PROCESS&amp;quot;)    
Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)    
Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;select Caption from win32_operatingsystem&amp;quot;)    
For Each objItem In colItems       
strStrip1 = Right(ObjItem.Caption, (Len(objItem.Caption) - Instr(objItem.Caption, &amp;quot; &amp;quot;)))   
&amp;#039;strStrip2 = Right(strStrip1, (Len(strStrip1) - Instr(strStrip1, &amp;quot; &amp;quot;)))   
if Instr(strStrip1,&amp;quot;Server&amp;quot; &amp;amp; Unescape(&amp;quot;%AE&amp;quot;)) &amp;lt;&amp;gt; 0 THEN   
strOS = Replace(strStrip1,&amp;quot;Server&amp;quot; &amp;amp; Unescape(&amp;quot;%AE&amp;quot;),&amp;quot;Server&amp;quot;)   
Else   
strOS = strStrip1
End IF   
wscript.echo Trim(strOS)
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
# Detects which OS and if it is Linux then it will detect which Linux
# Distribution.

OS=`uname -s`

GetVersionFromFile()
{
    VERSION=`cat $1 | tr &amp;quot;\n&amp;quot; &amp;#039; &amp;#039; | sed s/.*VERSION.*=\ // `
}

if [ &amp;quot;${OS}&amp;quot; = &amp;quot;Darwin&amp;quot; ] ; then
    # Opps, ran on Mac instead of Linux
    OS=Mac
    OSSTR=&amp;quot;${OS} incorrect script&amp;quot;
elif [ &amp;quot;${OS}&amp;quot; = &amp;quot;Linux&amp;quot; ] ; then
    KERNEL=`uname -r`
    if [ -f /etc/redhat-release ] ; then
        DIST=&amp;#039;RedHat&amp;#039;
        PSUEDONAME=`cat /etc/redhat-release`
        REV=`cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//`
        # just cat of redhat-release, to keep compatibility with old version
        # of sensor, but could do something different here
        OSSTR=&amp;quot;${PSUEDONAME}&amp;quot;
    elif [ -f /etc/SuSE-release ] ; then
        DIST=`cat /etc/SuSE-release | tr &amp;quot;\n&amp;quot; &amp;#039; &amp;#039;| sed s/VERSION.*//`
        REV=`cat /etc/SuSE-release | tr &amp;quot;\n&amp;quot; &amp;#039; &amp;#039; | sed s/.*=\ //`
        OSSTR=&amp;quot;${DIST}&amp;quot;
    elif [ -f /etc/lsb-release ] ; then
        # Ubuntu will use the lsb-release, but Debian should be caught by the next
        # if -- note that Ubuntu also has a /etc/debian_version
        # some other less popular distros may be caught by this too
        DIST=`awk -F= &amp;#039;/^DISTRIB_DESCRIPTION/ {print $2}&amp;#039; /etc/lsb-release| tr -d &amp;#039;&amp;quot;&amp;#039;`
        OSSTR=&amp;quot;${DIST}&amp;quot;
    elif [ -f /etc/debian_version ] ; then
        DIST=&amp;quot;Debian `cat /etc/debian_version`&amp;quot;
        OSSTR=&amp;quot;${DIST}&amp;quot;
    else 
        # Fall through, some Linux distributions we don&amp;#039;t know or that does not 
        # use lsb style names
        REV=`uname -r`
        OSSTR=&amp;quot;Linux $REV&amp;quot;
    fi
else
   # in case this is run on something else -- like Solaris or BSD ir AIX or HP-UX
   OSSTR=&amp;quot;${OS}&amp;quot;
fi

echo ${OSSTR}</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
name=$(sw_vers | awk -F&amp;#039;:\t&amp;#039; &amp;#039; /ProductName/ { print $2 }&amp;#039;)
version=$(sw_vers | awk -F&amp;#039;:\t&amp;#039; &amp;#039; /ProductVersion/ { print $2 }&amp;#039;)
echo $name \($version\)</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
# get OS release
OS=$(uname)
REL=$(uname -r)
echo &amp;quot;$OS $REL&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
OS=$(uname)
VER=$(oslevel)
echo &amp;quot;$OS $VER&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>8</cache_row_id>
          </sensor>
          <sensor>
            <id>16</id>
            <name>Tanium Client Logging Level</name>
            <hash>4086596771</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Logging level setting between 1 and 100 of the Tanium Client on the client machine.
Example: 41</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client Logging Level
&amp;#039;========================================

Option Explicit

WScript.Echo GetLogLevel


&amp;#039;----------End Main Line-----------&amp;#039;

Function GetLogLevel()
&amp;#039; This function sets maintenance window values passed to it

	Const HKLM = &amp;amp;h80000002
	
	Dim strTaniumRegistryKey, strComputer, intLogLevel
	Dim objReg, bLogLevelResult
	
	&amp;#039; Set up access to registry via WMI
	strComputer = &amp;quot;.&amp;quot;
	
	Set objReg = _
		GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; _ 
		&amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

	strTaniumRegistryKey = GetTaniumRegistryPath()

	objReg.GetDWORDValue HKLM, strTaniumRegistryKey, &amp;quot;LogVerbosityLevel&amp;quot;, intLogLevel
	
	If Not IsNull(intLogLevel) Then
		GetLogLevel = intLogLevel
	Else
		GetLogLevel = &amp;quot;Not Set&amp;quot;
	End If

	&amp;#039; Cleanup
	Set objReg = Nothing
End Function &amp;#039;GetLogLevel

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
logLevel=$(grep -w &amp;quot;^LogVerbosityLevel&amp;quot; TaniumClient.ini | cut -d= -f2)

if [ &amp;quot;&amp;quot; = &amp;quot;$logLevel&amp;quot; ]
then
	echo Not set
else
	echo $logLevel
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
logLevel=$(grep -w &amp;quot;^LogVerbosityLevel&amp;quot; TaniumClient.ini | cut -d= -f2)

if [ &amp;quot;&amp;quot; = &amp;quot;$logLeve&amp;quot; ]
then
	echo Not set
else
	echo $logLevel
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>NumericInteger</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>9</cache_row_id>
          </sensor>
          <sensor>
            <id>18</id>
            <name>Action Lock Status</name>
            <hash>2671758800</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>Returns whether the client is in a 'locked' state. Use the package "Tanium Client Action Unlock" to unlock the Client and allow actions.
Example: Action Lock On</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Action Lock Status
&amp;#039;========================================

Option Explicit

If ActionLockOn Then
	WScript.Echo &amp;quot;Action Lock On&amp;quot;
Else
	WScript.Echo &amp;quot;Action Lock Off&amp;quot;
End If

Function ActionLockOn
&amp;#039; returns true or false
	Dim objShell,strRegistryPath,intLockStatus
	
	strRegistryPath = GetTaniumRegistryPath
	
	Set objShell = WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLockStatus = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRegistryPath&amp;amp;&amp;quot;\ActionLockFlag&amp;quot;)
	
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLockStatus = 0
	End If
	On Error Goto 0
	
	If intLockStatus = 1 Then
		ActionLockOn = True
	Else
		ActionLockOn = False
	End If

End Function &amp;#039;ActionLockOn

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		GetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		GetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;GetTaniumRegistryPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>120</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>10</cache_row_id>
          </sensor>
          <sensor>
            <id>20</id>
            <name>Tanium PowerShell Execution Policy</name>
            <hash>1805210070</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>Retrieves the PowerShell Execution Policy as the Tanium Client sees it</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium PowerShell Execution Policy
&amp;#039;========================================

&amp;#039; this sensor will retrieve the PowerShell Execution Policy
&amp;#039; of the 32-bit environment

Option Explicit

Dim objShell : Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Dim objShellExec
Dim objFSO : Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

Dim strPSPath,strLine
strPSPath = objFSO.GetSpecialFolder(1)&amp;amp;&amp;quot;\WindowsPowerShell\v1.0\powershell.exe&amp;quot;
If objFSO.FileExists(strPSPath) Then
	Set objShellExec = objShell.Exec(Chr(34)&amp;amp;strPSPath&amp;amp;Chr(34)&amp;amp;&amp;quot; -Command Get-ExecutionPolicy;Exit&amp;quot;)
	Do Until objShellExec.StdOut.AtEndOfStream
		strLine = objShellExec.StdOut.ReadLine
		If Not strLine = &amp;quot;&amp;quot; Then
			WScript.Echo strLine
			Exit Do
		End If
	Loop
Else
	WScript.Echo &amp;quot;Cannot locate PowerShell executable&amp;quot;
End If</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>11</cache_row_id>
          </sensor>
          <sensor>
            <id>22</id>
            <name>Tanium Server Version</name>
            <hash>711837192</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>Version number of  Tanium Server installed. 
Example: 6.2.314.3218</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Server Version
&amp;#039;========================================

Option Explicit


Dim fso, filePath, objFile

Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

If GetTaniumDir(&amp;quot;&amp;quot;) = False Then 
	WScript.Echo &amp;quot;Not installed&amp;quot;
	WScript.Quit
End If 

filePath = GetTaniumDir(&amp;quot;&amp;quot;) &amp;amp; &amp;quot;TaniumReceiver.exe&amp;quot;

If fso.FileExists(filePath) Then
	Set objFile = fso.GetFile(filePath)
	WScript.Echo fso.GetFileVersion(objFile)
Else
	WScript.Echo &amp;quot;Not installed&amp;quot;
End If

Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Server&amp;quot;
	keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Server&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
		If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
			strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
		End If	
	
		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		If fso.FolderExists(strPath) Then
			If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
				&amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
				GeneratePath strPath &amp;amp; strSubDir, fso
			End If
			GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
		Else
			&amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
			WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
			GetTaniumDir = False
		End If
	Else
		GetTaniumDir = False
	End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
	GeneratePath = False

	If Not fso.FolderExists(pFolderPath) Then
		If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
			GeneratePath = True
			Call fso.CreateFolder(pFolderPath)
		End If
	Else
		GeneratePath = True
	End If
End Function &amp;#039;GeneratePath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>12</cache_row_id>
          </sensor>
          <sensor>
            <id>24</id>
            <name>Tanium Zone Server Version</name>
            <hash>333178608</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>Version number of  Tanium Zone Server installed. 
Example: 6.2.314.3218</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Zone Server Version
&amp;#039;========================================

Option Explicit

Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002

Const keyNativePath = &amp;quot;Software\Tanium\Tanium ZoneServer&amp;quot;
Const keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium ZoneServer&amp;quot;

Dim fso, dirPath, filePath, objFile, objReg

&amp;#039; Zone Server has to be treated differently than client and server
&amp;#039; The latest Zone Server will write the 
Set objReg = Getx64RegistryProvider()

Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

Set objReg = Getx64RegistryProvider()

dirPath = Null

If RegKeyExists(objReg, HKEY_LOCAL_MACHINE, keyNativePath) Then 
	objReg.GetStringValue HKEY_LOCAL_MACHINE, keyNativePath, &amp;quot;Path&amp;quot;, dirPath
End If

If IsNull(dirPath) Then 
	If RegKeyExists(objReg, HKEY_LOCAL_MACHINE, keyWowPath) Then 
		objReg.GetStringValue HKEY_LOCAL_MACHINE, keyWowPath, &amp;quot;Path&amp;quot;, dirPath
	End If
End If

filePath = dirPath &amp;amp; &amp;quot;\TaniumZoneServer.exe&amp;quot;

If fso.FileExists(filePath) Then
	Set objFile = fso.GetFile(filePath)
	WScript.Echo fso.GetFileVersion(objFile)
Else
	WScript.Echo &amp;quot;Not installed&amp;quot;
End If

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>13</cache_row_id>
          </sensor>
          <sensor>
            <id>26</id>
            <name>Tanium Client Explicit Setting</name>
            <hash>3760050184</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>Returns the value of a supplied Tanium Client Setting fom the Tanium Clients registry key.  Supply only the client setting name, for instance: ServerName and the output will appear as follows:
Example: berkeley.tanium.com</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Registry Value Data
&amp;#039;========================================

&amp;#039;Columns:
&amp;#039; User | Data | Type | Architecture | KeyPath | Value

&amp;#039; Value is a hidden column for later use in sensor-fed actions (modify, delete)

strKey = &amp;quot;HKLM\&amp;quot;&amp;amp;GetTaniumRegistryPath()
strValue = unescape(&amp;quot;||setting||&amp;quot;)

&amp;#039;strKey = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
&amp;#039;strValue = &amp;quot;Version&amp;quot;

&amp;#039;strKey = &amp;quot;HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Internet Settings&amp;quot;
&amp;#039;strValue = &amp;quot;Emailname&amp;quot;
strSep = &amp;quot;~~&amp;quot;


&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive

&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)

If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
	For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserName = GetUserForSIDLocal(objReg,strUserKey)
			If strUserName = False Then strUserName = strUserKey
			strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
			hasValues32 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 32)
			If hasValues32 Then hasAnyResult = True
		End If
	Next
Else &amp;#039; was another hive
	hasValues32 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 32)
	If hasValues32 Then hasAnyResult = True
End If


If Is64 Then
	Set objCtx = GetObjCtx(64)
	Set objReg = GetObjReg(objCtx)
	If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
	&amp;#039; go through each User&amp;#039;s hive in 64-bit context
		For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
				strUserName = GetUserForSIDLocal(objReg,strUserKey)
				If strUserName = False Then strUserName = strUserKey
				strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
				hasValues64 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 64)
				If hasValues64 Then hasAnyResult = True	
			End If
		Next
	Else &amp;#039; was another hive
		hasValues64 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 64)
		If hasValues64 Then hasAnyResult = True
	End If
End If

If Not (hasAnyResult) Then
	WScript.Echo &amp;quot;Key/Value not found&amp;quot;
End If

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists

&amp;#039;Goes through all values in a key, returns True if strValue is found
Function CheckValues(objReg, objCtx, constHive, strKey, strValue, intBit)

	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
	
	arrNames = Outparams.sNames
	arrTypes = Outparams.Types

	If Not IsNull(arrNames) Then
		For i = LBound(arrNames) To UBound(arrNames)
			strValueName = arrNames(i)
			
			&amp;#039;if strValue is found, echo
			If LCase(strValueName) = LCase(strValue) Then
				EchoValue objReg, objCtx, constHive, strKey, strValue, arrTypes(i), intBit
				CheckValues = True
				Exit Function
			End If
		Next
	End If
	CheckValues = False
End Function

Function GetDisplayString(strKey, strType, strValue, intBit)
	If intBit = 64 Then
		strArch = &amp;quot;64-bit&amp;quot;
	Else
		strArch = &amp;quot;32-bit&amp;quot;
	End If
			
	GetDisplayString = strValue
End Function

Function EchoValue(objReg, objCtx, constHive, strKey, strValue, constType, intBit)
	&amp;#039; Note the key that was being searched, will be a hidden column
	strOutputKey = strHive&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
	
	Dim objInParams, objOutParams
	Select Case constType
		Case REG_SZ  
			Set objInParams = objReg.Methods_(&amp;quot;GetStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetStringValue&amp;quot;, objInParams, , objCtx)
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_SZ&amp;quot;, objOutParams.sValue, intBit)
		Case REG_EXPAND_SZ
			Set objInParams = objReg.Methods_(&amp;quot;GetExpandedStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetExpandedStringValue&amp;quot;, objInParams, , objCtx)
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_EXPAND_SZ&amp;quot;, objOutParams.sValue, intBit)
		Case REG_BINARY
			Set objInParams = objReg.Methods_(&amp;quot;GetBinaryValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetBinaryValue&amp;quot;, objInParams, , objCtx)

			strBytes = &amp;quot;&amp;quot;
			For Each uByte in objOutParams.uValue
				strTemp = Hex(uByte)
				If Len(strTemp) &amp;lt; 2 Then
					strTemp = &amp;quot;0&amp;quot; &amp;amp; strTemp
				End If	
				strBytes = strBytes &amp;amp; strTemp &amp;amp; &amp;quot; &amp;quot;
			Next
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_BINARY&amp;quot;, strBytes, intBit)
		Case REG_DWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetDWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetDWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_DWORD&amp;quot;, CStr(objOutParams.uValue), intBit)
		Case REG_QWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetQWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetQWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_QWORD&amp;quot;, CStr(objOutParams.uValue), intBit)
		Case REG_MULTI_SZ
		    Set objInParams = objReg.Methods_(&amp;quot;GetMultiStringValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetMultiStringValue&amp;quot;, objInParams, , objCtx)
		
			arrValues = objOutParams.sValue
			strResponse = &amp;quot;&amp;quot;

			For Each strTemp In arrValues
				If strResponse = &amp;quot;&amp;quot; Then
					strResponse = strTemp
				Else
					strResponse = strResponse &amp;amp; vbCrLf &amp;amp; strTemp
				End If
			Next
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_MULTI_SZ&amp;quot;, strResponse, intBit)
	End Select
End Function


Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	GetSubKeys = Outparams.sNames
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function


Function GetHiveConst(hive)
	Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
	Const HKEY_CURRENT_USER   = &amp;amp;H80000001
	Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
	Const HKEY_USERS          = &amp;amp;H80000003

	Select Case UCase(hive)
		Case &amp;quot;HKLM&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKCR&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
			GetHiveConst = HKEY_CURRENT_USER
		Case &amp;quot;HKEY_USERS&amp;quot;
			GetHiveConst = HKEY_USERS
	End Select
	
	If IsEmpty(GetHiveConst) Then
		WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
		WScript.Quit
	End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
			strUserData = Left(strUserData,intDatPos - 1)
			&amp;#039; find last backslash
			intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
			&amp;#039; get right from that pos
			strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
			GetUserForSIDLocal = strUserData
		Else
			strUserData = False
		End If
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||setting||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||setting||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||setting||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||setting||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Client Setting Name","helpString":"The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)","defaultValue":"","promptText":"Enter the Client Setting Name","maxChars":64,"key":"setting","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>14</cache_row_id>
          </sensor>
          <sensor>
            <id>28</id>
            <name>Is Virtual</name>
            <hash>1022769818</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns Yes or No to indicate whether the hardware is virtual.
Echo: Yes</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Is Virtual
&amp;#039;========================================

&amp;#039; This sensor will determine if a machine is a virtual machine or not
&amp;#039; Comparing values for certain properties against known values.
&amp;#039; It will need to be updated for some current tech and 
&amp;#039; as new technologies come to market.


Option Explicit

If IsVM Then 
    WScript.Echo &amp;quot;Yes&amp;quot;
Else
    WScript.Echo &amp;quot;No&amp;quot;
End If


Function IsVM
	Dim sVMPlatform, sMake, sModel, sBIOSVersion,bIsVM

    &amp;#039; Check the WMI information against known values

    bIsVM = false
    sVMPlatform = &amp;quot;&amp;quot;

    sMake = GetWmiPropertyValue(&amp;quot;root\cimv2&amp;quot;, &amp;quot;Win32_ComputerSystem&amp;quot;, &amp;quot;Manufacturer&amp;quot;)
    sModel = GetWmiPropertyValue(&amp;quot;root\cimv2&amp;quot;, &amp;quot;Win32_ComputerSystem&amp;quot;, &amp;quot;Model&amp;quot;)
    sBIOSVersion = GetWmiPropertyValue(&amp;quot;root\cimv2&amp;quot;, &amp;quot;Win32_BIOS&amp;quot;, &amp;quot;Version&amp;quot;)

    &amp;#039;WScript.Echo &amp;quot;Manufacturer=&amp;quot; &amp;amp; sMake
    &amp;#039;WScript.Echo &amp;quot;Model=&amp;quot; &amp;amp; sModel
    &amp;#039;WScript.Echo &amp;quot;BIOSVersion=&amp;quot; &amp;amp; sBIOSVersion

    If sModel = &amp;quot;Virtual Machine&amp;quot; Then

        &amp;#039; Microsoft virtualization technology detected, assign defaults

        sVMPlatform = &amp;quot;Hyper-V&amp;quot;
        bIsVM = true

        &amp;#039; Try to determine more specific values

        Select Case sBIOSVersion
        Case &amp;quot;VRTUAL - 1000831&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;Hyper-V 2008 Beta or RC0&amp;quot;
        Case &amp;quot;VRTUAL - 5000805&amp;quot;, &amp;quot;BIOS Date: 05/05/08 20:35:56  Ver: 08.00.02&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;Hyper-V 2008 RTM&amp;quot;
        Case &amp;quot;VRTUAL - 3000919&amp;quot; 
            bIsVM = true
            sVMPlatform = &amp;quot;Hyper-V 2008 R2&amp;quot;
        Case &amp;quot;A M I  - 2000622&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;VS2005R2SP1 or VPC2007&amp;quot;
        Case &amp;quot;A M I  - 9000520&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;VS2005R2&amp;quot;
        Case &amp;quot;A M I  - 9000816&amp;quot;, &amp;quot;A M I  - 6000901&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;Windows Virtual PC&amp;quot;
        Case &amp;quot;A M I  - 8000314&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;VS2005 or VPC2004&amp;quot;
        Case &amp;quot;Xen - 0s&amp;quot;
        	bIsVM = True
        	sVMPlatform = &amp;quot;Xen&amp;quot;
        Case &amp;quot;Xen - 0&amp;quot;
        	bIsVM = True
        	sVMPlatform = &amp;quot;Xen&amp;quot;
        End Select

    ElseIf sMake = &amp;quot;Xen&amp;quot; Then
    
        &amp;#039; Xen detected

        sVMPlatform = &amp;quot;Xen&amp;quot;
        bIsVM = true
    
    ElseIf sModel = &amp;quot;VMware Virtual Platform&amp;quot; then

        &amp;#039; VMware detected

        sVMPlatform = &amp;quot;VMware&amp;quot;
        bIsVM = true

    ElseIf sModel  = &amp;quot;VirtualBox&amp;quot; then

        &amp;#039; VirtualBox detected

        bIsVM = true
        sVMPlatform = &amp;quot;VirtualBox&amp;quot;
    
    ElseIf sModel  = &amp;quot;HVM domU&amp;quot; then

        &amp;#039; Xen detected

        bIsVM = true
        sVMPlatform = &amp;quot;Xen&amp;quot;
        
    ElseIf sModel = &amp;quot;OpenStack Compute&amp;quot; Then
    
    	&amp;#039; OpenStack detected
    	
    	bIsVM = true
    	sVMPlatform = &amp;quot;OpenStack&amp;quot;
     
    Else
        &amp;#039; This computer does not appear to be a virtual machine.
    End if

    &amp;#039; Set the return value

    If bIsVM Then
    	&amp;#039; Let&amp;#039;s not actually do anything here 
        &amp;#039;WScript.Echo &amp;quot;IsVirtualMachine=True&amp;quot;
        &amp;#039;WScript.Echo &amp;quot;VirtualMachinePlatform=&amp;quot; &amp;amp; sVMPlatform
    Else
        &amp;#039;WScript.Echo &amp;quot;IsVirtualMachine=False&amp;quot;
    End If

    IsVM = bIsVM

End Function

Function GetWmiPropertyValue(strNameSpace, strClassName, strPropertyName)
	Dim strPropertyValue, oWMIClass, oWMIProperties, objWMIService, colItems
	Dim objItem, objProperty
	Dim sLine
	
    On Error Resume Next

    strPropertyValue = &amp;quot;&amp;quot;
    set oWmiClass = getobject(&amp;quot;winmgmts:&amp;quot; &amp;amp; strNameSpace).get(strClassName,&amp;amp;h20000) &amp;#039;amended
    set oWmiProperties = oWmiClass.Properties_

    Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; &amp;quot;.&amp;quot; &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strNameSpace)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from &amp;quot; &amp;amp; strClassName,,48)

    For Each objItem in colItems
        For Each objProperty in oWmiProperties
            sLine = &amp;quot;&amp;quot;
            &amp;#039;WScript.Echo &amp;quot;- &amp;quot; &amp;amp; objProperty.name &amp;amp; &amp;quot;: &amp;quot; &amp;amp; strPropertyName

            If objProperty.Name = strPropertyName Then
                If objProperty.IsArray = True Then
                    sLine = &amp;quot;str&amp;quot; &amp;amp; objProperty.Name &amp;amp; &amp;quot; = Join(objItem.&amp;quot; &amp;amp; objProperty.Name &amp;amp; &amp;quot;, &amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;,&amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;)&amp;quot; &amp;amp; vbCrLf
                    sLine = sLine &amp;amp; &amp;quot;strPropertyValue =  str&amp;quot; &amp;amp; objProperty.Name
                &amp;#039;ElseIf objProperty.CIMTYPE = 101 Then
                &amp;#039;    bHasDates = True
                &amp;#039;    sLine =  &amp;quot;strPropertyValue =  WMIDateStringToDate(objItem.&amp;quot; &amp;amp; objProperty.Name &amp;amp; &amp;quot;)&amp;quot;
                Else
                    sLine =  &amp;quot;strPropertyValue =  objItem.&amp;quot; &amp;amp; objProperty.Name
                End If

                &amp;#039;WScript.Echo sLine
                Execute sLine
            End If

        Next
    Next

    GetWmiPropertyValue = strPropertyValue
    
    &amp;#039;Cleanup!
    set oWmiClass = Nothing
    set oWmiProperties = Nothing

    Set objWMIService = Nothing
    Set colItems = Nothing

End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

if out=$(ifconfig | egrep -i ether | awk &amp;#039;{print $2}&amp;#039; | egrep -qi &amp;#039;^00:0c:29:&amp;#039;)
then
	echo Yes
else
	echo No
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
which zonename &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
if [ $? -eq 0 ]; then
  me=$(zonename)
  if [ &amp;quot;$me&amp;quot; = &amp;quot;global&amp;quot; -o &amp;quot;$me&amp;quot; = &amp;quot;&amp;quot; ]; then
    echo &amp;quot;no&amp;quot;
  else
    echo &amp;quot;yes&amp;quot;
  fi
else
  echo &amp;quot;no&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Determine if server is physical or virtual
# This may not be a full proof way and may need to be adjusted
# We look at the disks and if find virtual we assume so
lsdev -Cc disk | grep -cq Virtual
if [ $? -eq 0 ]; then
  echo &amp;quot;Yes&amp;quot;
else
  echo &amp;quot;No&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>15</cache_row_id>
          </sensor>
          <sensor>
            <id>30</id>
            <name>Is Windows</name>
            <hash>2721439124</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns whether the machine runs Windows.  True if so, False if not.
Example: True</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Is Windows
&amp;#039;========================================

Wscript.echo &amp;quot;True&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>16</cache_row_id>
          </sensor>
          <sensor>
            <id>32</id>
            <name>IP Address</name>
            <hash>3209138996</hash>
            <string_count>6</string_count>
            <category>Network</category>
            <description>Current IP Addresses of client machine.
Example: 192.168.1.1</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select IPAddress from win32_networkadapterconfiguration where IPEnabled=&amp;#039;True&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
ifconfig | grep -w inet | grep -v 127.0.0.1 | awk &amp;#039;{print $2}&amp;#039; | sed -e &amp;#039;s/addr://&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

ifconfig -a -u |grep &amp;quot;inet&amp;quot; | grep -v &amp;quot;::1&amp;quot; | grep -v &amp;quot;127.0.0.1&amp;quot;| awk &amp;#039;{print $2}&amp;#039; | cut -f1 -d&amp;#039;%&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
ifconfig -a | grep -v 127.0.0.1 | grep inet | awk &amp;#039;{ print $2 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
ifconfig -a | grep -w inet | grep -v 127.0.0.1 | awk &amp;#039;{print $2}&amp;#039; | sed -e &amp;#039;s/addr://&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>IPAddress</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>17</cache_row_id>
          </sensor>
          <sensor>
            <id>34</id>
            <name>MAC Address</name>
            <hash>1208633896</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns MAC addresses for all IP enabled network connections.
Example:00:0C:29:68:6A:D8</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select MACAddress from win32_networkadapterconfiguration where IPEnabled=&amp;#039;True&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
ifconfig | grep -i -o -e hwaddr.*:.. -e ether.*:.. | grep -o ..:..:..:..:..:.. | while read line
do
	echo ${line}
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>networksetup -listallhardwareports | egrep -A 2 &amp;quot;(: Ethernet|: AirPort|: Wi-Fi)&amp;quot; | grep &amp;quot;Ethernet Address&amp;quot; | cut -f 3- -d &amp;#039; &amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
ifconfig -a | grep ether| awk &amp;#039;{ print $2 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>18</cache_row_id>
          </sensor>
          <sensor>
            <id>36</id>
            <name>DHCP Enabled?</name>
            <hash>1154425412</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Whether or not a machine has an network adapter set to DHCP.  Note, a machine may have multiple active adapters and may return multiple lines.  If a machine has multiple adapters on DCHP, TRUE is returned only once.
Example: TRUE, FALSE</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select DHCPEnabled from win32_networkadapterconfiguration where IPEnabled=&amp;#039;True&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>19</cache_row_id>
          </sensor>
          <sensor>
            <id>38</id>
            <name>Firewall Status</name>
            <hash>889071797</hash>
            <string_count>8</string_count>
            <category>Network</category>
            <description>Returns the current status of the Windows firewalls.
Example: DomainProfile enabled</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Firewall Status
&amp;#039;========================================

On Error Resume Next

const HKLM = &amp;amp;H80000002
const strKeyPath = &amp;quot;SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\&amp;quot;
const strValueName = &amp;quot;EnableFirewall&amp;quot;
strComputer = &amp;quot;.&amp;quot;

Set oReg=GetObject( _
   &amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp;_
   strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

WScript.Echo GetFirewallStatus(strKeyPath, &amp;quot;DomainProfile&amp;quot;, strValueName)
WScript.Echo GetFirewallStatus(strKeyPath, &amp;quot;PublicProfile&amp;quot;, strValueName)
WScript.Echo GetFirewallStatus(strKeyPath, &amp;quot;StandardProfile&amp;quot;, strValueName)

Function GetFirewallStatus(path, policy, valName)
   oReg.GetDWORDValue HKLM,path &amp;amp; policy, valName, dwValue
   If Not IsNull(dwValue) Then
      If dwValue = 0 Then
         GetFirewallStatus = policy &amp;amp; &amp;quot; disabled&amp;quot;
      ElseIf dwValue = 1 Then 
         GetFirewallStatus = policy &amp;amp; &amp;quot; enabled&amp;quot;
      End If
   Else
      &amp;#039;Policy not found, ignore
   End If   
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
system_profiler SPFirewallDataType | grep -i &amp;quot;Mode&amp;quot; | grep -v &amp;quot;Stealth Mode&amp;quot; | awk -F&amp;#039;: &amp;#039; &amp;#039; { print $2 } &amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>20</cache_row_id>
          </sensor>
          <sensor>
            <id>40</id>
            <name>DNS Server</name>
            <hash>3112892791</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Addresses of any configured DNS servers for active network adapters.
Example: 192.168.1.1, 8.8.8.8</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select DNSServerSearchOrder from win32_networkadapterconfiguration where IPEnabled=&amp;#039;True&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
cat /etc/resolv.conf | while read line
do
	if [[ $line == nameserver* ]];
	then
		echo ${line#*&amp;quot;nameserver&amp;quot;}
	fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
cat /etc/resolv.conf | while read line
do
	if [[ $line == nameserver* ]];
	then
		echo ${line#*&amp;quot;nameserver&amp;quot;}
	fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
egrep &amp;#039;^nameserver&amp;#039; /etc/resolv.conf | awk &amp;#039;{ print $2 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>IPAddress</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>21</cache_row_id>
          </sensor>
          <sensor>
            <id>42</id>
            <name>Last Date of Local Administrator Login</name>
            <hash>2634431519</hash>
            <string_count>4</string_count>
            <category>User</category>
            <description>Provides the last time a local administrator logged into the machine.
Example: Administrator 5/10/2012</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Last Date of Local Administrator Login
&amp;#039;========================================

Option Explicit  

&amp;#039;Uses date math - set locale

SetLocale(1033)
		
Dim objNetwork : Set objNetwork = CreateObject(&amp;quot;WScript.Network&amp;quot;) 
Dim objGroup : Set objGroup = GetObject(&amp;quot;WinNT://.&amp;quot;) 
objGroup.Filter = Array(&amp;quot;user&amp;quot;) 
Dim objUser 
For Each objUser In objGroup     
On Error Resume Next         
WScript.Echo objUser.name &amp;amp; vbTab &amp;amp; left(GetObject(objUser.adsPath).LastLogin,Instr(GetObject(objUser.adsPath).LastLogin,&amp;quot; &amp;quot;))     
On Error GoTo 0 
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
last | grep &amp;quot;^root &amp;quot; | head -n 1 | awk &amp;#039;{print $1 &amp;quot; &amp;quot; $4 &amp;quot; &amp;quot; $5 &amp;quot; &amp;quot; $6 &amp;quot; &amp;quot; $7}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>22</cache_row_id>
          </sensor>
          <sensor>
            <id>44</id>
            <name>Open Share Details</name>
            <hash>93198492</hash>
            <string_count>0</string_count>
            <category>Miscellaneous</category>
            <description>Returns a set of columns with details about open shares on a machine.
Example: name | path | status | type | permissions</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Open Share Details
&amp;#039;========================================

Set dictBlacklist = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

&amp;#039; Add one line for each admin user that you do not want listed in the sensor output.  
&amp;#039; dictBlacklist.Add LCase(&amp;quot;NomadSHR&amp;quot;), True


Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Share where caption != &amp;#039;Default Share&amp;#039; AND caption != &amp;#039;Remote Admin&amp;#039; AND caption != &amp;#039;Remote IPC&amp;#039;&amp;quot;,,48)

strSep = &amp;quot;|&amp;quot;

hasResults = False
For Each objItem in colItems
	strType = &amp;quot;Other&amp;quot;
	Select Case objItem.Type
		Case 0
			strType = &amp;quot;Disk Drive&amp;quot;
		Case 1	
			strType = &amp;quot;Print Queue&amp;quot;
		Case 2
			strType = &amp;quot;Device&amp;quot;
		Case 3
			strType = &amp;quot;IPC&amp;quot;
		Case else
	End Select
	strShareName = objItem.Name
	&amp;#039;strPerms = GetPerms(strShareName)
    strResult = strShareName &amp;amp; strSep &amp;amp; objItem.Path &amp;amp; strSep &amp;amp; objItem.Status &amp;amp; strSep &amp;amp; strType &amp;amp; strSep &amp;amp; strPerms &amp;amp; GetPerms(strShareName)
    
    bShouldList = True
    For Each strItem In dictBlacklist.Keys
        If InStr(LCase(strResult), strItem) &amp;gt; 0 Then 
            bShouldList = False
        End If
    Next

    If bShouldList Then 
        WScript.Echo strResult
        hasResults = True
    End If 
Next

If Not hasResults Then
	WScript.Echo &amp;quot;No shares&amp;quot;
End If

 
Function GetPerms(strShareName)
	 Dim ArrResult()
	 intSize= 0
	 ReDim Preserve ArrResult(intSize)
     Dim objWMIService : Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
	 
     Dim colItems : Set colItems = objWMIService.ExecQuery(&amp;quot;SELECT * FROM Win32_LogicalShareSecuritySetting where NAME=&amp;quot; &amp;amp; &amp;quot;&amp;#039;&amp;quot; &amp;amp; strShareName &amp;amp; &amp;quot;&amp;#039;&amp;quot;)
	 For Each objItem In colItems
         
         intRtn = objItem.GetSecurityDescriptor(wmiSecurityDescriptor)
     
         colDACLs = wmiSecurityDescriptor.DACL
         
         For Each objACE In colDACLs
			 
             Set objUserGroup = objACE.Trustee
			 intType = objACE.AceType
			 
			 Select Case intType
				Case 0
					strType = &amp;quot;Allow&amp;quot;
				Case 1 
					strType = &amp;quot;Deny&amp;quot;
				Case 2
					strType = &amp;quot;Audit&amp;quot;
			 End Select
							 
             Select Case objACE.AccessMask
			 
                 Case 1179817 strPermission = &amp;quot;READ&amp;quot;
                 Case 1245631 strPermission = &amp;quot;CHANGE&amp;quot;
                 Case 2032127 strPermission = &amp;quot;FULL CONTROL&amp;quot;
             End Select
             ReDim Preserve ArrResult(intSize)
		
		 ArrResult(intSize) = &amp;quot;(&amp;quot; &amp;amp; strType &amp;amp; &amp;quot;)&amp;quot; &amp;amp; (Ucase(objUserGroup.Name)) &amp;amp; &amp;quot;-&amp;quot; &amp;amp; strPermission
		 intSize = intSize + 1
         Next
     Next
	 GetPerms = Join(ArrResult, &amp;quot;\&amp;quot;)
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>1800</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Path</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Status</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Type</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Permissions</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>23</cache_row_id>
          </sensor>
          <sensor>
            <id>46</id>
            <name>Password Policy Details</name>
            <hash>2417208908</hash>
            <string_count>0</string_count>
            <category>Security</category>
            <description>Returns various data about a machines externally or locally defined Password Policy.
Example: maximum age | minimum age | enforced history | minimum length | lockout duration | lockout threshold | lockout observation window</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Password Policy Details
&amp;#039;========================================

On Error Resume Next

Dim objRoot, objDomain, strSep
&amp;#039;Maximum Password Age | Minimum Password Age | Enforced Password History | Minimum Password Length | Lockout Duration| Lockout Threshold |Lockout Observation Window
strSep = &amp;quot;|&amp;quot;

Set objRoot = GETOBJECT(&amp;quot;LDAP://RootDSE&amp;quot;)
Set objDomain = GETOBJECT(&amp;quot;LDAP://&amp;quot; &amp;amp; objRoot.GET(&amp;quot;defaultNamingContext&amp;quot;))

If IsEmpty(objDomain) Then
GetSecPolDetails strSep
Else

maximumPasswordAge = int(Int8ToSec(objDomain.GET(&amp;quot;maxPwdAge&amp;quot;)) / 86400) &amp;#039;convert to days
minimumPasswordAge = Int8ToSec(objDomain.GET(&amp;quot;minPwdAge&amp;quot;)) / 86400  &amp;#039;convert to days
minimumPasswordLength = objDomain.GET(&amp;quot;minPwdLength&amp;quot;)
accountLockoutDuration = Int8ToSec(objDomain.GET(&amp;quot;lockoutDuration&amp;quot;)) / 60  &amp;#039;convert to minutes
lockoutThreshold = objDomain.GET(&amp;quot;lockoutThreshold&amp;quot;) 
lockoutObservationWindow = Int8ToSec(objDomain.GET(&amp;quot;lockoutObservationWindow&amp;quot;)) / 60 &amp;#039;convert to minutes
passwordHistory = objDomain.GET(&amp;quot;pwdHistoryLength&amp;quot;)

wscript.echo maximumPasswordAge &amp;amp; &amp;quot; days&amp;quot; &amp;amp; strSep &amp;amp; _
	     minimumPasswordAge &amp;amp; &amp;quot; days&amp;quot; &amp;amp; strSep &amp;amp; _
	     passwordHistory &amp;amp; &amp;quot; passwords remembered&amp;quot; &amp;amp; strSep &amp;amp; _
	     minimumPasswordLength &amp;amp; &amp;quot; characters&amp;quot; &amp;amp; strSep &amp;amp; _
	     accountLockoutDuration &amp;amp; &amp;quot; minutes&amp;quot; &amp;amp; strSep &amp;amp; _
	     lockoutThreshold &amp;amp; &amp;quot; invalid logon attempts&amp;quot; &amp;amp; strSep &amp;amp; _
	     lockoutObservationWindow &amp;amp; &amp;quot; minutes&amp;quot;
	     

End If


FUNCTION GetSecPolDetails(strSep)

	Dim objShell,objScriptExec
	Dim strCommand, arrNetAccResults, strNetAccResults
	Dim strNetAccLine, strMinAge, strMaxAge, strPWDHist, strMinLength
	Dim strLockDur, strLockThresh, strLockWindow
	Dim bPrintLine, bNewInterface
	
	strCommand = &amp;quot;net accounts&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	
	strNetAccResults = LCase(objScriptExec.StdOut.ReadAll)
	arrNetAccResults = Split(LCase(strNetAccResults),vbCrLf)

	For Each strNetAccLine In arrNetAccResults
		If InStr(strNetAccLine,&amp;quot;minimum password age&amp;quot;) &amp;gt; 0 Then
			strMinAge = Trim(Split(strNetAccLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetAccLine, &amp;quot;maximum password&amp;quot;) &amp;gt; 0 Then
			strMaxAge = Trim(Split(strNetAccLine,&amp;quot;: &amp;quot;)(1))
		End If
		If InStr(strNetAccLine, &amp;quot;minimum password length&amp;quot;) &amp;gt; 0 Then
			strMinLength = Trim(Split(strNetAccLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetAccLine, &amp;quot;password history&amp;quot;) &amp;gt; 0 Then
			strPWDHist = Trim(Split(strNetAccLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetAccLine, &amp;quot;password history&amp;quot;) &amp;amp; InStr(strNetAccLine, &amp;quot;none&amp;quot;) Then
			strPWDHist = &amp;quot;0&amp;quot;
		End If
		If InStr(strNetAccLine, &amp;quot;lockout threshold&amp;quot;) &amp;gt; 0 Then
			strLockThresh = Trim(Split(strNetAccLine,&amp;quot;:&amp;quot;)(1))
		End If	
		If InStr(strNetAccLine, &amp;quot;lockout threshold&amp;quot;) &amp;amp; InStr(strNetAccLine, &amp;quot;never&amp;quot;) Then
			strLockThresh = &amp;quot;0&amp;quot;
		End If		
		If InStr(strNetAccLine,&amp;quot;lockout duration&amp;quot;) &amp;gt; 0 Then
			strLockDur = Trim(Split(strNetAccLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetAccLine,&amp;quot;lockout observation&amp;quot;) &amp;gt; 0 Then
			strLockWindow = Trim(Split(strNetAccLine,&amp;quot;:&amp;quot;)(1))
		End If
		
	Next
	&amp;#039;WScript.Echo strMaxAge &amp;amp; &amp;quot; days&amp;quot; &amp;amp; strSep &amp;amp; strMinAge &amp;amp;  &amp;quot; days&amp;quot; &amp;amp; strSep &amp;amp; strPWDHist &amp;amp; &amp;quot; passwords remembered&amp;quot; &amp;amp;  strSep &amp;amp; strMinLength &amp;amp;  &amp;quot; characters&amp;quot; &amp;amp; strSep &amp;amp; strLockDur &amp;amp;  &amp;quot; minutes&amp;quot; &amp;amp; strSep &amp;amp; strLockThresh &amp;amp;  &amp;quot; invalid logon attempts&amp;quot; &amp;amp; strSep &amp;amp; strLockWindow  &amp;amp; &amp;quot; minutes&amp;quot;

	WScript.Echo strPWDHist &amp;amp; &amp;quot; passwords remembered&amp;quot; &amp;#039;&amp;amp;  strSep &amp;amp; strMinLength &amp;amp;  &amp;quot; characters&amp;quot; &amp;amp; strSep &amp;amp; strLockDur &amp;amp;  &amp;quot; minutes&amp;quot; &amp;amp; strSep &amp;amp; strLockThresh &amp;amp;  &amp;quot; invalid logon attempts&amp;quot; &amp;amp; strSep &amp;amp; strLockWindow  &amp;amp; &amp;quot; minutes&amp;quot;




	&amp;#039;Cleanup
	Set objScriptExec = Nothing
	Set objShell = Nothing
END FUNCTION &amp;#039;GetSecPolDetails

FUNCTION Int8ToSec(BYVAL objInt8)
        &amp;#039; Function to convert Integer8 attributes from
        &amp;#039; 64-bit numbers to seconds.
        DIM lngHigh, lngLow
        lngHigh = objInt8.HighPart
        &amp;#039; Account for error in IADsLargeInteger property methods.
        lngLow = objInt8.LowPart
        IF lngLow &amp;lt; 0 THEN
            lngHigh = lngHigh + 1
        END IF
        Int8ToSec = -(lngHigh * (2 ^ 32) + lngLow) / (10000000)
END FUNCTION</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Maximum Password Age</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Minimum Password Age</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Enforced Password History</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Minimum Password Length</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Lockout Duration</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Lockout Threshold</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Lockout Observation Window</name>
                <index>6</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>24</cache_row_id>
          </sensor>
          <sensor>
            <id>48</id>
            <name>USB Storage Devices</name>
            <hash>4284507739</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns a list of USB storage devices currently plugged in to the client machine.
Example: USB Mass Storage Device</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; USB Storage Devices
&amp;#039;========================================

On Error Resume Next
strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PnPEntity where (Status=&amp;#039;OK&amp;#039; and Service=&amp;#039;USBSTOR&amp;#039;)&amp;quot;,,48)

hasResults = False

For Each objItem in colItems
	hasResults = True
    Wscript.Echo objItem.Caption
Next

If Not hasResults Then
	WScript.Echo &amp;quot;No devices&amp;quot;
End If</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

if [ ! -r /usr/bin/hal-find-by-capability ] || [ ! -r /usr/bin/hal-get-property ]
then
	echo &amp;quot;hal commands not found, requires hal rpm&amp;quot;
else

	for udi in $(/usr/bin/hal-find-by-capability --capability storage)
	do
		device=$(hal-get-property --udi $udi --key block.device)
		vendor=$(hal-get-property --udi $udi --key storage.vendor)
		model=$(hal-get-property --udi $udi --key storage.model)
		if [ &amp;quot;usb&amp;quot; = $(hal-get-property --udi $udi --key storage.bus) ]
		then
			parent_udi=$(hal-find-by-property --key block.storage_device --string $udi)
			mount=$(hal-get-property --udi $parent_udi --key volume.mount_point)
			label=$(hal-get-property --udi $parent_udi --key volume.label)
			media_size=$(hal-get-property --udi $udi --key storage.removable.media_size)
			size=$(( $media_size / ( 1000 * 1000 * 1000 ) ))
			#printf &amp;quot;$vendor  $model  $device  $mount  $label &amp;quot;${size}GB&amp;quot; \n&amp;quot;
			/usr/bin/printf &amp;quot;$vendor $model &amp;quot;${size}GB&amp;quot; \n&amp;quot;
		fi
	done
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>25</cache_row_id>
          </sensor>
          <sensor>
            <id>50</id>
            <name>No Screen Saver Password</name>
            <hash>1417112132</hash>
            <string_count>0</string_count>
            <category>Security</category>
            <description>Returns the users which have no screen saver password set.
Example: Domain\John.Doe</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; No Screen Saver Password
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(_
    &amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(_
    &amp;quot;Select * from Win32_Desktop&amp;quot;)
For Each objItem in colItems
	If objItem.ScreenSaverSecure = False Then
		If InStr(LCase(objItem.Name), &amp;quot;nt authority&amp;quot;) = 0 Then
			WScript.Echo objItem.Name
		End If	
	End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>26</cache_row_id>
          </sensor>
          <sensor>
            <id>52</id>
            <name>Username</name>
            <hash>1913997657</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the currently logged in user, and No User if nobody is logged in.
Example: Domain\JDoe</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Username
&amp;#039;========================================

Option Explicit

Dim strComputer, objWMIService, colComputer, objComputer

strComputer = &amp;quot;.&amp;quot;    
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)  
Set colComputer = objWMIService.ExecQuery (&amp;quot;Select UserName from Win32_ComputerSystem&amp;quot;)    

For Each objComputer in colComputer     
	if objComputer.UserName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then     
		Wscript.Echo StripDuplicateDomains(objComputer.UserName)
	Else     
		Wscript.Echo &amp;quot;No User&amp;quot;     
	End If  
Next    

WScript.Quit
&amp;#039; End

Function StripDuplicateDomains(strInput)
    &amp;#039; Removes duplicate domain prefixes
    Dim arrWords,strResult
    strResult = strInput
    
    If InStr(strInput,&amp;quot;\&amp;quot;) Then
        arrWords = Split(strInput,&amp;quot;\&amp;quot;)
        If UBound(arrWords) &amp;gt;= 2 And LCase(arrWords(0)) = LCase(arrWords(1)) Then
            &amp;#039; Remove duplicate
            strResult = arrWords(0) &amp;amp; &amp;quot;\&amp;quot; &amp;amp; arrWords(2)
    	End If
    End if
    
    StripDuplicateDomains = strResult
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
users=$(who | awk &amp;#039;{print $1}&amp;#039; | sort | uniq)
if [ ! -n &amp;quot;$users&amp;quot; ] ; then 
	echo No User
else
	echo &amp;quot;$users&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
users=$(who | awk &amp;#039;{print $1}&amp;#039; | sort | uniq)
if [ ! -n &amp;quot;$users&amp;quot; ] ; then 
	echo No User
else
	echo &amp;quot;$users&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
who | awk &amp;#039;{ print $1 }&amp;#039;| sort -u</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
users=$(who | awk &amp;#039;{print $1}&amp;#039; | sort | uniq)
if [ ! -n &amp;quot;$users&amp;quot; ] ; then 
	echo No User
else
	echo &amp;quot;$users&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>27</cache_row_id>
          </sensor>
          <sensor>
            <id>54</id>
            <name>USB Write Protected</name>
            <hash>3595988712</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Outputs True if USB storage devices connected to the client machine are set to write protected mode and false if not.
Example: False</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; USB Write Protected
&amp;#039;========================================

&amp;#039; This sensor will output True if USB storage devices are
&amp;#039; set to write protect mode and false if not

Option Explicit

If USBWriteProtected Then
	WScript.Echo &amp;quot;True&amp;quot;
Else
	WScript.Echo &amp;quot;False&amp;quot;
End If

Function USBWriteProtected
&amp;#039; This function will look into the registry to determine if USB storage devices
&amp;#039; are write protected

	Const HKLM = &amp;amp;H80000002

	Dim objRegistry, objWMIService
	Dim strComputer
	Dim strUSBWriteProtectKey
	Dim strUSBWriteProtectValueName, dwordWriteProtectValue

	strComputer = &amp;quot;.&amp;quot;
	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
		&amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;) 

	Set objRegistry = _
		GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; _ 
		&amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)
	

	strUSBWriteProtectKey = &amp;quot;SYSTEM\CurrentControlSet\Control\StorageDevicePolicies&amp;quot;
	strUSBWriteProtectValueName = &amp;quot;WriteProtect&amp;quot; &amp;#039; This is a DWORD value

	If Not RegKeyExists(objRegistry, HKLM, strUSBWriteProtectKey) Then
		USBWriteProtected = False
	End If
	
	objRegistry.GetDWORDValue HKLM, strUSBWriteProtectKey, strUSBWriteProtectValueName, dwordWriteProtectValue
	
	If IsNull(dwordWriteProtectValue) Then
		USBWriteProtected = False
	Else 
		If dwordWriteProtectValue = 1 Then
			USBWriteProtected = True
		End IF
	End If
	
	&amp;#039;Cleanup
	Set objWMIService = Nothing
	Set objRegistry = Nothing
	
End Function &amp;#039;USBWriteProtected

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>28</cache_row_id>
          </sensor>
          <sensor>
            <id>56</id>
            <name>Non-Approved Established Connections</name>
            <hash>1509255291</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Any established connections currently being made from a process that is not allowed or to a destination that is not allowed.  This multi-column Sensor displays the process responsible for the connection, the display name of the process (if available), and the target IP Address and port.  Processes and IP ranges can be excluded in the Sensor definition.
Example: chrome.exe | Google Chrome | 173.194.79.99:80</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Non-Approved Established Connections
&amp;#039;========================================

showProcess = True
showPort = True
showDNSName = False

Dim strcommand, results, excludeProcesses, excludeSubnets, taniumDebug, excludeProcessesFilePath, excludeSubnetsFilePath
Dim strSep : strSep = &amp;quot;|&amp;quot;
excludeProcessesFilePath = GetTaniumDir(&amp;quot;Tools\IR&amp;quot;) &amp;amp; &amp;quot;excluded-processes.dat&amp;quot;
excludeSubnetsFilePath = GetTaniumDir(&amp;quot;Tools\IR&amp;quot;) &amp;amp; &amp;quot;excluded-subnets.dat&amp;quot;

&amp;#039; This is a multi-column sensor that looks like:
&amp;#039;Process|Name|Target IP

Dim objFSO : Set objFSO = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
If objFSO.FileExists(excludeProcessesFilePath) Then
	&amp;#039;exclude processes file exists - read from file
	excludeProcesses = LoadDATFileAsArray(excludeProcessesFilePath)
Else
	&amp;#039;exclude processes file doesn&amp;#039;t exist - specify processes below
	excludeProcesses = &amp;quot;TaniumClient.exe,TaniumReceiver.exe,TaniumZoneServer.exe&amp;quot;
	&amp;#039;excludeProcesses = &amp;quot;chrome.exe&amp;quot;
	&amp;#039;excludeProcesses = &amp;quot;iexplore.exe&amp;quot;
	&amp;#039;excludeProcesses = &amp;quot;chrome.exe, iexplore.exe&amp;quot;
	&amp;#039;excludeProcesses = &amp;quot;trillian.exe&amp;quot;
	excludeProcesses = Split(LCase(excludeProcesses), &amp;quot;,&amp;quot;)
End If 

If objFSO.FileExists(excludeSubnetsFilePath) Then
	&amp;#039;exclude subnets file exists - read from file
	excludeSubnets = LoadDATFileAsArray(excludeSubnetsFilePath)
	&amp;#039;WScript.Echo &amp;quot;Using excludesubnets file&amp;quot;
Else
	&amp;#039;exclude subnets file doesn&amp;#039;t exist - specify subnets below
	excludeSubnets = &amp;quot;127.0.0.0:255.255.255.0&amp;quot;
	&amp;#039;excludeSubnets = &amp;quot;72.14.213.0:255.255.255.0,74.125.223.0:255.255.255.0-74.125.225.0:255.255.255.0,204.79.197.0/24&amp;quot;
	excludeSubnets = Split(excludeSubnets, &amp;quot;,&amp;quot;)
End If 

&amp;#039;iterate through excludedSubnets, converting any CIDR expressions to ip:mask
For item = 0 To UBound(excludeSubnets)
	If InStr(excludeSubnets(item),&amp;quot;/&amp;quot;) Then
		a = Split(excludeSubnets(item), &amp;quot;/&amp;quot;)
		excludeSubnets(item) = a(0) &amp;amp; &amp;quot;:&amp;quot; &amp;amp;  MaskLengthToIP(a(1))
	End If 
Next 

taniumDebug = False
&amp;#039;taniumDebug = True 

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)  
query = &amp;quot;select name, executablepath, processId from win32_process&amp;quot;
Set colResults = objWMIService.ExecQuery(query)

&amp;#039;dictionary for process-app pairs
Set processes = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

For Each result In colResults 
   processId = CStr(result.ProcessId)
   processPath = result.ExecutablePath
   processes.Add processId, result.Name &amp;amp; &amp;quot;,&amp;quot; &amp;amp; processPath &amp;#039; tie IDs to exes,path - split later
Next

strcommand = &amp;quot;cmd /c netstat -aon -p TCP | find &amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;TCP&amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot; | find &amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;ESTABLISHED&amp;quot; &amp;amp; Chr(34)

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Set objScriptExec = objShell.Exec (strCommand)
strPingResults = LCase(objScriptExec.StdOut.ReadAll)

results = Split(strPingResults, vbCrLf)
j = 0

For Each line In results
   line = cleanWhitespace(Trim(line))
   
   If line &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then 
	   lineResults = Split(line)
	   i = 0
	   Dim strPort, strPid, strConnectionType, strForeignIp, strApp
	   For Each word In lineResults
	      If i = 1 Then
	         strPort = word
	      ElseIf i = 2 Then
	         strForeignIp = word
	      ElseIf i = 3 Then
	         strConnectionType = word
	      ElseIf i = 4 Then
	         strPid = word
	      End If
	      
	      i = i + 1
	   Next
	   
	   &amp;#039;DO NOT INCLUDE EXCLUDED APPS
	   strAppEntry = processes.Item(strPid) &amp;#039; looks like process.exe, Process Path
	   arrAppEntry = Split(strAppEntry,&amp;quot;,&amp;quot;)
	   strAppExe = arrAppEntry(0)
	   strAppPath = arrAppEntry(1)
	   
	   isNotExcludedApp = Not(ContainedInArray(LCase(strAppExe), excludeProcesses))
	   
	   &amp;#039;DO NOT INCLUDE EXCLUDED SUBNETS
	   isNotExcludedSubnet = Not(ContainedInSubnet(strForeignIp, excludeSubnets))
	   
	   If Not(IsEmpty(strAppExe)) _
	      And isNotExcludedApp _ 
	      And isNotExcludedSubnet Then
	
		  If Not showPort Then 
		  	arrTemp = Split(strForeignIp, &amp;quot;:&amp;quot;)
			strForeignIp = arrTemp(0)
		  End If
	
			If showDNSName Then
				arrTemp = Split(strForeignIp, &amp;quot;:&amp;quot;)
				strForeignIp = ReverseDNSLookup(arrTemp(0))
				If UBound(arrTemp) &amp;gt;=1 Then 
					strForeignIp = strForeignIp &amp;amp; &amp;quot;:&amp;quot; &amp;amp; arrTemp(1)
				End If
			End If 
			
	      If showProcess Then
	      	results(j) = strAppExe &amp;amp; strSep &amp;amp; ProcessNameToApplicationName(strAppPath,strAppExe) &amp;amp; strSep &amp;amp; strForeignIp
	      Else
	        results(j) = strSep &amp;amp; strSep &amp;amp; strForeignIp
	      End If	
	   Else
	      If taniumDebug Then WScript.Echo &amp;quot;      excluded: &amp;quot; &amp;amp; strApp &amp;amp; &amp;quot; &amp;quot; &amp;amp; strForeignIp
	      results(j) = &amp;quot;&amp;quot;   
	   End If 
	   
	   j = j + 1
	End If
Next

results = RemDups(results)

If UBound(results) &amp;lt; 1 Then
	If GetLocale() &amp;lt;&amp;gt; 1033 Then
		WScript.Echo &amp;quot;English Language OS Required&amp;quot;
	End If
End If

For Each result In results 
   WScript.Echo result
Next

WScript.Quit

Function ReverseDNSLookup(strIPAddress)
	ReverseDNSLookup = strIPAddress	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	
	Set objExecCommand = objShell.Exec(&amp;quot;%comspec% /c nslookup &amp;quot; &amp;amp; strIPAddress)
	
	strResults = objExecCommand.StdOut.ReadAll
	
	If InStr(strResults, &amp;quot;Name:&amp;quot;) Then
		arrNameTemp = Split(strResults, &amp;quot;Name:&amp;quot;)
		arrName = Split(Trim(arrNameTemp(1)), Chr(13))
		
		ReverseDNSLookup = arrName(0)
	End If	
End Function

Function LoadDATFileAsArray(strFilePath)
	Dim objFSO : Set objFSO = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	Dim responseDict : Set responseDict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		
	If objFSO.FileExists(strFilePath) Then
        Dim objDatFile, strLine
        Set objDatFile = objFso.OpenTextFile(strFilePath, 1)
        
        &amp;#039;read in all entries, one per line
        Do While objDatFile.AtEndOfStream &amp;lt;&amp;gt; True
            strLine = LCase(Trim(objDatFile.ReadLine))
			If strLine &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Left(strLine, 1) &amp;lt;&amp;gt; &amp;quot;&amp;#039;&amp;quot; And Not responseDict.Exists(strLine) Then 
				responseDict.Add strLine, True
			End If
        Loop
    End If
	LoadDATFileAsArray = responseDict.Keys
End Function

Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
		If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
			strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
		End If	
	
		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		If fso.FolderExists(strPath) Then
			If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
				&amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
				GeneratePath strPath &amp;amp; strSubDir, fso
			End If
			GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
		Else
			&amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
			WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
			GetTaniumDir = False
		End If
	Else
		WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
		GetTaniumDir = False
	End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
	GeneratePath = False

	If Not fso.FolderExists(pFolderPath) Then
		If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
			GeneratePath = True
			Call fso.CreateFolder(pFolderPath)
		End If
	Else
		GeneratePath = True
	End If
End Function &amp;#039;GeneratePath

Function ContainedInSubnet(str, arr)
   Dim strIp, strSubnet, strMask
   temp = Split(str, &amp;quot;:&amp;quot;)
   strIp = temp(0)

   For Each item In arr
      If InStr(item, &amp;quot;-&amp;quot;) Then &amp;#039;Subnet range
         temp = Split(item, &amp;quot;-&amp;quot;)
         lower = Split(temp(0), &amp;quot;:&amp;quot;)
         upper = Split(temp(1), &amp;quot;:&amp;quot;)
         lowerSubnet = Trim(lower(0))
         lowerMask = Trim(lower(1))
         upperSubnet = Trim(upper(0))
         upperMask = Trim(upper(1))
         
         If StringToBinary(strIp) &amp;gt; StringToBinary(Subnet(lowerSubnet, lowerMask)) _
            And StringToBinary(strIp) &amp;lt; StringToBinary(Subnet(upperSubnet, upperMask)) Then
            ContainedInSubnet = True
            Exit Function
         End If 
      Else &amp;#039;Single subnet
         parts = Split(item, &amp;quot;:&amp;quot;)
         strSubnet = Trim(parts(0))
         strMask = Trim(parts(1))
         If Subnet(strIp, strMask) = Subnet(strSubnet, strMask) Then
            ContainedInSubnet = True
            Exit Function
         End If
      End If 
   Next
   ContainedInSubnet = False
End Function

Function ContainedInArray(str, arr)
   For Each item In arr 
      If str = Trim(item) Then
         ContainedInArray = True
         Exit Function
      End If   
   Next
   ContainedInArray = False
End Function

Function cleanWhitespace(strStarter)
   intStarter = Len(strStarter)
	For i = intStarter To 2 Step -1
      strChars = Space(i)
      strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
   Next
   cleanWhitespace = strStarter
End Function

Function RemDups(ByVal anArray)
   Dim d, item, thekeys
   Set d = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
   d.removeall
   d.CompareMode = 0
   For Each item In anArray
      If Len(item) &amp;gt; 0 Then
         If Not d.Exists(item) Then d.Add item, item
      End If
   Next
   thekeys = d.keys
   Set d = Nothing
   RemDups = thekeys
End Function

Function Subnet(strAddress, strMask)
   intSubnetLength = SubnetLength(strMask)
   Subnet = BinaryToString(Left(StringToBinary(strAddress), intSubnetLength) &amp;amp; String(32 - intSubnetLength, &amp;quot;0&amp;quot;))
End Function

Function SubnetLength(strMask)
   strMaskBinary = StringToBinary(strMask)
   SubnetLength = Len(Left(strMaskBinary, InStr(strMaskBinary, &amp;quot;0&amp;quot;) - 1))
End Function

Function BinaryToString(strBinary)
   For intOctetPos = 1 To 4
      strOctetBinary = Right(Left(strBinary, intOctetPos * 8), 8)
      intOctet = 0
      intValue = 1
      For intBinaryPos = 1 To Len(strOctetBinary)
         If Left(Right(strOctetBinary, intBinaryPos), 1) = &amp;quot;1&amp;quot; Then intOctet = intOctet + intValue
         intValue = intValue * 2
      Next
      If BinaryToString = Empty Then BinaryToString = CStr(intOctet) Else BinaryToString = BinaryToString &amp;amp; &amp;quot;.&amp;quot; &amp;amp; CStr(intOctet)
   Next
End Function

Function StringToBinary(strAddress)
   objAddress = Split(strAddress, &amp;quot;.&amp;quot;, -1)
   For Each strOctet In objAddress
      intOctet = CInt(strOctet)
      strOctetBinary = &amp;quot;&amp;quot;
      For x = 1 To 8
         If intOctet Mod 2 &amp;gt; 0 Then
            strOctetBinary = &amp;quot;1&amp;quot; &amp;amp; strOctetBinary
         Else
            strOctetBinary = &amp;quot;0&amp;quot; &amp;amp; strOctetBinary
         End If
         intOctet = Int(intOctet / 2)
      Next
      StringToBinary = StringToBinary &amp;amp; strOctetBinary
   Next
End Function

Function ProcessNameToApplicationName(strExecutablePath, strExecutableName)
&amp;#039; This function will return the full application name of a running executable

		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		
		arrPathParts = Split(strExecutablePath,&amp;quot;\&amp;quot;)

		If UBound(arrPathParts) &amp;lt; 0 Then &amp;#039;can be -1 for no split, such as the System process
			ProcessNameToApplicationName = strExecutableName
			Set fso = Nothing
			Exit Function
		End If
		strExecutable = arrPathParts(UBound(arrPathParts))
		
		If fso.FileExists(strExecutablePath) Then
			Dim strOutput, fileVersion, fileVersionOutput, fullName
		
			Set execFile = fso.GetFile(strExecutablePath)
			fullName = GetDescription(execFile.ParentFolder.Path, strExecutable)
			If Not fullName = &amp;quot;&amp;quot; Then
				ProcessNameToApplicationName = fullName
			Else
				ProcessNameToApplicationName = strExecutableName
			End If
		Else &amp;#039; file doesn&amp;#039;t exist or inaccessible
			ProcessNameToApplicationName = strExecutableName
		End If

End Function &amp;#039;ProcessNameToApplicationName

Function GetDescription(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &amp;quot;File description&amp;quot;)
	If IsEmpty(descIndex) Then
		descIndex = GetAttributeIndex(folderPath, &amp;quot;Description&amp;quot;)
	End If
	GetDescription = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function GetFileProperty(folderPath, fileName, fileProperty)
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	GetFileProperty = objFolder.GetDetailsOf(objFolder.Parsename(fileName), fileProperty)
End Function

Function GetAttributeIndex(folderPath, attrTarget)
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	For i = 0 To 50
		attrName = objFolder.GetDetailsOf(objFolder.Items, i)
		If LCase(attrName) = LCase(attrTarget) Then
			GetAttributeIndex = i
			Exit Function
		End If
	Next
	
End Function

Function MaskLengthToIP(intMask)
  &amp;#039; Converts a mask length to the decimal format mask
 
  Dim arrOctets(3)
  Dim intFullOctets : intFullOctets = (intMask - (intMask Mod 8)) / 8
  Dim i
  For i = 0 To (intFullOctets - 1)
    arrOctets(i) = &amp;quot;255&amp;quot;
  Next
 
  Dim intPartialOctetLen : intPartialOctetLen = intMask Mod 8
  Dim j
  If intPartialOctetLen &amp;gt; 0 Then
    Dim intOctet
    For j = 0 To (intPartialOctetLen - 1)
      intOctet = intOctet + 2^(7 - j)
    Next
    arrOctets(i) = intOctet : i = i + 1
  End If
 
  For j = i To 3
    arrOctets(j) = &amp;quot;0&amp;quot;
  Next
 
  MaskLengthToIP = Join(arrOctets, &amp;quot;.&amp;quot;)
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

lsof -iTCP -sTCP:ESTABLISHED -P +c 15 -n|grep -v &amp;quot;COMMAND&amp;quot; |while read line
do
        set -- $line
        second=`echo $9|cut -d&amp;#039;&amp;gt;&amp;#039; -f 2`
        echo $1\|\|$second
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Process</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Target IP</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>29</cache_row_id>
          </sensor>
          <sensor>
            <id>58</id>
            <name>Wireless Network Connected SSID</name>
            <hash>1466668831</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the SSID (name) of a wireless network a machine is connected to.
Example: linksys</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Wireless Network Connected SSID
&amp;#039;========================================

&amp;#039; This sensor uses netsh output to display details about wireless LAN

Option Explicit

Dim strSep

strSep = &amp;quot;|&amp;quot;
				
GetConnectedWirelessNetwork strSep

Function GetConnectedWirelessNetwork(strSep)

	Dim objShell,objScriptExec
	Dim strCommand, arrNetshResults, strNetshResults
	Dim strNetshLine, strState, strSSID
	Dim bPrintLine, bNewInterface, bConnected
	
	strCommand = &amp;quot;netsh wlan show interfaces&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	
	strNetshResults = LCase(objScriptExec.StdOut.ReadAll)
	arrNetshResults = Split(LCase(strNetshResults),vbCrLf)
	
	bConnected = False &amp;#039;assume no connections
	
	For Each strNetshLine In arrNetshResults
		If InStr(strNetshLine,&amp;quot;name&amp;quot;) &amp;gt; 0 Then
			bNewInterface = True	&amp;#039; if there&amp;#039;s a new Name, it&amp;#039;s time to note a new group
		End If
		If InStr(strNetshLine, &amp;quot;state&amp;quot;) &amp;gt; 0 Then
			strState = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;ssid&amp;quot;) &amp;gt; 0 And Not InStr(strNetshLine, &amp;quot;bssid&amp;quot;) &amp;gt; 0 Then
			strSSID = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine,&amp;quot;signal&amp;quot;) &amp;gt; 0 Then
			bPrintLine = True &amp;#039; If we&amp;#039;ve found an Signal Value, it&amp;#039;s time to print the line.
		End If
		If bNewInterface And bPrintLine Then
			&amp;#039; if it&amp;#039;s a new group, and at last line in the new group, print
			If InStr(LCase(strState),&amp;quot;connected&amp;quot;) &amp;gt; 0 Then
				WScript.Echo strSSID
				bConnected = True
			End If
			bNewInterface = False
			bPrintLine = False
		End If
	Next
	
	If Not bConnected Then
		WScript.Echo &amp;quot;:No Connection:&amp;quot;
	End If
	
	&amp;#039;Cleanup
	Set objScriptExec = Nothing
	Set objShell = Nothing
End Function &amp;#039;GetConnectedWirelessNetwork</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk &amp;#039;/ SSID/ {print substr($0, index($0, $2))}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>30</cache_row_id>
          </sensor>
          <sensor>
            <id>60</id>
            <name>Wireless Networks Visible</name>
            <hash>2233537498</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns details of all wireless networks a machine can see, whether they are connected or not.  Details include SSID, Network Type, Authentication Method, and Encryption Level.
Example: hotspotwifi | Infrastructure | WPA2-Personal</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Wireless Networks Visible
&amp;#039;========================================

&amp;#039; This sensor uses netsh output to display all visible 
&amp;#039; SSIDs

Option Explicit

Dim strSep, strSSIDWhiteList,arrSSIDWhiteList

strSep = &amp;quot;|&amp;quot;
&amp;#039; This is a multi-column sensor whose output looks like
&amp;#039; SSID|Network Type|Authentication|Encryption

strSSIDWhiteList = &amp;quot;&amp;quot;
&amp;#039;strSSIDWhiteList = &amp;quot;linksys&amp;quot;
&amp;#039;strSSIDWhiteList = &amp;quot;ATTNET,ApprovedSSID1,ApprovedSSID2,etc ...&amp;quot;

GetSSIDs strSep, strSSIDWhiteList

Function GetSSIDs(strSep, strSSIDWhiteList)

	Dim objShell,objScriptExec
	Dim strCommand, arrNetshResults, strNetshResults
	Dim strNetshLine, strSSID, strNetworkType,strAuthentication, strEncryption
	Dim bPrintLine, bNewSSID
	
	strCommand = &amp;quot;netsh wlan show networks&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	
	strNetshResults = LCase(objScriptExec.StdOut.ReadAll)
	arrNetshResults = Split(LCase(strNetshResults),vbCrLf)
	
	For Each strNetshLine In arrNetshResults
		If InStr(strNetshLine,&amp;quot;ssid&amp;quot;) &amp;gt; 0 Then
			bNewSSID = True	&amp;#039; if there&amp;#039;s SSD, it&amp;#039;s time to note a new group
			strSSID = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;network type&amp;quot;) &amp;gt; 0 Then
			strNetworkType = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine,&amp;quot;authentication&amp;quot;) &amp;gt; 0 Then
			strAuthentication = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine,&amp;quot;encryption&amp;quot;) &amp;gt; 0 Then
			strEncryption = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
			bPrintLine = True &amp;#039; If we&amp;#039;ve found an Encryption Value, it&amp;#039;s time to print the line.
		End If
		If bNewSSID And bPrintLine And Not InStr(LCase(strSSIDWhiteList), LCase(strSSID)) &amp;gt; 0 Then
			&amp;#039; if it&amp;#039;s a new group, and at last line in the new group, print
			WScript.Echo strSSID &amp;amp; strSep &amp;amp; strNetworkType &amp;amp; strSep &amp;amp; strAuthentication &amp;amp; strSep &amp;amp; strEncryption
			bNewSSID = False
			bPrintLine = False
		End If
	Next
	
	&amp;#039;Cleanup
	Set objScriptExec = Nothing
	Set objShell = Nothing
End Function &amp;#039;GetSSIDs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
# cah
# Created 20140906
# Modified
# looking for SSIDs via airport

/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s | grep -v &amp;quot;^$&amp;quot; | grep -v &amp;quot;SSID BSSID  &amp;quot; |grep -v &amp;quot;IBSS network&amp;quot;| sed &amp;#039;s/..:..//g&amp;#039; | sed &amp;#039;s/ -..  ... *//g&amp;#039; | sed &amp;#039;s/\(::\).*  .. /\1 /&amp;#039; | sed &amp;#039;s/WPA\(.*\) WPA2\(.*\)/WPA WPA2 \1 \2/g&amp;#039; | sed &amp;#039;s/(/ /g&amp;#039; | sed &amp;#039;s/)/ /g&amp;#039; | sed &amp;#039;s/::/ | |/g&amp;#039; | sed &amp;#039;s/WPA2/WPA2|/&amp;#039; | sed &amp;#039;s/NONE/NONE|NONE|/g&amp;#039; | sed &amp;#039;s/WEP/WEP|WEP/g&amp;#039; | sed &amp;#039;s/WPA \([^W][^P]\)/WPA| \1/g&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>300</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>SSID</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Network Type</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Authentication</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Encryption</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <cache_row_id>31</cache_row_id>
          </sensor>
          <sensor>
            <id>62</id>
            <name>Wireless Network Details</name>
            <hash>4267153065</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Details of currently active wireless network connection by client machine.  Details include SSID, MAC address, connection state, network type, radio type, authentication, receive rate, transmit rate, and signal strength.
Example: hotspotwifi | xx-xx-xx-xx-xx-xx | connected | Infrastructure | 802.11g | WPA2-Personal | 54 | 54 | 99%</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Wireless Network Details
&amp;#039;========================================

&amp;#039; This sensor uses netsh output to display details about wireless LAN

Option Explicit

Dim strSep

strSep = &amp;quot;|&amp;quot;
				
&amp;#039; This is a multi-column sensor whose output looks like
&amp;#039; SSID|MAC|State|Network Type|Radio|Authentication|Receive|Transmit|Signal 0-5

GetWirelessNetworkDetails strSep

Function GetWirelessNetworkDetails(strSep)

	Dim objShell,objScriptExec
	Dim strCommand, arrNetshResults, strNetshResults
	Dim strNetshLine, strName, strMAC, strState, strSSID
	Dim strNetworkType, strRadioType, strAuthentication
	Dim strReceiveRate, strTransmitRate, strSignal, intSignal
	Dim bPrintLine, bNewInterface
	
	strCommand = &amp;quot;netsh wlan show interfaces&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	
	strNetshResults = LCase(objScriptExec.StdOut.ReadAll)
	arrNetshResults = Split(LCase(strNetshResults),vbCrLf)
	
	For Each strNetshLine In arrNetshResults
		If InStr(strNetshLine,&amp;quot;name&amp;quot;) &amp;gt; 0 Then
			bNewInterface = True	&amp;#039; if there&amp;#039;s a new Name, it&amp;#039;s time to note a new group
			strName = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;physical address&amp;quot;) &amp;gt; 0 Then
			strMAC = Trim(Split(strNetshLine,&amp;quot;: &amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;state&amp;quot;) &amp;gt; 0 Then
			strState = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;ssid&amp;quot;) &amp;gt; 0 And Not InStr(strNetshLine, &amp;quot;bssid&amp;quot;) &amp;gt; 0 Then
			strSSID = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;network type&amp;quot;) &amp;gt; 0 Then
			strNetworkType = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;radio type&amp;quot;) &amp;gt; 0 Then
			strRadioType = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If		
		If InStr(strNetshLine,&amp;quot;authentication&amp;quot;) &amp;gt; 0 Then
			strAuthentication = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine,&amp;quot;receive rate&amp;quot;) &amp;gt; 0 Then
			strReceiveRate = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)) &amp;amp; &amp;quot; Mbps&amp;quot;
		End If
		If InStr(strNetshLine,&amp;quot;transmit rate&amp;quot;) &amp;gt; 0 Then
			strTransmitRate = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)) &amp;amp; &amp;quot; Mbps&amp;quot;
		End If
		If InStr(strNetshLine,&amp;quot;signal&amp;quot;) &amp;gt; 0 Then
			strSignal = Replace(Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)),&amp;quot;%&amp;quot;,&amp;quot;&amp;quot;) &amp;#039; remove %
			intSignal = CInt(CInt(strSignal) / 20)
			bPrintLine = True &amp;#039; If we&amp;#039;ve found an Signal Value, it&amp;#039;s time to print the line.
		End If
		If bNewInterface And bPrintLine Then
			&amp;#039; if it&amp;#039;s a new group, and at last line in the new group, print
			WScript.Echo strSSID &amp;amp; strSep &amp;amp; strMAC &amp;amp; strSep &amp;amp; strState &amp;amp; strSep &amp;amp; strNetworkType _
				&amp;amp; strSep &amp;amp; strRadioType &amp;amp; strSep &amp;amp; strAuthentication &amp;amp; strSep &amp;amp; strReceiveRate &amp;amp; strSep _
				&amp;amp; strTransmitRate &amp;amp; strSep &amp;amp; intSignal
			bNewInterface = False
			bPrintLine = False
		End If
	Next
	
	&amp;#039;Cleanup
	Set objScriptExec = Nothing
	Set objShell = Nothing
End Function &amp;#039;GetWirelessNetworkDetails</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
# cah
# Created 20140616
# Modified
# looking for wireless network SSIDs actively connected 
# SSID MAC State NetworkType Radio Authentication Receive Transmit Signal(0-5) , delimiter is |
# Quality conversions based off of: http://stackoverflow.com/questions/15797920/how-to-convert-wifi-signal-strength-from-quality-percent-to-rssi-dbm

AIRPATH=&amp;quot;/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources&amp;quot;
RADIO=&amp;quot;unknown&amp;quot;

DEVID=$(networksetup -listallhardwareports | grep -A1 Wi-Fi | awk -F &amp;quot;Device: &amp;quot; &amp;#039;{print $2}&amp;#039; | grep -v &amp;quot;^$&amp;quot;)
#echo $DEVID
DEVMAC=$(networksetup -getmacaddress $DEVID | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039; | awk -F&amp;quot;(&amp;quot; &amp;#039;{print $1}&amp;#039;)

#Get SSID
SSID=$(networksetup -getairportnetwork $DEVID | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039;)
#echo $SSID

if [ ! &amp;quot;$SSID&amp;quot; ] ; then
	SSID=&amp;quot;Not Available&amp;quot;
	NETWORKTYPE=&amp;quot;Not Available&amp;quot;
	AUTHENTICATION=&amp;quot;Not Available&amp;quot;
	RECEIVE=&amp;quot;Not Available&amp;quot;
	TRANSMIT=&amp;quot;Not Available&amp;quot;
	SIGNAL=&amp;quot;Not Available&amp;quot;
fi

if [ &amp;quot;$SSID&amp;quot; != &amp;quot;Not Available&amp;quot; ] ; then
  STATE=$( $AIRPATH/airport -I | grep &amp;quot;state:&amp;quot; | awk &amp;#039;{print $2}&amp;#039; )
  NETWORKTYPE=$( $AIRPATH/airport -I | grep &amp;quot;op mode:&amp;quot; | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039; )
  AUTHENTICATION=$( $AIRPATH/airport -I | grep &amp;quot;link auth&amp;quot; | awk &amp;#039;{print $3}&amp;#039; )
  RECEIVE=$( $AIRPATH/airport -I | awk -F&amp;quot;lastTxRate:&amp;quot; &amp;#039;{print $2}&amp;#039; | grep -v &amp;quot;^$&amp;quot; )
  TRANSMIT=$RECEIVE
  PWR=$( $AIRPATH/airport -I | awk -F&amp;quot;agrCtlRSSI:&amp;quot; &amp;#039;{print $2}&amp;#039; | grep -v &amp;quot;^$&amp;quot; )
 This is to convert from power to MS dummy gauge
    if  (( $PWR &amp;lt;= &amp;quot;-100&amp;quot; )) ; then
  	SIGNAL=&amp;quot;0&amp;quot;
   elif (((  $PWR &amp;gt; &amp;quot;-100&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-93&amp;quot; ))) ; then
  	SIGNAL=&amp;quot;1&amp;quot;
   elif (((  $PWR &amp;gt;= &amp;quot;-93&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-87&amp;quot; ))) ; then
  	SIGNAL=&amp;quot;2&amp;quot;
   elif (((  $PWR &amp;gt;= &amp;quot;-87&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-75&amp;quot; ))) ; then
  	SIGNAL=&amp;quot;3&amp;quot;
   elif ((( $PWR &amp;gt;= &amp;quot;-75&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-50&amp;quot; ))) ; then
  	SIGNAL=&amp;quot;4&amp;quot;
   else
  	SIGNAL=&amp;quot;5&amp;quot;
  fi  
else 
  STATE=$( $AIRPATH/airport -I | grep &amp;quot;state:&amp;quot; | awk &amp;#039;{print $2}&amp;#039; )
  if [ ! &amp;quot;$STATE&amp;quot; ] ; then
    STATE=&amp;quot;off&amp;quot;
  fi
fi

#echo $SSID

echo &amp;quot;$SSID | $DEVMAC | $STATE |  $NETWORKTYPE | $RADIO | $AUTHENTICATION | $RECEIVE Mbps | $TRANSMIT Mbps | $SIGNAL  ($PWR dB)  &amp;quot;

exit</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>300</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>SSID</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>MAC</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>State</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Network Type</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Radio</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Authentication</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Receive</name>
                <index>6</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Transmit</name>
                <index>7</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Signal (0-5)</name>
                <index>8</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>32</cache_row_id>
          </sensor>
          <sensor>
            <id>64</id>
            <name>Hosted Wireless Ad-Hoc Networks</name>
            <hash>3397569679</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns details of ad-hoc wireless networks are hosted in your environment.  Details include SSID, Mode, Max Clients, Auth, Status, BSSID, Radio Type, Channel, and Connections.
Example: personalwifi | ad-hoc | 1 | Open | active | xx:xx:xx:xx:xx:xx | 802.11g | 11 | 1</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Hosted Wireless Ad-Hoc Networks
&amp;#039;========================================

&amp;#039; This sensor uses netsh output to display details about wireless LAN

Option Explicit

Dim strSep

strSep = &amp;quot;|&amp;quot;
				
&amp;#039; This is a multi-column sensor whose output looks like
&amp;#039; SSID|Mode|Max Clients|Auth|Status|BSSID|Radio Type|Channel|Connections

GetHostedAdHocDetails strSep

Function GetHostedAdHocDetails(strSep)

	Dim objShell,objScriptExec
	Dim strCommand, arrNetshResults, strNetshResults
	Dim strNetshLine
	Dim strMode,strHostedSSID,strMaxClients,strAuth
	Dim strStatus,strBSSID,strRadioType,strChannel,strConnectedClients
	Dim bPrintLine, bNewHostedNetwork
	
	strCommand = &amp;quot;netsh wlan show hostednetwork&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	
	strNetshResults = LCase(objScriptExec.StdOut.ReadAll)
	arrNetshResults = Split(LCase(strNetshResults),vbCrLf)
	
	For Each strNetshLine In arrNetshResults
		strNetshLine = Trim(strNetshLine)
		If InStr(strNetshLine,&amp;quot;hosted network settings&amp;quot;) = 1 Then
			bNewHostedNetwork = True	&amp;#039; if there&amp;#039;s a new hosted network settings entry, it&amp;#039;s time to note a new group
		End If
		If InStr(strNetshLine, &amp;quot;mode&amp;quot;) = 1 Then
			strMode = Trim(Split(strNetshLine,&amp;quot;: &amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;ssid name&amp;quot;) = 1 Then
			strHostedSSID = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
			&amp;#039; ssid is presented in quotes, remove
			strHostedSSID = RemoveOuterCharacters(strHostedSSID,Chr(34))
		End If
		If InStr(strNetshLine, &amp;quot;max number of clients&amp;quot;) = 1 Then
			strMaxClients = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;authentication&amp;quot;) = 1 Then
			strAuth = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;status&amp;quot;) = 1 Then
			strStatus = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If	
		If InStr(strNetshLine,&amp;quot;bssid&amp;quot;) = 1 Then
			strBSSID = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine,&amp;quot;radio type&amp;quot;) = 1 Then
			strRadioType = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine,&amp;quot;channel&amp;quot;) = 1 Then
			strChannel = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine,&amp;quot;number of clients&amp;quot;) = 1 Then &amp;#039; last entry
			strConnectedClients = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
			bPrintLine = True &amp;#039; If we&amp;#039;ve found an Signal Value, it&amp;#039;s time to print the line.
		End If
		If bNewHostedNetwork And bPrintLine Then
			&amp;#039; if it&amp;#039;s a new group, and at last line in the new group, print
			If strStatus = &amp;quot;started&amp;quot; Then
				WScript.Echo strHostedSSID &amp;amp; strSep &amp;amp; strMode &amp;amp; strSep &amp;amp; strMaxClients &amp;amp; strSep &amp;amp; strAuth _
					&amp;amp; strSep &amp;amp; strStatus &amp;amp; strSep &amp;amp; strBSSID &amp;amp; strSep &amp;amp; strRadioType &amp;amp; strSep _
					&amp;amp; strChannel &amp;amp; strSep &amp;amp; strConnectedClients
			End If
			bNewHostedNetwork = False
			bPrintLine = False
		End If
	Next
	
	&amp;#039;Cleanup
	Set objScriptExec = Nothing
	Set objShell = Nothing
End Function &amp;#039;GetHostedAdHocDetails

Function RemoveOuterCharacters(strTemp,strChar)
	Dim intStrLen
	
	intStrLen = Len(strTemp)
	If InStr(strTemp,strChar) = 1 Then
		strTemp = Right(strTemp,intStrLen - 1)
	End If
	intStrLen = Len(strTemp) &amp;#039; has new length
	If InStr(strTemp,strChar) = intStrLen Then
		strTemp = Left(strTemp,intStrLen - 1)
	End If
	
	RemoveOuterCharacters = strTemp
	
End Function &amp;#039;RemoveOuterCharacters</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
# cah
# Created 20140621
# Modified
# looking for Ad-Hoc networks
# windows output to try to match: SSID | Mode | Max Clients | Auth | Status | BSSID | Radio Type | Channel | Connections | 

AIRPATH=&amp;quot;/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources&amp;quot;


#Get SSID
IFS=$&amp;#039;\n&amp;#039; # Set delimiter to IFS
SSIDArray=(` $AIRPATH/airport -s  `)
#echo $SSIDArray[1]



i=0
found=false 
ANS=()
for ssid in &amp;quot;${SSIDArray[@]}&amp;quot;
do 
	:
	if [ $found == &amp;quot;true&amp;quot; ] ; then
		#echo $ssid | grep -v &amp;quot;^$&amp;quot; | grep -v &amp;quot;SSID BSSID  &amp;quot; | sed &amp;#039;s/..:..//g&amp;#039; | sed &amp;#039;s/ -..  ... *//g&amp;#039; | sed &amp;#039;s/\(::\).*  .. /\1 /&amp;#039; | sed &amp;#039;s/WPA\(.*\) WPA2\(.*\)/WPA WPA2 \1 \2/g&amp;#039; | sed &amp;#039;s/(/ /g&amp;#039; | sed &amp;#039;s/)/ /g&amp;#039; | sed &amp;#039;s/::/ | |/g&amp;#039; | sed &amp;#039;s/WPA2/WPA2|/&amp;#039; | sed &amp;#039;s/NONE/NONE|NONE|/g&amp;#039; | sed &amp;#039;s/WEP/WEP|WEP/g&amp;#039; | sed &amp;#039;s/WPA \([^W][^P]\)/WPA| \1/g&amp;#039; | awk &amp;#039;{print $0,&amp;quot;\n&amp;quot;}&amp;#039;
		MySSID=$( echo $ssid | grep -v &amp;quot;SSID BSSID  &amp;quot; | sed &amp;#039;s/^\(.*\) ..:..:..:..:..:.. .*/ \1 /g&amp;#039; )
		BSSID=$( echo $ssid | grep -v &amp;quot;SSID BSSID  &amp;quot; | sed &amp;#039;s/^.* \(..:..:..:..:..:..\) .*/ \1 /g&amp;#039; )
		Channel=$( echo $ssid | grep -v &amp;quot;SSID BSSID  &amp;quot; | sed &amp;#039;s/^.* ..:..:..:..:..:.. //&amp;#039; | awk &amp;#039;{print $2}&amp;#039; ) 	
		Auth=$( echo $ssid | grep -v &amp;quot;SSID BSSID  &amp;quot; | sed &amp;#039;s/^.* ..:..:..:..:..:.. //&amp;#039; | awk &amp;#039;{print $5}&amp;#039; ) 
		echo &amp;quot;$MySSID|$Mode|$MaxClients|$Auth|$Status|$BSSID|$Radio|$Channel|$Connections&amp;quot; | grep -v &amp;quot;^|||||||$&amp;quot;
	else
		teststring=$(echo $ssid | grep IBSS)
		MySSID=&amp;quot;&amp;quot;
		Mode=&amp;quot;&amp;quot;
		MaxClients=&amp;quot;&amp;quot;
		Auth=&amp;quot;&amp;quot;
		Status=&amp;quot;&amp;quot;
		BSSID=&amp;quot;&amp;quot;
		Radio=&amp;quot;&amp;quot;
		Channel=&amp;quot;&amp;quot;
		Connections=&amp;quot;&amp;quot;
		if [[ &amp;quot;$teststring&amp;quot; == *IBSS*network* ]] ; then
			found=true
		fi
  	fi
  	((i++))
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>300</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>SSID</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Mode</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Max Clients</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Auth</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Status</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>BSSID</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Radio Type</name>
                <index>6</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Channel</name>
                <index>7</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Connections</name>
                <index>8</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>33</cache_row_id>
          </sensor>
          <sensor>
            <id>66</id>
            <name>Wireless Networks Using WEP</name>
            <hash>3394404860</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Details of currently active wireless network connection using WEP authentication by client machine.  Details include SSID, MAC address, connection state, network type, radio type, authentication, receive rate, transmit rate, and signal strength.
Example: hotspotwifi | xx-xx-xx-xx-xx-xx | connected | Infrastructure | 802.11g | WEP | 54 | 54 | 99%</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Wireless Networks Using WEP
&amp;#039;========================================

&amp;#039; This sensor uses netsh output to display details about wireless LAN
&amp;#039; returns details of those which have &amp;#039;wep&amp;#039; as the encryption type

Option Explicit

Dim strSep

strSep = &amp;quot;|&amp;quot;
				
&amp;#039; This is a multi-column sensor whose output looks like
&amp;#039; SSID|MAC|State|Network Type|Radio|Authentication|Receive|Transmit|Signal 0-5

GetWepEncryptedWirelessNetworkDetails strSep

Function GetWepEncryptedWirelessNetworkDetails(strSep)

	Dim objShell,objScriptExec
	Dim strCommand, arrNetshResults, strNetshResults
	Dim strNetshLine, strName, strMAC, strState, strSSID
	Dim strNetworkType, strRadioType, strAuthentication
	Dim strReceiveRate, strTransmitRate, strSignal, intSignal
	Dim bPrintLine, bNewInterface
	
	strCommand = &amp;quot;netsh wlan show interfaces&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	
	strNetshResults = LCase(objScriptExec.StdOut.ReadAll)
	arrNetshResults = Split(LCase(strNetshResults),vbCrLf)
	
	For Each strNetshLine In arrNetshResults
		If InStr(strNetshLine,&amp;quot;name&amp;quot;) &amp;gt; 0 Then
			bNewInterface = True	&amp;#039; if there&amp;#039;s a new Name, it&amp;#039;s time to note a new group
			strName = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;physical address&amp;quot;) &amp;gt; 0 Then
			strMAC = Trim(Split(strNetshLine,&amp;quot;: &amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;state&amp;quot;) &amp;gt; 0 Then
			strState = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;ssid&amp;quot;) &amp;gt; 0 And Not InStr(strNetshLine, &amp;quot;bssid&amp;quot;) &amp;gt; 0 Then
			strSSID = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;network type&amp;quot;) &amp;gt; 0 Then
			strNetworkType = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;radio type&amp;quot;) &amp;gt; 0 Then
			strRadioType = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If		
		If InStr(strNetshLine,&amp;quot;authentication&amp;quot;) &amp;gt; 0 Then
			strAuthentication = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine,&amp;quot;receive rate&amp;quot;) &amp;gt; 0 Then
			strReceiveRate = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)) &amp;amp; &amp;quot; Mbps&amp;quot;
		End If
		If InStr(strNetshLine,&amp;quot;transmit rate&amp;quot;) &amp;gt; 0 Then
			strTransmitRate = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)) &amp;amp; &amp;quot; Mbps&amp;quot;
		End If
		If InStr(strNetshLine,&amp;quot;signal&amp;quot;) &amp;gt; 0 Then
			strSignal = Replace(Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)),&amp;quot;%&amp;quot;,&amp;quot;&amp;quot;) &amp;#039; remove %
			intSignal = CInt(CInt(strSignal) / 20)
			bPrintLine = True &amp;#039; If we&amp;#039;ve found an Signal Value, it&amp;#039;s time to print the line.
		End If
		If bNewInterface And bPrintLine Then
			&amp;#039; if it&amp;#039;s a new group, and at last line in the new group, print
			If InStr(LCase(strAuthentication),&amp;quot;wep&amp;quot;) &amp;gt; 0 Then
				WScript.Echo strSSID &amp;amp; strSep &amp;amp; strMAC &amp;amp; strSep &amp;amp; strState &amp;amp; strSep &amp;amp; strNetworkType _
					&amp;amp; strSep &amp;amp; strRadioType &amp;amp; strSep &amp;amp; strAuthentication &amp;amp; strSep &amp;amp; strReceiveRate &amp;amp; strSep _
					&amp;amp; strTransmitRate &amp;amp; strSep &amp;amp; intSignal
			End If
			bNewInterface = False
			bPrintLine = False
		End If
	Next
	
	&amp;#039;Cleanup
	Set objScriptExec = Nothing
	Set objShell = Nothing
End Function &amp;#039;GetWepEncryptedWirelessNetworkDetails</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
# cah
# Created 20140616
# Modified
# looking for wireless networks using WEP and providing their details
# SSID MAC State NetworkType Radio Authentication Receive Transmit Signal(0-5) , delimiter is |
# Quality conversions based off of: http://stackoverflow.com/questions/15797920/how-to-convert-wifi-signal-strength-from-quality-percent-to-rssi-dbm

AIRPATH=&amp;quot;/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources&amp;quot;
RADIO=&amp;quot;unknown&amp;quot;

#Get the wireless interface and mac address
DEVID=$(networksetup -listallhardwareports | grep -A1 Wi-Fi | awk -F &amp;quot;Device: &amp;quot; &amp;#039;{print $2}&amp;#039; | grep -v &amp;quot;^$&amp;quot;)
DEVMAC=$(networksetup -getmacaddress $DEVID | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039; | awk -F&amp;quot;(&amp;quot; &amp;#039;{print $1}&amp;#039;)

IFS=$&amp;#039;\n&amp;#039; # Set delimiter to IFS
SSIDArray=(` $AIRPATH/airport -s | grep -e &amp;quot;\sWEP$&amp;quot; | grep -v &amp;quot;^&amp;amp;&amp;quot; | sed &amp;quot;s/ ..:.*$//g&amp;quot; `)

i=0
ANS=()
for ssid in &amp;quot;${SSIDArray[@]}&amp;quot;
do
	:
	SSID=&amp;quot;$ssid&amp;quot;
	((i++))

	if [ ! &amp;quot;$SSID&amp;quot; ] ; then
		SSID=&amp;quot;Not Available&amp;quot;
		NETWORKTYPE=&amp;quot;Not Available&amp;quot;
		AUTHENTICATION=&amp;quot;Not Available&amp;quot;
		RECEIVE=&amp;quot;Not Available&amp;quot;
		TRANSMIT=&amp;quot;Not Available&amp;quot;
		SIGNAL=&amp;quot;Not Available&amp;quot;
	fi

	if [ &amp;quot;$SSID&amp;quot; != &amp;quot;Not Available&amp;quot; ] ; then
	  STATE=&amp;quot;visible&amp;quot;
	  NETWORKTYPE=&amp;quot;unknown&amp;quot;
	  AUTHENTICATION=&amp;quot;WEP&amp;quot;
	  RECEIVE=&amp;quot;unknown&amp;quot;
	  TRANSMIT=$RECEIVE
	  PWR=$( $AIRPATH/airport -s | grep &amp;quot;$SSID&amp;quot; | awk -F&amp;quot;..:..:.. &amp;quot; &amp;#039;{print $2}&amp;#039;| awk &amp;#039;{print $1}&amp;#039;| grep -v &amp;quot;^$&amp;quot; )
	 #This is to convert from power to MS dummy gauge
		if  (( $PWR &amp;lt;= &amp;quot;-100&amp;quot; )) ; then
		SIGNAL=&amp;quot;0&amp;quot;
	   elif (((  $PWR &amp;gt; &amp;quot;-100&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-93&amp;quot; ))) ; then
		SIGNAL=&amp;quot;1&amp;quot;
	   elif (((  $PWR &amp;gt;= &amp;quot;-93&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-87&amp;quot; ))) ; then
		SIGNAL=&amp;quot;2&amp;quot;
	   elif (((  $PWR &amp;gt;= &amp;quot;-87&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-75&amp;quot; ))) ; then
		SIGNAL=&amp;quot;3&amp;quot;
	   elif ((( $PWR &amp;gt;= &amp;quot;-75&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-50&amp;quot; ))) ; then
		SIGNAL=&amp;quot;4&amp;quot;
	   else
		SIGNAL=&amp;quot;5&amp;quot;
	  fi  
	else 
	  STATE=$( $AIRPATH/airport -I | grep &amp;quot;state:&amp;quot; | awk &amp;#039;{print $2}&amp;#039; )
	  if [ ! &amp;quot;$STATE&amp;quot; ] ; then
		STATE=&amp;quot;off&amp;quot;
	  fi
	fi

	echo &amp;quot;$SSID , $DEVMAC , $STATE ,  $NETWORKTYPE , $RADIO , $AUTHENTICATION , $RECEIVE , $TRANSMIT , $SIGNAL  ($PWR dB)  &amp;quot;

done
exit</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>300</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <subcolumns>
              <subcolumn>
                <name>SSID</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>MAC</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>State</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Netwrok Type</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Radio</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Authentication</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Receive</name>
                <index>6</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Transmit</name>
                <index>7</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Signal 0-5</name>
                <index>8</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>34</cache_row_id>
          </sensor>
          <sensor>
            <id>68</id>
            <name>Unencrypted Wireless Networks</name>
            <hash>1569955801</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Details of wireless networks that are currently open and unencrypted.  Details include SSID, MAC address, connection state, network type, radio type, authentication, receive rate, transmit rate, and signal strength.
Example: hotspotwifi | xx-xx-xx-xx-xx-xx | connected | Infrastructure | 802.11g | WEP | 54 | 54 | 99%</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Unencrypted Wireless Networks
&amp;#039;========================================

&amp;#039; This sensor uses netsh output to display details about wireless LAN
&amp;#039; returns details of those which have &amp;#039;open&amp;#039; as the encryption type

Option Explicit

Dim strSep

strSep = &amp;quot;|&amp;quot;
				
&amp;#039; This is a multi-column sensor whose output looks like
&amp;#039; SSID|MAC|State|Network Type|Radio|Authentication|Receive|Transmit|Signal 0-5

GetUnencryptedWirelessNetworkDetails strSep

Function GetUnencryptedWirelessNetworkDetails(strSep)

	Dim objShell,objScriptExec
	Dim strCommand, arrNetshResults, strNetshResults
	Dim strNetshLine, strName, strMAC, strState, strSSID
	Dim strNetworkType, strRadioType, strAuthentication
	Dim strReceiveRate, strTransmitRate, strSignal, intSignal
	Dim bPrintLine, bNewInterface
	
	strCommand = &amp;quot;netsh wlan show interfaces&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	
	strNetshResults = LCase(objScriptExec.StdOut.ReadAll)
	arrNetshResults = Split(LCase(strNetshResults),vbCrLf)
	
	For Each strNetshLine In arrNetshResults
		If InStr(strNetshLine,&amp;quot;name&amp;quot;) &amp;gt; 0 Then
			bNewInterface = True	&amp;#039; if there&amp;#039;s a new Name, it&amp;#039;s time to note a new group
			strName = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;physical address&amp;quot;) &amp;gt; 0 Then
			strMAC = Trim(Split(strNetshLine,&amp;quot;: &amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;state&amp;quot;) &amp;gt; 0 Then
			strState = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;ssid&amp;quot;) &amp;gt; 0 And Not InStr(strNetshLine, &amp;quot;bssid&amp;quot;) &amp;gt; 0 Then
			strSSID = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;network type&amp;quot;) &amp;gt; 0 Then
			strNetworkType = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;radio type&amp;quot;) &amp;gt; 0 Then
			strRadioType = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If		
		If InStr(strNetshLine,&amp;quot;authentication&amp;quot;) &amp;gt; 0 Then
			strAuthentication = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine,&amp;quot;receive rate&amp;quot;) &amp;gt; 0 Then
			strReceiveRate = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)) &amp;amp; &amp;quot; Mbps&amp;quot;
		End If
		If InStr(strNetshLine,&amp;quot;transmit rate&amp;quot;) &amp;gt; 0 Then
			strTransmitRate = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)) &amp;amp; &amp;quot; Mbps&amp;quot;
		End If
		If InStr(strNetshLine,&amp;quot;signal&amp;quot;) &amp;gt; 0 Then
			strSignal = Replace(Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)),&amp;quot;%&amp;quot;,&amp;quot;&amp;quot;) &amp;#039; remove %
			intSignal = CInt(CInt(strSignal) / 20)
			bPrintLine = True &amp;#039; If we&amp;#039;ve found an Signal Value, it&amp;#039;s time to print the line.
		End If
		If bNewInterface And bPrintLine Then
			&amp;#039; if it&amp;#039;s a new group, and at last line in the new group, print
			If LCase(strAuthentication) = &amp;quot;open&amp;quot; Then
				WScript.Echo strSSID &amp;amp; strSep &amp;amp; strMAC &amp;amp; strSep &amp;amp; strState &amp;amp; strSep &amp;amp; strNetworkType _
					&amp;amp; strSep &amp;amp; strRadioType &amp;amp; strSep &amp;amp; strAuthentication &amp;amp; strSep &amp;amp; strReceiveRate &amp;amp; strSep _
					&amp;amp; strTransmitRate &amp;amp; strSep &amp;amp; intSignal
			End If
			bNewInterface = False
			bPrintLine = False
		End If
	Next
	
	&amp;#039;Cleanup
	Set objScriptExec = Nothing
	Set objShell = Nothing
End Function &amp;#039;GetUnencryptedWirelessNetworkDetails</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
# cah
# Created 20140616
# Modified 20140730
# looking for unencrypted wireless networks and providing their details
# SSID MAC State NetworkType Radio Authentication Receive Transmit Signal(0-5) , delimiter is |
# Quality conversions based off of: http://stackoverflow.com/questions/15797920/how-to-convert-wifi-signal-strength-from-quality-percent-to-rssi-dbm

AIRPATH=&amp;quot;/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources&amp;quot;
RADIO=&amp;quot;unknown&amp;quot;

#Get the wireless interface and mac address
DEVID=$(networksetup -listallhardwareports | grep -A1 Wi-Fi | awk -F &amp;quot;Device: &amp;quot; &amp;#039;{print $2}&amp;#039; | grep -v &amp;quot;^$&amp;quot;)
DEVMAC=$(networksetup -getmacaddress $DEVID | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039; | awk -F&amp;quot;(&amp;quot; &amp;#039;{print $1}&amp;#039;)

IFS=$&amp;#039;\n&amp;#039; # Set delimiter to IFS
SSIDArray=(` $AIRPATH/airport -s | grep -e &amp;quot;\sNONE$&amp;quot; | grep -v &amp;quot;^&amp;amp;&amp;quot; | sed &amp;quot;s/ ..:.*$//g&amp;quot; `)

i=0
ANS=()
for ssid in &amp;quot;${SSIDArray[@]}&amp;quot;
do
	:
	SSID=&amp;quot;$ssid&amp;quot;
	((i++))

	if [ ! &amp;quot;$SSID&amp;quot; ] ; then
		SSID=&amp;quot;Not Available&amp;quot;
		NETWORKTYPE=&amp;quot;Not Available&amp;quot;
		AUTHENTICATION=&amp;quot;Not Available&amp;quot;
		RECEIVE=&amp;quot;Not Available&amp;quot;
		TRANSMIT=&amp;quot;Not Available&amp;quot;
		SIGNAL=&amp;quot;Not Available&amp;quot;
	fi

	if [ &amp;quot;$SSID&amp;quot; != &amp;quot;Not Available&amp;quot; ] ; then
	  STATE=&amp;quot;visible&amp;quot;
	  NETWORKTYPE=&amp;quot;unknown&amp;quot;
	  AUTHENTICATION=&amp;quot;none &amp;quot;
	  RECEIVE=&amp;quot;unknown&amp;quot;
	  TRANSMIT=$RECEIVE
	  PWR=$( $AIRPATH/airport -s | grep &amp;quot;$SSID&amp;quot; | awk -F&amp;quot;..:..:.. &amp;quot; &amp;#039;{print $2}&amp;#039; | awk &amp;#039;{print $1}&amp;#039; )

	 #This is to convert from power to MS dummy gauge
		if  (( $PWR &amp;lt;= &amp;quot;-100&amp;quot; )) ; then
		SIGNAL=&amp;quot;0&amp;quot;
	   elif (((  $PWR &amp;gt; &amp;quot;-100&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-93&amp;quot; ))) ; then
		SIGNAL=&amp;quot;1&amp;quot;
	   elif (((  $PWR &amp;gt;= &amp;quot;-93&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-87&amp;quot; ))) ; then
		SIGNAL=&amp;quot;2&amp;quot;
	   elif (((  $PWR &amp;gt;= &amp;quot;-87&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-75&amp;quot; ))) ; then
		SIGNAL=&amp;quot;3&amp;quot;
	   elif ((( $PWR &amp;gt;= &amp;quot;-75&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-50&amp;quot; ))) ; then
		SIGNAL=&amp;quot;4&amp;quot;
	   else
		SIGNAL=&amp;quot;5&amp;quot;
	  fi  
	else 
	  STATE=$( $AIRPATH/airport -I | grep &amp;quot;state:&amp;quot; | awk &amp;#039;{print $2}&amp;#039; )
	  if [ ! &amp;quot;$STATE&amp;quot; ] ; then
		STATE=&amp;quot;off&amp;quot;
	  fi
	fi

	echo &amp;quot;$SSID | $DEVMAC | $STATE |  $NETWORKTYPE | $RADIO | $AUTHENTICATION | $RECEIVE | $TRANSMIT | $SIGNAL  ( $PWR dB)&amp;quot;

done
exit</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>300</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>SSID</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>MAC</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>State</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Network Type</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Radio</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Authentication</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Receive</name>
                <index>6</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Transmit</name>
                <index>7</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Signal 0-5</name>
                <index>8</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>35</cache_row_id>
          </sensor>
          <sensor>
            <id>70</id>
            <name>Reboot Required</name>
            <hash>568581921</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns data indicating that a reboot is required and, if so, for which reason.
Example: Yes</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Reboot Required
&amp;#039;========================================

&amp;#039;&amp;#039; This sensor checks registry locations to determine if a reboot is required
&amp;#039;&amp;#039; For any reason


Option Explicit
RebootRequired

Function RebootRequired
&amp;#039; This is the main function that determines if a reboot is necessary
&amp;#039; it will have WScript.Echo output and also set a true / false value
&amp;#039; as a return value so it can be used elsewhere

	Dim strFinalOutputString

	Dim strComputer

	Dim strWUAPath
	Dim strPendingFileRenamePath,strPendingFileRenameValueName
	Dim strUpdateExeVolatilePath,strUpdateExeVolatileWowPath,strUpdateExeVolatileFlagsVal
	Dim strRunOncePath,strRunOnceWowPath
	Dim strRunOnceSetupPath,strRunOnceSetupWowPath
	Dim strRunOnceExPath,strRunOnceExWowPath,strRunOnceExTitleVal

	Dim intUpdateExeVolatileFlagsResult

	Dim objReg

	&amp;#039; The checks are all in the Local Machine hive
	Const HKLM = &amp;amp;h80000002

	&amp;#039;&amp;#039; Case 1
	&amp;#039; If the RebootRequired key exists at all, reboot is required
	&amp;#039; Only seems to exist in the native registry (not in Wow6432Node)
	strWUAPath = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired&amp;quot;

	&amp;#039;&amp;#039; Case 2
	&amp;#039; If the Multi String value PendingRenameFileOperations exists at all, reboot is required
	strPendingFileRenamePath = &amp;quot;SYSTEM\CurrentControlSet\Control\Session Manager&amp;quot;
	strPendingFileRenameValueName = &amp;quot;PendingFileRenameOperations&amp;quot;

	&amp;#039;&amp;#039; Case 3
	&amp;#039; If the UpdateExeVolatile key&amp;#039;s DWORD value &amp;#039;flags&amp;#039; is 1 or 2, reboot is required
	&amp;#039; Does exist in the native registry (in Wow6432Node) as well
	strUpdateExeVolatilePath = &amp;quot;SOFTWARE\Microsoft\Updates\UpdateExeVolatile&amp;quot;
	strUpdateExeVolatileWowPath = &amp;quot;SOFTWARE\Wow6432Node\Microsoft\Updates\UpdateExeVolatile&amp;quot;
	strUpdateExeVolatileFlagsVal = &amp;quot;flags&amp;quot;

	&amp;#039;&amp;#039; Case 4
	&amp;#039;&amp;#039; If there are any values in the RunOnce key, reboot is required
	&amp;#039; Does exist in the native registry (in Wow6432Node) as well
	strRunOncePath = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce&amp;quot;
	strRunOnceWowPath = &amp;quot;SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\RunOnce&amp;quot;

	&amp;#039;&amp;#039; Case 5
	&amp;#039; If there is anything in the RunOnce\Setup key, reboot is required
	&amp;#039; Does exist in the native registry (in Wow6432Node) as well
	strRunOnceSetupPath = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce\Setup&amp;quot;
	strRunOnceSetupWowPath = &amp;quot;SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\RunOnce\Setup&amp;quot;

	&amp;#039;&amp;#039; Case 6
	&amp;#039; If there is anything in the RunOnceEx key&amp;#039;s Title Value, a reboot is required
	&amp;#039; Does exist in the native registry (in Wow6432Node) as well
	strRunOnceExPath = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx&amp;quot;
	strRunOnceExWowPath = &amp;quot;SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\RunOnceEx&amp;quot;
	strRunOnceExTitleVal = &amp;quot;Title&amp;quot;

	&amp;#039;&amp;#039; Case 7
	&amp;#039; RebootNeeded from UpdateSearcher class

	Set objReg=Getx64RegistryProvider()

	strFinalOutputString = &amp;quot;&amp;quot;

	&amp;#039; Now we begin the process of checking the various registry areas to determine if a reboot is needed

	&amp;#039; Case 1
	If RegKeyExists(objReg, HKLM, strWUAPath) Then
		strFinalOutputString = strFinalOutputString &amp;amp; strWUAPath &amp;amp; vbCrLf
	End If

	&amp;#039; Case 2
	If MultiStringValueExists(objReg,HKLM,strPendingFileRenamePath,strPendingFileRenameValueName) Then
		strFinalOutputString = strFinalOutputString &amp;amp; strPendingFileRenamePath &amp;amp; &amp;quot;: &amp;quot; &amp;amp; strPendingFileRenameValueName &amp;amp; vbCrLf
	End If

	&amp;#039; Case 3
	intUpdateExeVolatileFlagsResult = GetDWORDValue(objReg,HKLM,strUpdateExeVolatilePath,strUpdateExeVolatileFlagsVal)
	If intUpdateExeVolatileFlagsResult = 1 OR intUpdateExeVolatileFlagsResult = 2 Then
		strFinalOutputString = strFinalOutputString &amp;amp; strUpdateExeVolatilePath &amp;amp; &amp;quot;: &amp;quot; &amp;amp; strUpdateExeVolatileFlagsVal &amp;amp; vbCrLf
	End If

	intUpdateExeVolatileFlagsResult = GetDWORDValue(objReg,HKLM,strUpdateExeVolatileWowPath,strUpdateExeVolatileFlagsVal)
	If intUpdateExeVolatileFlagsResult = 1 OR intUpdateExeVolatileFlagsResult = 2 Then
		strFinalOutputString = strFinalOutputString &amp;amp; strUpdateExeVolatileWowPath &amp;amp; &amp;quot;: &amp;quot; &amp;amp; strUpdateExeVolatileFlagsVal &amp;amp; vbCrLf
	End If

	&amp;#039; Case 4
	If ValuesExist(objReg,HKLM,strRunOncePath) Then
		strFinalOutputString = strFinalOutputString &amp;amp; strRunOncePath &amp;amp; vbCrLf
	End If

	If ValuesExist(objReg,HKLM,strRunOnceWowPath) Then
		strFinalOutputString = strFinalOutputString &amp;amp; strRunOnceWowPath &amp;amp; vbCrLf
	End If

	&amp;#039; Case 5
	If ValuesExist(objReg,HKLM,strRunOnceSetupPath) Then
		strFinalOutputString = strFinalOutputString &amp;amp; strRunOnceSetupPath &amp;amp; vbCrLf
	End If

	If ValuesExist(objReg,HKLM,strRunOnceSetupWowPath) Then
		strFinalOutputString = strFinalOutputString &amp;amp; strRunOnceSetupWowPath &amp;amp; vbCrLf
	End If

	&amp;#039; Case 6
	If StringValueExists(objReg,HKLM,strRunOnceExPath,strRunOnceExTitleVal) Then
		strFinalOutputString = strFinalOutputString &amp;amp; strRunOnceExPath &amp;amp; &amp;quot;: &amp;quot; &amp;amp; strRunOnceExTitleVal &amp;amp; vbCrLf
	End If

	If StringValueExists(objReg,HKLM,strRunOnceExWowPath,strRunOnceExTitleVal) Then
		strFinalOutputString = strFinalOutputString &amp;amp; strRunOnceExWowPath &amp;amp; &amp;quot;: &amp;quot; &amp;amp; strRunOnceExTitleVal &amp;amp; vbCrLf
	End If

	&amp;#039; Case 7
	If UpdateSystemInfoRebootRequired Then
		strFinalOutputString = strFinalOutputString &amp;amp; &amp;quot;Microsoft.Update.SystemInfo:RebootRequired&amp;quot; &amp;amp; vbCrLf
	End If


	&amp;#039;&amp;#039; At the end of the process, if strFinalOutputString is &amp;quot;&amp;quot; the sensor output is &amp;quot;No&amp;quot;
	&amp;#039;&amp;#039; Otherwise, the output is the value of strFinalOutputString

	If strFinalOutputString = &amp;quot;&amp;quot; Then
		WScript.Echo &amp;quot;No&amp;quot;
		RebootRequired = false
	Else
		WScript.Echo &amp;quot;Yes&amp;quot; &amp;amp; vbcrlf &amp;amp; strFinalOutputString
		RebootRequired = true
	End If
End Function &amp;#039;RebootRequired

Function ValuesExist(objRegistry, HIVE, strKeyPath)
&amp;#039; This function checks to see if a registry value exists
&amp;#039; and returns true or false
	Dim arrValueNames, arrTypes
	
	objRegistry.EnumValues HIVE, strKeyPath, arrValueNames, arrTypes
	
	If IsNull(arrValueNames) Then
		ValuesExist = false
	Else
		ValuesExist = true
	End If	
End Function

Function StringValueExists(objRegistry, HIVE, strKeyPath, strValueName)
	Dim strValue
	
	objRegistry.GetStringValue HIVE, strKeyPath, strValueName, strValue
	
	If IsNull(strValue) Then
		StringValueExists = false
	Else
		StringValueExists = true
	End If	
End Function

Function GetDWORDValue(objRegistry, HIVE, strKeyPath, strValueName)
	Dim uintValue
	
	objRegistry.GetDWORDValue HIVE, strKeyPath, strValueName, uintValue
	
	If IsNull(uintValue) Then
		GetDWORDValue = false
	Else
		GetDWORDValue = uintValue
	End If	
End Function

Function DWORDValueExists(objRegistry, HIVE, strKeyPath, strValueName)
	Dim uintValue
	
	objRegistry.GetDWORDValue HIVE, strKeyPath, strValueName, uintValue
	
	If IsNull(uintValue) Then
		DWORDValueExists = false
	Else
		DWORDValueExists = true
	End If
End Function

&amp;#039; For checking multi-string value exists
Function MultiStringValueExists(objRegistry, HIVE, strKeyPath, strValueName)
	Dim arrValues

	objRegistry.GetMultiStringValue HIVE,strKeyPath,strValueName,arrValues

	If IsNull(arrValues) Then
		MultiStringValueExists = false
	Else
		MultiStringValueExists = true
	End If
End Function


&amp;#039; For checking whether a key exists at all
Function RegKeyExists(objRegistry, sHive, sRegKey)
   Dim aValueNames, aValueTypes
   If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
      RegKeyExists = True
   Else
      RegKeyExists = False
   End If
End Function

Function UpdateSystemInfoRebootRequired()
&amp;#039; This will return true if a reboot is needed
&amp;#039; as indicated by the update.systeminfo object
   
	Dim objSystemInfo,bRebootRequired
   
	bRebootRequired = False
	Set objSystemInfo = WScript.CreateObject(&amp;quot;Microsoft.Update.SystemInfo&amp;quot;)
	
	bRebootRequired = objSystemInfo.rebootrequired 

	UpdateSystemInfoRebootRequired = bRebootRequired
	Set objSystemInfo = nothing
End Function &amp;#039; UpdateSystemInfoRebootRequired


Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
if [ -f /var/run/reboot-required ]; then
  echo &amp;#039;Yes&amp;#039;
else
  echo &amp;#039;No&amp;#039;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
if [ -f /var/run/reboot-required ]; then
  echo &amp;#039;Yes&amp;#039;
else
  echo &amp;#039;No&amp;#039;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>36</cache_row_id>
          </sensor>
          <sensor>
            <id>72</id>
            <name>CPU Speed Mhz</name>
            <hash>1646244079</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The speed of the processor in Mhz.
Example: 3200 Mhz</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; CPU Speed Mhz
&amp;#039;========================================

On Error Resume Next

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)

Set colItems = objWMIService.ExecQuery(&amp;quot;select MaxClockSpeed from win32_processor&amp;quot;)

For Each objItem in colItems
    strSpeed = objItem.MaxClockSpeed
    intSpeed = CInt(CInt(strSpeed)/10)*10
    WScript.Echo intSpeed &amp;amp; &amp;quot; Mhz&amp;quot;
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
line=$(grep -m 1 -i &amp;quot;cpu MHz&amp;quot; /proc/cpuinfo)
set -- $line
TGHZ=&amp;quot;`echo ${line#*:} | awk &amp;#039;{ printf &amp;quot;%0.1f&amp;quot;, $0/1000 }&amp;#039;`&amp;quot;
TMHZ=&amp;quot;`echo &amp;quot;$TGHZ&amp;quot; | awk &amp;#039;{ print ($0 * 1000) }&amp;#039;`&amp;quot;
#echo &amp;quot;$TGHZ GHz&amp;quot;
echo &amp;quot;$TMHZ Mhz&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
ftemp=$(mktemp -t &amp;#039;apps.xml&amp;#039;)
system_profiler -xml SPHardwareDataType &amp;gt; &amp;quot;$ftemp&amp;quot;

cpu=`/usr/libexec/PlistBuddy -c &amp;quot;Print :0:_items:0:current_processor_speed&amp;quot; $ftemp 2&amp;gt;/dev/null | awk -F &amp;#039; &amp;#039; &amp;#039;{print $1}&amp;#039;`
t=&amp;quot;$(echo &amp;quot;$cpu*1000&amp;quot; | bc)&amp;quot;
echo $t | awk -F &amp;#039;.&amp;#039; &amp;#039;{print $1&amp;quot; Mhz&amp;quot;}&amp;#039;

rm -rf &amp;quot;$ftemp&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
psrinfo -v 0 | grep MHz |sed s/,// | awk &amp;#039;{ print $6,$7 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Return CPU speed in Mhz
MHZ=&amp;quot;$(lsattr -E -l proc0 | grep &amp;quot;Processor Speed&amp;quot; | awk &amp;#039;{ printf &amp;quot;%0.1f&amp;quot;, $2/1000000 }&amp;#039;| sed s/\.0//)&amp;quot;
echo &amp;quot;$MHZ Mhz&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>37</cache_row_id>
          </sensor>
          <sensor>
            <id>74</id>
            <name>CPU Consumption</name>
            <hash>1260646358</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Current total CPU consumption in %.
Example: 50%</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; CPU Consumption
&amp;#039;========================================

Const HKLM = &amp;amp;H80000002 
strComputer = &amp;quot;.&amp;quot;

Set objWMIService = _
  	GetObject(&amp;quot;Winmgmts:{impersonationlevel=impersonate}!\Root\Cimv2&amp;quot;)

Set colProcItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process where Name = &amp;#039;Idle&amp;#039;&amp;quot;)
For Each objItem in colProcItems
	N1 = objItem.PercentProcessorTime
	D1 = objItem.TimeStamp_Sys100NS
Next

WScript.sleep(3000)
	
Set colProcItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process where Name = &amp;#039;Idle&amp;#039;&amp;quot;)
For Each objItem in colProcItems
	N2 = objItem.PercentProcessorTime
	D2 = objItem.TimeStamp_Sys100NS
Next

numLogicalProcessors = 0

Set colItems = objWMIService.ExecQuery(&amp;quot;SELECT * FROM Win32_Processor&amp;quot;) 
For Each objItem in colItems 
	Dim intLogicalProcessors 
	intLogicalProcessors = 1
	
	On Error Resume Next
	intLogicalProcessors = CInt(objItem.NumberOfLogicalProcessors)
	On Error Goto 0

	numLogicalProcessors = numLogicalProcessors + intLogicalProcessors
Next

&amp;#039; CounterType - PERF_100NSEC_TIMER
&amp;#039; Formula = ((N2 - N1) / (D2 - D1)) x 100
If ( 0 = (D2-D1) ) Or D1 &amp;gt; D2 then
	WScript.echo &amp;quot;System Timestamp Error&amp;quot;
ElseIf N1 &amp;gt; N2 Then
	WScript.Echo &amp;quot;Performance Counter Error&amp;quot;
Else
	percentage = Round(100 - ((N2 - N1) / (D2 - D1)) * 100 / numLogicalProcessors, 0)
	WScript.echo percentage &amp;amp; &amp;quot; %&amp;quot;
End if

Set wmi_service = nothing</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
cpu=`top -bn 1 | awk &amp;#039;{print $9}&amp;#039; | tail -n +8 | awk &amp;#039;{s+=$1} END {print s}&amp;#039;`
echo &amp;quot;${cpu} %&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

user=$(top -l 1 | grep &amp;#039;^CPU usage:&amp;#039; | awk &amp;#039;{print $3}&amp;#039; | awk -F\. &amp;#039;{print $1}&amp;#039;)
sys=$(top -l 1 | grep &amp;#039;^CPU usage:&amp;#039; | awk &amp;#039;{print $5}&amp;#039; | awk -F\. &amp;#039;{print $1}&amp;#039;)
total=$(expr $user + $sys)
echo $total \%</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>38</cache_row_id>
          </sensor>
          <sensor>
            <id>76</id>
            <name>Logged In Users</name>
            <hash>1092986182</hash>
            <string_count>0</string_count>
            <category>User</category>
            <description>Provides a list of users currently logged in to the client machine.  Includes Remote Desktop sessions on Windows.
Example: Administrator</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Logged In Users
&amp;#039;========================================

Option Explicit

Dim objWMIService,colItems,objItem,strUser,strUserDomain,strFullUser,i

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;) 
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Process Where Name=&amp;#039;explorer.exe&amp;#039;&amp;quot;,,48)

i = 0
For Each objItem in colItems
	objItem.GetOwner strUser, strUserDomain
	strFullUser = strUserDomain &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strUser
	i = i + 1
	WScript.Echo strFullUser
Next

If i = 0 Then
	Wscript.Echo &amp;quot;No User&amp;quot;
End If</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
who -u | cut -d&amp;quot; &amp;quot; -f1 | sort | uniq</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
w -h | sort -u -t&amp;#039; &amp;#039; -k1,1 | awk &amp;#039;{print $1}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/bash
who -u | cut -d&amp;quot; &amp;quot; -f1 | sort | uniq</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
who -u | cut -d&amp;quot; &amp;quot; -f1 | sort | uniq</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>39</cache_row_id>
          </sensor>
          <sensor>
            <id>78</id>
            <name>High Uptime</name>
            <hash>1263879283</hash>
            <string_count>0</string_count>
            <category>Software</category>
            <description>Indicates whether the client machine has been online for more than 30 days.
Example: Less than 30 days</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; High Uptime
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;     
set objWMIDateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)  
set objWMI = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)  
set colOS = objWMI.InstancesOf(&amp;quot;Win32_OperatingSystem&amp;quot;)  

&amp;#039;Uses date math - set locale

SetLocale(1033)

for each objOS in colOS   
objWMIDateTime.Value = objOS.LastBootUpTime              
If TimeSpan(objWMIDateTime.GetVarDate,Now) &amp;gt; 30 Then          
Wscript.echo TimeSpan(objWMIDateTime.GetVarDate,Now) &amp;amp; &amp;quot; days&amp;quot;  
Else          
Wscript.echo &amp;quot;Less than30&amp;quot;          
End If  
next    
Function TimeSpan(dt1, dt2)    
If (isDate(dt1) And IsDate(dt2)) = false Then     
TimeSpan = &amp;quot;00:00:00&amp;quot;     
Exit Function           
End If              
seconds = Abs(DateDiff(&amp;quot;S&amp;quot;, dt1, dt2))           
minutes = seconds \ 60           
hours = minutes \ 60           
days = hours \ 24           
minutes = minutes mod 60           
seconds = seconds mod 60              
TimeSpan = days  
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

if ! out=$(uptime | grep day) ; then
	echo &amp;#039;Less than 30&amp;#039;
else
	days=$(echo $out | awk &amp;#039;{print $3}&amp;#039;)
	if [ 30 -lt &amp;quot;$days&amp;quot; ] ; then
		echo &amp;quot;$days days&amp;quot;
	else
		echo &amp;#039;Less than 30&amp;#039;
	fi
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

if ! out=$(uptime | grep day) ; then
	echo &amp;#039;Less than 30&amp;#039;
else
	days=$(echo $out | awk &amp;#039;{print $3}&amp;#039;)
	if [ 30 -lt &amp;quot;$days&amp;quot; ] ; then
		echo &amp;quot;$days days&amp;quot;
	else
		echo &amp;#039;Less than 30&amp;#039;
	fi
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

if ! out=`uptime | grep day` ; then
	echo &amp;#039;Less than 30&amp;#039;
else
	days=`echo $out | awk &amp;#039;{print $3}&amp;#039;`
	if [ 30 -lt &amp;quot;$days&amp;quot; ] ; then
		echo &amp;quot;$days days&amp;quot;
	else
		echo &amp;#039;Less than 30&amp;#039;
	fi
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

if ! out=$(uptime | grep day) ; then
	echo &amp;#039;Less than 30&amp;#039;
else
	days=$(echo $out | awk &amp;#039;{print $3}&amp;#039;)
	if [ 30 -lt &amp;quot;$days&amp;quot; ] ; then
		echo &amp;quot;$days days&amp;quot;
	else
		echo &amp;#039;Less than 30&amp;#039;
	fi
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>40</cache_row_id>
          </sensor>
          <sensor>
            <id>80</id>
            <name>High CPU Processes</name>
            <hash>2711879278</hash>
            <string_count>0</string_count>
            <category>Miscellaneous</category>
            <description>Lists the specified number of processes that are using the highest amount of CPU.
Example: cmd</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; High CPU Processes
&amp;#039;========================================

topNum = Trim(Unescape(&amp;quot;||numOutput||&amp;quot;))
If Not IsNumeric(topNum) Then 
	WScript.Echo &amp;quot;Parameter Not Number&amp;quot;
	WScript.Quit
End If 
topNum = Cint(topNum)

printPercent = false
Const HKLM = &amp;amp;H80000002 
strComputer = &amp;quot;.&amp;quot;

Set objWMIService = GetObject(&amp;quot;Winmgmts:{impersonationlevel=impersonate}!\Root\Cimv2&amp;quot;)

Const MaxCharacters = 255
Const adBSTR = 8 
Const adDouble = 5

Set DataList = CreateObject(&amp;quot;ADOR.Recordset&amp;quot;)
DataList.Fields.Append &amp;quot;ProcessName&amp;quot;, adBSTR, MaxCharacters
DataList.Fields.Append &amp;quot;ProcessCPU1&amp;quot;, adDouble
DataList.Fields.Append &amp;quot;ProcessCPU2&amp;quot;, adDouble
DataList.Fields.Append &amp;quot;ProcessCPUDiff&amp;quot;, adDouble
DataList.Open

Dim total1, total2, totalDiff

Set colProcItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process&amp;quot;)   
For Each objItem in colProcItems
   If objItem.Name &amp;lt;&amp;gt; &amp;quot;Idle&amp;quot; And objItem.Name &amp;lt;&amp;gt; &amp;quot;_Total&amp;quot; Then
      DataList.AddNew
      DataList(&amp;quot;ProcessName&amp;quot;) = objItem.Name
      DataList(&amp;quot;ProcessCPU1&amp;quot;) = objItem.PercentProcessorTime
      DataList.Update
   ElseIf objItem.Name = &amp;quot;_Total&amp;quot; Then 
      total1 = CDbl(objItem.PercentProcessorTime)
   End If
Next

sleep = 5
WScript.Sleep(sleep * 1000)

Set colProcItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process&amp;quot;)   
For Each objItem in colProcItems
   If objItem.Name &amp;lt;&amp;gt; &amp;quot;Idle&amp;quot; And objItem.Name &amp;lt;&amp;gt; &amp;quot;_Total&amp;quot; Then
      
      DataList.MoveFirst
      DataList.Find(&amp;quot;ProcessName = &amp;#039;&amp;quot;&amp;amp; objItem.Name&amp;amp;&amp;quot;&amp;#039;&amp;quot;)

      If DataList.EOF Then
              WScript.Echo &amp;quot;** Not Found **&amp;quot;
      Else
         DataList(&amp;quot;ProcessCPU2&amp;quot;) = objItem.PercentProcessorTime
         DataList(&amp;quot;ProcessCPUDiff&amp;quot;) = DataList(&amp;quot;ProcessCPU2&amp;quot;) - DataList(&amp;quot;ProcessCPU1&amp;quot;)
         DataList.Update
           &amp;#039;WScript.Echo &amp;quot;name: &amp;quot; &amp;amp; DataList.Fields.Item(&amp;quot;ProcessName&amp;quot;) &amp;amp; &amp;quot;, cpu 1: &amp;quot; &amp;amp; DataList.Fields.Item(&amp;quot;ProcessCPU1&amp;quot;) &amp;amp; &amp;quot;, cpu 2: &amp;quot; &amp;amp; DataList.Fields.Item(&amp;quot;ProcessCPU2&amp;quot;)
      End if
   ElseIf objItem.Name = &amp;quot;_Total&amp;quot; Then 
      total2 = CDbl(objItem.PercentProcessorTime)
      totalDiff = total2 - total1
   End If
Next

DataList.Sort = &amp;quot;ProcessCPUDiff DESC&amp;quot;
DataList.MoveFirst
i = 1
Do Until DataList.EOF  Or i &amp;gt; topNum
   strPrint = CleanString(DataList.Fields.Item(&amp;quot;ProcessName&amp;quot;))
   If printPercent Then
      strPrint = strPrint &amp;amp; &amp;quot; (&amp;quot; &amp;amp; Round(DataList.Fields.Item(&amp;quot;ProcessCPUDiff&amp;quot;) / totalDiff * 100, 0) &amp;amp; &amp;quot;%)&amp;quot;
   End if   
   WScript.Echo strPrint
   DataList.MoveNext
   i = i + 1
Loop

WScript.Quit

&amp;#039;removes .exe and process number at end of 
Function CleanString(str)
	words = Split(str, &amp;quot;#&amp;quot;)
	str = words(0)
	CleanString = str

	If Right(str, 4) = &amp;quot;.exe&amp;quot; Then
		str = Left(str, Len(str) - 4)
	End If 
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

COLUMNS=200 
percent_decode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

howMany=$(percent_decode &amp;quot;||numOutput||&amp;quot;)
ps -eo &amp;quot;%cpu comm&amp;quot; | grep -v &amp;#039;^%CPU&amp;#039; | sort -rn | head -&amp;quot;$howMany&amp;quot; | sed &amp;#039;s/^[ ]*[^ ]*[ ]*//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

COLUMNS=200 
percent_decode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

howMany=$(percent_decode &amp;quot;||numOutput||&amp;quot;)
ps -eo &amp;quot;%cpu comm&amp;quot; | grep -v &amp;#039;^%CPU&amp;#039; | sort -rn | head -&amp;quot;$howMany&amp;quot; | sed &amp;#039;s/^[ ]*[^ ]*[ ]*//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Processes&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;numOutput&amp;quot;,&amp;quot;maximum&amp;quot;:50,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of processes to return&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||numOutput||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Processes&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;numOutput&amp;quot;,&amp;quot;maximum&amp;quot;:50,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of processes to return&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||numOutput||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Number of Processes","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of processes to return","defaultValue":"5","key":"numOutput","maximum":50,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>41</cache_row_id>
          </sensor>
          <sensor>
            <id>82</id>
            <name>High Memory Processes</name>
            <hash>1527458369</hash>
            <string_count>0</string_count>
            <category>Miscellaneous</category>
            <description>Lists the specified number processes based on ordering on amount of memory used.
Example: cmd</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; High Memory Processes
&amp;#039;========================================

topNum = Trim(Unescape(&amp;quot;||numOutput||&amp;quot;))
If Not IsNumeric(topNum) Then 
	WScript.Echo &amp;quot;Parameter Not Number&amp;quot;
	WScript.Quit
End If 
topNum = Cint(topNum)

printMemory = false

Dim objWMIService, objItem, colItems, query
Dim strComputer, strList


strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer&amp;amp; &amp;quot;\root\cimv2&amp;quot;)

Const MaxCharacters = 255
Const adBSTR = 8 
Const adDouble = 5
Set DataList = CreateObject(&amp;quot;ADOR.Recordset&amp;quot;)
DataList.Fields.Append &amp;quot;ProcessName&amp;quot;, adBSTR, MaxCharacters
DataList.Fields.Append &amp;quot;ProcessMemory&amp;quot;, adDouble

DataList.Open

Set colProcs = objWMIService.ExecQuery(&amp;quot;Select Name, WorkingSetSize From Win32_Process&amp;quot;)
For Each proc in colProcs
   DataList.AddNew
   DataList(&amp;quot;ProcessName&amp;quot;) = proc.Name
   DataList(&amp;quot;ProcessMemory&amp;quot;) = round(cdbl(proc.WorkingSetSize)/1024/1024, 0)
   DataList.Update
Next
DataList.Sort = &amp;quot;ProcessMemory DESC&amp;quot;
DataList.MoveFirst
i = 1
Do Until DataList.EOF Or i &amp;gt; topNum
   Set field = DataList.Fields
   strPrint = CleanString(DataList.Fields.Item(&amp;quot;ProcessName&amp;quot;))
   If printMemory Then
      strPrint = strPrint &amp;amp; &amp;quot; (&amp;quot; &amp;amp; DataList.Fields.Item(&amp;quot;ProcessMemory&amp;quot;) &amp;amp; &amp;quot; Mb)&amp;quot;
   End if   
   WScript.Echo strPrint
   DataList.MoveNext
   i = i + 1
Loop

WScript.Quit

&amp;#039;removes .exe and process number at end of process
Function CleanString(str)
	words = Split(str, &amp;quot;#&amp;quot;)
	str = words(0)

	If Right(str, 4) = &amp;quot;.exe&amp;quot; Then
		str = Left(str, Len(str) - 4)
	End If 
	CleanString = str
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

COLUMNS=200 
percent_decode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

howMany=$(percent_decode &amp;quot;||numOutput||&amp;quot;)
ps -eo &amp;quot;%mem comm&amp;quot; | grep -v &amp;#039;^%CPU&amp;#039; | sort -rn | head -&amp;quot;$howMany&amp;quot; | sed &amp;#039;s/^[ ]*[^ ]*[ ]*//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

COLUMNS=200 
percent_decode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

howMany=$(percent_decode &amp;quot;||numOutput||&amp;quot;)
ps -eo &amp;quot;%mem comm&amp;quot; | grep -v &amp;#039;^%CPU&amp;#039; | sort -rn | head -&amp;quot;$howMany&amp;quot; | sed &amp;#039;s/^[ ]*[^ ]*[ ]*//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Processes&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;numOutput&amp;quot;,&amp;quot;maximum&amp;quot;:50,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of processes to return&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||numOutput||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Processes&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;numOutput&amp;quot;,&amp;quot;maximum&amp;quot;:50,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of processes to return&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||numOutput||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Number of Processes","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of processes to return","defaultValue":"5","key":"numOutput","maximum":50,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>42</cache_row_id>
          </sensor>
          <sensor>
            <id>84</id>
            <name>Disk Free Space Below Threshold</name>
            <hash>1043670154</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>If a drive has less free space than the configured threshold, the drive and remaining free space is returned.  The threshold defaults to 2048 MB and can be altered.
Example: C: 1 GB</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Disk Free Space Below Threshold
&amp;#039;========================================

mbThreshold = 2048

strComputer = &amp;quot;.&amp;quot;  
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)  
Set colDisks = objWMIService.ExecQuery (&amp;quot;Select * from Win32_LogicalDisk where DriveType=3&amp;quot;)    
For Each objDisk in colDisks      
FreeMB = objDisk.FreeSpace/1024000    
if (FreeMB &amp;lt;&amp;gt; &amp;quot;&amp;quot; and FreeMB &amp;lt; mbThreshold and FreeMB &amp;lt;&amp;gt; 0) THEN      
FreeGB = FreeMB/1024      
Wscript.Echo objDisk.DeviceID &amp;amp; &amp;quot; &amp;quot; &amp;amp; Round(FreeGB) &amp;amp; &amp;quot; GB&amp;quot;    
END IF  
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

mbThreshold=2048

df -TPk | grep -vE &amp;quot;Use%|tmpfs|Available&amp;quot; |while read line
do
	set -- $line
	kb=$(echo $5 | sed &amp;#039;s/[KMG]$//&amp;#039;)
	mb=$( expr $kb / 1024 )
	if [ $mb -le $mbThreshold ] ; then
		echo $7: $mb
	fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

mbThreshold=2048

df -k | grep &amp;quot;^\/dev\/&amp;quot; | while read line
do
	set -- $line
	mb=$( expr $4 / 1024 )
	if [ $mb -le $mbThreshold ] ; then
		echo $1: $mb
	fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>43</cache_row_id>
          </sensor>
          <sensor>
            <id>86</id>
            <name>RAM</name>
            <hash>4279567267</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the total amount of installed RAM, in Megabytes.
Example: 2048 MB</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; RAM
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
&amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; _
&amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colComputer = objWMIService.ExecQuery _
(&amp;quot;Select * from Win32_ComputerSystem&amp;quot;)

For Each objComputer in colComputer
   intRamMB = int((objComputer.TotalPhysicalMemory) /1048576)+1
   Wscript.Echo intRamMB &amp;amp; &amp;quot; MB&amp;quot;
Next

WScript.Quit</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
cat /proc/meminfo 2&amp;gt;/dev/null | grep MemTotal | awk &amp;#039;{ print $2 }&amp;#039; | awk &amp;#039;{$1/=1024;printf &amp;quot;%.0f MB\n&amp;quot;,$1}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
system_profiler SPHardwareDataType | grep &amp;#039;Memory:&amp;#039; | awk -F&amp;#039;: &amp;#039; &amp;#039;{print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
ram=$(prtconf | grep Memory | awk &amp;#039;{ print $3 }&amp;#039;)
echo &amp;quot;${ram}MB&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
MEM=$(lsattr -E -l mem0| egrep ^size | awk &amp;#039;{ print $2 }&amp;#039;)
echo &amp;quot;$MEM MB&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>44</cache_row_id>
          </sensor>
          <sensor>
            <id>88</id>
            <name>Memory Consumption</name>
            <hash>2177703669</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the percentage of used (committed) memory on a system.
Example: 27 percent</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Memory Consumption
&amp;#039;========================================

Option Explicit

Dim objWMIService, colItems, objItem, strLinePercentCommittedBytesInUse

Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
 
&amp;#039;Gets MEMORY Usage
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * FROM Win32_PerfFormattedData_PerfOS_Memory &amp;quot;)
For Each objItem In colItems  
 strLinePercentCommittedBytesInUse = objItem.PercentCommittedBytesInUse
 wscript.echo strLinePercentCommittedBytesInUse &amp;amp; &amp;quot; %&amp;quot;
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
top -bn1 | grep -m1 Mem | sed -e &amp;#039;s/k/ /g&amp;#039; -e &amp;#039;s/KiB //g&amp;#039; -e &amp;#039;s/Mem :/Mem:/g&amp;#039;| awk &amp;#039;{ printf(&amp;quot;%.2d&amp;quot;,($4 / $2) * 100 );print &amp;quot; %&amp;quot; }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
MAX=$(top -l1 | grep &amp;quot;^PhysMem:&amp;quot; | sed s/G//g | awk -F: &amp;#039;{print $2}&amp;#039; | awk &amp;#039;{print $1}&amp;#039;)
MAX=$(($MAX*1024*1024*1024))

WIRED_BLOCKS=$(vm_stat | grep wired | awk &amp;#039;{ print $4 }&amp;#039; | sed &amp;#039;s/\.//&amp;#039;)
WIRED=$(($WIRED_BLOCKS*4096))

ACTIVE_BLOCKS=$(vm_stat | grep &amp;#039; active&amp;#039; | awk &amp;#039;{ print $3 }&amp;#039; | sed &amp;#039;s/\.//&amp;#039;)
ACTIVE=$(($ACTIVE_BLOCKS*4096))

INACTIVE_BLOCKS=$(vm_stat | grep inactive | awk &amp;#039;{ print $3 }&amp;#039; | sed &amp;#039;s/\.//&amp;#039;)
INACTIVE=$(($INACTIVE_BLOCKS*4096))

COMPRESSED_BLOCKS=$(vm_stat | grep occupied | awk &amp;#039;{ print $5 }&amp;#039; | sed &amp;#039;s/\.//&amp;#039;)
COMPRESSED=$(($COMPRESSED_BLOCKS*4096))

TOTAL_USED=$(($WIRED+$ACIVE+$INACTIVE+COMPRESSED))
echo $TOTAL_USED $MAX | awk &amp;#039;{ printf(&amp;quot;%.2d&amp;quot;,($1 / $2 ) * 100 );print &amp;quot; %&amp;quot; }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
free=$(vmstat | tail -1| awk &amp;#039;{ print $5 }&amp;#039;)
freeMB=$(expr 110648 / 1024)
echo &amp;quot;${freeMB}MB&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>45</cache_row_id>
          </sensor>
          <sensor>
            <id>90</id>
            <name>Service Pack</name>
            <hash>2881145629</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>The Service Pack level of the machine if available, and "No Service Pack found" if unavailable.
Example: Service Pack 1</description>
            <creation_time>2015-09-14T13:39:10</creation_time>
            <modification_time>2015-09-14T13:39:10</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Service Pack
&amp;#039;========================================

On Error Resume Next

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)

Set colItems = objWMIService.ExecQuery(&amp;quot;select CSDVersion from win32_operatingsystem&amp;quot;)

For Each objItem in colItems
if not isnull(objItem.CSDVersion) then
	WScript.Echo objItem.CSDVersion
	WScript.Quit
End if
Next

WScript.Echo &amp;quot;No Service Pack found&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
DATF=/opt/Tanium/TaniumClient/Tools/AIX/oslevel 
if [ -f $DATF ]; then
  awk -F\- &amp;#039;{ print $3 }&amp;#039; /opt/Tanium/TaniumClient/Tools/AIX/oslevel 
else
  echo &amp;quot;No file&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>46</cache_row_id>
          </sensor>
          <sensor>
            <id>92</id>
            <name>Installed Applications</name>
            <hash>1511329504</hash>
            <string_count>1755</string_count>
            <category>Applications</category>
            <description>List of the applications and versions of those applications installed on the client machine.
Example: Mozilla Firefox | 16.0.1</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Installed Applications
&amp;#039;========================================
&amp;#039;@INCLUDE=utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039; This sensor will return information in the uninstall areas of the registry.
&amp;#039; There are two hidden columns which can be filtered on despite the fact that
&amp;#039; they&amp;#039;re hidden, and can also feed actions.
&amp;#039; if the uninstallstring is msi based, it is altered to show the
&amp;#039; silent uninstall options and marked as &amp;quot;Is Uninstallable&amp;quot;
&amp;#039; finally, if it&amp;#039;s a user installed application, it will note that
&amp;#039; The columns look like:
&amp;#039; Name|Version|Silent Uninstall String|Uninstallable

SensorRandomize()

Set objRegistry = Getx64RegistryProvider()

keyPath = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&amp;quot;
key64Path = &amp;quot;SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall&amp;quot;

Const HKLM = &amp;amp;H80000002
Const HKEY_USERS = &amp;amp;H80000003

&amp;#039; list out 32-bit applications on a 64-bit system
If RegKeyExists(HKLM, key64Path) Then
	objRegistry.EnumKey HKLM, key64Path, arrSubKeys
	GetApplications HKLM,key64path,arrSubKeys
End If

&amp;#039; list out 32-bit applications on a 32-bit system, or 64-bit applications
&amp;#039; on a 64-bit system.
If RegKeyExists(HKLM, keyPath) Then
	objRegistry.EnumKey HKLM, keypath, arrSubKeys
	GetApplications HKLM,keypath,arrSubKeys
End If

&amp;#039; Also list out applications installed to HKEY_Users areas
&amp;#039; which will be appended to the arrSubKeys
objRegistry.EnumKey HKEY_USERS, &amp;quot;&amp;quot;, arrUserKeys
For Each strSIDkey In arrUserKeys
	If RegKeyExists(HKEY_USERS, strSIDKEY&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath) Then
		objRegistry.EnumKey HKEY_USERS, strSIDkey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath, arrSubKeys
		GetApplications HKEY_USERS,strSIDKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath,arrSubKeys
	End If
Next


Function GetApplications(HIVE, keypath,arrSubKeys)
	Set applications = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
	On Error Resume Next
	For Each key in arrSubKeys
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;DisplayName&amp;quot;, displayName
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;DisplayVersion&amp;quot;, version
		objRegistry.GetDWORDValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;SystemComponent&amp;quot;, systemComponent	
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;UninstallString&amp;quot;, uninstallString	
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;ParentKeyName&amp;quot;, parentKey	
		&amp;#039; on error goto 0
		&amp;#039; assume it&amp;#039;s not uninstallable
		bUninstallable = &amp;quot;Not Uninstallable&amp;quot;
				
		If displayName &amp;lt;&amp;gt; &amp;quot;&amp;quot; _
			And Not IsNull(uninstallString) _ 
			And IsNull(parentKey) _
			And InStr(displayName, &amp;quot;Hotfix&amp;quot;) = 0 _
			And InStr(displayName, &amp;quot;Update for&amp;quot;) = 0 _
	 		And InStr(displayName, &amp;quot;Security Update for&amp;quot;) = 0 _
	 	Then 
	 		If InStr(LCase(uninstallString), &amp;quot;msiexec&amp;quot;) Then
	 			&amp;#039; replace any /I with /X and add silent flags
	 			uninstallString = Replace(uninstallString,&amp;quot;/I&amp;quot;,&amp;quot;/X&amp;quot;) &amp;amp; &amp;quot; /qn /noreboot&amp;quot; 
	  			bUninstallable = &amp;quot;Is Uninstallable&amp;quot;
	  		End If
	 		If IsNull(systemComponent) Or systemComponent = 0 Then
				If IsNull(version) Then
					version = GetVersionInString(displayName)
				End If
				&amp;#039; This is a multi-column sensor.  Last two columns are hidden.

				displayString = displayName &amp;amp; &amp;quot;|&amp;quot; &amp;amp; version &amp;amp; &amp;quot;|&amp;quot; &amp;amp; uninstallString &amp;amp; &amp;quot;|&amp;quot; &amp;amp; bUninstallable

				&amp;#039; treat displayString as the unique value - cannot be listed twice.
				If Not applications.Exists(displayString) Then
					applications.Add displayString, &amp;quot;&amp;quot;
				End If 	
			End If 	
		End If 
	Next
	On Error Goto 0
	
	SortDictionary applications, 1 &amp;#039; This calls a sorting function specific to dictionaries
	arrApplicationsKeys = applications.Keys
	For Each application In arrApplicationsKeys
		&amp;#039; final output of the sensor
		WScript.Echo CleanCharacters(application)
	Next
End Function &amp;#039;GetApplications

Function RegKeyExists(sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function SortDictionary(objDict, intSort)
 &amp;#039;   objDict - the dictionary to sort
 &amp;#039;   intSort - the field to sort (1=key, 2=item)
 
   &amp;#039; declare constants
   Const dictKey  = 1
   Const dictItem = 2
 
   &amp;#039; declare our variables
   Dim strDict()
   Dim objKey
   Dim strKey,strItem
   Dim X,Y,Z
 
   &amp;#039; get the dictionary count
   Z = objDict.Count
 
   &amp;#039; we need more than one item to warrant sorting
   If Z &amp;gt; 1 Then
     &amp;#039; create an array to store dictionary information
     ReDim strDict(Z,2)
     X = 0
     &amp;#039; populate the string array
     For Each objKey In objDict
         strDict(X,dictKey)  = CStr(objKey)
         strDict(X,dictItem) = CStr(objDict(objKey))
         X = X + 1
     Next
 
     &amp;#039; perform a a shell sort of the string array
     For X = 0 To (Z - 2)
       For Y = X To (Z - 1)
         If StrComp(strDict(X,intSort),strDict(Y,intSort),vbTextCompare) &amp;gt; 0 Then
             strKey  = strDict(X,dictKey)
             strItem = strDict(X,dictItem)
             strDict(X,dictKey)  = strDict(Y,dictKey)
             strDict(X,dictItem) = strDict(Y,dictItem)
             strDict(Y,dictKey)  = strKey
             strDict(Y,dictItem) = strItem
         End If
       Next
     Next
 
     &amp;#039; erase the contents of the dictionary object
     objDict.RemoveAll
 
     &amp;#039; repopulate the dictionary with the sorted information
     For X = 0 To (Z - 1)
       objDict.Add strDict(X,dictKey), strDict(X,dictItem)
     Next
 
   End If
 End Function &amp;#039;SortDictionary

Function GetVersionInString(ByVal strTemp)
&amp;#039; examines a string and returns a version string at the end of it
	Dim strOut
	strOut = &amp;quot;&amp;quot;
	If Not IsNull(strTemp) Then
		strTemp = StrReverse(strTemp)
		Dim strLookAtChar,intCurPos
		Dim bNumbersStartMarked : bNumbersStartMarked = False

		For intCurPos = 1 To Len(strTemp)		
			strLookAtChar = Mid(strTemp,intCurPos,1)
			If IsNumeric(strLookAtChar) Or strLookAtChar = &amp;quot;.&amp;quot; Or strLookAtChar = &amp;quot;-&amp;quot; Then
				bNumbersStartMarked = True
				strOut = strOut &amp;amp; strLookAtChar
			End If
		If bNumbersStartMarked And ( (Not IsNumeric(strLookAtChar) And strLookAtChar &amp;lt;&amp;gt; &amp;quot;.&amp;quot; And strLookAtChar &amp;lt;&amp;gt; &amp;quot;-&amp;quot;) ) Then
			Exit For
		End If	
		Next
		strOut = StrReverse(strOut)
	Else
		strOut = &amp;quot;&amp;quot;
	End If
	
	If Len(strOut) = 0 Then strOut = &amp;quot;N/A&amp;quot;
	
	GetVersionInString = strOut
	
End Function &amp;#039;GetVersionInString

Function CleanCharacters(strTest)
&amp;#039; String returned will not have characters in the output which
&amp;#039; are not friendly to the console app
	strPattern = &amp;quot;[^\x20-\x7E]&amp;quot;
	strReplace = &amp;quot;&amp;quot;
	Set objRegExp = New RegExp
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	objRegExp.Pattern = strPattern
	objRegExp.Global = True
	CleanCharacters = objRegExp.Replace(strTest, strReplace)
End Function

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039;&amp;#039; -- Begin Random Sleep Functions -- &amp;#039;&amp;#039;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &amp;#039; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&amp;#039; sleeps for a random period of time, intSleepTime is in seconds
&amp;#039; if the sensor randomize flag is on
&amp;#039; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&amp;#039; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;amp;&amp;quot;\Sensor Data\Random Sleep&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeFlag&amp;quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeScalingPercentage&amp;quot;)
	On Error Goto 0
	If intRandomizeFlag &amp;gt; 0 Then
		If intRandomizeScalingPercentage &amp;gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &amp;quot;Randomize scaling percentage of &amp;quot; _ 
				&amp;amp; intRandomizeScalingPercentage &amp;amp; &amp;quot; applied, new sleep time is &amp;quot; &amp;amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &amp;#039; convert to milliseconds
		&amp;#039; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&amp;#039; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &amp;quot;Sleeping for &amp;quot; &amp;amp; intSensorRandomizeWaitTime &amp;amp; &amp;quot; milliseconds&amp;quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &amp;quot;Done sleeping, continuing ...&amp;quot;
	Else 
		SensorRandomizeEcho &amp;quot;SensorRandomize Not Enabled - No Op&amp;quot;
	End If
End Function &amp;#039;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&amp;#039; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &amp;lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID / Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID / Timer
	End If
End Function &amp;#039;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&amp;#039;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&amp;#039;&amp;#039; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &amp;quot;ComputerID&amp;quot;
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strKeyPath&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strValueName)
    If Err.Number &amp;lt;&amp;gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &amp;#039;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &amp;lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &amp;#039;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &amp;#039;SensorRandomizeEcho
&amp;#039; -- End Random Sleep Functions --&amp;#039;
&amp;#039;- End file: utils/SensorRandomization/SensorRandomizationFunctions.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
# Detects which OS and if it is Linux then it will detect which Linux
# Distribution.

# Can be used as a starting point for shell scripts that need to work differently on
# Mac, and various flavors of Linux

OS=`uname -s`

GetVersionFromFile()
{
    VERSION=`cat $1 | tr &amp;quot;\n&amp;quot; &amp;#039; &amp;#039; | sed s/.*VERSION.*=\ // `
}

if [ &amp;quot;${OS}&amp;quot; = &amp;quot;Linux&amp;quot; ] ; then
    KERNEL=`uname -r`
    if [ -f /etc/redhat-release ] ; then
        # Redhat based system
        rpm -qa --queryformat &amp;quot;%{NAME}|%{VERSION}|nothing|Not Uninstallable\n&amp;quot;
    elif [ -f /etc/SuSE-release ] ; then
        # SuSE / OpenSuSE based system
        rpm -qa --queryformat &amp;quot;%{NAME}|%{VERSION}|nothing|Not Uninstallable\n&amp;quot;
    elif [ -f /etc/lsb-release ] ; then
        # Usually Ubuntu -- this is a Linux Standard Based system, which
        # Ubuntu is by far the biggest.  But general LSB commands should work
        dpkg -l | awk &amp;#039;{print $2&amp;quot;|&amp;quot;$3&amp;quot;|nothing|Not Uninstallable&amp;quot;}&amp;#039;
    elif [ -f /etc/debian_version ] ; then
        # Debian -- note that Ubuntu is Debian based, but Debian does not have a
        # lsb-release file
        dpkg -l | awk &amp;#039;{print $2&amp;quot;|&amp;quot;$3&amp;quot;|nothing|Not Uninstallable&amp;quot;}&amp;#039;
        #else
	# a less common distribution.  Most all really popular distributions will
        # be caught by the tree above.
    fi
#else
   # not Linux -- could be anything, BSD / Solaris / AIX / etc
fi

echo ${OSSTR}</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

notcontains() {
    string=&amp;quot;$1&amp;quot;
    substring=&amp;quot;$2&amp;quot;
    if test &amp;quot;${string#*$substring}&amp;quot; != &amp;quot;$string&amp;quot;
    then
        return 1    # $substring is not in $string
    else
        return 0    # $substring is in $string
    fi
}

ftemp=$(mktemp -t &amp;#039;apps.xml&amp;#039;)
system_profiler -xml SPApplicationsDataType &amp;gt; &amp;quot;$ftemp&amp;quot;

count=1

while true
do
        app=`/usr/libexec/PlistBuddy -c &amp;quot;Print :0:_items:$count:_name&amp;quot; $ftemp 2&amp;gt;/dev/null`
        version=`/usr/libexec/PlistBuddy -c &amp;quot;Print :0:_items:$count:version&amp;quot; $ftemp 2&amp;gt;/dev/null`
        if [ -z &amp;quot;$app&amp;quot; ]; then
                break
        fi
        test=&amp;quot;VMware&amp;quot;
        if notcontains &amp;quot;$version&amp;quot; &amp;quot;$test&amp;quot;; then
                echo $app&amp;quot;|&amp;quot;$version&amp;quot;|nothing|Not Uninstallable&amp;quot;
        fi
        let count=count+1
done
rm -rf &amp;quot;$ftemp&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
pkginfo -c application | awk &amp;#039;{ print $2 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
#pkg_name|pkg_vers|nothing|Not Uninstallable

for pkg in `/usr/bin/lslpp -Lcq | awk -F: &amp;#039;{ print $1&amp;quot;|&amp;quot;$2&amp;#039;}`
do
 echo &amp;quot;$pkg|nothing|Not Uninstallable&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Version</name>
                <index>1</index>
                <value_type>Version</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Silent Uninstall String</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>1</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Uninstallable</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>1</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>47</cache_row_id>
          </sensor>
          <sensor>
            <id>94</id>
            <name>Running Processes</name>
            <hash>4142232197</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Provides a list of processes currently running on the client machine.
Example: svchost.exe</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from win32_process</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
ps -ef | grep -v &amp;quot; $$ &amp;quot; | awk &amp;#039;{ print substr($0,index($0,$8)) }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
ps -ef | grep -v &amp;quot; $$ &amp;quot; | awk &amp;#039;{ print substr($0,index($0,$8)) }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
# Get all running process names and arguments
# Only list process in my zone
which zonename &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
if [ $? -eq 0 ]; then
  myzone=$(zonename)
else
  myzone=&amp;quot;&amp;quot;
fi
if [ -z &amp;quot;$myzone&amp;quot; ]; then
  PSCMD=&amp;quot;ps -eo args&amp;quot;
else
  PSCMD=&amp;quot;ps -z $myzone -o args&amp;quot;
fi

$PSCMD | egrep -v COMMAND</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get all running process names and arguments
ps -eo args | grep -v &amp;#039;ps -eo&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>48</cache_row_id>
          </sensor>
          <sensor>
            <id>96</id>
            <name>Running Service</name>
            <hash>1497251383</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Provides a list of currently running services on the client machine.
Example: DHCP Client</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from win32_Service where State=&amp;#039;Running&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
# Detects which OS and if it is Linux then it will detect which Linux
# Distribution.

# Can be used as a starting point for shell scripts that need to work differently on
# Mac, and various flavors of Linux

OS=`uname -s`

GetVersionFromFile()
{
    VERSION=`cat $1 | tr &amp;quot;\n&amp;quot; &amp;#039; &amp;#039; | sed s/.*VERSION.*=\ // `
}

if [ &amp;quot;${OS}&amp;quot; = &amp;quot;Linux&amp;quot; ] ; then
    KERNEL=`uname -r`
    if [ -f /etc/redhat-release ] ; then
        # Redhat based system
        chkconfig --list | grep 3:on | awk &amp;#039;{print $1}&amp;#039;
    elif [ -f /etc/SuSE-release ] ; then
        # SuSE / OpenSuSE based system
        ps aux | awk &amp;#039;{print $11}&amp;#039;
    elif [ -f /etc/lsb-release ] ; then
        # Usually Ubuntu -- this is a Linux Standard Based system, which
        # Ubuntu is by far the biggest.  But general LSB commands should work
        ps aux | awk &amp;#039;{print $11}&amp;#039;
    elif [ -f /etc/debian_version ] ; then
        # Debian -- note that Ubuntu is Debian based, but Debian does not have a
        # lsb-release file
        ps aux | awk &amp;#039;{print $11}&amp;#039;
        #else
	# a less common distribution.  Most all really popular distributions will
        # be caught by the tree above.
    fi
#else
   # not Linux -- could be anything, BSD / Solaris / AIX / etc
fi

echo ${OSSTR}</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
first=true
launchctl list | while read line
do
    set -- $line
if ( $first ); 
then
	first=false
else
	if [ &amp;quot;$1&amp;quot; == &amp;quot;-&amp;quot; ]; 
	then
		echo $3
	fi
fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
svcs | awk &amp;#039;{ print $3 }&amp;#039; | sed &amp;#039;s#svc:/##g;s/:default//g&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
lssrc -a | grep active | awk &amp;#039;{ print $1 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>49</cache_row_id>
          </sensor>
          <sensor>
            <id>98</id>
            <name>Stopped Service</name>
            <hash>3188527889</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Returns a list of all services currently stopped on the client machine.
Example: DHCP Client</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from win32_Service where State=&amp;#039;Stopped&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
first=true
launchctl list | while read line
do
    set -- $line
if ( $first ); 
then
	first=false
else
	if [ &amp;quot;$2&amp;quot; == &amp;quot;0&amp;quot; ]; 
	then
		echo $3
	fi
fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>50</cache_row_id>
          </sensor>
          <sensor>
            <id>100</id>
            <name>Running Applications</name>
            <hash>1559751995</hash>
            <string_count>25</string_count>
            <category>Applications</category>
            <description>Provides a list of applications that are running at the present time on the client machine.
Example: Google Chrome | 23.0.1271.64</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Running Applications
&amp;#039;========================================

&amp;#039; This sensor will list the pretty names of running applications.
&amp;#039; it is a multiple column sensor, and a hidden column will show the
&amp;#039; process name.

strSep = &amp;quot;|&amp;quot;
&amp;#039; Sensor output looks like:
&amp;#039; Running Application | Version | Process Name

SetLocale(1033)

showDuplicates = False 
showVersion = True
recordUsageStats = True

On Error Resume Next
strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select Caption, Name, ExecutablePath, CreationDate from Win32_Process&amp;quot;,,48)

Dim nameDictionary, processDictionary
Set nameDictionary = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
Set processDictionary = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

&amp;#039;ADD PROCESS NAME IN LOWER CASE
&amp;#039;nameDictionary.Add &amp;quot;hppusg.exe&amp;quot;, &amp;quot;Some HP Application&amp;quot;
&amp;#039;nameDictionary.Add &amp;quot;taniumclient.exe&amp;quot;, &amp;quot;TANIUM CLIENT&amp;quot;

&amp;#039;array used to print output (no dictionary since we need duplicates)
Dim arrOutput()
intSize = 0
ReDim Preserve arrOutput(intSize)

strComputer = &amp;quot;.&amp;quot;
Const HKLM = &amp;amp;h80000002
Set reg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

regPath = GetTaniumRegistryPath() &amp;amp; &amp;quot;\Sensor Data\Applications&amp;quot;
If Not RegKeyExists(reg, HKLM, regPath) Then
	reg.createKey HKLM, regPath
End If

&amp;#039; if recording Usage stats, then we need to record when we first started 
&amp;#039; recording usage stats
If recordUsageStats Then 
	reg.GetStringValue HKLM, regPath, &amp;quot;UsageStatsStart&amp;quot;, strUsageStatsStart
	
	If IsNull(strUsageStatsStart) Or IsEmpty(strUsageStatsStart) Then 
		reg.SetStringValue HKLM, regPath, &amp;quot;UsageStatsStart&amp;quot;, CStr(Now())
	End If
End If 

&amp;#039;SET UP INSTALLED APPLICATIONS PROCESS DICTIONARY TO FACILITATE ACCESS LATER
Dim installedProcs
Set installedProcs = CreateObject(&amp;quot;scripting.dictionary&amp;quot;)

installedRegPath = GetTaniumRegistryPath() &amp;amp; &amp;quot;\Sensor Data\Applications\Installed&amp;quot;
If Not RegKeyExists(reg, HKLM, regPath) Then
	reg.createKey HKLM, installedRegPath
Else	
	reg.EnumKey HKLM, installedRegPath, arrAppKeys
	if not isNull(arrAppKeys) Then
		For Each appKey In arrAppKeys
			fullAppKey = installedRegPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; appKey
			reg.EnumKey HKLM, fullAppKey, arrProcKeys
			If Not IsNull(arrProcKeys) Then
				For Each procKey In arrProcKeys
					fullProcKey = fullAppKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; procKey
					reg.GetStringValue HKLM, fullProcKey, &amp;quot;Path&amp;quot;, strPath
					reg.GetStringValue HKLM, fullProcKey, &amp;quot;Process&amp;quot;, strProc
					If Right(strPath, 1) &amp;lt;&amp;gt; &amp;quot;\&amp;quot; Then
						strPath = strPath &amp;amp; &amp;quot;\&amp;quot;
					End If	
					If Not installedProcs.Exists(strPath &amp;amp; strProc) Then
						installedProcs.Add strPath &amp;amp; strProc, fullAppKey
&amp;#039;						WScript.Echo &amp;quot;added: &amp;quot; &amp;amp; installedProcs.Item(strPath &amp;amp; strProc)
					End If	
				Next
			End If
		Next
	End If
End If

For Each objItem in colItems
	If InStr(LCase(objItem.ExecutablePath), &amp;quot;windows\system32\&amp;quot;) = 0 Then
	    Dim fso
	    Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	    If fso.FileExists(objItem.ExecutablePath) Then
    		Dim strOutput, fileVersion, fileVersionOutput, fullName

	    	Set execFile = fso.GetFile(objItem.ExecutablePath)
	    	
    		fileVersion = fso.GetFileVersion(objItem.ExecutablePath)
    		fileVersionOutput = &amp;quot;N/A&amp;quot;
	    	If showVersion Then
	    		If fileVersion &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
	    			fileVersionOutput = fileVersion
	    		Else
	    			fileVersionOutput = &amp;quot;N/A&amp;quot;
	    		End If
			End If 
			
   			fullName = nameDictionary.Item(LCase(objItem.Name))

			If IsEmpty(fullName) Then
				fullName = GetDescription(execFile.ParentFolder.Path, objItem.Name)
			End If
						
			If fullName = &amp;quot;&amp;quot; Then
				fullName = objItem.Name
			End If
			&amp;#039; sensor output looks like:
			&amp;#039; Application Name | Version | Process
   			strOutput = fullName &amp;amp; strSep &amp;amp; fileVersionOutput &amp;amp; strSep &amp;amp; objItem.Caption
    		
 			If not ArrayContains(arrOutput, strOutput) Or showDuplicates Then
				arrOutput(intSize) = strOutput
				intSize = intSize + 1
				ReDim Preserve arrOutput(intSize)
			End If
			
			&amp;#039;Process Last Started, First Started, etc.
			creationDate = objItem.CreationDate
			strDate = WMIDateStringToDate(creationDate)
			StoreData execFile.ParentFolder.Path, objItem.Name, fullName, fileVersion, cstr(strDate), reg, HKLM, regPath, false
			
			&amp;#039;Look in installed processes for match, if yes then update data
			strKey = execFile.ParentFolder.Path &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objItem.Name
			If installedProcs.Exists(strKey) Then
				installedAppKey = installedProcs.Item(strKey)
				
				StoreData execFile.ParentFolder.Path, objItem.Name, fullName, fileVersion, cstr(strDate), reg, HKLM, installedAppKey, True
				
				&amp;#039;Also add &amp;quot;Application&amp;quot; value to process key
				reg.GetStringValue HKLM, installedAppKey, &amp;quot;Description&amp;quot;, strApp
				
				reg.SetStringValue HKLM, regPath&amp;amp;&amp;quot;\&amp;quot;&amp;amp;GetKeyName(objItem.Name), &amp;quot;Application&amp;quot;, strApp
			End If
	    End If
	End If
Next

For Each output In arrOutput 
	WScript.Echo output
Next

Function GetKeyName(strProcess)
	words = Split(strProcess, &amp;quot;.&amp;quot;)
	GetKeyName = words(0)
End Function

Function StoreData(strPath, strProc, fullName, version, strDate, objReg, hive, baseRegKey, isInstalled)
	Dim regKey
	
	If isInstalled Then
		regKey = baseRegKey
	Else
		regKey = baseRegKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; GetKeyName(strProc)
	End If
	
	If Not RegKeyExists(objReg, hive, regKey) Then
		objReg.createKey hive, regKey
	End If
	

	&amp;#039;only update file-specific data if not installed
	If Not isInstalled Then
		publisher = GetPublisher(strPath, strProc)
		objReg.SetStringValue hive, regKey, &amp;quot;Publisher&amp;quot;, publisher
		objReg.SetStringValue hive, regKey, &amp;quot;Version&amp;quot;, version
		objReg.SetStringValue hive, regKey, &amp;quot;Description&amp;quot;, fullName
		objReg.SetStringValue hive, regKey, &amp;quot;Path&amp;quot;, strPath
		objReg.SetStringValue hive, regKey, &amp;quot;Process&amp;quot;, strProc
	End If
		
	&amp;#039;always update first/last data	
	Dim strFirstStart, strLastStart
	&amp;#039;Get &amp;quot;First Start&amp;quot;, compare value
	objReg.GetStringValue hive, regKey, &amp;quot;First Start&amp;quot;, strFirstStart
	If IsNull(strFirstStart) Then
		objReg.SetStringValue hive, regKey, &amp;quot;First Start&amp;quot;, strDate
	Else
		&amp;#039;Check if first start value needs to be replaced
		diff = DateDiff(&amp;quot;d&amp;quot;, strFirstStart, strDate)
		If diff &amp;lt; 0 Then
			objReg.SetStringValue hive, regKey, &amp;quot;First Start&amp;quot;, strDate
		End If
	End If
	
	&amp;#039;Get &amp;quot;Last Start&amp;quot;, compare value
	objReg.GetStringValue hive, regKey, &amp;quot;Last Start&amp;quot;, strLastStart
	If IsNull(strLastStart) Then
		objReg.SetStringValue hive, regKey, &amp;quot;Last Start&amp;quot;, strDate
	Else
		&amp;#039;Check if first start value needs to be replaced
		diff = DateDiff(&amp;quot;d&amp;quot;, strLastStart, strDate)
		If diff &amp;gt; 0 Then
			objReg.SetStringValue hive, regKey, &amp;quot;Last Start&amp;quot;, strDate
		End If
	End If
	
	&amp;#039; record the number of times seen, if enabled
	If recordUsageStats Then
		
		&amp;#039; Assuming the usual time that this sensor runs is once every 5 minutes,
		&amp;#039; never record and increment usage stats more often than once every 4
		&amp;#039; minutes.  This stops us from recording an increment more often, in 
		&amp;#039; the case that someone uses the sensor in some other question
		objReg.GetStringValue hive, regKey, &amp;quot;LastStatUpdate&amp;quot;, strLastUpdate
		
		bRecordUpdate = False
		If IsNull(strLastUpdate) Or IsEmpty(strLastUpdate) Then 
			bRecordUpdate = True
		Else 
			intSecondsPast = DateDiff(&amp;quot;s&amp;quot;, CDate(strLastUpdate), Now())
			
			&amp;#039; allow the update if its very close to 5 minutes
			If(intSecondsPast &amp;gt;= 270) Then 
				bRecordUpdate = True
			End If
		End If
		
		If bRecordUpdate Then 
			&amp;#039; key for usage stats is month-day-year
			strUsageKey = Month(Now) &amp;amp; &amp;quot;-&amp;quot; &amp;amp; Year(Now) &amp;amp; &amp;quot;-Usage&amp;quot;
			objReg.GetDWORDValue hive, regKey, strUsageKey, intNumSeen
			
			If IsNull(intNumSeen) Or IsEmpty(intNumSeen) Then
				intNumSeen = 0
			End If
			
			intNumSeen = intNumSeen + 1
			
			objReg.SetDWORDValue hive, regKey, strUsageKey, intNumSeen
			objReg.SetStringValue hive, regKey, &amp;quot;LastStatUpdate&amp;quot;, CStr(Now())
		End If
	End If 
	
End Function


Function ArrayContains(arr, str)
	For Each obj In arr 
		If obj = str Then
			ArrayContains = True
			Exit Function
		End If
	Next
	ArrayContains = False
End Function

Function GetAttributeIndex(folderPath, attrTarget)
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	For i = 0 to 400
		attrName = objFolder.GetDetailsOf(objFolder.Items, i)
		If LCase(attrName) = LCase(attrTarget) Then
			GetAttributeIndex = i
			Exit Function
		End If
	Next
	
End Function

Function GetFileProperty(folderPath, fileName, fileProperty)
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	GetFileProperty = objFolder.GetDetailsOf(objFolder.Parsename(fileName), fileProperty)
End Function

Function GetDescription(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &amp;quot;File description&amp;quot;)
	If IsEmpty(descIndex) Then
		descIndex = GetAttributeIndex(folderPath, &amp;quot;Description&amp;quot;)
	End If
	GetDescription = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function GetPublisher(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &amp;quot;Company&amp;quot;)
	GetPublisher = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function WMIDateStringToDate(dtmInstallDate)
   WMIDateStringToDate = CDate(Mid(dtmInstallDate, 5, 2) &amp;amp; &amp;quot;/&amp;quot; &amp;amp; _
   Mid(dtmInstallDate, 7, 2) &amp;amp; &amp;quot;/&amp;quot; &amp;amp; Left(dtmInstallDate, 4))
End Function

&amp;#039;date format is MM/DD/YYYY
function GetDaysOld(strDate)
	patternDate = CDate( strDate )
	today = CDate( Month(Now) &amp;amp; &amp;quot;/&amp;quot; &amp;amp; Day(Now) &amp;amp; &amp;quot;/&amp;quot; &amp;amp; Year(Now))
	GetDaysOld = DateDiff(&amp;quot;d&amp;quot;, patternDate, today)
End Function

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>300</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Version</name>
                <index>1</index>
                <value_type>Version</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Process Name</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>1</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>51</cache_row_id>
          </sensor>
          <sensor>
            <id>102</id>
            <name>SQL Database Count</name>
            <hash>3271577967</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description>The number of databases in SQL Server on the client machine.
Example: 4</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Database Count
&amp;#039;========================================
&amp;#039;@INCLUDE=sql/mssql_connection_utils.vbs

Option Explicit
Dim dictInstances, strInstance, objConnection

Set dictInstances = GetMSSQLInstances()

For Each strInstance In dictInstances.Keys
 	Dim objRecordSet, objRecord, strValue
	Set objConnection = CreateObject(&amp;quot;ADODB.Connection&amp;quot;) 
	Set objRecordSet = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;)  
	
	On Error Resume Next
	objConnection.Open GenMSSQLConnectionStr(strInstance, &amp;quot;master&amp;quot;)
	
	If objConnection.Errors.Count &amp;gt; 0 Then 
		WScript.Echo &amp;quot;Access Error (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
		Exit For
	End If 
	
	On Error Goto 0
	
	objRecordSet.Open &amp;quot;select count(name) as count from master..sysdatabases&amp;quot;, objConnection, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC  
	objRecordSet.MoveFirst  
	For each objRecord in objRecordSet.Properties    
		strValue = objRecordSet(&amp;quot;count&amp;quot;)    
		WScript.echo strValue &amp;amp; GetMSSQLSensorInstanceStr(strInstance)
		objRecordSet.MoveNext    
		If (objRecordset.EOF = True) THEN       
			objRecordset.Close       
			Exit For    
		End If 
	Next 
Next
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: sql/mssql_connection_utils.vbs

&amp;#039; Common constants for MSSQL lookups
Const AD_OPEN_STATIC = 3 
Const AD_LOCK_OPTIMISTIC = 3  


Function GetMSSQLInstances()
    Dim dictResult, objWMIService, colServices, objService
    Dim strCaption, strInstance, intStartIndex, intStopIndex
    Set dictResult = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

    Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
    Set colServices = objWMIService.ExecQuery (&amp;quot;select * from win32_Service&amp;quot;)  
    For Each objService In colServices
        strCaption = objService.Caption
    
        If (InStr(strCaption,&amp;quot;SQL Server&amp;quot;) &amp;lt;&amp;gt; 0 And ObjService.State = &amp;quot;Running&amp;quot;) Then    
            &amp;#039; OK -- found SQL Server on this machien, now we need to find the instance name
            &amp;#039; if this is the correct service
            strInstance = &amp;quot;.&amp;quot;
            intStartIndex = InStr(strCaption, &amp;quot;(&amp;quot;)
            intStopIndex = InStr(strCaption, &amp;quot;)&amp;quot;)
            
            If(intStartIndex &amp;lt;&amp;gt; 0) And (intStopIndex &amp;lt;&amp;gt; 0) Then 
                strInstance = Mid(strCaption, intStartIndex + 1, intStopIndex - intStartIndex - 1)
                    
                If strInstance = &amp;quot;MSSQLSERVER&amp;quot; Then 
                    strInstance = &amp;quot;.&amp;quot;
                End If 

                If Not dictResult.Exists(strInstance) Then
                    dictResult.Add strInstance, True
                End if
            End If             
        End If  
    Next  
    
    Set GetMSSQLInstances = dictResult

End Function &amp;#039; GetMSSQLInstances

Function GenMSSQLConnectionStr(strInstance, strCatalog) 
    Dim strDataSource, strConnection

    If strInstance = &amp;quot;.&amp;quot; Then 
        strDataSource = strInstance
    Else 
        strDataSource = &amp;quot;.\&amp;quot; &amp;amp; strInstance
    End If 

    strConnection = &amp;quot;Provider=SQLOLEDB;Data Source=&amp;quot; &amp;amp; strDataSource &amp;amp; &amp;quot;;Trusted_Connection=Yes;Initial Catalog=&amp;quot; &amp;amp; strCatalog &amp;amp; &amp;quot;;&amp;quot;

    GenMSSQLConnectionStr = strConnection
End Function &amp;#039; OpenMSSQLConnection

Function GetMSSQLSensorInstanceStr(strInstance)
    If strInstance = &amp;quot;.&amp;quot; Then
        GetMSSQLSensorInstanceStr = &amp;quot;&amp;quot;
    Else
        GetMSSQLSensorInstanceStr = &amp;quot; (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
    End If
End Function &amp;#039; GetMSSQLSensorInstanceStr
&amp;#039;- End file: sql/mssql_connection_utils.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>52</cache_row_id>
          </sensor>
          <sensor>
            <id>104</id>
            <name>SQL Server Edition</name>
            <hash>749653644</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description>Returns the Edition of SQL Server installed on the client machine if it exists.
Example: Enterprise Edition (64-bit)</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Server Edition
&amp;#039;========================================
Option Explicit

Const MAX_SQL_NUMBER = 15
Const DEBUG_OUT = False
Dim strValueName, strSKUName, strEdition, strVersion, strArchitecture 
Dim objWMI, dictWMIs, objProp, strOut, dictServices

Set dictWMIs = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
Set dictServices = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
	
BuildSQLCompMgmtWMIsDict(dictWMIs)

PrintProp &amp;quot;SKUNAME&amp;quot;

Function IsMultiple(ByRef dictWMIs)

	If dictWMIs.Count &amp;gt; 1 Then
		IsMultiple = True
	Else
		IsMultiple = False
	End If
	
End Function &amp;#039;IsMultiple

Sub PrintProp(strProp)
	Dim intOutCount
	intOutCount = 1
	If dictWMIs.Count = 0 Then
		WScript.Echo &amp;quot;SQL Not Found&amp;quot;
	Else
		For Each objWMI In dictWMIs.Keys
			strOut = GetSQLServiceAdvancedProp(strProp,objWMI)
			If Len(strOut) &amp;gt; 0 Then
				intOutCount = intOutCount + 1
				WScript.Echo strOut
			Else
				WScript.Echo &amp;quot;SQL Not Found&amp;quot;
				DebugPrint &amp;quot;SQL Property Not Found&amp;quot;
			End If
		Next
	End If

End Sub &amp;#039;PrintProp 

Function PrintServices
	BuildSQLServicesNames objWMI,dictServices
	&amp;#039; Print Services
	Dim strService
	For Each strService In dictServices.Keys
		WScript.Echo strService
	Next
End Function &amp;#039;PrintServices

Function GetBitnessFromSKU(strSKUName)
&amp;#039; Returns appropriate bitness from SKU value
	Dim strArchitecture
	If Instr(strSKUName, &amp;quot; (&amp;quot;) &amp;lt;&amp;gt; 0 Then
	    strArchitecture = &amp;quot;64-bit&amp;quot;
	Else
	    strArchitecture = &amp;quot;32-bit&amp;quot;
	End If
	GetBitnessFromSKU = strArchitecture
	
End Function &amp;#039;GetBitnessFromSKU

Function GetCleanEdition(strSKUName)
&amp;#039; Removes bitness from SKU value
	Dim strEdition
	If Instr(strSKUName, &amp;quot; (&amp;quot;) &amp;lt;&amp;gt; 0 Then
	    strEdition = Left(strSKUName, Instr(strSKUName, &amp;quot; (&amp;quot;))
	Else
	    strEdition = strSKUName
	End If

	GetCleanEdition = strEdition
	
End Function &amp;#039;CleanSKU

Function GetSQLServiceAdvancedProp(strProp,ByRef objWMI)
&amp;#039; Property Names may change for different SQL versions
&amp;#039;SQLSTATES,VERSION,SPLEVEL,CLUSTERED,INSTALLPATH,DATAPATH,LANGUAGE,FILEVERSION,
&amp;#039;VSNAME,REGROOT,SKU,SKUNAME,INSTANCEID,STARTUPPARAMETERS,ERRORREPORTING,DUMPDIR,
&amp;#039;SQMREPORTING,ISWOW64
	On Error Resume Next
	Dim strOut, intType, strPropVal, colResults
	strProp = UCase(strProp) &amp;#039; text matches will happen when uppercased
	Set colResults = objWMI.ExecQuery(&amp;quot;select * from SqlServiceAdvancedProperty where SQLServiceType = 1&amp;quot;)
	For Each objProp In colResults
	    If objProp.PropertyName = strProp Then
	    	intType = objProp.PropertyValueType
	    	If Err.Number &amp;lt;&amp;gt; 0 Then
				DebugPrint Err.Description &amp;amp; &amp;quot; inttype is &amp;quot; &amp;amp; objProp.PropertyValueType
				Err.Clear
			End If	
	    	If intType = 0 Then
	        	strOut = objProp.PropertyStrValue
		      	If Err.Number &amp;lt;&amp;gt; 0 Then
					DebugPrint Err.Description &amp;amp; &amp;quot; strout is &amp;quot; &amp;amp; objProp.PropertyStrValue
					Err.Clear
				End If	  	
	        Else
	        	strOut = objProp.PropertyNumValue
	        End If
		End If
	Next

	Err.Clear
	On Error Goto 0
	GetSQLServiceAdvancedProp = strOut

	If DEBUG_OUT = True Then
		WScript.Echo &amp;quot;Debug, listing all props &amp;quot;
		On Error Resume Next
		For Each objProp In colResults
	    	intType = objProp.PropertyValueType

	    	If intType = 0 Then
	        	strOut = objProp.PropertyStrValue	
	        Else
	        	strOut = objProp.PropertyNumValue
	        End If
		WScript.Echo &amp;quot;Property name: &amp;quot;&amp;amp;objProp.PropertyName&amp;amp;&amp;quot;, valuetype: &amp;quot;&amp;amp;intType&amp;amp;&amp;quot;, value: &amp;quot;&amp;amp;strOut
	   	Next
	 End If
End Function &amp;#039;GetSQLServiceAdvancedProp

Sub BuildSQLServicesNames(ByRef objWMI,ByRef dictServices)

	Dim strService
	
	For Each objProp In objWMI.ExecQuery(&amp;quot;select * from SqlServiceAdvancedProperty where SQLServiceType = 1&amp;quot;)
		strService = objProp.ServiceName
		If Not IsNull(strService) Then
			If Not dictServices.Exists(strService) Then
				dictServices.Add strService,1
			End If
		End If
	Next
		
End Sub &amp;#039;BuildSQLServicesNames

Sub DebugPrint(ByRef strToPrint)

	If DEBUG_OUT Then
		WScript.Echo strToPrint
	End If
End Sub &amp;#039;DebugPrint

Sub BuildSQLCompMgmtWMIsDict(ByRef dictWMIs)

	&amp;#039; Define a constant MAX_SQL_NUMBER in global scope
	Dim objWMI,i,strWMINameSpace
	On Error Resume Next

    &amp;#039; First try 2005
    strWMINameSpace = &amp;quot;WINMGMTS:\\.\root\Microsoft\SqlServer\ComputerManagement&amp;quot;
    Set objWMI = GetObject(strWMINameSpace)
    If Err.Number = 0 Then
    	dictWMIs.Add objWMI,strWMINameSpace
    	DebugPrint strWMINameSpace
    Else
    	Err.Clear
    	&amp;#039; Loop through 2008 to 2012 and beyond
        For i = 10 To MAX_SQL_NUMBER
        	strWMINameSpace = &amp;quot;WINMGMTS:\\.\root\Microsoft\SqlServer\ComputerManagement&amp;quot;&amp;amp;CStr(i)
        	Set objWMI = GetObject(strWMINameSpace)
        	If Err.Number = 0 Then
        		dictWMIs.Add objWMI,strWMINameSpace
        		DebugPrint strWMINameSpace
        	Else
        		Err.Clear
        	End If
        Next
	End If
	
	Err.Clear
	On Error Goto 0
	If dictWMIs.Count = 0 Then
		WScript.Echo &amp;quot;SQL Not Found&amp;quot;
		WScript.Quit
	End If
	
End Sub &amp;#039;BuildSQLCompMgmtWMIsDict</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>53</cache_row_id>
          </sensor>
          <sensor>
            <id>106</id>
            <name>SQL Product Version</name>
            <hash>2195303088</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description>Product version from SQL Server on client machine.
Example: 10.50.1617.0</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Product Version
&amp;#039;========================================
Option Explicit

Const MAX_SQL_NUMBER = 15
Const DEBUG_OUT = False
Dim strValueName, strSKUName, strEdition, strVersion, strArchitecture 
Dim objWMI, dictWMIs, objProp, strOut, dictServices

Set dictWMIs = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
Set dictServices = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
	
BuildSQLCompMgmtWMIsDict(dictWMIs)

PrintProp(&amp;quot;VERSION&amp;quot;)

Function IsMultiple(ByRef dictWMIs)

	If dictWMIs.Count &amp;gt; 1 Then
		IsMultiple = True
	Else
		IsMultiple = False
	End If
	
End Function &amp;#039;IsMultiple

Sub PrintSPLevel
	Dim strProp,intOutCount

	strProp = &amp;quot;SPLEVEL&amp;quot;
	intOutCount = 1
	If dictWMIs.Count = 0 Then
		WScript.Echo &amp;quot;SQL Not Found&amp;quot;
	Else
		For Each objWMI In dictWMIs.Keys
			strOut = GetSQLServiceAdvancedProp(strProp,objWMI)
			If Len(strOut) &amp;gt; 0 Then
				intOutCount = intOutCount + 1
				If strOut = 0 Then
					WScript.Echo &amp;quot;RTM&amp;quot;
				ElseIf IsNumeric(strOut) Then
					WScript.Echo &amp;quot;SP&amp;quot;&amp;amp;strOut
				Else
					WScript.Echo strOut
				End If
			Else
				WScript.Echo &amp;quot;SQL Not Found&amp;quot;
				DebugPrint &amp;quot;SQL Property Not Found&amp;quot;
			End If
		Next
	End If

End Sub &amp;#039;PrintProp 

Sub PrintProp(strProp)
	Dim intOutCount
	intOutCount = 1
	If dictWMIs.Count = 0 Then
		WScript.Echo &amp;quot;SQL Not Found&amp;quot;
	Else
		For Each objWMI In dictWMIs.Keys
			strOut = GetSQLServiceAdvancedProp(strProp,objWMI)
			If Len(strOut) &amp;gt; 0 Then
				intOutCount = intOutCount + 1
				WScript.Echo strOut
			Else
				WScript.Echo &amp;quot;SQL Not Found&amp;quot;
				DebugPrint &amp;quot;SQL Property Not Found&amp;quot;
			End If
		Next
	End If

End Sub &amp;#039;PrintProp 

Function PrintServices
	BuildSQLServicesNames objWMI,dictServices
	&amp;#039; Print Services
	Dim strService
	For Each strService In dictServices.Keys
		WScript.Echo strService
	Next
End Function &amp;#039;PrintServices

Function GetBitnessFromSKU(strSKUName)
&amp;#039; Returns appropriate bitness from SKU value
	Dim strArchitecture
	If Instr(strSKUName, &amp;quot; (&amp;quot;) &amp;lt;&amp;gt; 0 Then
	    strArchitecture = &amp;quot;64-bit&amp;quot;
	Else
	    strArchitecture = &amp;quot;32-bit&amp;quot;
	End If
	GetBitnessFromSKU = strArchitecture
	
End Function &amp;#039;GetBitnessFromSKU

Function GetCleanEdition(strSKUName)
&amp;#039; Removes bitness from SKU value
	Dim strEdition
	If Instr(strSKUName, &amp;quot; (&amp;quot;) &amp;lt;&amp;gt; 0 Then
	    strEdition = Left(strSKUName, Instr(strSKUName, &amp;quot; (&amp;quot;))
	Else
	    strEdition = strSKUName
	End If

	GetCleanEdition = strEdition
	
End Function &amp;#039;CleanSKU

Function GetSQLServiceAdvancedProp(strProp,ByRef objWMI)
&amp;#039; Property Names may change for different SQL versions
&amp;#039;SQLSTATES,VERSION,SPLEVEL,CLUSTERED,INSTALLPATH,DATAPATH,LANGUAGE,FILEVERSION,
&amp;#039;VSNAME,REGROOT,SKU,SKUNAME,INSTANCEID,STARTUPPARAMETERS,ERRORREPORTING,DUMPDIR,
&amp;#039;SQMREPORTING,ISWOW64
	On Error Resume Next
	Dim strOut, intType, strPropVal, colResults
	strProp = UCase(strProp) &amp;#039; text matches will happen when uppercased
	Set colResults = objWMI.ExecQuery(&amp;quot;select * from SqlServiceAdvancedProperty where SQLServiceType = 1&amp;quot;)
	For Each objProp In colResults
	    If objProp.PropertyName = strProp Then
	    	intType = objProp.PropertyValueType
	    	If Err.Number &amp;lt;&amp;gt; 0 Then
				DebugPrint Err.Description &amp;amp; &amp;quot; inttype is &amp;quot; &amp;amp; objProp.PropertyValueType
				Err.Clear
			End If	
	    	If intType = 0 Then
	        	strOut = objProp.PropertyStrValue
		      	If Err.Number &amp;lt;&amp;gt; 0 Then
					DebugPrint Err.Description &amp;amp; &amp;quot; strout is &amp;quot; &amp;amp; objProp.PropertyStrValue
					Err.Clear
				End If	  	
	        Else
	        	strOut = objProp.PropertyNumValue
	        End If
		End If
	Next

	Err.Clear
	On Error Goto 0
	GetSQLServiceAdvancedProp = strOut

	If DEBUG_OUT = True Then
		WScript.Echo &amp;quot;Debug, listing all props &amp;quot;
		On Error Resume Next
		For Each objProp In colResults
	    	intType = objProp.PropertyValueType

	    	If intType = 0 Then
	        	strOut = objProp.PropertyStrValue	
	        Else
	        	strOut = objProp.PropertyNumValue
	        End If
		WScript.Echo &amp;quot;Property name: &amp;quot;&amp;amp;objProp.PropertyName&amp;amp;&amp;quot;, valuetype: &amp;quot;&amp;amp;intType&amp;amp;&amp;quot;, value: &amp;quot;&amp;amp;strOut
	   	Next
	 End If
End Function &amp;#039;GetSQLServiceAdvancedProp

Sub BuildSQLServicesNames(ByRef objWMI,ByRef dictServices)

	Dim strService
	
	For Each objProp In objWMI.ExecQuery(&amp;quot;select * from SqlServiceAdvancedProperty where SQLServiceType = 1&amp;quot;)
		strService = objProp.ServiceName
		If Not IsNull(strService) Then
			If Not dictServices.Exists(strService) Then
				dictServices.Add strService,1
			End If
		End If
	Next
		
End Sub &amp;#039;BuildSQLServicesNames

Sub DebugPrint(ByRef strToPrint)

	If DEBUG_OUT Then
		WScript.Echo strToPrint
	End If
End Sub &amp;#039;DebugPrint

Sub BuildSQLCompMgmtWMIsDict(ByRef dictWMIs)

	&amp;#039; Define a constant MAX_SQL_NUMBER in global scope
	Dim objWMI,i,strWMINameSpace
	On Error Resume Next

    &amp;#039; First try 2005
    strWMINameSpace = &amp;quot;WINMGMTS:\\.\root\Microsoft\SqlServer\ComputerManagement&amp;quot;
    Set objWMI = GetObject(strWMINameSpace)
    If Err.Number = 0 Then
    	dictWMIs.Add objWMI,strWMINameSpace
    	DebugPrint strWMINameSpace
    Else
    	Err.Clear
    	&amp;#039; Loop through 2008 to 2012 and beyond
        For i = 10 To MAX_SQL_NUMBER
        	strWMINameSpace = &amp;quot;WINMGMTS:\\.\root\Microsoft\SqlServer\ComputerManagement&amp;quot;&amp;amp;CStr(i)
        	Set objWMI = GetObject(strWMINameSpace)
        	If Err.Number = 0 Then
        		dictWMIs.Add objWMI,strWMINameSpace
        		DebugPrint strWMINameSpace
        	Else
        		Err.Clear
        	End If
        Next
	End If
	
	Err.Clear
	On Error Goto 0
	If dictWMIs.Count = 0 Then
		WScript.Echo &amp;quot;SQL Not Found&amp;quot;
		WScript.Quit
	End If
	
End Sub &amp;#039;BuildSQLCompMgmtWMIsDict</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>54</cache_row_id>
          </sensor>
          <sensor>
            <id>108</id>
            <name>SQL Product Level</name>
            <hash>482346946</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description>Product level for SQL Server on client machine.
Example: SP4</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Product Level
&amp;#039;========================================
Option Explicit

Const MAX_SQL_NUMBER = 15
Const DEBUG_OUT = False
Dim strValueName, strSKUName, strEdition, strVersion, strArchitecture 
Dim objWMI, dictWMIs, objProp, strOut, dictServices

Set dictWMIs = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
Set dictServices = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
	
BuildSQLCompMgmtWMIsDict(dictWMIs)

PrintSPLevel

Function IsMultiple(ByRef dictWMIs)

	If dictWMIs.Count &amp;gt; 1 Then
		IsMultiple = True
	Else
		IsMultiple = False
	End If
	
End Function &amp;#039;IsMultiple

Sub PrintSPLevel
	Dim strProp,intOutCount

	strProp = &amp;quot;SPLEVEL&amp;quot;
	intOutCount = 1
	If dictWMIs.Count = 0 Then
		WScript.Echo &amp;quot;SQL Not Found&amp;quot;
	Else
		For Each objWMI In dictWMIs.Keys
			strOut = GetSQLServiceAdvancedProp(strProp,objWMI)
			If Len(strOut) &amp;gt; 0 Then
				intOutCount = intOutCount + 1
				If strOut = 0 Then
					WScript.Echo &amp;quot;RTM&amp;quot;
				ElseIf IsNumeric(strOut) Then
					WScript.Echo &amp;quot;SP&amp;quot;&amp;amp;strOut
				Else
					WScript.Echo strOut
				End If
			Else
				WScript.Echo &amp;quot;SQL Not Found&amp;quot;
				DebugPrint &amp;quot;SQL Property Not Found&amp;quot;
			End If
		Next
	End If

End Sub &amp;#039;PrintProp 

Sub PrintProp(strProp)
	Dim intOutCount
	intOutCount = 1
	If dictWMIs.Count = 0 Then
		WScript.Echo &amp;quot;SQL Not Found&amp;quot;
	Else
		For Each objWMI In dictWMIs.Keys
			strOut = GetSQLServiceAdvancedProp(strProp,objWMI)
			If Len(strOut) &amp;gt; 0 Then
				intOutCount = intOutCount + 1
				WScript.Echo strOut
			Else
				WScript.Echo &amp;quot;SQL Not Found&amp;quot;
				DebugPrint &amp;quot;SQL Property Not Found&amp;quot;
			End If
		Next
	End If

End Sub &amp;#039;PrintProp 

Function PrintServices
	BuildSQLServicesNames objWMI,dictServices
	&amp;#039; Print Services
	Dim strService
	For Each strService In dictServices.Keys
		WScript.Echo strService
	Next
End Function &amp;#039;PrintServices

Function GetBitnessFromSKU(strSKUName)
&amp;#039; Returns appropriate bitness from SKU value
	Dim strArchitecture
	If Instr(strSKUName, &amp;quot; (&amp;quot;) &amp;lt;&amp;gt; 0 Then
	    strArchitecture = &amp;quot;64-bit&amp;quot;
	Else
	    strArchitecture = &amp;quot;32-bit&amp;quot;
	End If
	GetBitnessFromSKU = strArchitecture
	
End Function &amp;#039;GetBitnessFromSKU

Function GetCleanEdition(strSKUName)
&amp;#039; Removes bitness from SKU value
	Dim strEdition
	If Instr(strSKUName, &amp;quot; (&amp;quot;) &amp;lt;&amp;gt; 0 Then
	    strEdition = Left(strSKUName, Instr(strSKUName, &amp;quot; (&amp;quot;))
	Else
	    strEdition = strSKUName
	End If

	GetCleanEdition = strEdition
	
End Function &amp;#039;CleanSKU

Function GetSQLServiceAdvancedProp(strProp,ByRef objWMI)
&amp;#039; Property Names may change for different SQL versions
&amp;#039;SQLSTATES,VERSION,SPLEVEL,CLUSTERED,INSTALLPATH,DATAPATH,LANGUAGE,FILEVERSION,
&amp;#039;VSNAME,REGROOT,SKU,SKUNAME,INSTANCEID,STARTUPPARAMETERS,ERRORREPORTING,DUMPDIR,
&amp;#039;SQMREPORTING,ISWOW64
	On Error Resume Next
	Dim strOut, intType, strPropVal, colResults
	strProp = UCase(strProp) &amp;#039; text matches will happen when uppercased
	Set colResults = objWMI.ExecQuery(&amp;quot;select * from SqlServiceAdvancedProperty where SQLServiceType = 1&amp;quot;)
	For Each objProp In colResults
	    If objProp.PropertyName = strProp Then
	    	intType = objProp.PropertyValueType
	    	If Err.Number &amp;lt;&amp;gt; 0 Then
				DebugPrint Err.Description &amp;amp; &amp;quot; inttype is &amp;quot; &amp;amp; objProp.PropertyValueType
				Err.Clear
			End If	
	    	If intType = 0 Then
	        	strOut = objProp.PropertyStrValue
		      	If Err.Number &amp;lt;&amp;gt; 0 Then
					DebugPrint Err.Description &amp;amp; &amp;quot; strout is &amp;quot; &amp;amp; objProp.PropertyStrValue
					Err.Clear
				End If	  	
	        Else
	        	strOut = objProp.PropertyNumValue
	        End If
		End If
	Next

	Err.Clear
	On Error Goto 0
	GetSQLServiceAdvancedProp = strOut

	If DEBUG_OUT = True Then
		WScript.Echo &amp;quot;Debug, listing all props &amp;quot;
		On Error Resume Next
		For Each objProp In colResults
	    	intType = objProp.PropertyValueType

	    	If intType = 0 Then
	        	strOut = objProp.PropertyStrValue	
	        Else
	        	strOut = objProp.PropertyNumValue
	        End If
		WScript.Echo &amp;quot;Property name: &amp;quot;&amp;amp;objProp.PropertyName&amp;amp;&amp;quot;, valuetype: &amp;quot;&amp;amp;intType&amp;amp;&amp;quot;, value: &amp;quot;&amp;amp;strOut
	   	Next
	 End If
End Function &amp;#039;GetSQLServiceAdvancedProp

Sub BuildSQLServicesNames(ByRef objWMI,ByRef dictServices)

	Dim strService
	
	For Each objProp In objWMI.ExecQuery(&amp;quot;select * from SqlServiceAdvancedProperty where SQLServiceType = 1&amp;quot;)
		strService = objProp.ServiceName
		If Not IsNull(strService) Then
			If Not dictServices.Exists(strService) Then
				dictServices.Add strService,1
			End If
		End If
	Next
		
End Sub &amp;#039;BuildSQLServicesNames

Sub DebugPrint(ByRef strToPrint)

	If DEBUG_OUT Then
		WScript.Echo strToPrint
	End If
End Sub &amp;#039;DebugPrint

Sub BuildSQLCompMgmtWMIsDict(ByRef dictWMIs)

	&amp;#039; Define a constant MAX_SQL_NUMBER in global scope
	Dim objWMI,i,strWMINameSpace
	On Error Resume Next

    &amp;#039; First try 2005
    strWMINameSpace = &amp;quot;WINMGMTS:\\.\root\Microsoft\SqlServer\ComputerManagement&amp;quot;
    Set objWMI = GetObject(strWMINameSpace)
    If Err.Number = 0 Then
    	dictWMIs.Add objWMI,strWMINameSpace
    	DebugPrint strWMINameSpace
    Else
    	Err.Clear
    	&amp;#039; Loop through 2008 to 2012 and beyond
        For i = 10 To MAX_SQL_NUMBER
        	strWMINameSpace = &amp;quot;WINMGMTS:\\.\root\Microsoft\SqlServer\ComputerManagement&amp;quot;&amp;amp;CStr(i)
        	Set objWMI = GetObject(strWMINameSpace)
        	If Err.Number = 0 Then
        		dictWMIs.Add objWMI,strWMINameSpace
        		DebugPrint strWMINameSpace
        	Else
        		Err.Clear
        	End If
        Next
	End If
	
	Err.Clear
	On Error Goto 0
	If dictWMIs.Count = 0 Then
		WScript.Echo &amp;quot;SQL Not Found&amp;quot;
		WScript.Quit
	End If
	
End Sub &amp;#039;BuildSQLCompMgmtWMIsDict</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>55</cache_row_id>
          </sensor>
          <sensor>
            <id>110</id>
            <name>SQL Database Sizes</name>
            <hash>3796118374</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description></description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Buffer Hit Ratio
&amp;#039;========================================
&amp;#039;@INCLUDE=sql/mssql_connection_utils.vbs

Option Explicit

Dim dictInstances, strInstance, objConnection

Set dictInstances = GetMSSQLInstances()

For Each strInstance In dictInstances.Keys
	Dim objRecordSet, objRecordSet2, objConnection2, Record, strDatabase, strDBSize
	Set objConnection = CreateObject(&amp;quot;ADODB.Connection&amp;quot;) 
	Set objRecordSet = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;)  
	Set objConnection2 = CreateObject(&amp;quot;ADODB.Connection&amp;quot;) 
	Set objRecordSet2 = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;)  
	
	On Error Resume Next
	objConnection.Open GenMSSQLConnectionStr(strInstance, &amp;quot;master&amp;quot;)
	
	If objConnection.Errors.Count &amp;gt; 0 Then 
		WScript.Echo &amp;quot;Access Error (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
		Exit For
	End If 
	
	On Error Goto 0
	
	objRecordSet.Open &amp;quot;SELECT name FROM sys.databases&amp;quot;, objConnection, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC  
	
	For Each Record In objRecordSet.Properties    
		strDatabase = objRecordSet(&amp;quot;name&amp;quot;)    
		objConnection2.Open GenMSSQLConnectionStr(strInstance, strDatabase)    
		
		If objConnection2.Errors.Count &amp;gt; 0 Then 
			WScript.Echo &amp;quot;Access Error (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
			Exit For
		End If 
		
		On Error Goto 0
		
		objRecordSet2.Open &amp;quot;Select cast(size * 8/1024.0 as decimal(18,2)) SpaceUsed_MB From SYS.database_files where type_desc = &amp;#039;ROWS&amp;#039;&amp;quot;, objConnection2, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC       
		strDBSize = objRecordSet2(&amp;quot;SpaceUsed_MB&amp;quot;)       
		WScript.echo strDatabase &amp;amp; &amp;quot; &amp;quot; &amp;amp; strDBSize &amp;amp; &amp;quot;MB&amp;quot; &amp;amp; GetMSSQLSensorInstanceStr(strInstance)
		objRecordset2.Close    
		objConnection2.Close     
		ObjRecordSet.MoveNext    
		If (ObjRecordset.EOF = True) Then       
			objRecordset.Close       
			Exit For    
		End If     
	Next 
Next
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: sql/mssql_connection_utils.vbs

&amp;#039; Common constants for MSSQL lookups
Const AD_OPEN_STATIC = 3 
Const AD_LOCK_OPTIMISTIC = 3  


Function GetMSSQLInstances()
    Dim dictResult, objWMIService, colServices, objService
    Dim strCaption, strInstance, intStartIndex, intStopIndex
    Set dictResult = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

    Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
    Set colServices = objWMIService.ExecQuery (&amp;quot;select * from win32_Service&amp;quot;)  
    For Each objService In colServices
        strCaption = objService.Caption
    
        If (InStr(strCaption,&amp;quot;SQL Server&amp;quot;) &amp;lt;&amp;gt; 0 And ObjService.State = &amp;quot;Running&amp;quot;) Then    
            &amp;#039; OK -- found SQL Server on this machien, now we need to find the instance name
            &amp;#039; if this is the correct service
            strInstance = &amp;quot;.&amp;quot;
            intStartIndex = InStr(strCaption, &amp;quot;(&amp;quot;)
            intStopIndex = InStr(strCaption, &amp;quot;)&amp;quot;)
            
            If(intStartIndex &amp;lt;&amp;gt; 0) And (intStopIndex &amp;lt;&amp;gt; 0) Then 
                strInstance = Mid(strCaption, intStartIndex + 1, intStopIndex - intStartIndex - 1)
                    
                If strInstance = &amp;quot;MSSQLSERVER&amp;quot; Then 
                    strInstance = &amp;quot;.&amp;quot;
                End If 

                If Not dictResult.Exists(strInstance) Then
                    dictResult.Add strInstance, True
                End if
            End If             
        End If  
    Next  
    
    Set GetMSSQLInstances = dictResult

End Function &amp;#039; GetMSSQLInstances

Function GenMSSQLConnectionStr(strInstance, strCatalog) 
    Dim strDataSource, strConnection

    If strInstance = &amp;quot;.&amp;quot; Then 
        strDataSource = strInstance
    Else 
        strDataSource = &amp;quot;.\&amp;quot; &amp;amp; strInstance
    End If 

    strConnection = &amp;quot;Provider=SQLOLEDB;Data Source=&amp;quot; &amp;amp; strDataSource &amp;amp; &amp;quot;;Trusted_Connection=Yes;Initial Catalog=&amp;quot; &amp;amp; strCatalog &amp;amp; &amp;quot;;&amp;quot;

    GenMSSQLConnectionStr = strConnection
End Function &amp;#039; OpenMSSQLConnection

Function GetMSSQLSensorInstanceStr(strInstance)
    If strInstance = &amp;quot;.&amp;quot; Then
        GetMSSQLSensorInstanceStr = &amp;quot;&amp;quot;
    Else
        GetMSSQLSensorInstanceStr = &amp;quot; (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
    End If
End Function &amp;#039; GetMSSQLSensorInstanceStr
&amp;#039;- End file: sql/mssql_connection_utils.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>56</cache_row_id>
          </sensor>
          <sensor>
            <id>112</id>
            <name>SQL Log Sizes</name>
            <hash>77425467</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description></description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Log Sizes
&amp;#039;========================================
&amp;#039;@INCLUDE=sql/mssql_connection_utils.vbs

Option Explicit

Dim dictInstances, strInstance, objConnection

Set dictInstances = GetMSSQLInstances()

For Each strInstance In dictInstances.Keys
	Dim objRecordSet, objRecordSet2, objConnection2, Record, strDatabase, strDBSize
	Set objConnection = CreateObject(&amp;quot;ADODB.Connection&amp;quot;) 
	Set objRecordSet = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;)  
	Set objConnection2 = CreateObject(&amp;quot;ADODB.Connection&amp;quot;) 
	Set objRecordSet2 = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;)  
	On Error Resume Next
	objConnection.Open GenMSSQLConnectionStr(strInstance, &amp;quot;master&amp;quot;)
	
	If objConnection.Errors.Count &amp;gt; 0 Then 
		WScript.Echo &amp;quot;Access Error (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
		Exit For
	End If 
	On Error Goto 0

	objRecordSet.Open &amp;quot;SELECT name FROM sys.databases&amp;quot;, objConnection, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC  
	For each Record in objRecordSet.Properties    
		strDatabase = objRecordSet(&amp;quot;name&amp;quot;)    
		&amp;#039;SpaceUsed_MB = 0     
		objConnection2.Open GenMSSQLConnectionStr(strInstance, strDatabase) 

		If objConnection.Errors.Count &amp;gt; 0 Then 
			WScript.Echo &amp;quot;Access Error (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
			Exit For
		End If 
		On Error Goto 0

		objRecordSet2.Open &amp;quot;Select cast(size * 8/1024.0 as decimal(18,2)) SpaceUsed_MB From SYS.database_files where type_desc = &amp;#039;LOG&amp;#039;&amp;quot;, objConnection2, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC       
		strDBSize = objRecordSet2(&amp;quot;SpaceUsed_MB&amp;quot;)       
		WScript.echo StrDatabase &amp;amp; &amp;quot; &amp;quot; &amp;amp; StrDBSize &amp;amp; &amp;quot;MB&amp;quot; &amp;amp; GetMSSQLSensorInstanceStr(strInstance)      
		objRecordset2.Close    
		objConnection2.Close     
		objRecordSet.MoveNext    
		If (ObjRecordset.EOF = True) THEN       
			objRecordset.Close       
			Exit For    
		End If     
	Next 
Next
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: sql/mssql_connection_utils.vbs

&amp;#039; Common constants for MSSQL lookups
Const AD_OPEN_STATIC = 3 
Const AD_LOCK_OPTIMISTIC = 3  


Function GetMSSQLInstances()
    Dim dictResult, objWMIService, colServices, objService
    Dim strCaption, strInstance, intStartIndex, intStopIndex
    Set dictResult = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

    Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
    Set colServices = objWMIService.ExecQuery (&amp;quot;select * from win32_Service&amp;quot;)  
    For Each objService In colServices
        strCaption = objService.Caption
    
        If (InStr(strCaption,&amp;quot;SQL Server&amp;quot;) &amp;lt;&amp;gt; 0 And ObjService.State = &amp;quot;Running&amp;quot;) Then    
            &amp;#039; OK -- found SQL Server on this machien, now we need to find the instance name
            &amp;#039; if this is the correct service
            strInstance = &amp;quot;.&amp;quot;
            intStartIndex = InStr(strCaption, &amp;quot;(&amp;quot;)
            intStopIndex = InStr(strCaption, &amp;quot;)&amp;quot;)
            
            If(intStartIndex &amp;lt;&amp;gt; 0) And (intStopIndex &amp;lt;&amp;gt; 0) Then 
                strInstance = Mid(strCaption, intStartIndex + 1, intStopIndex - intStartIndex - 1)
                    
                If strInstance = &amp;quot;MSSQLSERVER&amp;quot; Then 
                    strInstance = &amp;quot;.&amp;quot;
                End If 

                If Not dictResult.Exists(strInstance) Then
                    dictResult.Add strInstance, True
                End if
            End If             
        End If  
    Next  
    
    Set GetMSSQLInstances = dictResult

End Function &amp;#039; GetMSSQLInstances

Function GenMSSQLConnectionStr(strInstance, strCatalog) 
    Dim strDataSource, strConnection

    If strInstance = &amp;quot;.&amp;quot; Then 
        strDataSource = strInstance
    Else 
        strDataSource = &amp;quot;.\&amp;quot; &amp;amp; strInstance
    End If 

    strConnection = &amp;quot;Provider=SQLOLEDB;Data Source=&amp;quot; &amp;amp; strDataSource &amp;amp; &amp;quot;;Trusted_Connection=Yes;Initial Catalog=&amp;quot; &amp;amp; strCatalog &amp;amp; &amp;quot;;&amp;quot;

    GenMSSQLConnectionStr = strConnection
End Function &amp;#039; OpenMSSQLConnection

Function GetMSSQLSensorInstanceStr(strInstance)
    If strInstance = &amp;quot;.&amp;quot; Then
        GetMSSQLSensorInstanceStr = &amp;quot;&amp;quot;
    Else
        GetMSSQLSensorInstanceStr = &amp;quot; (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
    End If
End Function &amp;#039; GetMSSQLSensorInstanceStr
&amp;#039;- End file: sql/mssql_connection_utils.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>57</cache_row_id>
          </sensor>
          <sensor>
            <id>114</id>
            <name>SQL Database Recovery Mode</name>
            <hash>1240245618</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description></description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Database Recovery Mode
&amp;#039;========================================
&amp;#039;@INCLUDE=sql/mssql_connection_utils.vbs

Option Explicit
Dim dictInstances, strInstance, objConnection

Set dictInstances = GetMSSQLInstances()

For Each strInstance In dictInstances.Keys
	Dim objRecordSet, objRecordSet2, Record, strDatabase, strDBRecovery

	Set objConnection = CreateObject(&amp;quot;ADODB.Connection&amp;quot;) 
	Set objRecordSet = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;) 
	Set objRecordSet2 = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;)  
	On Error Resume Next
	objConnection.Open GenMSSQLConnectionStr(strInstance, &amp;quot;master&amp;quot;)
	
	If objConnection.Errors.Count &amp;gt; 0 Then 
		WScript.Echo &amp;quot;Access Error (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
		Exit For
	End If 
	
	On Error Goto 0
	
	objRecordSet.Open &amp;quot;SELECT name FROM sys.databases&amp;quot;, objConnection, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC  
	For Each Record In objRecordSet.Properties    
		strDatabase = objRecordSet(&amp;quot;name&amp;quot;)    
		objRecordSet2.Open &amp;quot;select databasepropertyex([name],&amp;#039;Recovery&amp;#039;) as [Recovery] from dbo.sysdatabases where name=&amp;quot; &amp;amp; &amp;quot;&amp;#039;&amp;quot; &amp;amp; strDatabase &amp;amp; &amp;quot;&amp;#039;&amp;quot;, _         
			objConnection, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC       
		strDBRecovery = objRecordSet2(&amp;quot;Recovery&amp;quot;)       
		WScript.echo strDatabase &amp;amp; &amp;quot; &amp;quot; &amp;amp; strDBRecovery &amp;amp; GetMSSQLSensorInstanceStr(strInstance)
		objRecordset2.Close     
		ObjRecordSet.MoveNext    
		If (ObjRecordset.EOF = True) Then       
			objRecordset.Close       
			Exit For    
		End If     
	Next 
Next
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: sql/mssql_connection_utils.vbs

&amp;#039; Common constants for MSSQL lookups
Const AD_OPEN_STATIC = 3 
Const AD_LOCK_OPTIMISTIC = 3  


Function GetMSSQLInstances()
    Dim dictResult, objWMIService, colServices, objService
    Dim strCaption, strInstance, intStartIndex, intStopIndex
    Set dictResult = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

    Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
    Set colServices = objWMIService.ExecQuery (&amp;quot;select * from win32_Service&amp;quot;)  
    For Each objService In colServices
        strCaption = objService.Caption
    
        If (InStr(strCaption,&amp;quot;SQL Server&amp;quot;) &amp;lt;&amp;gt; 0 And ObjService.State = &amp;quot;Running&amp;quot;) Then    
            &amp;#039; OK -- found SQL Server on this machien, now we need to find the instance name
            &amp;#039; if this is the correct service
            strInstance = &amp;quot;.&amp;quot;
            intStartIndex = InStr(strCaption, &amp;quot;(&amp;quot;)
            intStopIndex = InStr(strCaption, &amp;quot;)&amp;quot;)
            
            If(intStartIndex &amp;lt;&amp;gt; 0) And (intStopIndex &amp;lt;&amp;gt; 0) Then 
                strInstance = Mid(strCaption, intStartIndex + 1, intStopIndex - intStartIndex - 1)
                    
                If strInstance = &amp;quot;MSSQLSERVER&amp;quot; Then 
                    strInstance = &amp;quot;.&amp;quot;
                End If 

                If Not dictResult.Exists(strInstance) Then
                    dictResult.Add strInstance, True
                End if
            End If             
        End If  
    Next  
    
    Set GetMSSQLInstances = dictResult

End Function &amp;#039; GetMSSQLInstances

Function GenMSSQLConnectionStr(strInstance, strCatalog) 
    Dim strDataSource, strConnection

    If strInstance = &amp;quot;.&amp;quot; Then 
        strDataSource = strInstance
    Else 
        strDataSource = &amp;quot;.\&amp;quot; &amp;amp; strInstance
    End If 

    strConnection = &amp;quot;Provider=SQLOLEDB;Data Source=&amp;quot; &amp;amp; strDataSource &amp;amp; &amp;quot;;Trusted_Connection=Yes;Initial Catalog=&amp;quot; &amp;amp; strCatalog &amp;amp; &amp;quot;;&amp;quot;

    GenMSSQLConnectionStr = strConnection
End Function &amp;#039; OpenMSSQLConnection

Function GetMSSQLSensorInstanceStr(strInstance)
    If strInstance = &amp;quot;.&amp;quot; Then
        GetMSSQLSensorInstanceStr = &amp;quot;&amp;quot;
    Else
        GetMSSQLSensorInstanceStr = &amp;quot; (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
    End If
End Function &amp;#039; GetMSSQLSensorInstanceStr
&amp;#039;- End file: sql/mssql_connection_utils.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>58</cache_row_id>
          </sensor>
          <sensor>
            <id>116</id>
            <name>Custom Tags</name>
            <hash>3004497651</hash>
            <string_count>0</string_count>
            <category>Tags</category>
            <description>Any specified custom tags that have been set for this machine.  See the Custom Tagging Dashboard.
Example:  Development, Test-Machines</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Custom Tags
&amp;#039;========================================

Dim reg
Set reg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)
const HKLM = &amp;amp;H80000002

Dim strRegKey
strRegKey = GetTaniumRegistryPath() &amp;amp; &amp;quot;\Sensor Data\Tags&amp;quot;

If Not RegKeyExists(reg, HKLM, strRegKey) Then
	reg.createKey HKLM, strRegKey
End If

reg.enumValues HKLM, strRegKey, arrValues

If Not IsNull(arrValues) Then
	For Each strValueName In arrValues
		WScript.Echo strValueName
	Next
End If


Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function


Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		GetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		GetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;GetTaniumRegistryPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

TAGFILE=&amp;quot;Tools/CustomTags.txt&amp;quot;

if [ -e $TAGFILE ]; then
  cat $TAGFILE
else
  echo &amp;quot;&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

TAGFILE=&amp;quot;Tools/CustomTags.txt&amp;quot;

if [ -e $TAGFILE ]; then
  cat $TAGFILE
else
  echo &amp;quot;&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>59</cache_row_id>
          </sensor>
          <sensor>
            <id>118</id>
            <name>Application Crashes Yesterday</name>
            <hash>607666494</hash>
            <string_count>3</string_count>
            <category>Applications</category>
            <description>A multi-column Sensor that shows processes that have crashed yesterday, including the instance number to capture multiple crashes by the same process.
Example: firefox.exe | 3</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Application Crashes Yesterday
&amp;#039;========================================
&amp;#039;@INCLUDE=utils/SensorRandomization/SensorRandomizationFunctions.vbs
Option Explicit

SensorRandomize()

Dim strSep
Dim objWMIService, colEvents, objEvent, intCount
Dim dtmStart, dtmEnd

strSep = &amp;quot;|&amp;quot;
intCount = 0

dtmStart = GetYesterdayStart
dtmEnd = GetYesterdayEnd

&amp;#039;Dictionary object used to track duplicate processes
Dim oDic
Set oDic = CreateObject(&amp;quot;scripting.dictionary&amp;quot;)

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
    &amp;amp; &amp;quot;{impersonationLevel=impersonate,authenticationLevel=Pkt,(Security)}!\\.\root\cimv2&amp;quot;) 

Set colEvents = objWMIService.ExecQuery _
    (&amp;quot;SELECT * FROM Win32_NTLogEvent WHERE Message like &amp;#039;Faulting application %&amp;#039; AND Logfile = &amp;#039;Application&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;TimeWritten &amp;gt;= &amp;#039;&amp;quot; &amp;amp; dtmStart &amp;amp; &amp;quot;&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;TimeWritten &amp;lt; &amp;#039;&amp;quot; &amp;amp; dtmEnd &amp;amp; &amp;quot;&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;(EventCode = &amp;#039;1000&amp;#039;)&amp;quot;)


For Each objEvent In colEvents
    Dim strMessage, arrLines, strLine, strApp, strModule, strTime
    
    strMessage = objEvent.Message
    arrLines = Split(strMessage, vbCrLf)
    
    Dim strIndex, strIndexXp

	&amp;#039;just go through first line of log to grab app name
	strLine = arrLines(0)
	
	&amp;#039;strIndex is for new OSes, strIndexXP for older...
	strIndex = &amp;quot;Faulting application name: &amp;quot;
	strIndexXp = &amp;quot;Faulting application &amp;quot;
	If Left(strLine, Len(strIndex)) = strIndex Then
		strApp = Mid(strLine, Len(strIndex) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndex) - 1)
	ElseIf Left(strLine, Len(strIndexXp)) = strIndexXp Then
		strApp = Mid(strLine, Len(strIndexXp) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndexXp) - 1)
	End If
	
	Dim intInstance
	If oDic.Exists(strApp) Then
		oDic.Item(strApp) = oDic.Item(strApp) + 1
		intInstance = oDic.Item(strApp)
	Else
		oDic.Item(strApp) = 1
		intInstance = 1
	End If
	
    strTime = DatetimeToDate(objEvent.TimeWritten)
    	 
	WScript.Echo strApp &amp;amp; strSep &amp;amp; intInstance
	intCount = intCount + 1
	&amp;#039;&amp;amp; strSep &amp;amp; strTime 
	&amp;#039;&amp;amp; strSep &amp;amp; dtmStart &amp;amp; strSep &amp;amp; objEvent.TimeWritten &amp;amp; strSep &amp;amp; dtmEnd
Next

If intCount = 0 Then
	WScript.Echo &amp;quot;No Application Crashes Found&amp;quot; &amp;amp; strSep
End if

Function GetYesterdayStart
	Dim dtmYesterday
	dtmYesterday = Date() - 1
&amp;#039;	WScript.Echo dtmYesterday
	
	Dim dateTime
	Set dateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
	dateTime.SetVarDate dtmYesterday, False
	 
  	GetYesterdayStart = dateTime
End Function

Function GetYesterdayEnd
	Dim dtmYesterday
	dtmYesterday = Date()
&amp;#039;	WScript.Echo dtmYesterday
	
	Dim dateTime
	Set dateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
	dateTime.SetVarDate dtmYesterday, False
	 
  	GetYesterdayEnd = dateTime
End Function

Function DatetimeToDate(strDate)
   DatetimeToDate = _
       CDate(Mid(strDate, 5, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Mid(strDate, 7, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Left(strDate, 4) &amp;amp; _
       &amp;quot; &amp;quot; &amp;amp; _
       Mid (strDate, 9, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 11, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 13, 2))
End Function

Function GetTimeWrittenByDaysOld(days)
   &amp;#039;subtract &amp;quot;days&amp;quot; days worth of seconds

	Dim epoc, monthAgo   
   	epoc = date2epoch(Now()) - days*24*60*60
   	monthAgo = epoch2date(epoc)
   
	Dim dateTime
	Set dateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
	dateTime.SetVarDate monthAgo, True
	 
  	GetTimeWrittenByDaysOld = dateTime
End Function

function date2epoch(myDate)
   date2epoch = DateDiff(&amp;quot;s&amp;quot;, &amp;quot;01/01/1970 00:00:00&amp;quot;, myDate)
end Function

function epoch2date(myEpoch)
   epoch2date = DateAdd(&amp;quot;s&amp;quot;, myEpoch, &amp;quot;01/01/1970 00:00:00&amp;quot;)
end Function
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039;&amp;#039; -- Begin Random Sleep Functions -- &amp;#039;&amp;#039;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &amp;#039; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&amp;#039; sleeps for a random period of time, intSleepTime is in seconds
&amp;#039; if the sensor randomize flag is on
&amp;#039; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&amp;#039; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;amp;&amp;quot;\Sensor Data\Random Sleep&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeFlag&amp;quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeScalingPercentage&amp;quot;)
	On Error Goto 0
	If intRandomizeFlag &amp;gt; 0 Then
		If intRandomizeScalingPercentage &amp;gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &amp;quot;Randomize scaling percentage of &amp;quot; _ 
				&amp;amp; intRandomizeScalingPercentage &amp;amp; &amp;quot; applied, new sleep time is &amp;quot; &amp;amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &amp;#039; convert to milliseconds
		&amp;#039; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&amp;#039; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &amp;quot;Sleeping for &amp;quot; &amp;amp; intSensorRandomizeWaitTime &amp;amp; &amp;quot; milliseconds&amp;quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &amp;quot;Done sleeping, continuing ...&amp;quot;
	Else 
		SensorRandomizeEcho &amp;quot;SensorRandomize Not Enabled - No Op&amp;quot;
	End If
End Function &amp;#039;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&amp;#039; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &amp;lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID / Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID / Timer
	End If
End Function &amp;#039;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&amp;#039;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&amp;#039;&amp;#039; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &amp;quot;ComputerID&amp;quot;
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strKeyPath&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strValueName)
    If Err.Number &amp;lt;&amp;gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &amp;#039;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &amp;lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &amp;#039;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &amp;#039;SensorRandomizeEcho
&amp;#039; -- End Random Sleep Functions --&amp;#039;
&amp;#039;- End file: utils/SensorRandomization/SensorRandomizationFunctions.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>43200</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Process</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Instance #</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>60</cache_row_id>
          </sensor>
          <sensor>
            <id>120</id>
            <name>Last System Crash</name>
            <hash>1724798097</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the date of the last system crash that occurred.
Example: 8/2/2012</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Last System Crash
&amp;#039;========================================

Dim strValueName, strKey

strValueName = &amp;quot;DumpFile&amp;quot;
strDumpsDirName = &amp;quot;MinidumpDir&amp;quot;

&amp;#039;Uses date math - set locale

SetLocale(GetTaniumLocale)

strKey = &amp;quot;SYSTEM\CurrentControlSet\Control\CrashControl&amp;quot;

Set objReg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)
Const HKLM = &amp;amp;h80000002

Dim fso
Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

&amp;#039;Get main dump file
Dim mainDumpDate
If RegKeyExists(objReg, HKLM, strKey) Then
	objReg.GetExpandedStringValue HKLM, strKey, strValueName, strValue

	If fso.FileExists(strValue) Then
		
		Set objFile = fso.GetFile(strValue)
		mainDumpDate = objfile.DateLastModified
	End If
Else
	WScript.Echo &amp;quot;Error, Dump key not found: HKLM\SYSTEM\CurrentControlSet\Control\CrashControl&amp;quot;
End If


&amp;#039;Examine minidump folder
Dim newestMini

If RegKeyExists(objReg, HKLM, strKey) Then
	objReg.GetExpandedStringValue HKLM, strKey, strDumpsDirName, strDumpDir

	If fso.FolderExists(strDumpDir) Then
		Set oFolder = fso.GetFolder(strDumpDir)
		For Each sFile In oFolder.Files
			If Right(LCase(sFile.Name), 4) = &amp;quot;.dmp&amp;quot; Then
			    If newestMini = &amp;quot;&amp;quot; Then
			        Set newestMini = sFile
			    Else
			        If newestMini.DateLastModified &amp;lt; sFile.DateLastModified Then
			          Set newestMini = sFile
			        End If
			    End If
			End If
		Next	
	End If
End If



If newestMini = &amp;quot;&amp;quot; And mainDumpDate = &amp;quot;&amp;quot; Then
	WScript.Echo &amp;quot;No system crashes found&amp;quot;
	WScript.Quit
End If

Dim responseDate
If newestMini = &amp;quot;&amp;quot; Then	
	responseDate = mainDumpDate
ElseIf mainDumpDate = &amp;quot;&amp;quot; Then
	responseDate = newestMini.DateLastModified
Else
	If newestMini.DateLastModified &amp;lt; mainDumpDate Then
		responseDate = mainDumpDate
	Else
		responseDate = newestMini.DateLastModified	
	End If
End If

Dim arrTemp
arrTemp = Split(responseDate)
responseDate = arrTemp(0)

WScript.Echo responseDate

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function GetTaniumLocale
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

	Dim objWshShell
	Dim intLocaleID
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Tanium\Tanium Client\LocaleID&amp;quot;)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client\LocaleID&amp;quot;)
	End If
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	&amp;#039; Cleanup
	Set objWshShell = Nothing

End Function &amp;#039;GetTaniumLocale</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>61</cache_row_id>
          </sensor>
          <sensor>
            <id>122</id>
            <name>Last System Crash in X Days</name>
            <hash>1815821395</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the date at which the last system crash occurred.
Example:5/2/2012</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Last System Crash in X Days
&amp;#039;========================================

dayThresh = LCase(Trim(Unescape(&amp;quot;||dayThresh||&amp;quot;)))
&amp;#039;dayThresh = LCase(Trim(Unescape(&amp;quot;1&amp;quot;)))
If Not IsNumeric(dayThresh) Then 
    WScript.Echo &amp;quot;Parameter Not Number&amp;quot;
    WScript.Quit
End If 
dayThresh = Cint(dayThresh)

Dim strValueName, strKey

strValueName = &amp;quot;DumpFile&amp;quot;
strDumpsDirName = &amp;quot;MinidumpDir&amp;quot;

strKey = &amp;quot;SYSTEM\CurrentControlSet\Control\CrashControl&amp;quot;

Set objReg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)
Const HKLM = &amp;amp;h80000002

&amp;#039;Uses date math - set locale

SetLocale(GetTaniumLocale)

Dim fso
Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

&amp;#039;Get main dump file
Dim mainDumpDate
If RegKeyExists(objReg, HKLM, strKey) Then
	objReg.GetExpandedStringValue HKLM, strKey, strValueName, strValue

	If fso.FileExists(strValue) Then
		
		Set objFile = fso.GetFile(strValue)
		mainDumpDate = objfile.DateLastModified
	End If
Else
	WScript.Echo &amp;quot;Error, Dump key not found: HKLM\SYSTEM\CurrentControlSet\Control\CrashControl&amp;quot;
End If


&amp;#039;Examine minidump folder
Dim newestMini

If RegKeyExists(objReg, HKLM, strKey) Then
	objReg.GetExpandedStringValue HKLM, strKey, strDumpsDirName, strDumpDir

	If fso.FolderExists(strDumpDir) Then
		Set oFolder = fso.GetFolder(strDumpDir)
		For Each sFile In oFolder.Files
		    If newestMini = &amp;quot;&amp;quot; Then
		        Set newestMini = sFile
		    Else
		        If newestMini.DateLastModified &amp;lt; sFile.DateLastModified Then
		          Set newestMini = sFile
		        End If
		    End If
		Next
	End If
End If



If newestMini = &amp;quot;&amp;quot; And mainDumpDate = &amp;quot;&amp;quot; Then
	WScript.Echo &amp;quot;No system crashes found&amp;quot;
	WScript.Quit
End If

Dim responseDate
If newestMini = &amp;quot;&amp;quot; Then	
	responseDate = mainDumpDate
ElseIf mainDumpDate = &amp;quot;&amp;quot; Then
	responseDate = newestMini.DateLastModified
Else
	If newestMini.DateLastModified &amp;lt; mainDumpDate Then
		responseDate = mainDumpDate
	Else
		responseDate = newestMini.DateLastModified	
	End If
End If

current = Now()
dayDiff = DateDiff(&amp;quot;d&amp;quot;, responseDate, current)

Dim arrTemp
If dayDiff &amp;lt;= dayThresh Then
	arrTemp = Split(responseDate)
	responseDate = arrTemp(0)

	WScript.Echo responseDate
Else 
	WScript.Echo &amp;quot;No system crashes in day range&amp;quot;
End If	

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function GetTaniumLocale
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

	Dim objWshShell
	Dim intLocaleID
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Tanium\Tanium Client\LocaleID&amp;quot;)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client\LocaleID&amp;quot;)
	End If
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	&amp;#039; Cleanup
	Set objWshShell = Nothing

End Function &amp;#039;GetTaniumLocale</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;dayThresh&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query and return system crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||dayThresh||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;dayThresh&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query and return system crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||dayThresh||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;dayThresh&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query and return system crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||dayThresh||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;dayThresh&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query and return system crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||dayThresh||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query and return system crashes","defaultValue":"5","key":"dayThresh","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>62</cache_row_id>
          </sensor>
          <sensor>
            <id>124</id>
            <name>Application Crashes in Last X Days</name>
            <hash>1265351278</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>A parameterized Sensor that queries for any processes that have crashed in the last X days.
Example: chrome.exe</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Application Crashes in Last X Days
&amp;#039;========================================
&amp;#039;@INCLUDE=utils/SensorRandomization/SensorRandomizationFunctions.vbs
Option Explicit
Dim strSep
Dim objWMIService, colEvents, objEvent, intCount
Dim dtmStart

strSep = &amp;quot;|&amp;quot;
intCount = 0

&amp;#039;Uses date math - set locale

SetLocale(1033)

dtmStart = GetTimeWrittenByDaysOld(||days||)
&amp;#039;dtmStart = GetTimeWrittenByDaysOld(7)

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
    &amp;amp; &amp;quot;{impersonationLevel=impersonate,authenticationLevel=Pkt,(Security)}!\\.\root\cimv2&amp;quot;) 

Set colEvents = objWMIService.ExecQuery _
    (&amp;quot;SELECT * FROM Win32_NTLogEvent WHERE Message like &amp;#039;Faulting application %&amp;#039; AND Logfile = &amp;#039;Application&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;TimeWritten &amp;gt;= &amp;#039;&amp;quot; &amp;amp; dtmStart &amp;amp; &amp;quot;&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;(EventCode = &amp;#039;1000&amp;#039;)&amp;quot;)

For Each objEvent In colEvents
    Dim strMessage, arrLines, strLine, strApp, strModule, strTime
    
    strMessage = objEvent.Message
    arrLines = Split(strMessage, vbCrLf)
    
    Dim strIndex, strIndexXp

	&amp;#039;just go through first line of log to grab app name
	strLine = arrLines(0)
	
	&amp;#039;strIndex is for new OSes, strIndexXP for older...
	strIndex = &amp;quot;Faulting application name: &amp;quot;
	strIndexXp = &amp;quot;Faulting application &amp;quot;
	If Left(strLine, Len(strIndex)) = strIndex Then
		strApp = Mid(strLine, Len(strIndex) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndex) - 1)
	ElseIf Left(strLine, Len(strIndexXp)) = strIndexXp Then
		strApp = Mid(strLine, Len(strIndexXp) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndexXp) - 1)
	End If
	
    strTime = DatetimeToDate(objEvent.TimeWritten)
    
    Dim strDate, arrTemp
    arrTemp = Split(strTime)
    strDate = arrTemp(0)
	WScript.Echo strApp &amp;amp; strSep &amp;amp; strDate
	intCount = intCount + 1
Next

If intCount = 0 Then
	WScript.Echo &amp;quot;No Application Crashes Found&amp;quot; &amp;amp; strSep
End if

Function DatetimeToDate(strDate)
   DatetimeToDate = _
       CDate(Mid(strDate, 5, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Mid(strDate, 7, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Left(strDate, 4) &amp;amp; _
       &amp;quot; &amp;quot; &amp;amp; _
       Mid (strDate, 9, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 11, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 13, 2))
End Function

Function GetTimeWrittenByDaysOld(days)
   &amp;#039;subtract &amp;quot;days&amp;quot; days worth of seconds

	Dim epoc, monthAgo   
   	epoc = date2epoch(Now()) - days*24*60*60
   	monthAgo = epoch2date(epoc)
   
	Dim dateTime
	Set dateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
	dateTime.SetVarDate monthAgo, True
	 
  	GetTimeWrittenByDaysOld = dateTime
End Function

function date2epoch(myDate)
   date2epoch = DateDiff(&amp;quot;s&amp;quot;, &amp;quot;01/01/1970 00:00:00&amp;quot;, myDate)
end Function

function epoch2date(myEpoch)
   epoch2date = DateAdd(&amp;quot;s&amp;quot;, myEpoch, &amp;quot;01/01/1970 00:00:00&amp;quot;)
end Function
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039;&amp;#039; -- Begin Random Sleep Functions -- &amp;#039;&amp;#039;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &amp;#039; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&amp;#039; sleeps for a random period of time, intSleepTime is in seconds
&amp;#039; if the sensor randomize flag is on
&amp;#039; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&amp;#039; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;amp;&amp;quot;\Sensor Data\Random Sleep&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeFlag&amp;quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeScalingPercentage&amp;quot;)
	On Error Goto 0
	If intRandomizeFlag &amp;gt; 0 Then
		If intRandomizeScalingPercentage &amp;gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &amp;quot;Randomize scaling percentage of &amp;quot; _ 
				&amp;amp; intRandomizeScalingPercentage &amp;amp; &amp;quot; applied, new sleep time is &amp;quot; &amp;amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &amp;#039; convert to milliseconds
		&amp;#039; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&amp;#039; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &amp;quot;Sleeping for &amp;quot; &amp;amp; intSensorRandomizeWaitTime &amp;amp; &amp;quot; milliseconds&amp;quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &amp;quot;Done sleeping, continuing ...&amp;quot;
	Else 
		SensorRandomizeEcho &amp;quot;SensorRandomize Not Enabled - No Op&amp;quot;
	End If
End Function &amp;#039;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&amp;#039; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &amp;lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID / Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID / Timer
	End If
End Function &amp;#039;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&amp;#039;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&amp;#039;&amp;#039; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &amp;quot;ComputerID&amp;quot;
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strKeyPath&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strValueName)
    If Err.Number &amp;lt;&amp;gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &amp;#039;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &amp;lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &amp;#039;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &amp;#039;SensorRandomizeEcho
&amp;#039; -- End Random Sleep Functions --&amp;#039;
&amp;#039;- End file: utils/SensorRandomization/SensorRandomizationFunctions.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||days||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||days||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||days||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||days||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query for Application Crashes","defaultValue":"5","key":"days","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Process</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Date</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>1</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>63</cache_row_id>
          </sensor>
          <sensor>
            <id>126</id>
            <name>Number of Application Crashes in Last X Days</name>
            <hash>3027378756</hash>
            <string_count>0</string_count>
            <category>Software</category>
            <description>Returns the number of application crashes that have occurred in the last number of days supplied to the sensor.
Example: 3</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Number of Application Crashes in Last X Days
&amp;#039;========================================

Option Explicit
Dim strSep
Dim objWMIService, colEvents, objEvent
Dim dtmStart

strSep = &amp;quot;|&amp;quot;

&amp;#039;Uses date math - set locale

SetLocale(1033)


dtmStart = GetTimeWrittenByDaysOld(||days||)

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
    &amp;amp; &amp;quot;{impersonationLevel=impersonate,authenticationLevel=Pkt,(Security)}!\\.\root\cimv2&amp;quot;) 

Set colEvents = objWMIService.ExecQuery _
    (&amp;quot;SELECT * FROM Win32_NTLogEvent WHERE Message like &amp;#039;Faulting application %&amp;#039; AND Logfile = &amp;#039;Application&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;TimeWritten &amp;gt;= &amp;#039;&amp;quot; &amp;amp; dtmStart &amp;amp; &amp;quot;&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;(EventCode = &amp;#039;1000&amp;#039;)&amp;quot;)

Dim numCrashes
numCrashes = 0

For Each objEvent In colEvents
    Dim strMessage, arrLines, strLine, strApp, strModule, strTime
    
    strMessage = objEvent.Message
    arrLines = Split(strMessage, vbCrLf)
    
    Dim strIndex, strIndexXp

	&amp;#039;just go through first line of log to grab app name
	strLine = arrLines(0)
	
	&amp;#039;strIndex is for new OSes, strIndexXP for older...
	strIndex = &amp;quot;Faulting application name: &amp;quot;
	strIndexXp = &amp;quot;Faulting application &amp;quot;
	If Left(strLine, Len(strIndex)) = strIndex Then
		strApp = Mid(strLine, Len(strIndex) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndex) - 1)
	ElseIf Left(strLine, Len(strIndexXp)) = strIndexXp Then
		strApp = Mid(strLine, Len(strIndexXp) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndexXp) - 1)
	End If
	
    strTime = DatetimeToDate(objEvent.TimeWritten)
    	 
	If Not IsNull(strApp) And Not IsEmpty(strApp) Then
		numCrashes = numCrashes + 1
	End If
Next

WScript.Echo numCrashes

Function DatetimeToDate(strDate)
   DatetimeToDate = _
       CDate(Mid(strDate, 5, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Mid(strDate, 7, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Left(strDate, 4) &amp;amp; _
       &amp;quot; &amp;quot; &amp;amp; _
       Mid (strDate, 9, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 11, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 13, 2))
End Function

Function GetTimeWrittenByDaysOld(days)
   &amp;#039;subtract &amp;quot;days&amp;quot; days worth of seconds

	Dim epoc, monthAgo   
   	epoc = date2epoch(Now()) - days*24*60*60
   	monthAgo = epoch2date(epoc)
   
	Dim dateTime
	Set dateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
	dateTime.SetVarDate monthAgo, True
	 
  	GetTimeWrittenByDaysOld = dateTime
End Function

function date2epoch(myDate)
   date2epoch = DateDiff(&amp;quot;s&amp;quot;, &amp;quot;01/01/1970 00:00:00&amp;quot;, myDate)
end Function

function epoch2date(myEpoch)
   epoch2date = DateAdd(&amp;quot;s&amp;quot;, myEpoch, &amp;quot;01/01/1970 00:00:00&amp;quot;)
end Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||days||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||days||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||days||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||days||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query for Application Crashes","defaultValue":"5","key":"days","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>64</cache_row_id>
          </sensor>
          <sensor>
            <id>128</id>
            <name>Wireless Network SSID Strength</name>
            <hash>99939055</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the SSID name and signal strength of a connected wireless network where signal strength is 0-5.
Example: linksys|4</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Wireless Network SSID Strength
&amp;#039;========================================

&amp;#039; This sensor uses netsh output to display details about wireless LAN

Option Explicit

Dim strSep

strSep = &amp;quot;|&amp;quot;
				
&amp;#039; This is a multi-column sensor whose output looks like
&amp;#039; SSID|MAC|State|Network Type|Radio|Authentication|Receive|Transmit|Signal

GetWirelessNetworkDetails strSep

Function GetWirelessNetworkDetails(strSep)

	Dim objShell,objScriptExec
	Dim strCommand, arrNetshResults, strNetshResults
	Dim strNetshLine, strState, strSSID, strSignal, intSignal
	Dim bPrintLine, bNewInterface
	
	strCommand = &amp;quot;netsh wlan show interfaces&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	
	strNetshResults = LCase(objScriptExec.StdOut.ReadAll)
	arrNetshResults = Split(LCase(strNetshResults),vbCrLf)
	
	For Each strNetshLine In arrNetshResults
		If InStr(strNetshLine,&amp;quot;name&amp;quot;) &amp;gt; 0 Then
			bNewInterface = True	&amp;#039; if there&amp;#039;s a new Name, it&amp;#039;s time to note a new group
		End If
		If InStr(strNetshLine, &amp;quot;state&amp;quot;) &amp;gt; 0 Then
			strState = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;ssid&amp;quot;) &amp;gt; 0 And Not InStr(strNetshLine, &amp;quot;bssid&amp;quot;) &amp;gt; 0 Then
			strSSID = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine,&amp;quot;signal&amp;quot;) &amp;gt; 0 Then
			strSignal = Replace(Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)),&amp;quot;%&amp;quot;,&amp;quot;&amp;quot;) &amp;#039; remove the percentage
			intSignal = CInt(CInt(strSignal) / 20)
			bPrintLine = True &amp;#039; If we&amp;#039;ve found an Signal Value, it&amp;#039;s time to print the line.
		End If
		If bNewInterface And bPrintLine Then
			&amp;#039; if it&amp;#039;s a new group, and at last line in the new group, print
			WScript.Echo strSSID &amp;amp; strSep &amp;amp; intSignal
			bPrintLine = False
		End If
	Next
	
	&amp;#039;Cleanup
	Set objScriptExec = Nothing
	Set objShell = Nothing
End Function &amp;#039;GetWirelessNetworkDetails</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
# cah
# Created 20140620
# Modified
# looking for wireless network SSIDs actively connected 
# SSID MAC State NetworkType Radio Authentication Receive Transmit Signal(0-5) , delimiter is |
# Quality conversions based off of: http://stackoverflow.com/questions/15797920/how-to-convert-wifi-signal-strength-from-quality-percent-to-rssi-dbm

AIRPATH=&amp;quot;/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources&amp;quot;
RADIO=&amp;quot;unknown&amp;quot;

DEVID=$(networksetup -listallhardwareports | grep -A1 Wi-Fi | awk -F &amp;quot;Device: &amp;quot; &amp;#039;{print $2}&amp;#039; | grep -v &amp;quot;^$&amp;quot;)
#echo $DEVID
DEVMAC=$(networksetup -getmacaddress $DEVID | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039; | awk -F&amp;quot;(&amp;quot; &amp;#039;{print $1}&amp;#039;)

#Get SSID
SSID=$(networksetup -getairportnetwork $DEVID | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039;)
#echo $SSID

if [ ! &amp;quot;$SSID&amp;quot; ] ; then
	SSID=&amp;quot;Not Available&amp;quot;	
	SIGNAL=&amp;quot;Not Available&amp;quot;
fi

if [ &amp;quot;$SSID&amp;quot; != &amp;quot;Not Available&amp;quot; ] ; then
  PWR=$( $AIRPATH/airport -I | awk -F&amp;quot;agrCtlRSSI:&amp;quot; &amp;#039;{print $2}&amp;#039; | grep -v &amp;quot;^$&amp;quot; )
# This is to convert from power to MS dummy gauge
    if  (( $PWR &amp;lt;= &amp;quot;-100&amp;quot; )) ; then
  	SIGNAL=&amp;quot;0&amp;quot;
   elif (((  $PWR &amp;gt; &amp;quot;-100&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-93&amp;quot; ))) ; then
  	SIGNAL=&amp;quot;1&amp;quot;
   elif (((  $PWR &amp;gt;= &amp;quot;-93&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-87&amp;quot; ))) ; then
  	SIGNAL=&amp;quot;2&amp;quot;
   elif (((  $PWR &amp;gt;= &amp;quot;-87&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-75&amp;quot; ))) ; then
  	SIGNAL=&amp;quot;3&amp;quot;
   elif ((( $PWR &amp;gt;= &amp;quot;-75&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-50&amp;quot; ))) ; then
  	SIGNAL=&amp;quot;4&amp;quot;
   else
  	SIGNAL=&amp;quot;5&amp;quot;
  fi  
else 
  STATE=$( $AIRPATH/airport -I | grep &amp;quot;state:&amp;quot; | awk &amp;#039;{print $2}&amp;#039; )
  if [ ! &amp;quot;$STATE&amp;quot; ] ; then
    STATE=&amp;quot;off&amp;quot;
    echo &amp;quot;$STATE&amp;quot;
  fi
fi

echo &amp;quot;$SSID | $SIGNAL  ($PWR dB)  &amp;quot;

exit</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>300</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>SSID</name>
                <index>0</index>
                <value_type>Numeric</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Strength (0-5)</name>
                <index>1</index>
                <value_type>Numeric</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>65</cache_row_id>
          </sensor>
          <sensor>
            <id>130</id>
            <name>Wireless Network Used by Tanium</name>
            <hash>4206488295</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the SSID name, the IP Address, and the MAC address of connected wireless networks only if the Tanium Client is using those networks to communicate.
Example: linksys|192.168.10.5|00D55FED214C1A2C</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Wireless Network Used by Tanium
&amp;#039;========================================

&amp;#039; This sensor uses netsh output to display details about wireless LAN
&amp;#039; if the IP is used by the Tanium Client


Option Explicit

Dim strSep, strTaniumIPAddress, strTaniumMAC

strTaniumIPAddress = GetTaniumIPAddress
If strTaniumIPAddress = False Then 
	WScript.Echo &amp;quot;Can&amp;#039;t retrieve Tanium Client&amp;#039;s IP address&amp;quot;
End If

strTaniumMAC = GetMACByIP(strTaniumIPAddress)

strSep = &amp;quot;|&amp;quot;
			
&amp;#039; This is a multi-column sensor whose output looks like
&amp;#039; SSID|IPAddress|MAC

GetTaniumWirelessNetworkDetailsFromMAC strSep, strTaniumMAC, strTaniumIPAddress

Function GetTaniumWirelessNetworkDetailsFromMAC(strSep, strMACArg, strIPAddressArg)

	Dim objShell,objScriptExec
	Dim strCommand, arrNetshResults, strNetshResults
	Dim strNetshLine, strState, strSSID, strSignal, intSignal
	Dim bPrintLine, bNewInterface, strMAC
	Dim bFoundMAC
	
	strCommand = &amp;quot;netsh wlan show interfaces&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	
	strNetshResults = LCase(objScriptExec.StdOut.ReadAll)
	arrNetshResults = Split(LCase(strNetshResults),vbCrLf)
	
	bFoundMAC = False
	
	For Each strNetshLine In arrNetshResults
		If InStr(strNetshLine,&amp;quot;name&amp;quot;) &amp;gt; 0 Then
			bNewInterface = True	&amp;#039; if there&amp;#039;s a new Name, it&amp;#039;s time to note a new group
		End If
		If InStr(strNetshLine, &amp;quot;state&amp;quot;) &amp;gt; 0 Then
			strState = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
		If InStr(strNetshLine, &amp;quot;ssid&amp;quot;) &amp;gt; 0 And Not InStr(strNetshLine, &amp;quot;bssid&amp;quot;) &amp;gt; 0 Then
			strSSID = Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1))
		End If
	If InStr(strNetshLine, &amp;quot;physical address&amp;quot;) &amp;gt; 0 Then
			strMAC = Trim(Split(strNetshLine,&amp;quot;: &amp;quot;)(1))
			If LCase(strMAC) = LCase(strMACArg) Then
				bFoundMAC = True
			End If
		End If		
		If InStr(strNetshLine,&amp;quot;signal&amp;quot;) &amp;gt; 0 Then
			strSignal = Replace(Trim(Split(strNetshLine,&amp;quot;:&amp;quot;)(1)),&amp;quot;%&amp;quot;,&amp;quot;&amp;quot;) &amp;#039; remove the percentage
			intSignal = CInt(CInt(strSignal) / 20)
			bPrintLine = True &amp;#039; If we&amp;#039;ve found an Signal Value, it&amp;#039;s time to print the line.
		End If
		If bNewInterface And bPrintLine And bFoundMAC Then
			&amp;#039; if it&amp;#039;s a new group, and at last line in the new group, and we found MAC, print
			strIPAddressArg = left(strIPAddressArg,len(strIPAddressArg)-4)
			WScript.Echo strSSID &amp;amp; strSep &amp;amp; strIPAddressArg &amp;amp; strSep &amp;amp; intSignal
			bPrintLine = False
		End If
	Next
	
	If Not bFoundMAC Then
		WScript.Echo &amp;quot;:Wired:&amp;quot;
	End If
	
	&amp;#039;Cleanup
	Set objScriptExec = Nothing
	Set objShell = Nothing
End Function &amp;#039;GetWirelessNetworkDetailsFromMAC

Function GetTaniumIPAddress
&amp;#039; Modified from the ua-scan code to remove the subnet and last octet calculations
&amp;#039; which are irrelevant for these purposes.
&amp;#039; Returns the IP address that the client uses for Tanium activity
&amp;#039; (talking to server and other clients)

	Dim strComputer, objReg, strCommand, objShell, objScriptExec
	Dim strResults, arrPathPingLines, strPathPingLine, arrPathPingWords
	Dim strIPAddress, strTaniumPath, strClientAddress
	Dim strServerName
	
	strComputer = &amp;quot;.&amp;quot;
	Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)
	Const HKLM = &amp;amp;h80000002
	
		
	&amp;#039;&amp;#039;###########Get Tanium Key on 64/32bit computers##########
	
	strTaniumPath = GetTaniumRegistryPath()
	
	
	&amp;#039; if we can pull this from the registry (newer client version), just use that
	objReg.GetStringValue HKLM, strTaniumPath &amp;amp; &amp;quot;\Status&amp;quot;, &amp;quot;ClientAddress&amp;quot;, strClientAddress
	If strClientAddress &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
		strClientAddress = Left(strClientAddress,InStr(strClientAddress,&amp;quot;_&amp;quot;)-1)
		strClientAddress = Right(strClientAddress,len(strClientAddress)-InStrRev(strClientAddress,&amp;quot;:&amp;quot;))
		&amp;#039; WScript.Echo &amp;quot;Found &amp;quot; &amp;amp; strClientAddress &amp;amp; &amp;quot; in Registry&amp;quot;
		GetTaniumIPAddress = strClientAddress
		&amp;#039;Cleanup
		Set objReg = Nothing
		Exit Function
	End If
	
	&amp;#039;Otherwise use PathPing to determine client IP used by Tanium

	&amp;#039;&amp;#039;# Read the ServerName value

	objReg.GetStringValue HKLM, strTaniumPath, &amp;quot;ServerName&amp;quot;, strServerName

	strCommand = &amp;quot;pathping -4 -q 1 -w 1 -n &amp;quot; &amp;amp; strServerName
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	strResults = objScriptExec.StdOut.ReadAll
	
	arrPathPingLines = Split(strResults, vbCrLf)
	For Each strPathPingLine In arrPathPingLines
		arrPathPingWords = Split(CleanWhitespace(Trim(strPathPingLine)), &amp;quot; &amp;quot;)
		If UBound(arrPathPingWords) &amp;gt; 0 Then
			If arrPathPingWords(0) = &amp;quot;0&amp;quot; Then
				strIPAddress = arrPathPingWords(1)
				Exit For
			End If
		End If	
	Next
	
	Set objShell = Nothing
	Set objScriptExec = Nothing
	Set objReg = Nothing

	If Not IsNull(strIPAddress) Then
		GetTaniumIPAddress = strIPAddress
	Else
		GetTaniumIPAddress = False
	End If
End Function &amp;#039;GetTaniumIPAddress


Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function GetMACByIP(strIP)

	Dim strFoundIP, strFoundMAC, bFound
	Dim objWMIService, colItems, objItem
	
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_NetworkAdapterConfiguration&amp;quot;,,48)
	
	For Each objItem in colItems
		If Not IsNull(objItem.IPAddress) Then
			For Each strFoundIP In objItem.IPAddress
				If strIP = strFoundIP Then
					bFound = True
					strFoundMAC = objItem.MACAddress
				End If
			Next
		End If
	Next
	
	If bFound Then
		GetMACByIP = strFoundMAC
	Else
		GetMACByIP = False
	End If
	
	&amp;#039;Cleanup
	Set colItems = Nothing
	Set objWMIService = Nothing

End Function &amp;#039;GetMACByIP</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
# cah
# Created 20140620
# Modified
# looking for wireless network SSIDs actively used by Tanium client.i&amp;#039;ve 
# SSID MAC State NetworkType Radio Authentication Receive Transmit Signal(0-5) , delimiter is |
# Quality conversions based off of: http://stackoverflow.com/questions/15797920/how-to-convert-wifi-signal-strength-from-quality-percent-to-rssi-dbm

AIRPATH=&amp;quot;/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources&amp;quot;
RADIO=&amp;quot;unknown&amp;quot;

DEVID=$(networksetup -listallhardwareports | grep -A1 Wi-Fi | awk -F &amp;quot;Device: &amp;quot; &amp;#039;{print $2}&amp;#039; | grep -v &amp;quot;^$&amp;quot;)
#echo $DEVID
DEVMAC=$(networksetup -getmacaddress $DEVID | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039; | awk -F&amp;quot;(&amp;quot; &amp;#039;{print $1}&amp;#039;)

TANIUMIP=$( netstat -atn | grep 17472 | awk &amp;#039;{print $4}&amp;#039;|grep 17472|awk -F\. &amp;#039;{print $1&amp;quot;.&amp;quot;$2&amp;quot;.&amp;quot;$3&amp;quot;.&amp;quot;$4}&amp;#039; | sort -u )

WIRELESSIP=$( networksetup -getinfo Wi-Fi | grep &amp;quot;IP address&amp;quot; | grep -v &amp;quot;IPv6&amp;quot; | awk &amp;#039;{print $3}&amp;#039; )

if [ &amp;quot;$TANIUMIP&amp;quot;==&amp;quot;$WIRELESSIP&amp;quot; ] ; then

	#Get SSID
	SSID=$(networksetup -getairportnetwork $DEVID | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039;)

	if [ ! &amp;quot;$SSID&amp;quot; ] ; then
		SSID=&amp;quot;Not Available&amp;quot;	
		SIGNAL=&amp;quot;Not Available&amp;quot;
	fi

	if [ &amp;quot;$SSID&amp;quot; != &amp;quot;Not Available&amp;quot; ] ; then
	  PWR=$( $AIRPATH/airport -I | awk -F&amp;quot;agrCtlRSSI:&amp;quot; &amp;#039;{print $2}&amp;#039; | grep -v &amp;quot;^$&amp;quot; )
	# This is to convert from power to MS dummy gauge
		if  (( $PWR &amp;lt;= &amp;quot;-100&amp;quot; )) ; then
		SIGNAL=&amp;quot;0&amp;quot;
	   elif (((  $PWR &amp;gt; &amp;quot;-100&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-93&amp;quot; ))) ; then
		SIGNAL=&amp;quot;1&amp;quot;
	   elif (((  $PWR &amp;gt;= &amp;quot;-93&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-87&amp;quot; ))) ; then
		SIGNAL=&amp;quot;2&amp;quot;
	   elif (((  $PWR &amp;gt;= &amp;quot;-87&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-75&amp;quot; ))) ; then
		SIGNAL=&amp;quot;3&amp;quot;
	   elif ((( $PWR &amp;gt;= &amp;quot;-75&amp;quot; ) &amp;amp;&amp;amp; ( $PWR &amp;lt; &amp;quot;-50&amp;quot; ))) ; then
		SIGNAL=&amp;quot;4&amp;quot;
	   else
		SIGNAL=&amp;quot;5&amp;quot;
	  fi
	  echo &amp;quot;$SSID | $TANIUMIP | $SIGNAL  ($PWR dB)  &amp;quot;  
	else 
	  STATE=$( $AIRPATH/airport -I | grep &amp;quot;state:&amp;quot; | awk &amp;#039;{print $2}&amp;#039; )
	  if [ ! &amp;quot;$STATE&amp;quot; ] ; then
		STATE=&amp;quot;:Wired:||&amp;quot;
		echo &amp;quot;$STATE&amp;quot;
	  fi
	fi
	
fi

exit</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>300</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>SSID</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>IP Address</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Signal Strength</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>66</cache_row_id>
          </sensor>
          <sensor>
            <id>132</id>
            <name>AD Organizational Unit</name>
            <hash>21983240</hash>
            <string_count>0</string_count>
            <category>Active Directory</category>
            <description>The Active Directory organizational unit (OU) where the machine is located.
Example: CN=Computers,DC=corp,DC=com</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; AD Organizational Unit
&amp;#039;========================================
 
 
&amp;#039; Returns a single column value
&amp;#039; Only checks a single registry context
 
Const GPKey = &amp;quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy&amp;quot;
Dim strSubKey,strValue,strSep,strKey,words,strHive,constHive,hasValues32,hasAnyResult
Dim hasValues64,strUserKey,strFullUserKey,bEchoOnlyValue
Dim objCtx,objReg,bSkipSecondCheckOverride
 
Dim dictOut
Set dictOut = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
 
bEchoOnlyValue = True
bSkipSecondCheckOverride = True &amp;#039; Check in one place
strSubKey = &amp;quot;\State\Machine&amp;quot;
strValue = &amp;quot;Distinguished-Name&amp;quot;
strSep = &amp;quot;~~&amp;quot;
 
strKey = GPKey&amp;amp;strSubKey
 
&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11
 
 
&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)
 
strKey = Right(strKey, Len(strKey) - Len(strHive) -1)
 
&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive
 
&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)
 
If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
   For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
      If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
         strUserName = GetUserForSIDLocal(objReg,strUserKey)
         If strUserName = False Then strUserName = strUserKey
         strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
         hasValues32 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 32)
         If hasValues32 Then hasAnyResult = True
      End If
   Next
Else &amp;#039; was another hive
   hasValues32 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 32)
   If hasValues32 Then hasAnyResult = True
End If
 
&amp;#039; Do not return second value set in different context unnecessarily
Dim strKeyPrefix,bSkipSecondContextCheck
bSkipSecondContextCheck = False
strKeyPrefix = Split(strKey,&amp;quot;\&amp;quot;)(0) &amp;#039; Software, for instance, even for HEKY_USERS
 
Select Case Ucase(strKeyPrefix)
   Case &amp;quot;SOFTWARE&amp;quot;
      If bSkipSecondCheckOverride Then
         bSkipSecondContextCheck = True
      Else
         bSkipSecondContextCheck = False
      End If
   Case Else
      bSkipSecondContextCheck = True
End Select
 
If Is64 And Not bSkipSecondContextCheck Then
   Set objCtx = GetObjCtx(64)
   Set objReg = GetObjReg(objCtx)
   If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
   &amp;#039; go through each User&amp;#039;s hive in 64-bit context
      For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
      If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
            strUserName = GetUserForSIDLocal(objReg,strUserKey)
            If strUserName = False Then strUserName = strUserKey
            strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
            hasValues64 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 64)
            If hasValues64 Then hasAnyResult = True  
         End If
      Next
   Else &amp;#039; was another hive
      hasValues64 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 64)
      If hasValues64 Then hasAnyResult = True
   End If
End If
 
EchoOutDictFunctionFilter dictOut,&amp;quot;Not Found&amp;quot;,&amp;quot;GetOUFromDN&amp;quot;
 
&amp;#039;Goes through all values in a key, returns True if strValue is found
Function CheckValues(objReg, objCtx, constHive, strKey, strValue, intBit)
 
   Dim Inparams, Outparams,arrNames,arrTypes,i,strValueName
   Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
   Inparams.Hdefkey = constHive
   Inparams.sSubkeyname = strKey
   Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
  
   arrNames = Outparams.sNames
   arrTypes = Outparams.Types
 
   If Not IsNull(arrNames) Then
      For i = LBound(arrNames) To UBound(arrNames)
         strValueName = arrNames(i)
        
         &amp;#039;if strValue is found, echo
         If LCase(strValueName) = LCase(strValue) Then
            AddValToEchoDict dictOut, objReg, objCtx, constHive, strKey, strValue, arrTypes(i), intBit, bEchoOnlyValue
            CheckValues = True
            Exit Function
         End If
      Next
   End If
   CheckValues = False
End Function
 
Function GetDisplayString(strKey, strType, strValue, intBit, bEchoOnlyValue)
   Dim strArch
   If intBit = 64 Then
      strArch = &amp;quot;64-bit&amp;quot;
   Else
      strArch = &amp;quot;32-bit&amp;quot;
   End If
   If bEchoOnlyValue Then
      GetDisplayString = strValue
   Else
      GetDisplayString = _
         strValue &amp;amp; strSep &amp;amp; _
         strType &amp;amp; strSep &amp;amp; _
         strArch
   End If
End Function
 
Function AddValToEchoDict(ByRef dicOut, objReg, objCtx, constHive, strKey, strValue, constType, intBit, bOnlyValueData)
   &amp;#039; Note the key that was being searched, will be a hidden column
   Dim strOutputKey
   strOutputKey = strHive&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
  
   Dim objInParams, objOutParams
   Select Case constType
      Case REG_SZ 
         Set objInParams = objReg.Methods_(&amp;quot;GetStringValue&amp;quot;).InParameters
         objInParams.hDefKey = constHive
         objInParams.sSubKeyName = strKey
         objInParams.sValueName = strValue        
         Set objOutParams = objReg.ExecMethod_(&amp;quot;GetStringValue&amp;quot;, objInParams, , objCtx)
         If bOnlyValueData Then
            AddToOut dictOut, GetDisplayString(strKey, &amp;quot;REG_SZ&amp;quot;, objOutParams.sValue, intBit, bOnlyValueData)
         Else
            AddToOut dictOut, strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_SZ&amp;quot;, objOutParams.sValue, intBit) _
               &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
         End If
      Case REG_EXPAND_SZ
         Set objInParams = objReg.Methods_(&amp;quot;GetExpandedStringValue&amp;quot;).InParameters
         objInParams.hDefKey = constHive
         objInParams.sSubKeyName = strKey
         objInParams.sValueName = strValue         
         Set objOutParams = objReg.ExecMethod_(&amp;quot;GetExpandedStringValue&amp;quot;, objInParams, , objCtx)
         If bOnlyValueData Then
            AddToOut dictOut, GetDisplayString(strKey, &amp;quot;REG_EXPAND_SZ&amp;quot;, objOutParams.sValue, intBit, bOnlyValueData)
         Else 
            AddToOut dictOut, strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_EXPAND_SZ&amp;quot;, objOutParams.sValue, intBit, bOnlyValueData) _
               &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
         End If
      Case REG_BINARY
        Set objInParams = objReg.Methods_(&amp;quot;GetBinaryValue&amp;quot;).InParameters
         objInParams.hDefKey = constHive
         objInParams.sSubKeyName = strKey
         objInParams.sValueName = strValue        
         Set objOutParams = objReg.ExecMethod_(&amp;quot;GetBinaryValue&amp;quot;, objInParams, , objCtx)
 
         strBytes = &amp;quot;&amp;quot;
         For Each uByte in objOutParams.uValue
            strTemp = Hex(uByte)
            If Len(strTemp) &amp;lt; 2 Then
               strTemp = &amp;quot;0&amp;quot; &amp;amp; strTemp
            End If  
            strBytes = strBytes &amp;amp; strTemp &amp;amp; &amp;quot; &amp;quot;
         Next
         If bOnlyValueData Then
            AddToOut dictOut, GetDisplayString(strKey, &amp;quot;REG_BINARY&amp;quot;, strBytes, intBit)
         Else
            AddToOut dictOut, strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_BINARY&amp;quot;, strBytes, intBit, bOnlyValueData) _
               &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
         End If        
      Case REG_DWORD
          Set objInParams = objReg.Methods_(&amp;quot;GetDWordValue&amp;quot;).InParameters
          objInParams.hDefKey = constHive
          objInParams.sSubKeyName = strKey
          objInParams.sValueName = strValue
          Set objOutParams = objReg.ExecMethod_(&amp;quot;GetDWordValue&amp;quot;, objInParams, , objCtx)
         If bOnlyValueData Then
            AddToOut dictOut, GetDisplayString(strKey, &amp;quot;REG_DWORD&amp;quot;, CStr(objOutParams.uValue), intBit, bOnlyValueData)
         Else    
            AddToOut dictOut, strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_DWORD&amp;quot;, CStr(objOutParams.uValue), intBit) _
               &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
         End If
      Case REG_QWORD
          Set objInParams = objReg.Methods_(&amp;quot;GetQWordValue&amp;quot;).InParameters
          objInParams.hDefKey = constHive
          objInParams.sSubKeyName = strKey
          objInParams.sValueName = strValue
          Set objOutParams = objReg.ExecMethod_(&amp;quot;GetQWordValue&amp;quot;, objInParams, , objCtx)
         If bOnlyValueData Then
            AddToOut dictOut, GetDisplayString(strKey, &amp;quot;REG_QWORD&amp;quot;, CStr(objOutParams.uValue), intBit, bOnlyValueData)
         Else    
            AddToOut dictOut, strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_QWORD&amp;quot;, CStr(objOutParams.uValue), intBit) _
               &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
         End If
      Case REG_MULTI_SZ
          Set objInParams = objReg.Methods_(&amp;quot;GetMultiStringValue&amp;quot;).InParameters
          objInParams.hDefKey = constHive
          objInParams.sSubKeyName = strKey
          objInParams.sValueName = strValue
          Set objOutParams = objReg.ExecMethod_(&amp;quot;GetMultiStringValue&amp;quot;, objInParams, , objCtx)
     
         arrValues = objOutParams.sValue
         strResponse = &amp;quot;&amp;quot;
 
         For Each strTemp In arrValues
            If bOnlyValueData Then
               AddToOut dictOut, GetDisplayString(strKey, &amp;quot;REG_MULTI_SZ&amp;quot;, strTemp, intBit, bOnlyValueData)
            Else
               AddToOut dictOut, strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_MULTI_SZ&amp;quot;, strTemp, intBit) _
                  &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
            End If
         Next
   End Select
End Function
 
Function GetObjCtx(intArch)
   Dim objCtx
   Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
   objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
   objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
   Set GetObjCtx = objCtx
End Function
 
Function GetObjReg(objCtx)
   Dim objLocator, objServices
   Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
   Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
   Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;)
End Function
 
Function GetSubKeys(objReg, objCtx, constHive, strKey)
   Dim Inparams, Outparams
   Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
   Inparams.Hdefkey = constHive
   Inparams.sSubkeyname = strKey
   Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
   GetSubKeys = Outparams.sNames
End Function
 
Function Is64
   Dim objWMIService, colItems, objItem
   Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
   Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)   
   For Each objItem In colItems
      If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
         Is64 = True
      Else
         Is64 = False
      End If     
   Next
End Function
 
 
Function GetHiveConst(hive)
   Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
   Const HKEY_CURRENT_USER   = &amp;amp;H80000001
   Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
   Const HKEY_USERS          = &amp;amp;H80000003
 
   Select Case UCase(hive)
      Case &amp;quot;HKLM&amp;quot;
         GetHiveConst = HKEY_LOCAL_MACHINE
      Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
         GetHiveConst = HKEY_LOCAL_MACHINE
      Case &amp;quot;HKCR&amp;quot;
         GetHiveConst = HKEY_CLASSES_ROOT
      Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
         GetHiveConst = HKEY_CLASSES_ROOT
      Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
         GetHiveConst = HKEY_CURRENT_USER
      Case &amp;quot;HKEY_USERS&amp;quot;
         GetHiveConst = HKEY_USERS
   End Select
  
   If IsEmpty(GetHiveConst) Then
      WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
      WScript.Quit
   End If
End Function
 
Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name
 
   Const HKLM = &amp;amp;h80000002
  
   Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
  
   strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
   objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
   If Not IsNull(strUserData) Then
   &amp;#039; strUserData would look like
   &amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
      intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
      &amp;#039; strip off the dat file
      If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
         strUserData = Left(strUserData,intDatPos - 1)
         &amp;#039; find last backslash
         intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
         &amp;#039; get right from that pos
         strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
         GetUserForSIDLocal = strUserData
      Else
         strUserData = False
      End If
   Else
      GetUserForSIDLocal = False
   End If
End Function &amp;#039;GetUserForSIDLocal
 
Sub AddToOut(ByRef dictOut, strIn)
                If VarType(strIn) = vbString Then
                                If Not dictOut.Exists(strIn) Then
                                                dictOut.Add strIn,1
                                End If
                End If
End Sub
 
Function GetOUFromDN(strDN)
                Dim intFirstComma
                intFirstComma = InStr(strDN,&amp;quot;,&amp;quot;)
                If Not intFirstComma &amp;gt; 0 Then
                                GetOUFromDN = strDN
                                Exit Function
                End If
                intFromRight = Len(strDN) - intFirstComma
                If intFromRight &amp;gt;= 0 Then
                                GetOUFromDN = Right(strDN,intFromRight)
                Else
                                GetOUFromDN = strDN
                End If
End Function &amp;#039;GetOUFromDN
 
Sub EchoOutDictFunctionFilter(ByRef dictOut,strNoResultsMessage, ByRef funcRef)
&amp;#039;FuncRef returns a string which filters the key
                Dim strKey
                If dictOut.Count = 0 Then
                                WScript.Echo strNoResultsMessage
                                Exit Sub
                End If
                Dim out
                For Each strKey In dictOut
                                Execute(&amp;quot;out = &amp;quot;&amp;amp;funcRef&amp;amp;&amp;quot;(strKey)&amp;quot;)
                                WScript.Echo out
                Next
End Sub &amp;#039;EchoOutDictFunctionFilter

Function EchoAll(str)
	EchoAll = str
End Function &amp;#039;EchoAll</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>67</cache_row_id>
          </sensor>
          <sensor>
            <id>134</id>
            <name>AD Computer Groups</name>
            <hash>525163843</hash>
            <string_count>0</string_count>
            <category>Active Directory</category>
            <description>All computer groups (if any) that a computer is a member of in Active Directory.
Example: Berkeley Workstations</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; AD Computer Groups
&amp;#039;========================================

On Error Resume Next
&amp;#039; Constants required for name translate
CONST ADS_NAME_INITTYPE_GC = 3
CONST ADS_NAME_TYPE_NT4 = 3
CONST ADS_NAME_TYPE_1779 = 1

&amp;#039;Get the NETBIOS name of the domain
SET objSystemInfo = CREATEOBJECT(&amp;quot;ADSystemInfo&amp;quot;) 
Dim strDomain
strDomain = objSystemInfo.DomainShortName
If IsEmpty(strDomain) Then
   WScript.Echo &amp;quot;AD Information Unavailable&amp;quot;
   WScript.Quit
End If

&amp;#039; Get the name of the computer
SET objNetwork = CREATEOBJECT(&amp;quot;Wscript.Network&amp;quot;)
strComputer = objNetwork.ComputerName

&amp;#039; Call function to return the distinguished name (DN) of the computer

dim strComputerDN
strComputerDN = getComputerDN(strComputer,strDomain)

If isEmpty(strComputerDN) Then
   wscript.echo &amp;quot;Cannot connect to AD server&amp;quot;
Else
	GetGroups(strComputerDN)
	 
	wscript.quit
End If

Function GetGroups(strDn)
&amp;#039;	WScript.Echo &amp;quot;looking at: &amp;quot;&amp;amp; strDN
	&amp;#039;	On Error Resume Next
	Const E_ADS_PROPERTY_NOT_FOUND  = &amp;amp;h8000500D
	 
	Set objUser = GetObject _
	    (&amp;quot;LDAP://&amp;quot; &amp;amp; strDn)
	 
	intPrimaryGroupID = objUser.Get(&amp;quot;primaryGroupID&amp;quot;)
	arrMemberOf = objUser.GetEx(&amp;quot;memberOf&amp;quot;)
	 
	If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
	    WScript.Echo &amp;quot;The memberOf attribute is not set.&amp;quot;
	Else
	    For Each Group in arrMemberOf
	        WScript.Echo Group
	    Next
	End If
End Function

Function getComputerDN(BYVAL strComputer,BYVAL strDomain)
   &amp;#039; Function to get the distinguished name of a computer
   &amp;#039; from the NETBIOS name of the computer (strcomputer)
   &amp;#039; and the NETBIOS name of the domain (strDomain) using
   &amp;#039; name translate

   SET objTrans = CREATEOBJECT(&amp;quot;NameTranslate&amp;quot;)
   &amp;#039; Initialize name translate using global catalog
   objTrans.Init ADS_NAME_INITTYPE_GC, &amp;quot;&amp;quot;
   &amp;#039; Input computer name (NT Format)
   objTrans.SET ADS_NAME_TYPE_NT4, strDomain &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;$&amp;quot;
   &amp;#039; Get Distinguished Name.
   getComputerDN = objTrans.GET(ADS_NAME_TYPE_1779)
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>68</cache_row_id>
          </sensor>
          <sensor>
            <id>136</id>
            <name>Last Logged In User</name>
            <hash>7318847</hash>
            <string_count>5</string_count>
            <category>User</category>
            <description>If no user is logged in, returns the last user to log in is reported.  If a user is currently logged in, that user is returned.
Example: DOMAIN\Jane.Doe</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Last Logged In User
&amp;#039;========================================

&amp;#039; This sensor will report the user that was logged in the last time
&amp;#039; the sensor was run.  If there is no user logged in, it will return
&amp;#039; the last user to log in.
&amp;#039;
&amp;#039; note - for this sensor to be effective, it must be reissued as a saved question

Option Explicit
Const HKLM = &amp;amp;h80000002

Dim objWMIService, objReg, colComputer
Dim objComputer, strLastUser, strLastLastUser


On Error Resume Next


Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)

&amp;#039; Get the last logged in user from registry
strLastUser = GetLastUser(objReg)

If Err.Number &amp;lt;&amp;gt; 0 Then
	&amp;#039;WScript.Echo &amp;quot;setting initially, line 24&amp;quot; &amp;amp; Err.Description
	Err.Number = 0
End If

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
Set colComputer = objWMIService.ExecQuery (&amp;quot;Select UserName from Win32_ComputerSystem&amp;quot;)

For Each objComputer in colComputer
	If IsNull(strLastUser) Or strLastUser = &amp;quot;&amp;quot; Or strLastUser = False Then &amp;#039; first run or error, try to set
		If Err.Number &amp;lt;&amp;gt; 0 Then
			&amp;#039; WScript.Echo &amp;quot;line 34&amp;quot; &amp;amp; Err.Description
			Err.Number = 0
		End If
		If objComputer.UserName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then &amp;#039;someone is currently logged in
			If Err.Number &amp;lt;&amp;gt; 0 Then
				&amp;#039; WScript.Echo &amp;quot;line 39&amp;quot; &amp;amp; Err.Description
				Err.Number = 0
			End If		 
			SetLastUser objReg, objComputer.UserName

			strLastUser = objComputer.UserName &amp;#039; this may set to no value if nobody is logged in
			If Err.Number &amp;lt;&amp;gt; 0 Then
				&amp;#039; WScript.Echo &amp;quot;setting on line 37&amp;quot; &amp;amp; Err.Description
				Err.Number = 0
			End If
		Else &amp;#039; nobody is logged in and it&amp;#039;s not yet been run
			SetLastUser objReg,&amp;quot;Uninitialized - waiting for login&amp;quot;
		End If
	Else &amp;#039; this has previously been set, overwrite the registry value if someone is logged in
		If objComputer.UserName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then &amp;#039; if someone is logged in
			SetLastUser objReg, objComputer.UserName
		Else &amp;#039; No one is logged in and it&amp;#039;s been run before
&amp;#039;			WScript.Echo &amp;quot;no user logged in and strLastUser is &amp;quot; &amp;amp; strLastUser
			SetLastUser objReg,&amp;quot;Uninitialized - waiting for login&amp;quot;
		End If
	End If
	
	&amp;#039; whether anyone is logged in or nobody is logged in, echo out
	&amp;#039; value in the registry which is either a login or the uninitialized phrase
	strLastUser = GetLastUser(objReg) &amp;#039; pull again now that it&amp;#039;s been set
	If Err.Number &amp;lt;&amp;gt; 0 Then
		&amp;#039;WScript.Echo &amp;quot;setting again, line 52&amp;quot; &amp;amp; Err.Description
		Err.Number = 0
	End If
	WScript.Echo strLastUser
Next


&amp;#039; Cleanup
Set colComputer = Nothing
Set objWMIService = Nothing
Set objReg = Nothing

Function GetLastUser(objRegistry)
&amp;#039; This function will look into the Tanium Registry Key to get the last logged in user
	
	Const HKLM = &amp;amp;h80000002
	
	Dim strLastUserRegValueData, strTaniumPath, Result
	
	strTaniumPath = GetTaniumRegistryPath()
	
	Result = objReg.GetStringValue(HKLM,strTaniumPath &amp;amp; &amp;quot;\Sensor Data&amp;quot;,&amp;quot;LastLoggedInUser&amp;quot;,strLastUserRegValueData)

	If strLastUserRegValueData = &amp;quot;&amp;quot; Then &amp;#039; data is not initialized
		GetLastUser = False
	Else
		GetLastUser = strLastUserRegValueData
	End If
	
End Function &amp;#039;GetLastUser

Function SetLastUser(objRegistry, strUserName)
&amp;#039; This function will look into the Tanium Registry Key to push the currently
&amp;#039; logged in user to the front of the array and push the previous last to the end
	
	Const HKLM = &amp;amp;h80000002
	
	Dim strTaniumPath, strLastUser
	
	strTaniumPath = GetTaniumRegistryPath()
	
	If Not RegKeyExists(objRegistry, HKLM, strTaniumPath &amp;amp; &amp;quot;\Sensor Data&amp;quot;) Then
		objRegistry.CreateKey HKLM, strTaniumPath &amp;amp; &amp;quot;\Sensor Data&amp;quot;
	End If
	
	objReg.SetStringValue HKLM,strTaniumPath &amp;amp; &amp;quot;\Sensor Data&amp;quot;,&amp;quot;LastLoggedInUser&amp;quot;,strUserName
	
End Function &amp;#039;SetLastUser
	

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
last | head -n1 | awk &amp;#039;{print $1}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
last | head -n1 | awk &amp;#039;{print $1}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get last logged in user
last | head -1 | cut -d &amp;#039; &amp;#039; -f1</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>69</cache_row_id>
          </sensor>
          <sensor>
            <id>138</id>
            <name>Uptime</name>
            <hash>3480890585</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Time since reboot in days of the client machine.
Example: 48 days</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Uptime
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot; &amp;#039; Local computer

set objWMIDateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
set objWMI = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
set colOS = objWMI.InstancesOf(&amp;quot;Win32_OperatingSystem&amp;quot;)
for each objOS in colOS
	objWMIDateTime.Value = objOS.LastBootUpTime
         
	If TimeSpan(objWMIDateTime.GetVarDate,Now) &amp;gt; 0 Then
        Wscript.echo TimeSpan(objWMIDateTime.GetVarDate,Now) &amp;amp; &amp;quot; days&amp;quot;
Else
        Wscript.echo &amp;quot;Less than 1 day&amp;quot;
        End If
next

Function TimeSpan(dt1, dt2) 
	If (isDate(dt1) And IsDate(dt2)) = false Then 
		TimeSpan = &amp;quot;00:00:00&amp;quot; 
		Exit Function 
        End If 
 
        seconds = Abs(DateDiff(&amp;quot;S&amp;quot;, dt1, dt2)) 
        minutes = seconds \ 60 
        hours = minutes \ 60 
        days = hours \ 24 
        minutes = minutes mod 60 
        seconds = seconds mod 60 
 
        TimeSpan = days
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
line=$(cat /proc/uptime)
set -- $line
seconds=$(echo &amp;quot;$1&amp;quot; | cut -d&amp;#039;.&amp;#039; -f1 )
days=$((seconds / 86400))
if [ $days -gt 1 ]; then
  echo &amp;quot;$days days&amp;quot;
else
  echo &amp;quot;Less than 1 day&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
# 7:13pm  up 13 min(s),  2 users,  load average: 0.00, 0.32, 0.39
#12:13pm  up 11 day(s), 16:06,  2 users,  load average: 0.12, 0.10, 0.10

UP=$(uptime)
DAYS=$(echo &amp;quot;$UP&amp;quot; | awk &amp;#039;{ print $3 }&amp;#039;)
MHD=$(echo &amp;quot;$UP&amp;quot; | awk &amp;#039;{ print $4 }&amp;#039;)
echo &amp;quot;$UP&amp;quot; | grep -iq day
if [ $? -eq 0 ]; then
  echo &amp;quot;$DAYS days&amp;quot;
else
  echo &amp;quot;Less than 1 day&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
# 7:13pm  up 13 min(s),  2 users,  load average: 0.00, 0.32, 0.39
#12:13pm  up 11 day(s), 16:06,  2 users,  load average: 0.12, 0.10, 0.10
#12:31  up 7 days,  1:01, 8 users, load averages: 1.13 1.01 0.95

UP=$(uptime)
DAYS=$(echo &amp;quot;$UP&amp;quot; | awk &amp;#039;{ print $3 }&amp;#039;)
MHD=$(echo &amp;quot;$UP&amp;quot; | awk &amp;#039;{ print $4 }&amp;#039;)
echo &amp;quot;$UP&amp;quot; | /usr/xpg4/bin/egrep -iq day
if [ $? -eq 0 ]; then
  echo &amp;quot;$DAYS days&amp;quot;
else
  echo &amp;quot;Less than 1 day&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# 7:13pm  up 13 min(s),  2 users,  load average: 0.00, 0.32, 0.39
#12:13pm  up 11 day(s), 16:06,  2 users,  load average: 0.12, 0.10, 0.10

UP=$(uptime)
DAYS=$(echo &amp;quot;$UP&amp;quot; | awk &amp;#039;{ print $3 }&amp;#039;)
MHD=$(echo &amp;quot;$UP&amp;quot; | awk &amp;#039;{ print $4 }&amp;#039;)
echo &amp;quot;$UP&amp;quot; | grep -iq day
if [ $? -eq 0 ]; then
  echo &amp;quot;$DAYS days&amp;quot;
else
  echo &amp;quot;Less than 1 day&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>1800</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>70</cache_row_id>
          </sensor>
          <sensor>
            <id>140</id>
            <name>Domain Name</name>
            <hash>794103688</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>The domain name (if any) that the computer is joined to or configured for.
Example: intra.company.com</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Domain from win32_ComputerSystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
DN=$(domainname)
if [ &amp;quot;$DN&amp;quot; = &amp;quot;&amp;quot; ]; then
  echo &amp;quot;none&amp;quot;
else
  echo &amp;quot;$DN&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

# following displays the NIS domain most prople want the active directory domain
#domainname

name=$(dsconfigad -show | grep &amp;#039;^Active Directory Domain&amp;#039; | awk -F&amp;#039;= &amp;#039; &amp;#039;{print $2}&amp;#039;)
if [ ! -n &amp;quot;$name&amp;quot; ] 
then
	echo No Domain
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
DN=$(domainname)
if [ &amp;quot;$DN&amp;quot; = &amp;quot;&amp;quot; ]; then
  echo &amp;quot;none&amp;quot;
else
  echo &amp;quot;$DN&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
DN=$(domainname)
if [ &amp;quot;$DN&amp;quot; = &amp;quot;&amp;quot; ]; then
  echo &amp;quot;none&amp;quot;
else
  echo &amp;quot;$DN&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>71</cache_row_id>
          </sensor>
          <sensor>
            <id>142</id>
            <name>Tanium Client IP Address</name>
            <hash>4264271977</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>The local IP address the client is using to communicate with the Tanium Server.
Example: 192.168.10.2</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client IP Address
&amp;#039;========================================

Dim strTaniumPath, strStatusPath
Dim strClientAddress, arrClientAddress, strIPAddress
Dim objReg


Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)

Const HKLM = &amp;amp;h80000002

&amp;#039;Tanium registry key paths
strTaniumPath = GetTaniumRegistryPath()
strStatusPath = strTaniumPath &amp;amp; &amp;quot;\Status&amp;quot;

&amp;#039;Pull the registry value out
objReg.GetStringValue HKLM, strStatusPath, &amp;quot;ClientAddress&amp;quot;, strClientAddress

arrClientAddress = Split(strClientAddress,&amp;quot;_&amp;quot;)

&amp;#039; Final output
strIPAddress = Split(arrClientAddress(0),&amp;quot;:&amp;quot;)(2)

WScript.Echo strIPAddress

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function ParseTaniumIPEntry(strIPEntry)
&amp;#039; This function will parse a Tanium IP address entry in the registry
	
	Dim strLeftSplit
	
	strLeftSplit = Left(strIPEntry,InStr(strIPEntry,&amp;quot;_&amp;quot;)-1)
	ParseTaniumIPEntry = Right(strLeftSplit,len(strLeftSplit)-InStrRev(strLeftSplit,&amp;quot;:&amp;quot;))

End Function &amp;#039;ParseTaniumIPEntry</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

grep ClientAddress TaniumClientStatus.ini | awk -F &amp;#039;:&amp;#039; &amp;#039;{ print $NF }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

grep ClientAddress TaniumClientStatus.ini | awk -F &amp;#039;:&amp;#039; &amp;#039;{ print $NF }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
grep ClientAddress /opt/Tanium/TaniumClient/TaniumClientStatus.ini | awk -F: &amp;#039;{ print $NF }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
grep ClientAddress /opt/Tanium/TaniumClient/TaniumClientStatus.ini | awk -F: &amp;#039;{ print $NF }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>IPAddress</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>72</cache_row_id>
          </sensor>
          <sensor>
            <id>144</id>
            <name>Tanium Client Subnet</name>
            <hash>1744818157</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>The Subnet in use by the Tanium Client.
Example: 192.168.10.0/24</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client Subnet
&amp;#039;========================================

Option Explicit

Dim strTaniumIPAddress, strTaniumMask

strTaniumIPAddress = GetTaniumIPAddress
If strTaniumIPAddress = False Then 
	WScript.Echo &amp;quot;Can&amp;#039;t retrieve Tanium Client&amp;#039;s IP address&amp;quot;
End If

strTaniumMask = GetSubnetMaskForIP(strTaniumIPAddress)

WScript.Echo CalcNetworkAddress(strTaniumIPAddress,strTaniumMask) &amp;amp; &amp;quot;/&amp;quot; &amp;amp; MaskLength(strTaniumMask)

Function CalcNetworkAddress(strIP, strMask)
  &amp;#039; Generates the Network Address from the IP and Mask
 
  &amp;#039; Conversion of IP and Mask to binary
  Dim strBinIP : strBinIP = ConvertIPToBinary(strIP)
  Dim strBinMask : strBinMask = ConvertIPToBinary(strMask)
 
  &amp;#039; Bitwise AND operation (except for the dot)
  Dim i, strBinNetwork
  For i = 1 to Len(strBinIP)
    Dim strIPBit : strIPBit = Mid(strBinIP, i, 1)
    Dim strMaskBit : strMaskBit = Mid(strBinMask, i, 1)
 
    If strIPBit = &amp;quot;1&amp;quot; And strMaskBit = &amp;quot;1&amp;quot; Then
      strBinNetwork = strBinNetwork &amp;amp; &amp;quot;1&amp;quot;
    ElseIf strIPBit = &amp;quot;.&amp;quot; Then
      strBinNetwork = strBinNetwork &amp;amp; strIPBit
    Else
      strBinNetwork = strBinNetwork &amp;amp; &amp;quot;0&amp;quot;
    End If
  Next
 
  &amp;#039; Conversion of Binary IP to Decimal
  CalcNetworkAddress= ConvertBinIPToDecimal(strBinNetwork)
End Function

Function MaskLength(strMask)
  &amp;#039; Converts an subnet mask into a mask length in bits
 
  Dim arrOctets : arrOctets = Split(strMask, &amp;quot;.&amp;quot;)
  Dim i
  For i = 0 to UBound(arrOctets)
    Dim intOctet : intOctet = CInt(arrOctets(i))
    Dim j, intMaskLength
    For j = 0 To 7
      If intOctet And (2^(7 -j)) Then
        intMaskLength = intMaskLength + 1
      End If
    Next
  Next
  MaskLength = intMaskLength
End Function

Function ConvertBinIPToDecimal(strBinIP)
  &amp;#039; Convert binary form of an IP back to decimal
 
  Dim arrOctets : arrOctets = Split(strBinIP, &amp;quot;.&amp;quot;)
  Dim i
  For i = 0 to UBound(arrOctets)
    Dim intOctet : intOctet = 0
    Dim j
    For j = 0 to 7
      Dim intBit : intBit = CInt(Mid(arrOctets(i), j + 1, 1))
      If intBit = 1 Then
        intOctet = intOctet + 2^(7 - j)
      End If
    Next
    arrOctets(i) = CStr(intOctet)
  Next
 
  ConvertBinIPToDecimal = Join(arrOctets, &amp;quot;.&amp;quot;)
End Function

Function ConvertIPToBinary(strIP)
  &amp;#039; Converts an IP Address into Binary
 
  Dim arrOctets : arrOctets = Split(strIP, &amp;quot;.&amp;quot;)
  Dim i
  For i = 0 to UBound(arrOctets)
    Dim intOctet : intOctet = CInt(arrOctets(i))
    Dim strBinOctet : strBinOctet = &amp;quot;&amp;quot;
    Dim j
    For j = 0 To 7
      If intOctet And (2^(7 - j)) Then
        strBinOctet = strBinOctet &amp;amp; &amp;quot;1&amp;quot;
      Else
        strBinOctet = strBinOctet &amp;amp; &amp;quot;0&amp;quot;
      End If
    Next
    arrOctets(i) = strBinOctet
  Next
  ConvertIPToBinary = Join(arrOctets, &amp;quot;.&amp;quot;)
End Function

Function GetSubnetMaskForIP(strIP)
&amp;#039;This function will return the subnet for a particular IP address

	Dim strIPAddress, strSubnet
	Dim objWMIService,colItems
	Dim objItem
	
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_NetworkAdapterConfiguration&amp;quot;,,48)
	
	On Error Resume Next
	For Each objItem in colItems
		If IsArray(objItem.IPAddress) Then
			If objItem.IPAddress(0)&amp;lt;&amp;gt;&amp;quot;&amp;quot; Then 
				For Each strIPAddress In objItem.IPAddress
					If strIPAddress = strIP Then
						For Each strSubnet In objItem.IPSubnet
							If InStr(strSubnet,&amp;quot;.&amp;quot;) &amp;gt; 0 Then &amp;#039;IPv4 subnet
								GetSubnetMaskForIP = strSubnet
							End If
						Next
					End If
				Next
			End If
		End If
	Next

	&amp;#039;Cleanup
	Set colItems = Nothing
	Set objWMIService = Nothing

End Function &amp;#039;GetSubnetMaskForIP

Function GetTaniumIPAddress
&amp;#039; Returns the IP address that the client uses for Tanium activity
&amp;#039; (talking to server and other clients)

	Dim strComputer, objReg, strCommand, objShell, objScriptExec
	Dim strResults, arrPathPingLines, strPathPingLine, arrPathPingWords
	Dim strIPAddress, strTaniumPath, strClientAddress
	Dim strServerName
	
	strComputer = &amp;quot;.&amp;quot;
	Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)
	Const HKLM = &amp;amp;h80000002
	
		
	&amp;#039;&amp;#039;###########Get Tanium Key on 64/32bit computers##########
	
	strTaniumPath = GetTaniumRegistryPath()
	
	
	&amp;#039; if we can pull this from the registry (newer client version), just use that
	objReg.GetStringValue HKLM, strTaniumPath &amp;amp; &amp;quot;\Status&amp;quot;, &amp;quot;ClientAddress&amp;quot;, strClientAddress
	If strClientAddress &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
		strClientAddress = Left(strClientAddress,InStr(strClientAddress,&amp;quot;_&amp;quot;)-1)
		strClientAddress = Right(strClientAddress,len(strClientAddress)-InStrRev(strClientAddress,&amp;quot;:&amp;quot;))
		&amp;#039; WScript.Echo &amp;quot;Found &amp;quot; &amp;amp; strClientAddress &amp;amp; &amp;quot; in Registry&amp;quot;
		GetTaniumIPAddress = strClientAddress
		&amp;#039;Cleanup
		Set objReg = Nothing
		Exit Function
	End If
	
	&amp;#039;Otherwise use PathPing to determine client IP used by Tanium

	&amp;#039;&amp;#039;# Read the ServerName value

	objReg.GetStringValue HKLM, strTaniumPath, &amp;quot;ServerName&amp;quot;, strServerName

	strCommand = &amp;quot;pathping -4 -q 1 -w 1 -n &amp;quot; &amp;amp; strServerName
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	strResults = objScriptExec.StdOut.ReadAll
	
	arrPathPingLines = Split(strResults, vbCrLf)
	For Each strPathPingLine In arrPathPingLines
		arrPathPingWords = Split(CleanWhitespace(Trim(strPathPingLine)), &amp;quot; &amp;quot;)
		If UBound(arrPathPingWords) &amp;gt; 0 Then
			If arrPathPingWords(0) = &amp;quot;0&amp;quot; Then
				strIPAddress = arrPathPingWords(1)
				Exit For
			End If
		End If	
	Next
	
	Set objShell = Nothing
	Set objScriptExec = Nothing
	Set objReg = Nothing

	If Not IsNull(strIPAddress) Then
		GetTaniumIPAddress = strIPAddress
	Else
		GetTaniumIPAddress = False
	End If
End Function &amp;#039;GetTaniumIPAddress


Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

if [ ! -d ./tmp ]; then
  mkdir ./tmp
  chmod 0700 ./tmp
fi

#
# this awk script can calculate the CIDR notation given an ip address and a netmask
# ./$tmfile -v ip=1.2.3.4 -v net=1.2.4.0/24
# different net
# ./$tmpfile -v ip=1.2.3.4 -v net=1.2.3.0/24
# same net
# ./$tmpfile -v ip=1.2.3.4 -v mask=255.255.255.0
# 1.2.3.0/24

tmpfile=&amp;quot;./tmp/calcnet$$.awk&amp;quot;
rm -f &amp;quot;$tmpfile&amp;quot;
cat &amp;gt; &amp;quot;$tmpfile&amp;quot; &amp;lt;&amp;lt;EOF
#!/usr/bin/awk  -f

BEGIN {
	tmpr[&amp;quot;128.0.0.0&amp;quot;]=1
	tmpr[&amp;quot;192.0.0.0&amp;quot;]=2
	tmpr[&amp;quot;224.0.0.0&amp;quot;]=3
	tmpr[&amp;quot;240.0.0.0&amp;quot;]=4
	tmpr[&amp;quot;248.0.0.0&amp;quot;]=5
	tmpr[&amp;quot;252.0.0.0&amp;quot;]=6
	tmpr[&amp;quot;254.0.0.0&amp;quot;]=7
	tmpr[&amp;quot;255.0.0.0&amp;quot;]=8
	tmpr[&amp;quot;255.128.0.0&amp;quot;]=9
	tmpr[&amp;quot;255.192.0.0&amp;quot;]=10
	tmpr[&amp;quot;255.224.0.0&amp;quot;]=11
	tmpr[&amp;quot;255.240.0.0&amp;quot;]=12
	tmpr[&amp;quot;255.248.0.0&amp;quot;]=13
	tmpr[&amp;quot;255.252.0.0&amp;quot;]=14
	tmpr[&amp;quot;255.254.0.0&amp;quot;]=15
	tmpr[&amp;quot;255.255.0.0&amp;quot;]=16
	tmpr[&amp;quot;255.255.128.0&amp;quot;]=17
	tmpr[&amp;quot;255.255.192.0&amp;quot;]=18
	tmpr[&amp;quot;255.255.224.0&amp;quot;]=19
	tmpr[&amp;quot;255.255.240.0&amp;quot;]=20
	tmpr[&amp;quot;255.255.248.0&amp;quot;]=21
	tmpr[&amp;quot;255.255.252.0&amp;quot;]=22
	tmpr[&amp;quot;255.255.254.0&amp;quot;]=23
	tmpr[&amp;quot;255.255.255.0&amp;quot;]=24
	tmpr[&amp;quot;255.255.255.128&amp;quot;]=25
	tmpr[&amp;quot;255.255.255.192&amp;quot;]=26
	tmpr[&amp;quot;255.255.255.224&amp;quot;]=27
	tmpr[&amp;quot;255.255.255.240&amp;quot;]=28
	tmpr[&amp;quot;255.255.255.248&amp;quot;]=29
	tmpr[&amp;quot;255.255.255.252&amp;quot;]=30
	tmpr[&amp;quot;255.255.255.254&amp;quot;]=31
	tmpr[&amp;quot;255.255.255.255&amp;quot;]=32

	tmp[1]=&amp;quot;128.0.0.0&amp;quot;
	tmp[2]=&amp;quot;192.0.0.0&amp;quot;
	tmp[3]=&amp;quot;224.0.0.0&amp;quot;
	tmp[4]=&amp;quot;240.0.0.0&amp;quot;
	tmp[5]=&amp;quot;248.0.0.0&amp;quot;
	tmp[6]=&amp;quot;252.0.0.0&amp;quot;
	tmp[7]=&amp;quot;254.0.0.0&amp;quot;
	tmp[8]=&amp;quot;255.0.0.0&amp;quot;
	tmp[9]=&amp;quot;255.128.0.0&amp;quot;
	tmp[10]=&amp;quot;255.192.0.0&amp;quot;
	tmp[11]=&amp;quot;255.224.0.0&amp;quot;
	tmp[12]=&amp;quot;255.240.0.0&amp;quot;
	tmp[13]=&amp;quot;255.248.0.0&amp;quot;
	tmp[14]=&amp;quot;255.252.0.0&amp;quot;
	tmp[15]=&amp;quot;255.254.0.0&amp;quot;
	tmp[16]=&amp;quot;255.255.0.0&amp;quot;
	tmp[17]=&amp;quot;255.255.128.0&amp;quot;
	tmp[18]=&amp;quot;255.255.192.0&amp;quot;
	tmp[19]=&amp;quot;255.255.224.0&amp;quot;
	tmp[20]=&amp;quot;255.255.240.0&amp;quot;
	tmp[21]=&amp;quot;255.255.248.0&amp;quot;
	tmp[22]=&amp;quot;255.255.252.0&amp;quot;
	tmp[23]=&amp;quot;255.255.254.0&amp;quot;
	tmp[24]=&amp;quot;255.255.255.0&amp;quot;
	tmp[25]=&amp;quot;255.255.255.128&amp;quot;
	tmp[26]=&amp;quot;255.255.255.192&amp;quot;
	tmp[27]=&amp;quot;255.255.255.224&amp;quot;
	tmp[28]=&amp;quot;255.255.255.240&amp;quot;
	tmp[29]=&amp;quot;255.255.255.248&amp;quot;
	tmp[30]=&amp;quot;255.255.255.252&amp;quot;
	tmp[31]=&amp;quot;255.255.255.254&amp;quot;
	tmp[32]=&amp;quot;255.255.255.255&amp;quot;

	split(ip,n,/\./)
	split(net,netandmask,/\//)
	network=netandmask[1]
	if (mask == &amp;quot;&amp;quot;) {
		mask=netandmask[2]
		mask=tmp[mask]
	}
	split(mask,m,/\./)
	for (i=1; i&amp;lt;=3; i++) calcnet=sprintf(&amp;quot;%s%d.&amp;quot;, calcnet,awkand(n[i],m[i]))
	calcnet=sprintf(&amp;quot;%s%d&amp;quot;, calcnet,awkand(n[4],m[4]))
	if (net == &amp;quot;&amp;quot;) {
		print calcnet&amp;quot;/&amp;quot;tmpr[mask]
	} else {
		if (calcnet == network) {
			print &amp;quot;same net&amp;quot;
		} else {
			print &amp;quot;different net&amp;quot;
		}
	}
}

function awkand(a,b,  k,r) {
	k = 1
	r = 0
	a = int(a + 0.5) # round to nearest integer
	b = int(b + 0.5)
	while ( a + b ) {
		if ( a%2 &amp;amp;&amp;amp; b%2 ) r += k
		a = int(a / 2)
		b = int(b / 2)
		k *= 2
	}
	return r
}
EOF
chmod 0500 &amp;quot;$tmpfile&amp;quot;

# get the client ip from the config file, might not work on old clients, in that case you can use lsof but it&amp;#039;s slowwww
ip=$(grep ^ClientAddress /opt/Tanium/TaniumClient/TaniumClientStatus.ini | awk -F= &amp;#039;{print $2}&amp;#039; | awk -F: &amp;#039;{print $3}&amp;#039; | awk -F_ &amp;#039;{print $1}&amp;#039;)
mask=$(ifconfig | grep &amp;quot;$ip&amp;quot; | awk &amp;#039;{print $4}&amp;#039; | sed &amp;#039;s/^Mask://&amp;#039;)
./$tmpfile -v ip=&amp;quot;$ip&amp;quot; -v mask=&amp;quot;$mask&amp;quot;
rm -f &amp;quot;$tmpfile&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

if [ ! -d ./tmp ]; then
  mkdir ./tmp
  chmod 0700 ./tmp
fi

# this awk script can calculate the CIDR notation given an ip address and a netmask
# ./$tmfile -v ip=1.2.3.4 -v net=1.2.4.0/24
# different net
# ./$tmpfile -v ip=1.2.3.4 -v net=1.2.3.0/24
# same net
# ./$tmpfile -v ip=1.2.3.4 -v mask=255.255.255.0
# 1.2.3.0/24

tmpfile=./tmp/calcnet$$.awk
cat &amp;gt; &amp;quot;$tmpfile&amp;quot; &amp;lt;&amp;lt;EOF
#!/usr/bin/awk  -f

BEGIN {
	tmpr[&amp;quot;128.0.0.0&amp;quot;]=1
	tmpr[&amp;quot;192.0.0.0&amp;quot;]=2
	tmpr[&amp;quot;224.0.0.0&amp;quot;]=3
	tmpr[&amp;quot;240.0.0.0&amp;quot;]=4
	tmpr[&amp;quot;248.0.0.0&amp;quot;]=5
	tmpr[&amp;quot;252.0.0.0&amp;quot;]=6
	tmpr[&amp;quot;254.0.0.0&amp;quot;]=7
	tmpr[&amp;quot;255.0.0.0&amp;quot;]=8
	tmpr[&amp;quot;255.128.0.0&amp;quot;]=9
	tmpr[&amp;quot;255.192.0.0&amp;quot;]=10
	tmpr[&amp;quot;255.224.0.0&amp;quot;]=11
	tmpr[&amp;quot;255.240.0.0&amp;quot;]=12
	tmpr[&amp;quot;255.248.0.0&amp;quot;]=13
	tmpr[&amp;quot;255.252.0.0&amp;quot;]=14
	tmpr[&amp;quot;255.254.0.0&amp;quot;]=15
	tmpr[&amp;quot;255.255.0.0&amp;quot;]=16
	tmpr[&amp;quot;255.255.128.0&amp;quot;]=17
	tmpr[&amp;quot;255.255.192.0&amp;quot;]=18
	tmpr[&amp;quot;255.255.224.0&amp;quot;]=19
	tmpr[&amp;quot;255.255.240.0&amp;quot;]=20
	tmpr[&amp;quot;255.255.248.0&amp;quot;]=21
	tmpr[&amp;quot;255.255.252.0&amp;quot;]=22
	tmpr[&amp;quot;255.255.254.0&amp;quot;]=23
	tmpr[&amp;quot;255.255.255.0&amp;quot;]=24
	tmpr[&amp;quot;255.255.255.128&amp;quot;]=25
	tmpr[&amp;quot;255.255.255.192&amp;quot;]=26
	tmpr[&amp;quot;255.255.255.224&amp;quot;]=27
	tmpr[&amp;quot;255.255.255.240&amp;quot;]=28
	tmpr[&amp;quot;255.255.255.248&amp;quot;]=29
	tmpr[&amp;quot;255.255.255.252&amp;quot;]=30
	tmpr[&amp;quot;255.255.255.254&amp;quot;]=31
	tmpr[&amp;quot;255.255.255.255&amp;quot;]=32

	tmp[1]=&amp;quot;128.0.0.0&amp;quot;
	tmp[2]=&amp;quot;192.0.0.0&amp;quot;
	tmp[3]=&amp;quot;224.0.0.0&amp;quot;
	tmp[4]=&amp;quot;240.0.0.0&amp;quot;
	tmp[5]=&amp;quot;248.0.0.0&amp;quot;
	tmp[6]=&amp;quot;252.0.0.0&amp;quot;
	tmp[7]=&amp;quot;254.0.0.0&amp;quot;
	tmp[8]=&amp;quot;255.0.0.0&amp;quot;
	tmp[9]=&amp;quot;255.128.0.0&amp;quot;
	tmp[10]=&amp;quot;255.192.0.0&amp;quot;
	tmp[11]=&amp;quot;255.224.0.0&amp;quot;
	tmp[12]=&amp;quot;255.240.0.0&amp;quot;
	tmp[13]=&amp;quot;255.248.0.0&amp;quot;
	tmp[14]=&amp;quot;255.252.0.0&amp;quot;
	tmp[15]=&amp;quot;255.254.0.0&amp;quot;
	tmp[16]=&amp;quot;255.255.0.0&amp;quot;
	tmp[17]=&amp;quot;255.255.128.0&amp;quot;
	tmp[18]=&amp;quot;255.255.192.0&amp;quot;
	tmp[19]=&amp;quot;255.255.224.0&amp;quot;
	tmp[20]=&amp;quot;255.255.240.0&amp;quot;
	tmp[21]=&amp;quot;255.255.248.0&amp;quot;
	tmp[22]=&amp;quot;255.255.252.0&amp;quot;
	tmp[23]=&amp;quot;255.255.254.0&amp;quot;
	tmp[24]=&amp;quot;255.255.255.0&amp;quot;
	tmp[25]=&amp;quot;255.255.255.128&amp;quot;
	tmp[26]=&amp;quot;255.255.255.192&amp;quot;
	tmp[27]=&amp;quot;255.255.255.224&amp;quot;
	tmp[28]=&amp;quot;255.255.255.240&amp;quot;
	tmp[29]=&amp;quot;255.255.255.248&amp;quot;
	tmp[30]=&amp;quot;255.255.255.252&amp;quot;
	tmp[31]=&amp;quot;255.255.255.254&amp;quot;
	tmp[32]=&amp;quot;255.255.255.255&amp;quot;

	split(ip,n,/\./)
	split(net,netandmask,/\//)
	network=netandmask[1]
	if (mask == &amp;quot;&amp;quot;) {
		mask=netandmask[2]
		mask=tmp[mask]
	}
	split(mask,m,/\./)
	for (i=1; i&amp;lt;=3; i++) calcnet=sprintf(&amp;quot;%s%d.&amp;quot;, calcnet,awkand(n[i],m[i]))
	calcnet=sprintf(&amp;quot;%s%d&amp;quot;, calcnet,awkand(n[4],m[4]))
	if (net == &amp;quot;&amp;quot;) {
		print calcnet&amp;quot;/&amp;quot;tmpr[mask]
	} else {
		if (calcnet == network) {
			print &amp;quot;same net&amp;quot;
		} else {
			print &amp;quot;different net&amp;quot;
		}
	}
}

function awkand(a,b,  k,r) {
	k = 1
	r = 0
	a = int(a + 0.5) # round to nearest integer
	b = int(b + 0.5)
	while ( a + b ) {
		if ( a%2 &amp;amp;&amp;amp; b%2 ) r += k
		a = int(a / 2)
		b = int(b / 2)
		k *= 2
	}
	return r
}
EOF
chmod 0500 &amp;quot;$tmpfile&amp;quot;

# get the client ip from the config file, might not work on old clients, in that case you can use lsof but it&amp;#039;s slowwww
ip=$(grep ^ClientAddress /Library/Tanium/TaniumClient/TaniumClientStatus.ini | awk -F= &amp;#039;{print $2}&amp;#039; | awk -F: &amp;#039;{print $3}&amp;#039; | awk -F_ &amp;#039;{print $1}&amp;#039;)
mask=$(ifconfig | grep &amp;quot;$ip&amp;quot; | awk &amp;#039;{print $4}&amp;#039; | sed &amp;#039;s/^0x//&amp;#039;)
decmask=`for i in $(/bin/echo -n &amp;quot;$mask&amp;quot;  | sed &amp;#039;s/\(..\)/0x\1 /g&amp;#039;); do /usr/bin/printf &amp;quot;%hu.&amp;quot; $i; done | sed &amp;#039;s/\.$//&amp;#039;`
./$tmpfile -v ip=&amp;quot;$ip&amp;quot; -v mask=&amp;quot;$decmask&amp;quot;
rm -f &amp;quot;$tmpfile&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>73</cache_row_id>
          </sensor>
          <sensor>
            <id>146</id>
            <name>BitLocker Details</name>
            <hash>1281370578</hash>
            <string_count>0</string_count>
            <category>Security</category>
            <description>Returns information on the BitLocker status of a machine.
Example: Drive | Device ID | Encryption Method</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; BitLocker Details
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;
Dim objWMIService
On Error Resume Next
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\CIMV2\Security\MicrosoftVolumeEncryption&amp;quot;)
On Error Goto 0

If IsEmpty(objWMIService) Then
	&amp;#039; Don&amp;#039;t output any values --- just exit.  This matches other
	&amp;#039; OSes where BitLocker is available, but not in use.
	WScript.Quit
End If 
 
Set colItems = objWMIService.ExecQuery(&amp;quot;SELECT * FROM Win32_EncryptableVolume&amp;quot;,,48)
Dim arEncryptionMethod
arEncryptionMethod = Array(&amp;quot;None&amp;quot;, &amp;quot;AES 128 With Diffuser&amp;quot;, &amp;quot;AES 256 With Diffuser&amp;quot;, &amp;quot;AES 128&amp;quot;, &amp;quot;AES 256&amp;quot;)
Dim arProtectionStatus
arProtectionStatus = Array(&amp;quot;Protection Off&amp;quot;, &amp;quot;Protection On&amp;quot;, &amp;quot;Protection Unknown&amp;quot;)
Dim arConversionStatus
arConversionStatus = Array(&amp;quot;Fully Decrypted&amp;quot;, &amp;quot;Fully Encrypted&amp;quot;, &amp;quot;Encryption In Progress&amp;quot;, &amp;quot;Decryption In Progress&amp;quot;, &amp;quot;Encryption Paused&amp;quot;, &amp;quot;Decryption Paused&amp;quot;)
Dim arLockStatus
arLockStatus = Array(&amp;quot;Unlocked&amp;quot;, &amp;quot;Locked&amp;quot;)
For Each objItem in colItems
 Dim EncryptionMethod
 Dim ProtectionStatus
 Dim ConversionStatus
 Dim EncryptionPercentage &amp;#039;Percentage of the volume that is encrypted
 Dim VolumeKeyProtectorID
 Dim LockStatus
 
 objItem.GetEncryptionMethod EncryptionMethod
 objItem.GetProtectionStatus ProtectionStatus
 objItem.GetConversionStatus ConversionStatus, EncryptionPercentage
 objItem.GetKeyProtectors 0,VolumeKeyProtectorID
 objItem.GetLockStatus LockStatus
 
 strSep = &amp;quot;|&amp;quot;
 
 &amp;#039;Drive Letter, Device ID, Encryption Method, Protection Status, Conversion Status, Encryption Percentage, Lock Status
 
 Wscript.Echo _
 	objItem.DriveLetter &amp;amp; strSep &amp;amp; _
 	arEncryptionMethod(EncryptionMethod) &amp;amp; strSep &amp;amp; _
 	arProtectionStatus(ProtectionStatus) &amp;amp; strSep &amp;amp; _
 	arConversionStatus(ConversionStatus) &amp;amp; strSep &amp;amp; _
 	EncryptionPercentage &amp;amp; &amp;quot;%&amp;quot; &amp;amp; strSep &amp;amp; _
 	arLockStatus(LockStatus)
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Drive</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Device ID</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Encryption Method</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Protection Status</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Conversion Status</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Encryption Percentage</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Lock Status</name>
                <index>6</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>74</cache_row_id>
          </sensor>
          <sensor>
            <id>148</id>
            <name>Chassis Type</name>
            <hash>2728641061</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The machine or chassis type for the machine.
Example: Server or Virtual</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Chassis Type
&amp;#039;========================================

On Error Resume Next

strResult = &amp;quot;Unknown&amp;quot;

If IsVM Then
	strResult = &amp;quot;Virtual&amp;quot;
Else
	Set objWMIService = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
	Set colChassis = objWMIService.ExecQuery(&amp;quot;Select * from Win32_SystemEnclosure&amp;quot;)
	
	For Each objChassis in colChassis
	    For  Each strChassisType in objChassis.ChassisTypes
	        Select Case strChassisType
	            Case 1
	                strResult = &amp;quot;Other&amp;quot;
	            Case 2
	                strResult = &amp;quot;Unknown&amp;quot;
	            Case 3
	                strResult = &amp;quot;Desktop&amp;quot;
	            Case 4
	                strResult = &amp;quot;Low Profile Desktop&amp;quot;
	            Case 5
	                strResult = &amp;quot;Pizza Box&amp;quot;
	            Case 6
	                strResult = &amp;quot;Mini Tower&amp;quot;
	            Case 7
	                strResult = &amp;quot;Tower&amp;quot;
	            Case 8
	                strResult = &amp;quot;Portable&amp;quot;
	            Case 9
	                strResult = &amp;quot;Laptop&amp;quot;
	            Case 10
	                strResult = &amp;quot;Notebook&amp;quot;
	            Case 11
	                strResult = &amp;quot;Handheld&amp;quot;
	            Case 12
	                strResult = &amp;quot;Docking Station&amp;quot;
	            Case 13
	                strResult = &amp;quot;All-in-One&amp;quot;
	            Case 14
	                strResult = &amp;quot;Sub-Notebook&amp;quot;
	            Case 15
	                strResult = &amp;quot;Space Saving&amp;quot;
	            Case 16
	                strResult = &amp;quot;Lunch Box&amp;quot;
	            Case 17
	                strResult = &amp;quot;Main System Chassis&amp;quot;
	            Case 18
	                strResult = &amp;quot;Expansion Chassis&amp;quot;
	            Case 19
	                strResult = &amp;quot;Sub-Chassis&amp;quot;
	            Case 20
	                strResult = &amp;quot;Bus Expansion Chassis&amp;quot;
	            Case 21
	                strResult = &amp;quot;Peripheral Chassis&amp;quot;
	            Case 22
	                strResult = &amp;quot;Storage Chassis&amp;quot;
	            Case 23
	                strResult = &amp;quot;Rack Mount Chassis&amp;quot;
	            Case 24
	                strResult = &amp;quot;Sealed-Case PC&amp;quot;
	            Case Else
	                strResult = &amp;quot;Unknown&amp;quot;
	            End Select
	    Next
	Next
End If 

WScript.Echo strResult

Function IsVM
	Dim sVMPlatform, sMake, sModel, sBIOSVersion,bIsVM

    &amp;#039; Check the WMI information against known values

    bIsVM = false
    sVMPlatform = &amp;quot;&amp;quot;

    sMake = GetWmiPropertyValue(&amp;quot;root\cimv2&amp;quot;, &amp;quot;Win32_ComputerSystem&amp;quot;, &amp;quot;Manufacturer&amp;quot;)
    sModel = GetWmiPropertyValue(&amp;quot;root\cimv2&amp;quot;, &amp;quot;Win32_ComputerSystem&amp;quot;, &amp;quot;Model&amp;quot;)
    sBIOSVersion = GetWmiPropertyValue(&amp;quot;root\cimv2&amp;quot;, &amp;quot;Win32_BIOS&amp;quot;, &amp;quot;Version&amp;quot;)

    &amp;#039;WScript.Echo &amp;quot;Manufacturer=&amp;quot; &amp;amp; sMake
    &amp;#039;WScript.Echo &amp;quot;Model=&amp;quot; &amp;amp; sModel
    &amp;#039;WScript.Echo &amp;quot;BIOSVersion=&amp;quot; &amp;amp; sBIOSVersion

    If sModel = &amp;quot;Virtual Machine&amp;quot; Then

        &amp;#039; Microsoft virtualization technology detected, assign defaults

        sVMPlatform = &amp;quot;Hyper-V&amp;quot;
        bIsVM = true

        &amp;#039; Try to determine more specific values

        Select Case sBIOSVersion
        Case &amp;quot;VRTUAL - 1000831&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;Hyper-V 2008 Beta or RC0&amp;quot;
        Case &amp;quot;VRTUAL - 5000805&amp;quot;, &amp;quot;BIOS Date: 05/05/08 20:35:56  Ver: 08.00.02&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;Hyper-V 2008 RTM&amp;quot;
        Case &amp;quot;VRTUAL - 3000919&amp;quot; 
            bIsVM = true
            sVMPlatform = &amp;quot;Hyper-V 2008 R2&amp;quot;
        Case &amp;quot;A M I  - 2000622&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;VS2005R2SP1 or VPC2007&amp;quot;
        Case &amp;quot;A M I  - 9000520&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;VS2005R2&amp;quot;
        Case &amp;quot;A M I  - 9000816&amp;quot;, &amp;quot;A M I  - 6000901&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;Windows Virtual PC&amp;quot;
        Case &amp;quot;A M I  - 8000314&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;VS2005 or VPC2004&amp;quot;
        Case &amp;quot;Xen - 0s&amp;quot;
        	bIsVM = True
        	sVMPlatform = &amp;quot;Xen&amp;quot;
        Case &amp;quot;Xen - 0&amp;quot;
            bIsVM = True
            sVMPlatform = &amp;quot;Xen&amp;quot;
        End Select

    ElseIf sMake = &amp;quot;Xen&amp;quot; Then
    
        &amp;#039; Xen detected

        sVMPlatform = &amp;quot;Xen&amp;quot;
        bIsVM = true
    
    ElseIf sModel = &amp;quot;VMware Virtual Platform&amp;quot; then

        &amp;#039; VMware detected

        sVMPlatform = &amp;quot;VMware&amp;quot;
        bIsVM = true

    ElseIf sModel  = &amp;quot;VirtualBox&amp;quot; then

        &amp;#039; VirtualBox detected

        bIsVM = true
        sVMPlatform = &amp;quot;VirtualBox&amp;quot;

    ElseIf sModel  = &amp;quot;HVM domU&amp;quot; then

        &amp;#039; Xen detected

        bIsVM = true
        sVMPlatform = &amp;quot;Xen&amp;quot;
        
    ElseIf sModel = &amp;quot;OpenStack Compute&amp;quot; Then
    
    	&amp;#039; OpenStack detected
    	
    	bIsVM = true
    	sVMPlatform = &amp;quot;OpenStack&amp;quot;
     
    Else 
        &amp;#039; This computer does not appear to be a virtual machine.
    End if

    &amp;#039; Set the return value

    If bIsVM Then
    	&amp;#039; Let&amp;#039;s not actually do anything here 
        &amp;#039;WScript.Echo &amp;quot;IsVirtualMachine=True&amp;quot;
        &amp;#039;WScript.Echo &amp;quot;VirtualMachinePlatform=&amp;quot; &amp;amp; sVMPlatform
    Else
        &amp;#039;WScript.Echo &amp;quot;IsVirtualMachine=False&amp;quot;
    End If

    IsVM = bIsVM

End Function

Function GetWmiPropertyValue(strNameSpace, strClassName, strPropertyName)
	Dim strPropertyValue, oWMIClass, oWMIProperties, objWMIService, colItems
	Dim objItem, objProperty
	Dim sLine
	
    On Error Resume Next

    strPropertyValue = &amp;quot;&amp;quot;
    set oWmiClass = getobject(&amp;quot;winmgmts:&amp;quot; &amp;amp; strNameSpace).get(strClassName,&amp;amp;h20000) &amp;#039;amended
    set oWmiProperties = oWmiClass.Properties_

    Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; &amp;quot;.&amp;quot; &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strNameSpace)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from &amp;quot; &amp;amp; strClassName,,48)

    For Each objItem in colItems
        For Each objProperty in oWmiProperties
            sLine = &amp;quot;&amp;quot;
            &amp;#039;WScript.Echo &amp;quot;- &amp;quot; &amp;amp; objProperty.name &amp;amp; &amp;quot;: &amp;quot; &amp;amp; strPropertyName

            If objProperty.Name = strPropertyName Then
                If objProperty.IsArray = True Then
                    sLine = &amp;quot;str&amp;quot; &amp;amp; objProperty.Name &amp;amp; &amp;quot; = Join(objItem.&amp;quot; &amp;amp; objProperty.Name &amp;amp; &amp;quot;, &amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;,&amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;)&amp;quot; &amp;amp; vbCrLf
                    sLine = sLine &amp;amp; &amp;quot;strPropertyValue =  str&amp;quot; &amp;amp; objProperty.Name
                &amp;#039;ElseIf objProperty.CIMTYPE = 101 Then
                &amp;#039;    bHasDates = True
                &amp;#039;    sLine =  &amp;quot;strPropertyValue =  WMIDateStringToDate(objItem.&amp;quot; &amp;amp; objProperty.Name &amp;amp; &amp;quot;)&amp;quot;
                Else
                    sLine =  &amp;quot;strPropertyValue =  objItem.&amp;quot; &amp;amp; objProperty.Name
                End If

                &amp;#039;WScript.Echo sLine
                Execute sLine
            End If

        Next
    Next

    GetWmiPropertyValue = strPropertyValue
    
    &amp;#039;Cleanup!
    set oWmiClass = Nothing
    set oWmiProperties = Nothing

    Set objWMIService = Nothing
    Set colItems = Nothing

End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

if [ -x /usr/sbin/dmidecode ]; then
  /usr/sbin/dmidecode &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
  if [ $? -eq 0 ]; then
    #CHASSIS=&amp;quot;$(/usr/sbin/dmidecode -s system-manufacturer)&amp;quot;
    #CHASSIS=&amp;quot;$CHASSIS $(/usr/sbin/dmidecode -s system-product-name)&amp;quot;
    CHASSIS=&amp;quot;$CHASSIS $(/usr/sbin/dmidecode -s chassis-type)&amp;quot;
  else
    if [ -d /proc/vz ]; then
      CHASSIS=&amp;quot;VZ&amp;quot;
    else
      CHASSIS=&amp;quot;Can&amp;#039;t determine chassis type&amp;quot;
    fi
  fi
else
  if [ -d /proc/vz ]; then
    CHASSIS=&amp;quot;VZ&amp;quot;
  else
    CHASSIS=&amp;quot;Can&amp;#039;t determine chassis type&amp;quot;
  fi
fi
echo $CHASSIS</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
system_profiler SPHardwareDataType | grep &amp;#039;Model Identifier&amp;#039; | awk -F&amp;#039;: &amp;#039; &amp;#039;{print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
prtdiag |grep &amp;#039;System Configuration&amp;#039; | awk -F: &amp;#039;{ print $2 }&amp;#039; | awk -F\( &amp;#039;{ print $1 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Fetch system model 
uname -M | cut -d, -f2</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>75</cache_row_id>
          </sensor>
          <sensor>
            <id>150</id>
            <name>Monitor Details</name>
            <hash>1502679547</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns details of attached physical monitors.
Example: Model Name, Serial Number, VESA Manufacturer ID, Manufacture Date</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Monitor Details
&amp;#039;========================================

Option Explicit
Dim strSep
strSep = &amp;quot;|&amp;quot;
Dim WshShell
Set WshShell = WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Dim strComputer, message

Dim intMonitorCount
Dim oRegistry, sBaseKey, sBaseKey2, sBaseKey3, skey, skey2, skey3
Dim sValue
dim i, iRC, iRC2, iRC3
Dim arSubKeys, arSubKeys2, arSubKeys3, arrintEDID
Dim strRawEDID
Dim ByteValue, strSerFind, strMdlFind
Dim intSerFoundAt, intMdlFoundAt, findit
Dim tmp, tmpser, tmpmdl, tmpctr
Dim batch, bHeader
batch = False

strComputer = &amp;quot;.&amp;quot;

If strcomputer = &amp;quot;&amp;quot; Then WScript.Quit
strComputer = UCase(strComputer)

If batch Then
Dim fso,logfile, appendout
logfile = wshShell.ExpandEnvironmentStrings(&amp;quot;%userprofile%&amp;quot;) &amp;amp; &amp;quot;\desktop\MonitorInfo.csv&amp;quot;

&amp;#039;setup Log
Const ForAppend = 8
Set fso = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
If Not fso.FileExists(logfile) Then bHeader = True
set appendout = fso.OpenTextFile(logfile, ForAppend, True)

If bHeader Then
appendout.writeline &amp;quot;Computer,Model,Serial #,Vendor ID,Manufacture Date,Messages&amp;quot;
End If
End If

Dim strarrRawEDID()
intMonitorCount=0
Const HKLM = &amp;amp;H80000002 &amp;#039;HKEY_LOCAL_MACHINE
&amp;#039;get a handle to the WMI registry object
On Error Resume Next
Set oRegistry = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;/root/default:StdRegProv&amp;quot;)

If Err &amp;lt;&amp;gt; 0 Then
If batch Then
EchoAndLog strComputer &amp;amp; &amp;quot;,,,,,&amp;quot; &amp;amp; Err.Description
Else
WScript.echo &amp;quot;Failed. &amp;quot; &amp;amp; Err.Description,vbCritical + vbOKOnly,strComputer
WScript.Quit
End If
End If


sBaseKey = &amp;quot;SYSTEM\CurrentControlSet\Enum\DISPLAY\&amp;quot;
&amp;#039;enumerate all the keys HKLM\SYSTEM\CurrentControlSet\Enum\DISPLAY\ 
iRC = oRegistry.EnumKey(HKLM, sBaseKey, arSubKeys)
For Each sKey In arSubKeys
&amp;#039;we are now in the registry at the level of:
&amp;#039;HKLM\SYSTEM\CurrentControlSet\Enum\DISPLAY\&amp;lt;VESA_Monitor_ID\ 
&amp;#039;we need to dive in one more level and check the data of the &amp;quot;HardwareID&amp;quot; value
sBaseKey2 = sBaseKey &amp;amp; sKey &amp;amp; &amp;quot;\&amp;quot;
iRC2 = oRegistry.EnumKey(HKLM, sBaseKey2, arSubKeys2)
For Each sKey2 In arSubKeys2
&amp;#039;now we are at the level of:
&amp;#039;HKLM\SYSTEM\CurrentControlSet\Enum\DISPLAY\&amp;lt;VESA_Monitor_ID\&amp;lt;PNP_ID&amp;gt;\ 
&amp;#039;so we can check the &amp;quot;HardwareID&amp;quot; value
oRegistry.GetMultiStringValue HKLM, sBaseKey2 &amp;amp; sKey2 &amp;amp; &amp;quot;\&amp;quot;, &amp;quot;HardwareID&amp;quot;, sValue
for tmpctr=0 to ubound(svalue)
If lcase(left(svalue(tmpctr),8))=&amp;quot;monitor\&amp;quot; then
&amp;#039;If it is a monitor we will check for the existance of a control subkey
&amp;#039;that way we know it is an active monitor
sBaseKey3 = sBaseKey2 &amp;amp; sKey2 &amp;amp; &amp;quot;\&amp;quot;
iRC3 = oRegistry.EnumKey(HKLM, sBaseKey3, arSubKeys3)
For Each sKey3 In arSubKeys3
&amp;#039;Kaplan edit
strRawEDID = &amp;quot;&amp;quot;
If skey3=&amp;quot;Control&amp;quot; Then
&amp;#039;If the Control sub-key exists then we should read the edid info
oRegistry.GetBinaryValue HKLM, sbasekey3 &amp;amp; &amp;quot;Device Parameters\&amp;quot;, &amp;quot;EDID&amp;quot;, arrintEDID
If vartype(arrintedid) &amp;lt;&amp;gt; 8204 then &amp;#039;and If we don&amp;#039;t find it...
strRawEDID=&amp;quot;EDID Not Available&amp;quot; &amp;#039;store an &amp;quot;unavailable message
else
for each bytevalue in arrintedid &amp;#039;otherwise conver the byte array from the registry into a string (for easier processing later)
strRawEDID=strRawEDID &amp;amp; chr(bytevalue)
Next
End If
&amp;#039;now take the string and store it in an array, that way we can support multiple monitors
redim preserve strarrRawEDID(intMonitorCount)
strarrRawEDID(intMonitorCount)=strRawEDID
intMonitorCount=intMonitorCount+1
End If
Next
End If
Next
Next
Next
&amp;#039;*****************************************************************************************
&amp;#039;now the EDID info for each active monitor is stored in an array of strings called strarrRawEDID
&amp;#039;so we can process it to get the good stuff out of it which we will store in a 5 dimensional array
&amp;#039;called arrMonitorInfo, the dimensions are as follows:
&amp;#039;0=VESA Mfg ID, 1=VESA Device ID, 2=MFG Date (M/YYYY),3=Serial Num (If available),4=Model Descriptor
&amp;#039;5=EDID Version
&amp;#039;*****************************************************************************************
On Error Resume Next
dim arrMonitorInfo()
redim arrMonitorInfo(intMonitorCount-1,5)
dim location(3)
for tmpctr=0 to intMonitorCount-1
If strarrRawEDID(tmpctr) &amp;lt;&amp;gt; &amp;quot;EDID Not Available&amp;quot; then
&amp;#039;*********************************************************************
&amp;#039;first get the model and serial numbers from the vesa descriptor
&amp;#039;blocks in the edid. the model number is required to be present
&amp;#039;according to the spec. (v1.2 and beyond)but serial number is not
&amp;#039;required. There are 4 descriptor blocks in edid at offset locations
&amp;#039;&amp;amp;H36 &amp;amp;H48 &amp;amp;H5a and &amp;amp;H6c each block is 18 bytes long
&amp;#039;*********************************************************************
location(0)=mid(strarrRawEDID(tmpctr),&amp;amp;H36+1,18)
location(1)=mid(strarrRawEDID(tmpctr),&amp;amp;H48+1,18)
location(2)=mid(strarrRawEDID(tmpctr),&amp;amp;H5a+1,18)
location(3)=mid(strarrRawEDID(tmpctr),&amp;amp;H6c+1,18)

&amp;#039;you can tell If the location contains a serial number If it starts with &amp;amp;H00 00 00 ff
strSerFind=chr(&amp;amp;H00) &amp;amp; chr(&amp;amp;H00) &amp;amp; chr(&amp;amp;H00) &amp;amp; chr(&amp;amp;Hff)
&amp;#039;or a model description If it starts with &amp;amp;H00 00 00 fc
strMdlFind=chr(&amp;amp;H00) &amp;amp; chr(&amp;amp;H00) &amp;amp; chr(&amp;amp;H00) &amp;amp; chr(&amp;amp;Hfc)

intSerFoundAt=-1
intMdlFoundAt=-1
for findit = 0 to 3
If instr(location(findit),strSerFind)&amp;gt;0 then
intSerFoundAt=findit
End If
If instr(location(findit),strMdlFind)&amp;gt;0 then
intMdlFoundAt=findit
End If
Next

&amp;#039;If a location containing a serial number block was found then store it
If intSerFoundAt&amp;lt;&amp;gt;-1 then
tmp=right(location(intSerFoundAt),14)
If instr(tmp,chr(&amp;amp;H0a))&amp;gt;0 then
tmpser=trim(left(tmp,instr(tmp,chr(&amp;amp;H0a))-1))
Else
tmpser=trim(tmp)
End If
&amp;#039;although it is not part of the edid spec it seems as though the
&amp;#039;serial number will frequently be preceeded by &amp;amp;H00, this
&amp;#039;compensates for that
If left(tmpser,1)=chr(0) then tmpser=right(tmpser,len(tmpser)-1)
else
tmpser=&amp;quot;Not Found&amp;quot;
End If

&amp;#039;If a location containing a model number block was found then store it
If intMdlFoundAt&amp;lt;&amp;gt;-1 then
tmp=right(location(intMdlFoundAt),14)
If instr(tmp,chr(&amp;amp;H0a))&amp;gt;0 then
tmpmdl=trim(left(tmp,instr(tmp,chr(&amp;amp;H0a))-1))
else
tmpmdl=trim(tmp)
End If
&amp;#039;although it is not part of the edid spec it seems as though the
&amp;#039;serial number will frequently be preceeded by &amp;amp;H00, this
&amp;#039;compensates for that
If left(tmpmdl,1)=chr(0) then tmpmdl=right(tmpmdl,len(tmpmdl)-1)
else
tmpmdl=&amp;quot;Not Found&amp;quot;
End If

&amp;#039;**************************************************************
&amp;#039;Next get the mfg date
&amp;#039;**************************************************************
Dim tmpmfgweek,tmpmfgyear,tmpmdt
&amp;#039;the week of manufacture is stored at EDID offset &amp;amp;H10
tmpmfgweek=asc(mid(strarrRawEDID(tmpctr),&amp;amp;H10+1,1))

&amp;#039;the year of manufacture is stored at EDID offset &amp;amp;H11
&amp;#039;and is the current year -1990
tmpmfgyear=(asc(mid(strarrRawEDID(tmpctr),&amp;amp;H11+1,1)))+1990

&amp;#039;store it in month/year format
tmpmdt=month(dateadd(&amp;quot;ww&amp;quot;,tmpmfgweek,datevalue(&amp;quot;1/1/&amp;quot; &amp;amp; tmpmfgyear))) &amp;amp; &amp;quot;/&amp;quot; &amp;amp; tmpmfgyear

&amp;#039;**************************************************************
&amp;#039;Next get the edid version
&amp;#039;**************************************************************
&amp;#039;the version is at EDID offset &amp;amp;H12
Dim tmpEDIDMajorVer, tmpEDIDRev, tmpVer
tmpEDIDMajorVer=asc(mid(strarrRawEDID(tmpctr),&amp;amp;H12+1,1))

&amp;#039;the revision level is at EDID offset &amp;amp;H13
tmpEDIDRev=asc(mid(strarrRawEDID(tmpctr),&amp;amp;H13+1,1))

&amp;#039;store it in month/year format
tmpver=chr(48+tmpEDIDMajorVer) &amp;amp; &amp;quot;.&amp;quot; &amp;amp; chr(48+tmpEDIDRev)

&amp;#039;**************************************************************
&amp;#039;Next get the mfg id
&amp;#039;**************************************************************
&amp;#039;the mfg id is 2 bytes starting at EDID offset &amp;amp;H08
&amp;#039;the id is three characters long. using 5 bits to represent
&amp;#039;each character. the bits are used so that 1=A 2=B etc..
&amp;#039;
&amp;#039;get the data
Dim tmpEDIDMfg, tmpMfg
dim Char1, Char2, Char3
Dim Byte1, Byte2
tmpEDIDMfg=mid(strarrRawEDID(tmpctr),&amp;amp;H08+1,2)
Char1=0 : Char2=0 : Char3=0
Byte1=asc(left(tmpEDIDMfg,1)) &amp;#039;get the first half of the string
Byte2=asc(right(tmpEDIDMfg,1)) &amp;#039;get the first half of the string
&amp;#039;now shift the bits
&amp;#039;shift the 64 bit to the 16 bit
If (Byte1 and 64) &amp;gt; 0 then Char1=Char1+16
&amp;#039;shift the 32 bit to the 8 bit
If (Byte1 and 32) &amp;gt; 0 then Char1=Char1+8
&amp;#039;etc....
If (Byte1 and 16) &amp;gt; 0 then Char1=Char1+4
If (Byte1 and 8) &amp;gt; 0 then Char1=Char1+2
If (Byte1 and 4) &amp;gt; 0 then Char1=Char1+1

&amp;#039;the 2nd character uses the 2 bit and the 1 bit of the 1st byte
If (Byte1 and 2) &amp;gt; 0 then Char2=Char2+16
If (Byte1 and 1) &amp;gt; 0 then Char2=Char2+8
&amp;#039;and the 128,64 and 32 bits of the 2nd byte
If (Byte2 and 128) &amp;gt; 0 then Char2=Char2+4
If (Byte2 and 64) &amp;gt; 0 then Char2=Char2+2
If (Byte2 and 32) &amp;gt; 0 then Char2=Char2+1

&amp;#039;the bits for the 3rd character don&amp;#039;t need shifting
&amp;#039;we can use them as they are
Char3=Char3+(Byte2 and 16)
Char3=Char3+(Byte2 and 8)
Char3=Char3+(Byte2 and 4)
Char3=Char3+(Byte2 and 2)
Char3=Char3+(Byte2 and 1)
tmpmfg=chr(Char1+64) &amp;amp; chr(Char2+64) &amp;amp; chr(Char3+64)

&amp;#039;**************************************************************
&amp;#039;Next get the device id
&amp;#039;**************************************************************
&amp;#039;the device id is 2bytes starting at EDID offset &amp;amp;H0a
&amp;#039;the bytes are in reverse order.
&amp;#039;this code is not text. it is just a 2 byte code assigned
&amp;#039;by the manufacturer. they should be unique to a model
Dim tmpEDIDDev1, tmpEDIDDev2, tmpDev

tmpEDIDDev1=hex(asc(mid(strarrRawEDID(tmpctr),&amp;amp;H0a+1,1)))
tmpEDIDDev2=hex(asc(mid(strarrRawEDID(tmpctr),&amp;amp;H0b+1,1)))
If len(tmpEDIDDev1)=1 then tmpEDIDDev1=&amp;quot;0&amp;quot; &amp;amp; tmpEDIDDev1
If len(tmpEDIDDev2)=1 then tmpEDIDDev2=&amp;quot;0&amp;quot; &amp;amp; tmpEDIDDev2
tmpdev=tmpEDIDDev2 &amp;amp; tmpEDIDDev1

&amp;#039;**************************************************************
&amp;#039;finally store all the values into the array
&amp;#039;**************************************************************
&amp;#039;Kaplan adds code to avoid duplication...

If Not InArray(tmpser,arrMonitorInfo,3) Then
arrMonitorInfo(tmpctr,0)=tmpmfg
arrMonitorInfo(tmpctr,1)=tmpdev
arrMonitorInfo(tmpctr,2)=tmpmdt
arrMonitorInfo(tmpctr,3)=tmpser
arrMonitorInfo(tmpctr,4)=tmpmdl
arrMonitorInfo(tmpctr,5)=tmpVer
End If
End If
Next

&amp;#039;For now just a simple screen print will suffice for output.
&amp;#039;But you could take this output and write it to a database or a file
&amp;#039;and in that way use it for asset management.
i = 0
for tmpctr = 0 to intMonitorCount-1
If arrMonitorInfo(tmpctr,1) &amp;lt;&amp;gt; &amp;quot;&amp;quot; And arrMonitorInfo(tmpctr,0) &amp;lt;&amp;gt; &amp;quot;PNP&amp;quot; Then
If batch Then
EchoAndLog strComputer &amp;amp; &amp;quot;,&amp;quot; &amp;amp; arrMonitorInfo(tmpctr,4) &amp;amp; &amp;quot;,&amp;quot; &amp;amp; _
arrMonitorInfo(tmpctr,3)&amp;amp; &amp;quot;,&amp;quot; &amp;amp; arrMonitorInfo(tmpctr,0) &amp;amp; &amp;quot;,&amp;quot; &amp;amp; _
arrMonitorInfo(tmpctr,2)
Else
Dim strModel, strSerial, strVesa, strManDate
strModel = arrMonitorInfo(tmpctr,4)
strSerial = arrMonitorInfo(tmpctr,3)
strVesa = arrMonitorInfo(tmpctr,0)
strManDate = arrMonitorInfo(tmpctr,2)

message = message &amp;amp; &amp;quot;Monitor &amp;quot; &amp;amp; chr(i+65) &amp;amp; &amp;quot;)&amp;quot; &amp;amp; VbCrLf &amp;amp; _
&amp;quot;Model Name: &amp;quot; &amp;amp; arrMonitorInfo(tmpctr,4) &amp;amp; VbCrLf &amp;amp; _
&amp;quot;Serial Number: &amp;quot; &amp;amp; arrMonitorInfo(tmpctr,3)&amp;amp; VbCrLf &amp;amp; _
&amp;quot;VESA Manufacturer ID: &amp;quot; &amp;amp; arrMonitorInfo(tmpctr,0) &amp;amp; VbCrLf &amp;amp; _
&amp;quot;Manufacture Date: &amp;quot; &amp;amp; arrMonitorInfo(tmpctr,2) &amp;amp; VbCrLf &amp;amp; vbCrLf

If InStr(strManDate, &amp;quot;/&amp;quot;) &amp;gt; 0 Then
	Dim words
	words = Split(strManDate, &amp;quot;/&amp;quot;)
	If UBound(words) &amp;gt; 0 Then
		strManDate = words(1) &amp;amp; &amp;quot;-&amp;quot; &amp;amp; words(0)
	End If
End If

WScript.Echo _
	strModel &amp;amp; strSep &amp;amp;_
	strSerial &amp;amp; strSep &amp;amp;_
	strVesa &amp;amp; strSep &amp;amp;_
	strManDate

&amp;#039;wscript.echo &amp;quot;..........&amp;quot; &amp;amp; &amp;quot;Device ID: &amp;quot; &amp;amp; arrMonitorInfo(tmpctr,1)
&amp;#039;wscript.echo &amp;quot;..........&amp;quot; &amp;amp; &amp;quot;EDID Version: &amp;quot; &amp;amp; arrMonitorInfo(tmpctr,5)
i = i + 1
End If
End If
Next

If not batch Then
&amp;#039; WScript.echo message , vbInformation + vbOKOnly,strComputer &amp;amp; &amp;quot; Monitor Info&amp;quot;
End If

Function InArray(strValue,List,Col)
Dim i
For i = 0 to UBound(List)
If List(i,col) = cstr(strValue) Then
InArray = True
Exit Function
End If
Next
InArray = False
End Function

Sub EchoAndLog (message)
&amp;#039;Echo output and write to log
Wscript.Echo message
AppendOut.WriteLine message
End Sub</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

# had to use bash because echo -n is broken in OS X bourne shell
# I really regret doing it this way, but read strips leading whitespace

system_profiler SPDisplaysDataType | sed -e &amp;#039;s/^      /______/&amp;#039; -e &amp;#039;s/^______  /________/&amp;#039; -e &amp;#039;s/^________  /__________/&amp;#039; | while read line; do
        if echo &amp;quot;$line&amp;quot; | egrep -q  &amp;quot;^________[^_]&amp;quot;
        then
                monitor_name=$(echo &amp;quot;$line&amp;quot; | sed -e &amp;#039;s/^________//&amp;#039; -e &amp;#039;s/:$//&amp;#039;)
                echo -n &amp;quot;$monitor_name|&amp;quot;
        else
                if echo &amp;quot;$line&amp;quot; | grep -q  &amp;quot;__________Display Serial Number: &amp;quot;
                then
                        sn=$(echo -n &amp;quot;$line&amp;quot; | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039;)
                        echo &amp;quot;$sn|unavailable|unavailable&amp;quot;
                fi
        fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Model Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Serial Number</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>VESA Manufacturer ID</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Manufacture Date</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>76</cache_row_id>
          </sensor>
          <sensor>
            <id>152</id>
            <name>CPU Details</name>
            <hash>4055028299</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>A multi-column sensor that provides CPU details: system type, CPU description, speed, # of processors, # of cores, and # of logical processors.
Example: x64-based PC | Intel(R) Xeon(R) CPU X3430 | 2390 Mhz | 1 | 4 | 4</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; CPU Details
&amp;#039;========================================

On Error Resume Next

strComputer = &amp;quot;.&amp;quot; 
Set objWMIService = GetObject(&amp;quot;Winmgmts:{impersonationlevel=impersonate}!\Root\Cimv2&amp;quot;)
Set colCSes = objWMIService.ExecQuery(&amp;quot;SELECT * FROM Win32_ComputerSystem&amp;quot;)

For Each objCS In colCSes
	systemType = objCS.SystemType
	If(Left(systemType, 1) = &amp;quot;X&amp;quot;) Then 
		systemType = &amp;quot;x&amp;quot; &amp;amp; Right(systemType, Len(systemType) -1)
	End If 
	numProcessors = objCS.NumberOfProcessors
Next

numCores = 0
numLogicalProcessors = 0
Dim strProcName, intSpeed, strSpeed

Set colItems = objWMIService.ExecQuery(&amp;quot;SELECT * FROM Win32_Processor&amp;quot;) 
For Each objItem in colItems 
	numCores = numCores + CInt(objItem.NumberOfCores)
	numLogicalProcessors = numLogicalProcessors + CInt(objItem.NumberOfLogicalProcessors)
	strProcName = objItem.Name
	intSpeed = objItem.MaxClockSpeed
Next


if instr(strProcName, &amp;quot;@&amp;quot;) &amp;gt; 0 Then
	strProcName = Trim(Left(strProcName, InStr(strProcName, &amp;quot;@&amp;quot;) - 1))
End If

&amp;#039;Check all properties to make sure they exist
strProcName = CleanWhitespace(trim(strProcName))
If strProcName = &amp;quot;&amp;quot; Then
	strProcName = &amp;quot;N/A&amp;quot;
End If

If intSpeed = &amp;quot;&amp;quot; Then
	strSpeed = &amp;quot;N/A&amp;quot;
Else
	intSpeed = CInt(intSpeed/10)*10
	strSpeed = CStr(intSpeed) &amp;amp; &amp;quot; Mhz&amp;quot;
End If

If numProcessors = 0 Then
	numProcessors = &amp;quot;N/A&amp;quot;
End If

strOs = GetOS
If numLogicalProcessors = 0 Then
	&amp;#039;if this is not available, then numProcessors
	&amp;#039;is actually the Logical Processors count

	numLogicalProcessors = numProcessors

	&amp;#039;Windows 2000 isn&amp;#039;t supported for logical processors
	If InStr(strOs, &amp;quot;2000&amp;quot;) &amp;gt; 0 Then
		numProcessors = &amp;quot;Unsupported&amp;quot;
	ElseIf InStr(strOs, &amp;quot;XP&amp;quot;) &amp;gt; 0 Then
		numProcessors = &amp;quot;XP SP3 Required&amp;quot;
	ElseIf InStr(strOs, &amp;quot;2003&amp;quot;) &amp;gt; 0 Then
		&amp;#039;For Win Server 2003 SEE KB 932370
		&amp;#039;http://support.microsoft.com/kb/932370/
		numProcessors = &amp;quot;KB932370 Required&amp;quot;
	Else
		numProcessors = &amp;quot;N/A&amp;quot;
	End If
End If

If numCores = 0 Then
	&amp;#039;Windows 2000 isn&amp;#039;t supported for cores
	If InStr(strOs, &amp;quot;2000&amp;quot;) &amp;gt; 0 Then
		numCores = &amp;quot;Unsupported&amp;quot;
	ElseIf InStr(strOs, &amp;quot;XP&amp;quot;) &amp;gt; 0 Then
		numCores = &amp;quot;SP3 Required&amp;quot;
	ElseIf InStr(strOs, &amp;quot;2003&amp;quot;) &amp;gt; 0 Then
		&amp;#039;For Win Server 2003 SEE KB 932370
		&amp;#039;http://support.microsoft.com/kb/932370/
		numCores = &amp;quot;KB932370 Required&amp;quot;
	Else
		numCores = &amp;quot;N/A&amp;quot;
	End If
End If



WScript.Echo _
	systemType &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
	strProcName &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
	strSpeed &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
	numProcessors &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
	numCores &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
	numLogicalProcessors
	
Function CleanWhitespace(strStarter)
	intStarter = Len(strStarter)
	For i = intStarter to 2 Step -1
		strChars = Space(i)
		strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
	Next
	cleanWhitespace = strStarter
End Function

Function GetOS
	Set oWsh = WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)    
	Set oWshSysEnv = oWsh.Environment(&amp;quot;PROCESS&amp;quot;)    
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)    
	Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;select Caption from win32_operatingsystem&amp;quot;)    
	For Each objItem In colItems       
	strStrip1 = Right(ObjItem.Caption, (Len(objItem.Caption) - Instr(objItem.Caption, &amp;quot; &amp;quot;)))   
	&amp;#039;strStrip2 = Right(strStrip1, (Len(strStrip1) - Instr(strStrip1, &amp;quot; &amp;quot;)))   
	if Instr(strStrip1,&amp;quot;Server&amp;quot; &amp;amp; Unescape(&amp;quot;%AE&amp;quot;)) &amp;lt;&amp;gt; 0 THEN   
	strOS = Replace(strStrip1,&amp;quot;Server&amp;quot; &amp;amp; Unescape(&amp;quot;%AE&amp;quot;),&amp;quot;Server&amp;quot;)   
	Else   
	strOS = strStrip1
	End IF   
	GetOS = Trim(strOS)
	Next
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
#system type, CPU description, speed, # of processors, # of cores, and # of logical processors.

arch=$(arch)
name=$(grep &amp;#039;model name&amp;#039; /proc/cpuinfo | awk -F: &amp;#039;{ print $2 }&amp;#039; | awk -F@ &amp;#039;{ print $1 }&amp;#039; | sed s/^\ //g)
speed=$(grep &amp;#039;model name&amp;#039; /proc/cpuinfo | awk -F@ &amp;#039;{ print $2 }&amp;#039;)
noproc=$(dmidecode | awk  &amp;quot;/Processor Information/,/Status/&amp;quot; d|grep &amp;#039;Manufacturer:&amp;#039; | grep -v &amp;#039;0000&amp;#039; | wc -l)
nocores=$(cat /proc/cpuinfo | grep processor | wc -l)

echo &amp;quot;$arch|$name|$speed|$noproc|$nocores|$nocores&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

#system type, CPU description, speed, # of processors, # of cores, and # of logical processors.

data=$(system_profiler SPHardwareDataType)
sysdata=$(sysctl -a)

arch=$(sysctl hw.machine | awk -F&amp;#039;: &amp;#039; &amp;#039;{print $2}&amp;#039;)
name=$(echo &amp;quot;$data&amp;quot; | grep &amp;#039;Processor Name:&amp;#039; | awk -F&amp;#039;: &amp;#039; &amp;#039;{print $2}&amp;#039;)
speed=$(echo &amp;quot;$data&amp;quot; | grep &amp;#039;Processor Speed:&amp;#039; | awk -F&amp;#039;: &amp;#039; &amp;#039;{print $2}&amp;#039;)
noproc=$(echo &amp;quot;$data&amp;quot; | grep &amp;#039;Number of Processors:&amp;#039; | awk -F&amp;#039;: &amp;#039; &amp;#039;{print $2}&amp;#039;)
nocores=$(echo &amp;quot;$sysdata&amp;quot; | grep &amp;#039;machdep.cpu.core_count:&amp;#039; | awk -F&amp;#039;: &amp;#039; &amp;#039;{print $2}&amp;#039;)
logicalcores=$(echo &amp;quot;$sysdata&amp;quot; | grep &amp;#039;machdep.cpu.thread_count:&amp;#039; | awk -F&amp;#039;: &amp;#039; &amp;#039;{print $2}&amp;#039;)

if [ &amp;quot;$arch&amp;quot; = &amp;#039;x86_64&amp;#039; ];
then
        archname=&amp;quot;x64-based PC&amp;quot;;
elif [ &amp;quot;$arch&amp;quot; = *i686* ];
then
        archname=&amp;quot;x86-based PC&amp;quot;;
else
        archname=&amp;quot;unknown&amp;quot;;
fi

echo &amp;quot;$archname|$name|$speed|$noproc|$nocores|$logicalcores&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
#system type, CPU description, speed, # of processors, # of cores, and # of logical processors.

KSTAT=$(/usr/bin/kstat -m cpu_info | egrep &amp;quot;brand|clock_MHz|chip_id|core_id|module: cpu_info&amp;quot;)

archname=$(arch)
nproc=$(echo &amp;quot;$KSTAT&amp;quot; | grep chip_id | awk &amp;#039;{ print $2 }&amp;#039; | sort -u | wc -l | tr -d &amp;#039; &amp;#039;)
ncore=$(echo &amp;quot;$KSTAT&amp;quot; | grep core_id | awk &amp;#039;{ print $2 }&amp;#039; | sort -u | wc -l | tr -d &amp;#039; &amp;#039;)
vproc=$(echo &amp;quot;$KSTAT&amp;quot; | grep &amp;#039;module: cpu_info&amp;#039; | awk &amp;#039;{ print $4 }&amp;#039; | sort -u | wc -l | tr -d &amp;#039; &amp;#039;)
name=$(echo &amp;quot;$KSTAT&amp;quot; | grep brand | awk &amp;#039;{ print $2 }&amp;#039; | head -1)
speed=$(echo &amp;quot;$KSTAT&amp;quot; | grep &amp;#039;clock_MHz&amp;#039; | awk &amp;#039;{ print $2 }&amp;#039; | sort -u | tr -d &amp;#039; &amp;#039;)

echo &amp;quot;$archname|$name|$speed MHz|$nproc|$ncore|$vproc&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
#system type, CPU description, speed, # of processors, # of cores, and # of logical processors.
# Logical processors is the smt thread count.

WRKDIR=$((RANDOM%10000+20000))
mkdir -p &amp;quot;$WRKDIR&amp;quot;
/usr/sbin/prtconf &amp;gt; $WRKDIR/d$$
arch=$(grep &amp;#039;Model Architecture: &amp;#039; $WRKDIR/d$$ | awk &amp;#039;{ print $3 }&amp;#039;)
name=$(grep &amp;#039;Processor Type:&amp;#039; $WRKDIR/d$$ | awk &amp;#039;{ print $3 }&amp;#039;)
speed=$(grep &amp;#039;Processor Clock Speed:&amp;#039; $WRKDIR/d$$ | awk &amp;#039;{ print $4&amp;quot; &amp;quot;$5 }&amp;#039;)
noprocs=$(grep &amp;#039;Number Of Processors&amp;#039; $WRKDIR/d$$ | awk &amp;#039;{ print $4 }&amp;#039;)
nocores=$(lsattr -E -l proc0 | grep threads | awk &amp;#039;{ print $2 }&amp;#039;)
logprocs=$(lparstat | grep System | awk &amp;#039;{ print $6 }&amp;#039;| cut -d= -f2)

/bin/rm -f $WRKDIR/d$$
rmdir $WRKDIR
echo &amp;quot;$arch|$name|$speed|$noprocs|$nocores|$logprocs&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>System Type</name>
                <index>0</index>
                <value_type>Numeric</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>CPU</name>
                <index>1</index>
                <value_type>Numeric</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>CPU Speed</name>
                <index>2</index>
                <value_type>Numeric</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Total Physical Processors</name>
                <index>3</index>
                <value_type>Numeric</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Total Cores</name>
                <index>4</index>
                <value_type>Numeric</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Total Logical Processors</name>
                <index>5</index>
                <value_type>Numeric</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>77</cache_row_id>
          </sensor>
          <sensor>
            <id>154</id>
            <name>Disk Drives</name>
            <hash>945314213</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Descriptions of any installed disk drives, including external or USB drives.
Example: ST3808110AS ATA Device</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from Win32_DiskDrive</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

# had to use bash because echo -n doesn&amp;#039;t work in /bin/sh on OS X

nl2lf () {
        local stripped=`echo -n &amp;quot;$1&amp;quot; | sed &amp;#039;:a;N;$!ba;s/\n/\\x0A/g&amp;#039;`
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$stripped&amp;quot;
}

system_profiler SPStorageDataType | while read line ; do
	if echo &amp;quot;$line&amp;quot; | grep -q &amp;#039;Media Name&amp;#039; ; then               
        	echo &amp;quot;$line&amp;quot; | awk -F: &amp;#039;{print $2}&amp;#039; | sed &amp;#039;s/^ *//&amp;#039; 
	fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
echo &amp;quot;q&amp;quot; | format 2&amp;gt; /dev/null | egrep &amp;#039;[0-9]\.&amp;#039; | awk &amp;#039;{ print $3 }&amp;#039; | sed s/\&amp;lt;//g</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>78</cache_row_id>
          </sensor>
          <sensor>
            <id>156</id>
            <name>Disk Total Space</name>
            <hash>4244410676</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The amount of total disk space per drive.
Example: C: 100 GB</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Disk Total Space
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; _
    &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colDisks = objWMIService.ExecQuery _
    (&amp;quot;Select * from Win32_LogicalDisk&amp;quot;)
For Each objDisk in colDisks
 &amp;#039;   Wscript.Echo &amp;quot;DeviceID: &amp;quot; &amp;amp; objDisk.DeviceID
    
    If Not IsNull(objDisk.Size) Then
	    dblSize = CDbl(objDisk.Size)
	    dblSize = dblSize / 1024 / 1024 / 1024
	    intSize = CInt(dblSize)
		WScript.Echo objDisk.DeviceID &amp;amp; &amp;quot; &amp;quot; &amp;amp; intSize &amp;amp; &amp;quot; GB&amp;quot;
    End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
df -TPh |grep -vE &amp;quot;Use%|tmpfs&amp;quot; |while read line
do
	set -- $line
	echo $7: $3
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
df -Hl | grep -vE &amp;#039;^Filesystem|tmpfs|cdrom&amp;#039; | awk &amp;#039;/^\// { print $9&amp;quot;: &amp;quot; $2 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
df -Pm |grep -vE &amp;quot;Filesystem|/proc|tmpfs&amp;quot; |while read line
do
    set -- $line
    BLKS=$(echo &amp;quot;$2&amp;quot; | cut -d. -f1)
    #echo &amp;quot;BLKS: $BLKS&amp;quot;
    MB=$(expr 1014 \* $BLKS / 1000)
    echo &amp;quot;$6: $BLKS MB&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>79</cache_row_id>
          </sensor>
          <sensor>
            <id>158</id>
            <name>Disk Free Space</name>
            <hash>1302957088</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The amount of free disk space per drive.
Example: C: 40 GB</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Disk Free Space
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; _
    &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colDisks = objWMIService.ExecQuery _
    (&amp;quot;Select * from Win32_LogicalDisk&amp;quot;)

For Each objDisk in colDisks
  If Not IsNull(objDisk.FreeSpace) Then
    dblFree = CDbl(objDisk.FreeSpace)
    dblFree = dblFree / 1024 / 1024 / 1024
    intFree = CInt(dblFree)
    Wscript.Echo objDisk.DeviceID &amp;amp; &amp;quot; &amp;quot; &amp;amp; intFree &amp;amp; &amp;quot; GB&amp;quot;
  END IF
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
df -TPh |grep -vE &amp;quot;Use%|tmpfs&amp;quot; |while read line
do
	set -- $line
	echo $7: $5
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
df -Hl | grep -vE &amp;#039;^Filesystem|tmpfs|cdrom&amp;#039; | awk &amp;#039;/^\// { print $9&amp;quot;: &amp;quot; $4 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
df -lh | egrep -v &amp;quot;Used|/devices|/system/contract|/proc|/etc/mnttab|/platform|/system/object|/dev/fd&amp;quot; | awk &amp;#039;{ print $6,$3 }&amp;#039;| while read line
do
  set -- $line
  echo &amp;quot;$1: $2&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
df -Pm |grep -vE &amp;quot;Filesystem|/proc|tmpfs&amp;quot; |while read line
do
  set -- $line
  BLKS=$(echo &amp;quot;$3&amp;quot; | cut -d. -f1)
  MB=$(expr 1014 \* $BLKS / 1000)
  echo &amp;quot;$6: $BLKS MB&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>80</cache_row_id>
          </sensor>
          <sensor>
            <id>160</id>
            <name>Disk Used Percentage</name>
            <hash>533135859</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The percentage of used disk space per partition.
Example: C: 24%</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Disk Used Percentage
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; _
    &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colDisks = objWMIService.ExecQuery _
    (&amp;quot;Select * from Win32_LogicalDisk&amp;quot;)
For Each objDisk in colDisks
 &amp;#039;   Wscript.Echo &amp;quot;DeviceID: &amp;quot; &amp;amp; objDisk.DeviceID
    
    If Not IsNull(objDisk.Size) And Not IsNull(objDisk.FreeSpace) Then
        dblPercent = ((CDbl(objDisk.Size) - CDbl(objDisk.FreeSpace)) / CDbl(objDisk.Size)) * 100
        intPercent = CInt(dblPercent)
        WScript.Echo objDisk.DeviceID &amp;amp; &amp;quot; &amp;quot; &amp;amp; intPercent &amp;amp; &amp;quot;%&amp;quot;
    End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
df -TPh |grep -vE &amp;quot;Use%|tmpfs&amp;quot; |while read line
do
    set -- $line
    echo $7: $6
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
df -Hl | grep -vE &amp;#039;^Filesystem|tmpfs|cdrom&amp;#039; | awk &amp;#039;/^\// { print $9&amp;quot;: &amp;quot; $5 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
df -k |grep -vE &amp;quot;Filesystem|/proc|tmpfs&amp;quot; |while read line
do
    set -- $line
    echo &amp;quot;$7: $4&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>81</cache_row_id>
          </sensor>
          <sensor>
            <id>162</id>
            <name>Disk Type of C:</name>
            <hash>2207214962</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>File system type of the C drive.
Example: NTFS</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select FileSystem from Win32_LogicalDisk where Caption = &amp;#039;c:&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>82</cache_row_id>
          </sensor>
          <sensor>
            <id>164</id>
            <name>Network Adapter Details</name>
            <hash>3009680784</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns information on network adapters.
Example:Intel(R) Centrino(R) Ultimate-N 6300 AGN|Intel Corporation|Ethernet 802.3|00:24:D7:21:9C:70|65 Mbps|Wi-Fi</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Network Adapter Details
&amp;#039;========================================

On Error Resume Next
strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_NetworkAdapter&amp;quot;,,48)

Dim arrNdisAdapters
Set arrNdisAdapters = GetNdisArray

For Each objItem in colItems
	If _
		InStr(objItem.AdapterType, &amp;quot;Ethernet&amp;quot;) &amp;gt; 0 Or _
		InStr(objItem.AdapterType, &amp;quot;Wireless&amp;quot;) &amp;gt; 0 _
	Then
			
		dblSpeed = CDbl(objItem.Speed) / 1000000
		If (arrNdisAdapters.count &amp;gt; 0) Then
			For Each objAdapter in arrNdisAdapters
				If objAdapter.InstanceName = objItem.Name Then
					dblSpeed = CDbl(objAdapter.NdisLinkSpeed) / 10000
				End If
			Next
		End If
		strSpeed = dblSpeed &amp;amp; &amp;quot; Mbps&amp;quot;

		WScript.Echo _
			objItem.Name &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
			objItem.Manufacturer &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
			objItem.AdapterType &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
			objItem.MACAddress &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
			strSpeed &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
			objItem.NetConnectionID
	End If
Next

Function GetNdisArray
	Const cWMINameSpace = &amp;quot;root/wmi&amp;quot;
	Const cWMIInstance = &amp;quot;MSNdis_LinkSpeed&amp;quot;
	Const strComputerName = &amp;quot;.&amp;quot;
	
	Dim strWinMgmts, objWMI, listAdapters, objAdapter
	
	strWinMgMts = &amp;quot;winmgmts:{impersonationLevel=impersonate}!//&amp;quot; &amp;amp; strComputerName &amp;amp; &amp;quot;/&amp;quot; &amp;amp; cWMINameSpace
	Set objWMI = GetObject(strWinMgMts)
	
	Set listAdapters = objWMI.InstancesOf(cWMIInstance)
	Set GetNdisArray = listAdapters
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
#Returns information on network adapters.
# Example: Intel(R) Centrino(R) Ultimate-N 6300 AGN|Intel Corporation|Ethernet 802.3|00:24:D7:21:9C:70|65 Mbps|Wi-Fi

for intf in `ifconfig -a | grep flags | awk -F: &amp;#039;{ print $1 }&amp;#039; | grep -v lo0`
do
   dtl=$(ifconfig $intf | grep inet | awk &amp;#039;{ print $2&amp;quot;:&amp;quot;$4 }&amp;#039;)
   mac=$(ifconfig $intf | grep ether | awk &amp;#039;{ print $2 }&amp;#039;)
   ip=$(echo &amp;quot;$dtl&amp;quot; | cut -d: -f1)
   mask=$(echo &amp;quot;$dtl&amp;quot; | cut -d: -f2)
   which dladm &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
   speed=&amp;quot;&amp;quot;
   if [ $? -eq 0 ]; then
     dladm show-dev &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
     if [ $? -eq 0 ]; then
       speed=$(dladm show-dev $intf | awk  &amp;#039;{ print $5$6 }&amp;#039;)
     else
       speed=$(dladm show-phys net0 |grep -v LINK | awk &amp;#039;{ print $4,&amp;quot;Mbps&amp;quot; }&amp;#039;)
     fi
   fi

   which prtpicl &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
   if [ $? -eq 0 ]; then
     prtpicl -c network -v | egrep &amp;#039;binding-name&amp;#039; | /usr/xpg4/bin/grep -q 108e
     if [ $? -eq 0 ]; then
       man=&amp;quot;Sun Microsystems&amp;quot;
     else
       man=&amp;quot;&amp;quot;
     fi
   fi
   echo &amp;quot;$intf|$man||$mac|$speed|&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Adapter Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Manufacturer</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Adapter Type</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>MAC Address</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Speed</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Network Connection ID</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>83</cache_row_id>
          </sensor>
          <sensor>
            <id>166</id>
            <name>BIOS Name</name>
            <hash>367063513</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Name of BIOS.
Example: Phoenix ROM BIOS PLUS Version 1.10 A10</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from win32_BIOS</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

if uname -o | grep -iq linux
then
	dmidecode -s bios-vendor
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
echo NA</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>84</cache_row_id>
          </sensor>
          <sensor>
            <id>168</id>
            <name>BIOS Release Date</name>
            <hash>3798171813</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Release date of the BIOS.
Example: 20080436.2.314..016400+000</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; =================
&amp;#039; BIOS Release Date
&amp;#039; =================

On Error Resume Next
strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)

Set win32bios = objWMIService.ExecQuery(&amp;quot;select * from win32_BIOS&amp;quot;)

For Each objItem in win32bios

	Dim releaseDate, biosYear, biosMonth, biosDate
	releaseDate = objItem.ReleaseDate
	biosYear = Mid(releaseDate, 1, 4)
	biosMonth = Mid(releaseDate, 5, 2) 
    	biosDate = Mid(releaseDate, 7, 2)
	WScript.Echo biosMonth &amp;amp; &amp;quot;/&amp;quot; &amp;amp; biosDate &amp;amp; &amp;quot;/&amp;quot; &amp;amp; biosYear

Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode -s bios-release-date</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
echo NA</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
echo &amp;quot;N/A&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>WMIDate</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>85</cache_row_id>
          </sensor>
          <sensor>
            <id>170</id>
            <name>BIOS Version</name>
            <hash>833799742</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Version of the BIOS.
Example: A11</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select SMBIOSBIOSVersion from win32_BIOS</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode -s bios-version</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Print microcode version in leu of BIOS version
lscfg -vp | grep Microcode | awk &amp;#039;{ print $NF }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>86</cache_row_id>
          </sensor>
          <sensor>
            <id>172</id>
            <name>Internet Explorer Version</name>
            <hash>1140552555</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Returns the version of Internet Explorer installed on a system.
Example:8.0.6001.18702</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Internet Explorer Version
&amp;#039;========================================

Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002
strComputer = &amp;quot;.&amp;quot;
Set oReg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; _
    strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)
strKeyPath = &amp;quot;SOFTWARE\Microsoft\Internet Explorer&amp;quot;
strValueName = &amp;quot;Version&amp;quot;
strValueName2 = &amp;quot;svcVersion&amp;quot;
On Error Resume Next
oReg.GetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName2,strValue
If strValue &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
	WScript.Echo strValue
	WScript.Quit
End If

oReg.GetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue
Wscript.Echo  strValue</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>87</cache_row_id>
          </sensor>
          <sensor>
            <id>174</id>
            <name>Operating System Build Number</name>
            <hash>3770282786</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the build number of the installed operating system.
Example:7601</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select BuildNumber from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>88</cache_row_id>
          </sensor>
          <sensor>
            <id>176</id>
            <name>Operating System Install Date</name>
            <hash>1982695066</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the date the OS was installed.
Example: 8/24/2012</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Operating System Install Date
&amp;#039;========================================

&amp;#039; This sensor uses date math which is locale specific
SetLocale(GetTaniumLocale)

Set dtmConvertedDate = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)

Set colOperatingSystems = objWMIService.ExecQuery _
    (&amp;quot;Select * from Win32_OperatingSystem&amp;quot;)

For Each objOperatingSystem in colOperatingSystems
    dtmConvertedDate.Value = objOperatingSystem.InstallDate
    dtmInstallDate = dtmConvertedDate.GetVarDate
    
    
    words = Split(dtmInstallDate, &amp;quot; &amp;quot;)
    Wscript.Echo words(0)
Next

Function GetTaniumLocale
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

	Dim objWshShell
	Dim intLocaleID
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Tanium\Tanium Client\LocaleID&amp;quot;)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client\LocaleID&amp;quot;)
	End If
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	&amp;#039; Cleanup
	Set objWshShell = Nothing

End Function &amp;#039;GetTaniumLocale</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
ls -l /etc/release | awk &amp;#039;{ print $6,$7,$8 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Attempt to get OS installation date.
# For AIX we use the oldest installed package from lslpp.
lslpp -ch | awk -F: &amp;#039;{ print $7 }&amp;#039; | grep -v Date | awk -F/ &amp;#039;{ print &amp;quot;20&amp;quot;$3$1$2 }&amp;#039;| sort -u | head -1 | awk &amp;#039;{ print substr($1,5,2)&amp;quot;/&amp;quot;substr($1,7,2)&amp;quot;/&amp;quot;substr($1,1,4) &amp;#039;}</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>43200</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>89</cache_row_id>
          </sensor>
          <sensor>
            <id>178</id>
            <name>Installed Java Runtimes</name>
            <hash>3993657420</hash>
            <string_count>0</string_count>
            <category>Java</category>
            <description>Returns a list of all installed Java runtimes on the client machine.
Example: Java(TM) 6 Update 20</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Installed Java Runtimes
&amp;#039;========================================
&amp;#039;@INCLUDE=utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039; This sensor will return information in the uninstall areas of the registry.
&amp;#039; There are two hidden columns which can be filtered on despite the fact that
&amp;#039; they&amp;#039;re hidden, and can also feed actions.
&amp;#039; if the uninstallstring is msi based, it is altered to show the
&amp;#039; silent uninstall options and marked as &amp;quot;Is Uninstallable&amp;quot;
&amp;#039; finally, if it&amp;#039;s a user installed application, it will note that
&amp;#039; The columns look like:
&amp;#039; Name|Version|Silent Uninstall String|Uninstallable

SensorRandomize()

Dim hasJava 
hasJava = False

&amp;#039; This sensor uses date math which is locale specific
SetLocale(GetTaniumLocale) &amp;#039;us/english

Set objRegistry = Getx64RegistryProvider()

keyPath = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&amp;quot;
key64Path = &amp;quot;SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall&amp;quot;

Const HKLM = &amp;amp;H80000002
Const HKEY_USERS = &amp;amp;H80000003

&amp;#039; list out 32-bit applications on a 64-bit system
If RegKeyExists(HKLM, key64Path) Then
	objRegistry.EnumKey HKLM, key64Path, arrSubKeys
	GetApplications HKLM,key64path,arrSubKeys
End If

&amp;#039; list out 32-bit applications on a 32-bit system, or 64-bit applications
&amp;#039; on a 64-bit system.
If RegKeyExists(HKLM, keyPath) Then
	objRegistry.EnumKey HKLM, keypath, arrSubKeys
	GetApplications HKLM,keypath,arrSubKeys
End If

&amp;#039; Also list out applications installed to HKEY_Users areas
&amp;#039; which will be appended to the arrSubKeys
objRegistry.EnumKey HKEY_USERS, &amp;quot;&amp;quot;, arrUserKeys
For Each strSIDkey In arrUserKeys
	If RegKeyExists(HKEY_USERS, strSIDKEY&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath) Then
		objRegistry.EnumKey HKEY_USERS, strSIDkey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath, arrSubKeys
		GetApplications HKEY_USERS,strSIDKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath,arrSubKeys
	End If
Next

If Not(hasJava) Then
	WScript.Echo &amp;quot;Java not installed&amp;quot;
End If

Function IsJava(strName)
	If ContainsString(strName, &amp;quot;(^Java\(TM\) \d Update)|(^Java \d Update)|(^Java 2 Runtime Environment)|(^Java Runtime Environment)&amp;quot;) Then
		IsJava = True
		Exit Function
	Else
		IsJava = False
	End If
End Function

Function GetApplications(HIVE, keypath,arrSubKeys)
	Set applications = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
	
	If Not IsNull(arrSubKeys) Then
		For Each key in arrSubKeys
			objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;DisplayName&amp;quot;, displayName
			objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;DisplayVersion&amp;quot;, version
			objRegistry.GetDWORDValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;SystemComponent&amp;quot;, systemComponent	
			objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;UninstallString&amp;quot;, uninstallString	
			objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;ParentKeyName&amp;quot;, parentKey	
			&amp;#039; on error goto 0
			&amp;#039; assume it&amp;#039;s not uninstallable
			bUninstallable = &amp;quot;Not Uninstallable&amp;quot;
					
			If displayName &amp;lt;&amp;gt; &amp;quot;&amp;quot; _
				And Not IsNull(uninstallString) _ 
				And IsNull(parentKey) _
				And InStr(displayName, &amp;quot;Hotfix&amp;quot;) = 0 _
				And InStr(displayName, &amp;quot;Update for&amp;quot;) = 0 _
		 		And InStr(displayName, &amp;quot;Security Update for&amp;quot;) = 0 _
		 	Then 
		 		If InStr(LCase(uninstallString), &amp;quot;msiexec&amp;quot;) Then
		 			&amp;#039; replace any /I with /X and add silent flags
		 			uninstallString = Replace(uninstallString,&amp;quot;/I&amp;quot;,&amp;quot;/X&amp;quot;) &amp;amp; &amp;quot; /qn /noreboot&amp;quot; 
		  			bUninstallable = &amp;quot;Is Uninstallable&amp;quot;
		  		End If
		 		If IsNull(systemComponent) Or systemComponent = 0 Then
					If IsNull(version) Then
						version = &amp;quot;&amp;quot;
					End If
					&amp;#039; This is a multi-column sensor.  Last two columns are hidden.
	
					displayString = displayName &amp;amp; &amp;quot;|&amp;quot; &amp;amp; version &amp;amp; &amp;quot;|&amp;quot; &amp;amp; uninstallString &amp;amp; &amp;quot;|&amp;quot; &amp;amp; bUninstallable
	
					&amp;#039; treat displayString as the unique value - cannot be listed twice.
					If Not applications.Exists(displayName) Then
						&amp;#039;Check for various Java Installation patterns
						If IsJava(displayName) Then
							applications.Add displayName, displayString
							hasJava = True
						End If	
					End If 	
				End If 	
			End If 
		Next
	End If
	
	SortDictionary applications, 1 &amp;#039; This calls a sorting function specific to dictionaries
	arrApplicationsKeys = applications.Keys
	For Each strKey In arrApplicationsKeys
		&amp;#039; final output of the sensor
		WScript.Echo applications.Item(strKey)
	Next
End Function &amp;#039;GetApplications

Function RegKeyExists(sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function SortDictionary(objDict, intSort)
 &amp;#039;   objDict - the dictionary to sort
 &amp;#039;   intSort - the field to sort (1=key, 2=item)
 
   &amp;#039; declare constants
   Const dictKey  = 1
   Const dictItem = 2
 
   &amp;#039; declare our variables
   Dim strDict()
   Dim objKey
   Dim strKey,strItem
   Dim X,Y,Z
 
   &amp;#039; get the dictionary count
   Z = objDict.Count
 
   &amp;#039; we need more than one item to warrant sorting
   If Z &amp;gt; 1 Then
     &amp;#039; create an array to store dictionary information
     ReDim strDict(Z,2)
     X = 0
     &amp;#039; populate the string array
     For Each objKey In objDict
         strDict(X,dictKey)  = CStr(objKey)
         strDict(X,dictItem) = CStr(objDict(objKey))
         X = X + 1
     Next
 
     &amp;#039; perform a a shell sort of the string array
     For X = 0 To (Z - 2)
       For Y = X To (Z - 1)
         If StrComp(strDict(X,intSort),strDict(Y,intSort),vbTextCompare) &amp;gt; 0 Then
             strKey  = strDict(X,dictKey)
             strItem = strDict(X,dictItem)
             strDict(X,dictKey)  = strDict(Y,dictKey)
             strDict(X,dictItem) = strDict(Y,dictItem)
             strDict(Y,dictKey)  = strKey
             strDict(Y,dictItem) = strItem
         End If
       Next
     Next
 
     &amp;#039; erase the contents of the dictionary object
     objDict.RemoveAll
 
     &amp;#039; repopulate the dictionary with the sorted information
     For X = 0 To (Z - 1)
       objDict.Add strDict(X,dictKey), strDict(X,dictItem)
     Next
 
   End If
 End Function &amp;#039;SortDictionary


Function ContainsString(strToCheck, strRegex)
&amp;#039;	If isDebug Then WScript.Echo &amp;quot;About to check: &amp;quot; &amp;amp; strToCheck

	If IsNull(strToCheck) Or IsEmpty(strToCheck) Then
		ContainsString = False
		Exit Function
	End If

	Dim re, matches
	Set re = New RegExp
	re.Pattern = strRegex
	Set matches = re.Execute(strToCheck)
	If matches.Count &amp;gt; 0 Then
		If isDebug Then WScript.Echo &amp;quot;   match: &amp;quot; &amp;amp; matches(0) &amp;amp; &amp;quot;, strRegex: &amp;quot; &amp;amp; strRegex
		ContainsString = True
		Exit Function
	End If
	ContainsString = False
End Function

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039;&amp;#039; -- Begin Random Sleep Functions -- &amp;#039;&amp;#039;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &amp;#039; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&amp;#039; sleeps for a random period of time, intSleepTime is in seconds
&amp;#039; if the sensor randomize flag is on
&amp;#039; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&amp;#039; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;amp;&amp;quot;\Sensor Data\Random Sleep&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeFlag&amp;quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeScalingPercentage&amp;quot;)
	On Error Goto 0
	If intRandomizeFlag &amp;gt; 0 Then
		If intRandomizeScalingPercentage &amp;gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &amp;quot;Randomize scaling percentage of &amp;quot; _ 
				&amp;amp; intRandomizeScalingPercentage &amp;amp; &amp;quot; applied, new sleep time is &amp;quot; &amp;amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &amp;#039; convert to milliseconds
		&amp;#039; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&amp;#039; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &amp;quot;Sleeping for &amp;quot; &amp;amp; intSensorRandomizeWaitTime &amp;amp; &amp;quot; milliseconds&amp;quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &amp;quot;Done sleeping, continuing ...&amp;quot;
	Else 
		SensorRandomizeEcho &amp;quot;SensorRandomize Not Enabled - No Op&amp;quot;
	End If
End Function &amp;#039;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&amp;#039; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &amp;lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID / Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID / Timer
	End If
End Function &amp;#039;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&amp;#039;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&amp;#039;&amp;#039; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &amp;quot;ComputerID&amp;quot;
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strKeyPath&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strValueName)
    If Err.Number &amp;lt;&amp;gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &amp;#039;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &amp;lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &amp;#039;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &amp;#039;SensorRandomizeEcho
&amp;#039; -- End Random Sleep Functions --&amp;#039;
&amp;#039;- End file: utils/SensorRandomization/SensorRandomizationFunctions.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>JRE</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Version</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Uninstaller</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>1</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Uninstallable</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>90</cache_row_id>
          </sensor>
          <sensor>
            <id>180</id>
            <name>Java Auto Update</name>
            <hash>3134254821</hash>
            <string_count>0</string_count>
            <category>Java</category>
            <description>Returns the state of the Java Auto Update service, per architecture.
Example: Enabled 32-bit</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Java Auto Update
&amp;#039;========================================

Option Explicit

Const HKLM = &amp;amp;H80000002

Dim b32BitJavaFound, b64BitJavaFound
b32BitJavaFound = False
b64BitJavaFound = False

b32BitJavaFound = CheckForJavaAndUpdatePolicy(32)
If Is64 Then
	b64BitJavaFound = CheckForJavaAndUpdatePolicy(64)
End If

If Not b32BitJavaFound And Not b64BitJavaFound Then
	&amp;#039; Only print this if neither bit of java was found
	WScript.Echo &amp;quot;Java Not Found&amp;quot;
End If


Function CheckForJavaAndUpdatePolicy(intBit)
	Dim strRuntimeInstalledKey, strUpdatePolicyKey, intRegToUse, strArch, strValue
	Dim objCtx, objReg, bJavaFound
	
	bJavaFound = False

	strRuntimeInstalledKey = &amp;quot;SOFTWARE\Javasoft\Java Runtime Environment&amp;quot;
	strUpdatePolicyKey = &amp;quot;SOFTWARE\JavaSoft\Java Update\Policy&amp;quot;
	
	intRegToUse = 32
	If Is64 Then 
		intRegToUse = 64 &amp;#039; always use highest available registry
	End if
	
	Set objCtx = GetObjCtx(intRegToUse)
	Set objReg = GetObjReg(objCtx)

	strArch = &amp;quot;32-bit&amp;quot;
	If intBit = 64 Then
		strArch = &amp;quot;64-bit&amp;quot;
	End If
	
	If Is64 And intBit = 32 Then
		&amp;#039; special case of looking for 32 bit jvms on 64 bit machines
		strRuntimeInstalledKey = &amp;quot;SOFTWARE\WOW6432Node\Javasoft\Java Runtime Environment&amp;quot;
		strUpdatePolicyKey = &amp;quot;SOFTWARE\WOW6432Node\JavaSoft\Java Update\Policy&amp;quot;
	End If	
	
	If RegKeyExists(objReg, objCtx, HKLM, strRuntimeInstalledKey) Then
		bJavaFound = True
		If RegKeyExists(objReg, objCtx, HKLM, strUpdatePolicyKey) Then
			strValue = GetDWordValue(objReg, objCtx, HKLM, strUpdatePolicyKey, &amp;quot;EnableJavaUpdate&amp;quot;)
		
			If Not IsNull(strValue) Then
				If strValue = 1 Then
					WScript.Echo &amp;quot;Enabled|&amp;quot; &amp;amp; strArch
				Else
					WScript.Echo &amp;quot;Disabled|&amp;quot; &amp;amp; strArch
				End If
			End If
		Else 
			&amp;#039; case where jvm installed, but no Java Update reg branch available
			WScript.Echo &amp;quot;Disabled|&amp;quot; &amp;amp; strArch
		End If
	End If
	
	CheckForJavaAndUpdatePolicy = bJavaFound
End Function

Function GetDWordValue(objReg, objCtx, constHive, strKey, strValue)
	Dim objInParams, objOutParams, objValue
    Set objInParams = objReg.Methods_(&amp;quot;GetDWordValue&amp;quot;).InParameters
    objInParams.hDefKey = constHive
    objInParams.sSubKeyName = strKey
    objInParams.sValueName = strValue
    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetDWordValue&amp;quot;, objInParams, , objCtx)
	objValue = objOutParams.uValue
	If IsNull(objOutParams.uValue) Then
		GetDWordValue = Null
	Else
		GetDWordValue = CStr(objOutParams.uValue)
	End If	
End Function

Function RegKeyExists(objReg, objCtx, constHive, strKey)
	Dim objNames, objTypes, objValues, Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
	
	If Outparams.ReturnValue = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If		
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function

Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Status</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Architecture</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>91</cache_row_id>
          </sensor>
          <sensor>
            <id>182</id>
            <name>User Sessions</name>
            <hash>75018363</hash>
            <string_count>0</string_count>
            <category>User</category>
            <description>Provides the terminal services session information, similar to what is available from the "query session" command.
Example:console|Administrator|1|Active||</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; User Sessions
&amp;#039;========================================

&amp;#039; Returns information about the current sessions on the local machine
&amp;#039; 

Option Explicit

On error resume next
Dim strValue, myRegExp, objShell, objExec, strLine, objSplit

Set myRegExp = New RegExp
myRegExp.IgnoreCase = True
myRegExp.Global = True
myRegExp.Pattern = &amp;quot;\s{2,}&amp;quot;

Set objShell = WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)
If Is64() Then 
	Set objExec = objshell.exec(&amp;quot;cmd /c c:\windows\sysnative\qwinsta&amp;quot;)
Else 
	Set objExec = objshell.exec(&amp;quot;cmd /c qwinsta&amp;quot;)
End If 

objExec.StdOut.ReadLine()
Do While Not objExec.Stdout.AtEndOfStream
	strLine = myRegExp.Replace(objExec.StdOut.ReadLine(),&amp;quot;|&amp;quot;)

	If InStr(strLine,&amp;quot;rdp&amp;quot;) or InStr(strLine,&amp;quot;console&amp;quot;) then
		If InStr(strLine,&amp;quot;disc&amp;quot;) then
			strLine = &amp;quot;|&amp;quot; &amp;amp; strLine
		End If 
		If InStr(strLine, &amp;quot;console&amp;quot;)&amp;gt;0 And InStr(strLine, &amp;quot;Conn&amp;quot;)&amp;gt;0 Then
		    &amp;#039; If console line, but no user logged in, add column
			strLine = Replace(strLine, &amp;quot;console|&amp;quot;, &amp;quot;console||&amp;quot;)
		End If
		strLine = replace(strLine,&amp;quot;&amp;gt;&amp;quot;,&amp;quot;&amp;quot;)
		strLine = replace(strLine,&amp;quot; &amp;quot;,&amp;quot;&amp;quot;)
		strLine = replace(strLine,&amp;quot;rdp-tcp|&amp;quot;,&amp;quot;rdp-tcp||&amp;quot;)
		
		objSplit = Split(strLine, &amp;quot;|&amp;quot;)
		If ojbSplit.Count = 4 Then
			strLine = strLine + &amp;quot;|&amp;quot;
		End If 	
			
		WScript.echo strLine
	End if	
Loop 


Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If
	Next
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
who | while read line
do
        name=$(echo &amp;quot;$line&amp;quot; | awk &amp;#039;{print $2}&amp;#039;)
        device=$(echo &amp;quot;$line&amp;quot; | awk &amp;#039;{print $1}&amp;#039;)
        uid=$(dscl . -list /Users uid | egrep &amp;quot;^$name\s+&amp;quot; | awk &amp;#039;{print $2}&amp;#039;)
        echo &amp;quot;$device|$name|$uid|Conn|N/A|$device&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Session Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>User Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>ID</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>State</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Type</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Device</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>92</cache_row_id>
          </sensor>
          <sensor>
            <id>184</id>
            <name>Service Details</name>
            <hash>2384520458</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Service Details
&amp;#039;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&amp;#039;Check to see if Windows Update Service needs to be enabled and/or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
	Set colServices = objWMIService.ExecQuery (&amp;quot;select DisplayName, State, StartMode from win32_Service&amp;quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp;amp; &amp;quot;|&amp;quot; &amp;amp; strServiceDisplayName &amp;amp; &amp;quot;|&amp;quot; &amp;amp; strServiceStatus &amp;amp; &amp;quot;|&amp;quot; &amp;amp; strServiceMode
	Next

End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Service Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Service Display Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Service Status</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Service Startup Mode</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>93</cache_row_id>
          </sensor>
          <sensor>
            <id>186</id>
            <name>Has Application Management Tools</name>
            <hash>1688928675</hash>
            <string_count>8</string_count>
            <category>Tanium</category>
            <description>Returns whether a machine has the application management tools which may be necessary for parameterized actions or sensor-fed actions.
Example: Yes</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Has Application Management Tools
&amp;#039;========================================

Option Explicit


&amp;#039;--------------------
&amp;#039; Set These Variables
Dim strDesiredVersion
&amp;#039; a string value which is a verison like
&amp;#039; 4.1.314.7060
&amp;#039; which is used to determine whether the files are the correct version

strDesiredVersion = &amp;quot;6.5.2.0164&amp;quot;
&amp;#039;----------------------
Dim objFSO
Dim strToolsDir
Dim bHasAllLatestFiles, arrApplicationManagementToolsFiles, strFile
Dim objTextFile, strVersionLine, strFileVersion

Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

strToolsDir = GetTaniumDir(&amp;quot;Tools&amp;quot;)

&amp;#039; This array holds the files to check for
arrApplicationManagementToolsFiles = Array(&amp;quot;taskkill.vbs&amp;quot;,&amp;quot;startservice.vbs&amp;quot;,&amp;quot;stopservice.vbs&amp;quot;)

bHasAllLatestFiles = True &amp;#039; assume OK until checks fail

For Each strFile In arrApplicationManagementToolsFiles
	If Not objFSO.FileExists(strToolsDir&amp;amp;strFile) Then
		WScript.Echo &amp;quot;Missing &amp;quot; &amp;amp; strFile
		bHasAllLatestFiles = False
	End If
	If objFSO.FileExists(strToolsDir&amp;amp;strFile) Then
		Set objTextFile = objFSO.OpenTextFile(strToolsDir&amp;amp;strFile)
		strVersionLine = LCase(objTextFile.ReadLine()) &amp;#039; version is at top of line
		If Not InStr(strVersionLine,&amp;quot;tanium file version:&amp;quot;) &amp;gt; 0 Then &amp;#039; must have a version number in top line
			WScript.Echo strFile&amp;amp;&amp;quot; is not versioned on line 1&amp;quot;
			bHasAllLatestFiles = False
		Else &amp;#039; we have a version number, not split to check
			strFileVersion = Trim(Split(strVersionLine,&amp;quot;tanium file version:&amp;quot;)(1))
			If strFileVersion &amp;lt;&amp;gt; strDesiredVersion Then
				WScript.Echo strFile&amp;amp;&amp;quot; version: &amp;quot;&amp;amp;strFileVersion&amp;amp;&amp;quot;, needs: &amp;quot;&amp;amp;strDesiredVersion
				bHasAllLatestFiles = False
			End If
		End If
		objTextFile.Close
	End If
Next

If bHasAllLatestFiles Then
	WScript.Echo &amp;quot;Yes&amp;quot;
Else
	WScript.Echo &amp;quot;No&amp;quot;
End If

&amp;#039;Cleanup
Set objTextFile = Nothing
Set objFSO = Nothing

Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
    
    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
            strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
        End If  
    
        Dim fso
        Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
        If fso.FolderExists(strPath) Then
            If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
                &amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
                GeneratePath strPath &amp;amp; strSubDir, fso
            End If
            GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
        Else
            &amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
            WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
            GetTaniumDir = False
        End If
    Else
        WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
        GetTaniumDir = False
    End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
    GeneratePath = False

    If Not fso.FolderExists(pFolderPath) Then
        If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
            GeneratePath = True
            Call fso.CreateFolder(pFolderPath)
        End If
    Else
        GeneratePath = True
    End If
End Function &amp;#039;GeneratePath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>94</cache_row_id>
          </sensor>
          <sensor>
            <id>188</id>
            <name>Has Hardware Tools</name>
            <hash>2581054686</hash>
            <string_count>4</string_count>
            <category>Tanium</category>
            <description>Returns whether a machine has the hardware tools, which are used to identify specific types of hardware.
Example: Yes</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;Tanium File Version:6.5.2.0164
&amp;#039; sensor - Has Hardware Tools

Option Explicit
&amp;#039;--------------------
&amp;#039; Set These Variables
Dim strDesiredVersion
&amp;#039; a string value which is a version like
&amp;#039; 4.1.314.7060
&amp;#039; which is used to determine whether the files are the correct version

strDesiredVersion = &amp;quot;6.5.2.0164&amp;quot;
&amp;#039;----------------------
Dim objFSO
Dim strToolsDir
Dim bHasAllLatestFiles, arrHardwareToolsTextFiles, arrHardwareToolsBinFiles, strFile
Dim objTextFile, strVersionLine, strFileVersion

Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

strToolsDir = GetTaniumDir(&amp;quot;Tools\Hardware&amp;quot;)

&amp;#039; This array holds the text files to check for
arrHardwareToolsTextFiles = Array()
    
&amp;#039; This array holds the binary files to check for
arrHardwareToolsBinFiles = Array(&amp;quot;usb.ids&amp;quot;)

bHasAllLatestFiles = True &amp;#039; assume OK until checks fail

For Each strFile In arrHardwareToolsTextFiles
    If Not objFSO.FileExists(strToolsDir&amp;amp;strFile) Then
        WScript.Echo &amp;quot;Missing &amp;quot; &amp;amp; strFile
        bHasAllLatestFiles = False
    End If
    If objFSO.FileExists(strToolsDir&amp;amp;strFile) Then
        Set objTextFile = objFSO.OpenTextFile(strToolsDir&amp;amp;strFile)
        strVersionLine = LCase(objTextFile.ReadLine()) &amp;#039; version is at top of line
        If Not InStr(strVersionLine,&amp;quot;tanium file version:&amp;quot;) &amp;gt; 0 Then &amp;#039; must have a version number in top line
            WScript.Echo strFile&amp;amp;&amp;quot; is not versioned on line 1&amp;quot;
            bHasAllLatestFiles = False
        Else &amp;#039; we have a version number, not split to check
            strFileVersion = Trim(Split(strVersionLine,&amp;quot;tanium file version:&amp;quot;)(1))
            If strFileVersion &amp;lt;&amp;gt; strDesiredVersion Then
                WScript.Echo strFile&amp;amp;&amp;quot; version: &amp;quot;&amp;amp;strFileVersion&amp;amp;&amp;quot;, needs: &amp;quot;&amp;amp;strDesiredVersion
                bHasAllLatestFiles = False
            End If
        End If
        objTextFile.Close
    End If
Next

For Each strFile In arrHardwareToolsBinFiles
    If Not objFSO.FileExists(strToolsDir&amp;amp;strFile) Then
        WScript.Echo &amp;quot;Missing &amp;quot; &amp;amp; strFile
        bHasAllLatestFiles = False
    End If
Next


If bHasAllLatestFiles Then
    WScript.Echo &amp;quot;Yes&amp;quot;
Else
    WScript.Echo &amp;quot;No&amp;quot;
End If

&amp;#039;Cleanup
Set objTextFile = Nothing
Set objFSO = Nothing

Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
    
    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
            strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
        End If  
    
        Dim fso
        Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
        If fso.FolderExists(strPath) Then
            If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
                &amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
                GeneratePath strPath &amp;amp; strSubDir, fso
            End If
            GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
        Else
            &amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
            WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
            GetTaniumDir = False
        End If
    Else
        WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
        GetTaniumDir = False
    End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
    GeneratePath = False

    If Not fso.FolderExists(pFolderPath) Then
        If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
            GeneratePath = True
            Call fso.CreateFolder(pFolderPath)
        End If
    Else
        GeneratePath = True
    End If
End Function &amp;#039;GeneratePath

Function RegKeyExists(objRegistry, sHive, sRegKey)
    Dim aValueNames, aValueTypes
    If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
        RegKeyExists = True
    Else
        RegKeyExists = False
    End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>95</cache_row_id>
          </sensor>
          <sensor>
            <id>190</id>
            <name>Has Tanium Standard Utilities</name>
            <hash>1782389954</hash>
            <string_count>5</string_count>
            <category>Tanium</category>
            <description>Returns whether a machine has the Tanium Standard Utilities
Example: Yes</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Has Tanium Standard Utilities
&amp;#039;========================================

&amp;#039; this action will look to see if the client has
&amp;#039; all necessary standard utilities files

Option Explicit
&amp;#039;--------------------
&amp;#039; Set These Variables
Dim strDesiredVersion,strDesiredFCIVVersion,strDesiredGrepBinaryVersion
Dim strDesiredGrepDepVersion,strGrepDepFileVersion,strGrepBinaryFileVersion

&amp;#039; a string value which is a version like
&amp;#039; 4.2.314.7111
&amp;#039; which is used to determine whether the bundle has the correct version
&amp;#039; updating the content will cause the bundle number to change and all files will
&amp;#039; be sent to the endpoint again. This is to handle the case where
&amp;#039; binary files are not versioned, such as with Yara

&amp;#039; The top line of the version file
&amp;#039;Tanium File Version: &amp;lt;version string below&amp;gt;
strDesiredVersion = &amp;quot;6.5.2.0164&amp;quot;

&amp;#039; -------------------
&amp;#039; Binaries we can version
strDesiredGrepBinaryVersion = &amp;quot;2.5.4.3331&amp;quot;
strDesiredGrepDepVersion = &amp;quot;1.12.2872.39125&amp;quot;

Dim objFSO
Dim strDirToCheck,objTextFile
Dim bHasAllLatestFiles,arrTextFilesToCheck,strFile,strVersionLine,strFileVersion
Dim strFCIVFile,strFCIVFileVersion,strGrepBinary,strGrepDep,strHandleTool,strListDLLs2
Dim strListDLLs,strStreamsTool,strAutorunsTool
Dim strYara,strYarac

Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

strDirToCheck = GetTaniumDir(&amp;quot;Tools\StdUtils&amp;quot;)

arrTextFilesToCheck = Array(&amp;quot;copy-to-tanium-dir-predist.vbs&amp;quot;,&amp;quot;runas-allusers-wrapper.vbs&amp;quot;,&amp;quot;ver\bundle.cfg&amp;quot;)

&amp;#039; Grep is required
strGrepBinary=strDirToCheck&amp;amp;&amp;quot;grep\bin\grep.exe&amp;quot;
strGrepDep=strDirToCheck&amp;amp;&amp;quot;grep\bin\libiconv2.dll&amp;quot;

&amp;#039;Yara binaries are required
strYara=strDirToCheck&amp;amp;&amp;quot;yara\yara&amp;quot;&amp;amp;GetBitness&amp;amp;&amp;quot;.exe&amp;quot;
strYarac=strDirToCheck&amp;amp;&amp;quot;yara\yarac&amp;quot;&amp;amp;GetBitness&amp;amp;&amp;quot;.exe&amp;quot;

bHasAllLatestFiles = True
For Each strFile In arrTextFilesToCheck
	If Not objFSO.FileExists(strDirToCheck&amp;amp;strFile) Then
		WScript.Echo &amp;quot;Missing &amp;quot; &amp;amp; strFile
		bHasAllLatestFiles = False
	End If
	If objFSO.FileExists(strDirToCheck&amp;amp;strFile) Then
		Set objTextFile = objFSO.OpenTextFile(strDirToCheck&amp;amp;strFile)
		strVersionLine = LCase(objTextFile.ReadLine()) &amp;#039; version is at top of line
		If Not InStr(strVersionLine,&amp;quot;tanium file version:&amp;quot;) &amp;gt; 0 Then &amp;#039; must have a version number in top line
			WScript.Echo strFile&amp;amp;&amp;quot; is not versioned on line 1&amp;quot;
			bHasAllLatestFiles = False
		Else &amp;#039; we have a version number, not split to check
			strFileVersion = Split(strVersionLine,&amp;quot;tanium file version:&amp;quot;)(1)
			If Trim(strFileVersion) &amp;lt;&amp;gt; Trim(strDesiredVersion) Then
				WScript.Echo strFile&amp;amp;&amp;quot; version: &amp;quot;&amp;amp;strFileVersion&amp;amp;&amp;quot;, needs: &amp;quot;&amp;amp;strDesiredVersion
				bHasAllLatestFiles = False
			End If
		End If
		objTextFile.Close
	End If
Next

&amp;#039; check a Grep dependency
If Not objFSO.FileExists(strGrepDep) Then
	WScript.Echo &amp;quot;Missing &amp;quot; &amp;amp; strGrepDep
	bHasAllLatestFiles = False
End If
If objFSO.FileExists(strGrepDep) Then

	strGrepDepFileVersion = objFSO.GetFileVersion(strGrepDep)
	If Not strGrepDepFileVersion = strDesiredGrepDepVersion Then
		bHasAllLatestFiles = False
		WScript.Echo strGrepDep &amp;amp;&amp;quot; version: &amp;quot;&amp;amp;strGrepDepFileVersion&amp;amp;&amp;quot;, needs: &amp;quot;&amp;amp;strDesiredGrepDepVersion
	End If
End If


&amp;#039; check Grep binary
If Not objFSO.FileExists(strGrepBinary) Then
	WScript.Echo &amp;quot;Missing &amp;quot; &amp;amp; strGrepBinary
	bHasAllLatestFiles = False
End If
If objFSO.FileExists(strGrepBinary) Then
	strGrepBinaryFileVersion = GetFileVersion(strGrepBinary)
	If Not strGrepBinaryFileVersion = strDesiredGrepBinaryVersion Then
		bHasAllLatestFiles = False
		WScript.Echo strGrepBinary &amp;amp;&amp;quot; version: &amp;quot;&amp;amp;strGrepBinaryFileVersion&amp;amp;&amp;quot;, needs: &amp;quot;&amp;amp;strDesiredGrepBinaryVersion
	End If
End If

If Not objFSO.FileExists(strYara) Then
	bHasAllLatestFiles = False
	WScript.Echo &amp;quot;Missing &amp;quot; &amp;amp; strYara
End If

If Not objFSO.FileExists(strYarac) Then
	bHasAllLatestFiles = False
	WScript.Echo &amp;quot;Missing &amp;quot; &amp;amp; strYarac
End If

If bHasAllLatestFiles Then
	WScript.Echo &amp;quot;Yes&amp;quot;
Else
	WScript.Echo &amp;quot;No&amp;quot;
End If

Function GetFileVersion(strPath)
	Dim objFSO
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	If objFSO.FileExists(strPath) Then
		GetFileVersion = objFSO.GetFileVersion(strPath)
	Else
		GetFileVersion = -1
	End If
End Function &amp;#039;GetFileVersion

Function GetTaniumDir(strSubDir)
	Dim strComputer, key32path, key64path, keyPath, reg
	Dim strPath
	strComputer = &amp;quot;.&amp;quot;
	Const HKLM = &amp;amp;h80000002

	key32Path = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	key64Path = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;

	Set reg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

	If RegKeyExists(reg, HKLM, key64Path) Then
		keyPath = key64Path
	ElseIf RegKeyExists(reg, HKLM, key32Path) Then
		keyPath = key32Path
	End If

	reg.GetStringValue HKLM,keyPath,&amp;quot;Path&amp;quot;, strPath

	If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
		strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
	End If

	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	If fso.FolderExists(strPath) Then
		If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
			fso.CreateFolder(strPath &amp;amp; strSubDir)
		End If
		GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
	End If
End Function

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function


Function GetBitness
	If Not Is64 Then
		GetBitness = &amp;quot;32&amp;quot;
	Else
		GetBitness = &amp;quot;64&amp;quot;
	End If
End Function &amp;#039;GetBitness

Function Is64
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If
	Next
End Function &amp;#039; Is64</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>96</cache_row_id>
          </sensor>
          <sensor>
            <id>192</id>
            <name>Computer Serial Number</name>
            <hash>102224229</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The serial number, if available, provided by the computer manufacturer.
Example: 123ABC1</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select SerialNumber from win32_BIOS</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode -s system-serial-number</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
system_profiler SPHardwareDataType | awk &amp;#039;/Serial Number/ {print $NF}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
out=`eeprom| grep ChassisSerial | awk &amp;#039;{ print $3 }&amp;#039;`
if [ -n &amp;quot;$out&amp;quot; ]
then
	echo &amp;quot;Chassis Serial Number not Available&amp;quot;
else
	echo &amp;quot;$out&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
DFN=/opt/Tanium/TaniumClient/Tools/AIX/prtconf.out
if [ -f &amp;quot;$DFN&amp;quot; ]; then
  egrep &amp;#039;^Machine Serial&amp;#039; /opt/Tanium/TaniumClient/Tools/AIX/prtconf.out | awk -F: &amp;#039;{ print $2 }&amp;#039; | sed &amp;#039;s/\ //&amp;#039;
else
  uname -u | cut -d, -f2
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>97</cache_row_id>
          </sensor>
          <sensor>
            <id>194</id>
            <name>SQL Clustered</name>
            <hash>1039470236</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description>Returns whether or not the SQL server instance is clustered
Example: True</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Clustered
&amp;#039;========================================

Option Explicit

&amp;#039; Searches for a service called &amp;quot;Cluster Service&amp;quot; and returnes yes if found
&amp;#039; and SQL Server is also found

Dim objWMIService, colServices, objService, strCaption, bSQLServerInstalled, bSQLClusterServiceRunning

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
Set colServices = objWMIService.ExecQuery (&amp;quot;select * from win32_Service&amp;quot;)  
For Each objService In colServices
    strCaption = objService.Caption

    If (InStr(strCaption,&amp;quot;SQL Server&amp;quot;) &amp;lt;&amp;gt; 0) Then    
        &amp;#039; OK -- found SQL Server on this machine
		bSQLServerInstalled = True
    End If  
    
    If (InStr(strCaption,&amp;quot;Cluster Service&amp;quot;) &amp;lt;&amp;gt; 0 And objService.State = &amp;quot;Running&amp;quot;) Then
    	bSQLClusterServiceRunning = True
    End If 
Next  

If bSQLServerInstalled Then
	If bSQLClusterServiceRunning Then
		WScript.Echo &amp;quot;True&amp;quot;
	Else 
		WScript.Echo &amp;quot;False&amp;quot;
	End If
Else 
	WScript.Echo &amp;quot;SQL Server Not Installed&amp;quot;
End If</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>98</cache_row_id>
          </sensor>
          <sensor>
            <id>196</id>
            <name>Virtual Platform</name>
            <hash>1046354727</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the virtual platform or technology used for the virtual machine, if it is a virtual machine.
Example: VMware</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Virtual Platform
&amp;#039;========================================

&amp;#039; This sensor will determine if a machine is a virtual machine or not
&amp;#039; Comparing values for certain properties against known values.
&amp;#039; It will need to be updated for some current tech and 
&amp;#039; as new technologies come to market.


Option Explicit



WScript.Echo GetVirtualPlatform


Function GetVirtualPlatform
	Dim sVMPlatform, sMake, sModel, sBIOSVersion,bIsVM

    &amp;#039; Check the WMI information against known values

    bIsVM = false
    sVMPlatform = &amp;quot;&amp;quot;

    sMake = GetWmiPropertyValue(&amp;quot;root\cimv2&amp;quot;, &amp;quot;Win32_ComputerSystem&amp;quot;, &amp;quot;Manufacturer&amp;quot;)
    sModel = GetWmiPropertyValue(&amp;quot;root\cimv2&amp;quot;, &amp;quot;Win32_ComputerSystem&amp;quot;, &amp;quot;Model&amp;quot;)
    sBIOSVersion = GetWmiPropertyValue(&amp;quot;root\cimv2&amp;quot;, &amp;quot;Win32_BIOS&amp;quot;, &amp;quot;Version&amp;quot;)

    &amp;#039;WScript.Echo &amp;quot;Manufacturer=&amp;quot; &amp;amp; sMake
    &amp;#039;WScript.Echo &amp;quot;Model=&amp;quot; &amp;amp; sModel
    &amp;#039;WScript.Echo &amp;quot;BIOSVersion=&amp;quot; &amp;amp; sBIOSVersion

    If sModel = &amp;quot;Virtual Machine&amp;quot; Then

        &amp;#039; Microsoft virtualization technology detected, assign defaults

        sVMPlatform = &amp;quot;Hyper-V&amp;quot;
        bIsVM = true

        &amp;#039; Try to determine more specific values

        Select Case sBIOSVersion
        Case &amp;quot;VRTUAL - 1000831&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;Hyper-V 2008 Beta or RC0&amp;quot;
        Case &amp;quot;VRTUAL - 5000805&amp;quot;, &amp;quot;BIOS Date: 05/05/08 20:35:56  Ver: 08.00.02&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;Hyper-V 2008 RTM&amp;quot;
        Case &amp;quot;VRTUAL - 3000919&amp;quot; 
            bIsVM = true
            sVMPlatform = &amp;quot;Hyper-V 2008 R2&amp;quot;
        Case &amp;quot;A M I  - 2000622&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;VS2005R2SP1 or VPC2007&amp;quot;
        Case &amp;quot;A M I  - 9000520&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;VS2005R2&amp;quot;
        Case &amp;quot;A M I  - 9000816&amp;quot;, &amp;quot;A M I  - 6000901&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;Windows Virtual PC&amp;quot;
        Case &amp;quot;A M I  - 8000314&amp;quot;
            bIsVM = true
            sVMPlatform = &amp;quot;VS2005 or VPC2004&amp;quot;
        Case &amp;quot;Xen - 0s&amp;quot;
        	bIsVM = True
        	sVMPlatform = &amp;quot;Xen&amp;quot;
        Case &amp;quot;Xen - 0&amp;quot;
        	bIsVM = True
        	sVMPlatform = &amp;quot;Xen&amp;quot;
        End Select

    ElseIf sMake = &amp;quot;Xen&amp;quot; Then
    
        &amp;#039; Xen detected

        sVMPlatform = &amp;quot;Xen&amp;quot;
        bIsVM = true
    
    ElseIf sModel = &amp;quot;VMware Virtual Platform&amp;quot; then

        &amp;#039; VMware detected

        sVMPlatform = &amp;quot;VMware&amp;quot;
        bIsVM = true

    ElseIf sModel  = &amp;quot;VirtualBox&amp;quot; then

        &amp;#039; VirtualBox detected

        bIsVM = true
        sVMPlatform = &amp;quot;VirtualBox&amp;quot;
    
    ElseIf sModel  = &amp;quot;HVM domU&amp;quot; then

        &amp;#039; Xen detected

        bIsVM = true
        sVMPlatform = &amp;quot;Xen&amp;quot;
        
    ElseIf sModel = &amp;quot;OpenStack Compute&amp;quot; Then
    
    	&amp;#039; OpenStack detected
    	
    	bIsVM = true
    	sVMPlatform = &amp;quot;OpenStack&amp;quot;
     
    Else
        sVMPlatform = &amp;quot;Not Virtual&amp;quot;
    End if

    GetVirtualPlatform = sVMPlatform

End Function

Function GetWmiPropertyValue(strNameSpace, strClassName, strPropertyName)
	Dim strPropertyValue, oWMIClass, oWMIProperties, objWMIService, colItems
	Dim objItem, objProperty
	Dim sLine
	
    On Error Resume Next

    strPropertyValue = &amp;quot;&amp;quot;
    set oWmiClass = getobject(&amp;quot;winmgmts:&amp;quot; &amp;amp; strNameSpace).get(strClassName,&amp;amp;h20000) &amp;#039;amended
    set oWmiProperties = oWmiClass.Properties_

    Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; &amp;quot;.&amp;quot; &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strNameSpace)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from &amp;quot; &amp;amp; strClassName,,48)

    For Each objItem in colItems
        For Each objProperty in oWmiProperties
            sLine = &amp;quot;&amp;quot;
            &amp;#039;WScript.Echo &amp;quot;- &amp;quot; &amp;amp; objProperty.name &amp;amp; &amp;quot;: &amp;quot; &amp;amp; strPropertyName

            If objProperty.Name = strPropertyName Then
                If objProperty.IsArray = True Then
                    sLine = &amp;quot;str&amp;quot; &amp;amp; objProperty.Name &amp;amp; &amp;quot; = Join(objItem.&amp;quot; &amp;amp; objProperty.Name &amp;amp; &amp;quot;, &amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;,&amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;)&amp;quot; &amp;amp; vbCrLf
                    sLine = sLine &amp;amp; &amp;quot;strPropertyValue =  str&amp;quot; &amp;amp; objProperty.Name
                &amp;#039;ElseIf objProperty.CIMTYPE = 101 Then
                &amp;#039;    bHasDates = True
                &amp;#039;    sLine =  &amp;quot;strPropertyValue =  WMIDateStringToDate(objItem.&amp;quot; &amp;amp; objProperty.Name &amp;amp; &amp;quot;)&amp;quot;
                Else
                    sLine =  &amp;quot;strPropertyValue =  objItem.&amp;quot; &amp;amp; objProperty.Name
                End If

                &amp;#039;WScript.Echo sLine
                Execute sLine
            End If

        Next
    Next

    GetWmiPropertyValue = strPropertyValue
    
    &amp;#039;Cleanup!
    set oWmiClass = Nothing
    set oWmiProperties = Nothing

    Set objWMIService = Nothing
    Set colItems = Nothing

End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh

zonename=$(zonename)
if [ &amp;quot;$zonename&amp;quot; = &amp;quot;global&amp;quot; ]; then
  echo &amp;quot;not virtual&amp;quot;
else
  echo &amp;quot;Zone&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

lparid=$(uname -L | awk &amp;#039;{ print $1 }&amp;#039;)

if [ &amp;quot;$lparid&amp;quot; = &amp;quot;-1&amp;quot; ]; then
  echo &amp;quot;Not Virtual&amp;quot;
else
  echo &amp;quot;LPAR&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>99</cache_row_id>
          </sensor>
          <sensor>
            <id>198</id>
            <name>Folder Exists</name>
            <hash>1101836903</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>A parameterized Sensor that checks to see if a folder exists on a machine.  If it does, it returns back the full path of the folder. Will expand environment variables, and will expand %userprofile%/folder or "~/folder" to search all user home directories.
Example: C:\Windows\system32</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Exists
&amp;#039;========================================

Option Explicit

Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs
bExamineRemoteFolders = True &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath, objFso, objShell

strFolderPath = unescape(&amp;quot;||folder||&amp;quot;)

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
	CheckForAllUsers strFolderPath
Else
	CheckNoUserVars strFolderPath
End If

	
Sub CheckNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
	strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	
	strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	If objFso.FolderExists(strFolderPath) Then 
		WScript.Echo UnFixFileSystemRedirectionForPath(strFolderPath)
	Else 
		WScript.Echo &amp;quot;Folder does not exist&amp;quot;
	End If
End Sub &amp;#039;CheckNoUserVars

Sub CheckForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory

	&amp;#039; Remove %userprofile% and keep the rest
	strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)	
	
	On Error Resume Next &amp;#039; permissions issues, perhaps
	
	Const HKLM = &amp;amp;H80000002
	Dim objShell,objFso
	Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
	Dim strValue,strOut,bFolderFound
	bFolderFound = False
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	
	strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	Set objRegistry=Getx64RegistryProvider
 
	strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
	objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys
 

	For Each objSubkey In arrSubkeys
	    strValueName = &amp;quot;ProfileImagePath&amp;quot;
	    strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
	    objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue

	    If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
	    	&amp;#039; if user profile is not local and not examining remote profiles, ignore
	    Else 
	    	If objFSO.FolderExists(strValue&amp;amp;strFolderPath) Then
				bFolderFound = True
				WScript.Echo strValue&amp;amp;strFolderPath
			End If
		End If
	Next
	
	If Not bFolderFound Then

		WScript.Echo &amp;quot;Folder does not exist&amp;quot;
	End If

	On Error Goto 0

End Sub &amp;#039;CheckForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider

Function FixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.
	
	Dim objFSO, strSystem32Location,objShell
	Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)
	
	If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
		If InStr(strFilePath,strSystem32Location) = 1 Then
			strRestOfPath = Replace(strFilePath,strSystem32Location,&amp;quot;&amp;quot;)
			strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
			strFilePath = strNewSystem32Location&amp;amp;strRestOfPath
		End If
	End If
	FixFileSystemRedirectionForPath = strFilePath
	
	&amp;#039;Cleanup
	Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will undo the changes made to a path by the 
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

	Dim objFSO,strSystem32Location,strNewSystem32Location
	
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	
	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
	
	UnFixFileSystemRedirectionForPath = Replace(strFilePath,strNewSystem32Location,strSystem32Location)
	
	&amp;#039;Cleanup
	Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

urldecode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/\+/ /g&amp;#039; -e &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

file=&amp;quot;$(urldecode &amp;quot;||folder||&amp;quot;)&amp;quot;

if [[ &amp;quot;$file&amp;quot; == *~* ]]
then
  # replace home directory with nothing
  file=&amp;quot;${file#~\/}&amp;quot;

  # Read in /etc/passwd to determine home dirs
  awk -F: &amp;#039;$6 ~ /home/ &amp;amp;&amp;amp; $7 ~ /sh/ {print $1, $6}&amp;#039; /etc/passwd |
  while read NAME homedir
  do
     if [ -e &amp;quot;$homedir/$file&amp;quot; ]
     then
        echo &amp;quot;$homedir/$file&amp;quot;
     fi
   done
else
   if [ -e &amp;quot;$file&amp;quot; ]
   then
      echo &amp;quot;$file&amp;quot;
   fi
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

urldecode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/\+/ /g&amp;#039; -e &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

folder=&amp;quot;$(urldecode &amp;quot;||folder||&amp;quot;)&amp;quot;
folder=$(echo &amp;quot;$folder&amp;quot; | sed &amp;#039;s/ /\ /g&amp;#039;)

if [ -d &amp;quot;$folder&amp;quot; ]
then
	ls -d &amp;quot;$folder&amp;quot;
else
	echo Folder does not exist
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;folder&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Program Files\\MyApp&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Environment variables accepted.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||folder||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;folder&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Program Files\\MyApp&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Environment variables accepted.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||folder||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Environment variables accepted.","defaultValue":"","promptText":"e.g. c:\\Program Files\\MyApp","maxChars":0,"key":"folder","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>100</cache_row_id>
          </sensor>
          <sensor>
            <id>200</id>
            <name>File Version</name>
            <hash>112406691</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>Returns the version of the file specified.
Example: 1.0</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; File Version
&amp;#039;========================================

&amp;#039; TAG: REDIRECTION

filePath = unescape(&amp;quot;||file||&amp;quot;)

filePath = FixFileSystemRedirectionForPath(filePath)

Dim fso
Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

If fso.FileExists(filePath) Then 
	strVersion = fso.GetFileVersion(filePath)

	If strVersion = &amp;quot;&amp;quot; Then
		WScript.Echo &amp;quot;Version not found&amp;quot;
	Else
		WScript.Echo strVersion
	End If	
&amp;#039;	If strVersion
Else 
	WScript.Echo &amp;quot;File not found&amp;quot;
End If

Function FixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.
    
    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFilePath = LCase(strFilePath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)
    
    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFilePath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFilePath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFilePath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFilePath
    
    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will undo the changes made to a path by the 
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location
    
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    
    strFilePath = LCase(strFilePath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
    
    UnFixFileSystemRedirectionForPath = Replace(strFilePath,strNewSystem32Location,strSystem32Location)
    
    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;c:\\windows\\test.txt&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;File path and name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter, folder path and file name of the file.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;c:\\windows\\test.txt&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;File path and name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter, folder path and file name of the file.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;c:\\windows\\test.txt&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;File path and name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter, folder path and file name of the file.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;c:\\windows\\test.txt&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;File path and name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter, folder path and file name of the file.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"File path and name","helpString":"Enter the full drive letter, folder path and file name of the file.","defaultValue":"","promptText":"c:\\windows\\test.txt","maxChars":0,"key":"file","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>101</cache_row_id>
          </sensor>
          <sensor>
            <id>202</id>
            <name>Boot Device</name>
            <hash>1125023461</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Hard disk device that the operating system uses to boot from.
Example: \\Device\\HarddiskVolume1</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select BootDevice from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
bootinfo -b</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>102</cache_row_id>
          </sensor>
          <sensor>
            <id>204</id>
            <name>Open Shares</name>
            <hash>1132013379</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns information about shares on a PC.
Example: SHARENAME</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select name from win32_share where caption != &amp;#039;Default Share&amp;#039; AND caption != &amp;#039;Remote Admin&amp;#039; AND caption != &amp;#039;Remote IPC&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
sharing -l | awk &amp;#039;BEGIN {i=0} /smb:/ { while (i &amp;lt; 1) { getline; print $0; i++ } i=0}&amp;#039; | awk -F &amp;quot;:\t&amp;quot; &amp;#039;{print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>103</cache_row_id>
          </sensor>
          <sensor>
            <id>206</id>
            <name>Domain Controller SYSVOL Size</name>
            <hash>1155294592</hash>
            <string_count>0</string_count>
            <category>Active Directory</category>
            <description>Returns the SYSVOL size on Domain Controllers
Example: 2.2 GB</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Domain Controller SYSVOL Size
&amp;#039;========================================

Option Explicit

Dim strSharePath

strSharePath = GetPathForShare(&amp;quot;sysvol&amp;quot;)
If strSharePath = &amp;quot;&amp;quot; Then WScript.Quit

Dim objFSO,objFolder
Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

Set objFolder = objFSO.GetFolder(strSharePath)

WScript.Echo GetPrettyFileSize(objFolder.Size)

Function GetPathForShare(strShareName)

	Dim objWMIService,colItems,objItem,strReturn
	
	On Error Resume Next &amp;#039; could be permissions issues
	strReturn = &amp;quot;&amp;quot;
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Share&amp;quot;,,48)

	For Each objItem in colItems
		If LCase(objItem.Name) = LCase(strShareName) Then
			strReturn = objItem.Path
		End If
	Next
	
	On Error Goto 0
	
	GetPathForShare = strReturn
	
End Function &amp;#039;GetPathForShare	


Function GetPrettyFileSize(strSize)
Dim dblSize
	dblSize = CDbl(strSize)

	If dblSize &amp;gt; 1024*1024*1024 Then &amp;#039;&amp;#039;Should be GB
		strSize = CStr(Round(dblSize / 1024 / 1024 / 1024, 1)) &amp;amp; &amp;quot; GB&amp;quot;	
	ElseIf dblsize &amp;gt; 1024*1024 Then  &amp;#039;&amp;#039;Should be MB
		strSize = CStr(Round(dblSize / 1024 / 1024, 1)) &amp;amp; &amp;quot; MB&amp;quot;
	ElseIf dblSize &amp;gt; 1024 Then  &amp;#039;&amp;#039;Should be kB
		strSize = CStr(Round(dblSize / 1024)) &amp;amp; &amp;quot; kB&amp;quot;
	Else
		strSize = CStr(dblSize) &amp;amp; &amp;quot; B&amp;quot;	
	End If	
	GetPrettyFileSize = strSize
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>104</cache_row_id>
          </sensor>
          <sensor>
            <id>208</id>
            <name>Disk IOPS</name>
            <hash>1156943497</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the current total number of disk IOPS currently occurring
Example: 86</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Option Explicit

Dim strComputer, objWMIService, objRefresher, objDiskDrive, colDiskDrives, driveName, sampleCount, counter, total

sampleCount = 6 &amp;#039;number of datapoints to use for averaging result

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)

set objRefresher = CreateObject(&amp;quot;WbemScripting.SWbemRefresher&amp;quot;)
Set colDiskDrives = objRefresher.AddEnum _
    (objWMIService, &amp;quot;Win32_PerfFormattedData_PerfDisk_LogicalDisk&amp;quot;).objectSet
objRefresher.Refresh

total = 0
For Each objDiskDrive in colDiskDrives
	driveName = objDiskDrive.Name
	If driveName = &amp;quot;_Total&amp;quot; Then
		For counter = 1 To sampleCount
			objRefresher.Refresh
	    	total = total + objDiskDrive.DiskTransfersPerSec
	    	Wscript.Sleep 500
	    Next
	    WScript.Echo FormatNumber(total/sampleCount,0)
    End If 
Next

WScript.Quit</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>105</cache_row_id>
          </sensor>
          <sensor>
            <id>210</id>
            <name>Network Link Speed</name>
            <hash>1206550580</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the names and speeds of all network connections.
Example: WAN Miniport (IP) | 10000</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Network Link Speed
&amp;#039;========================================

Option Explicit

Const cWMINameSpace = &amp;quot;root/wmi&amp;quot;
Const cWMIInstance = &amp;quot;MSNdis_LinkSpeed&amp;quot;
Const strComputerName = &amp;quot;.&amp;quot;

Dim strWinMgmts, objWMI, listAdapters, objAdapter,intLinkSpeed,strSep
strSep = &amp;quot;|&amp;quot;

strWinMgMts = &amp;quot;winmgmts:{impersonationLevel=impersonate}!//&amp;quot; &amp;amp; strComputerName &amp;amp; &amp;quot;/&amp;quot; &amp;amp; cWMINameSpace
Set objWMI = GetObject(strWinMgMts)

If Err.Number &amp;lt;&amp;gt; 0 Then
WScript.Echo &amp;quot;ERROR: Unable to connect to the WMI namespace.&amp;quot;
Else
Set listAdapters = objWMI.InstancesOf(cWMIInstance)
If (listAdapters.count &amp;gt; 0) Then
For Each objAdapter in listAdapters
If CDbl(objAdapter.NdisLinkSpeed) &amp;lt; 0 Then
	intLinkSpeed = Abs(CDbl(objAdapter.NdislinkSpeed))
Else
	intLinkSpeed = CDbl(objAdapter.NdisLinkSpeed)
End If
WScript.Echo objAdapter.InstanceName &amp;amp; strSep &amp;amp; intLinkSpeed/10000
Next
Else
WScript.Echo &amp;quot;WARNING: No adapters found.&amp;quot;
End If
End IF</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
# dladm show-dev not avail on Solaris 11
dladm help 2&amp;gt;&amp;amp;1 | /usr/xpg4/bin/grep -q  show-dev
if [ $? -eq 0 ]; then
  dladm show-dev | awk &amp;#039;{ print $1&amp;quot;,&amp;quot;$5 }&amp;#039;
else
  dladm show-phys | grep -v LINK | awk &amp;#039;{ print $1&amp;quot;,&amp;quot;$4 }&amp;#039;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Adapter Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Speed (Mbps)</name>
                <index>1</index>
                <value_type>Numeric</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>106</cache_row_id>
          </sensor>
          <sensor>
            <id>212</id>
            <name>Free Memory</name>
            <hash>1260624634</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Indicates the free RAM available to the operating system.
Example: 1024MB</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Free Memory
&amp;#039;========================================

Option Explicit

Dim objWMIService, colItems, objItem, strLineAvailableMemory

Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
 
&amp;#039;Gets MEMORY Usage
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * FROM Win32_PerfFormattedData_PerfOS_Memory &amp;quot;)
For Each objItem In colItems  
 strLineAvailableMemory = objItem.AvailableMBytes
 wscript.echo strLineAvailableMemory &amp;amp; &amp;quot; MB&amp;quot;
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
memLine=$(free -m | grep &amp;quot;Mem&amp;quot;)
set -- $memLine
echo $4 MB</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

FREE_BLOCKS=$(vm_stat | grep free | awk &amp;#039;{ print $3 }&amp;#039; | sed &amp;#039;s/\.//&amp;#039;)
FREE=$((($FREE_BLOCKS+SPECULATIVE_BLOCKS)*4096/1048576))
echo $FREE MB</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
free=$(vmstat | tail -1| awk &amp;#039;{ print $5 }&amp;#039;)
freeMB=$(expr 110648 / 1024)
echo &amp;quot;${freeMB}MB&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
frames=$(svmon -G | egrep &amp;#039;^memory&amp;#039; | awk &amp;#039;{ print $4 }&amp;#039;)
freeMB=$(expr $frames \* 4 \* 1024 / 1048576)
echo &amp;quot;${freeMB}MB&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>107</cache_row_id>
          </sensor>
          <sensor>
            <id>214</id>
            <name>Service Login Names</name>
            <hash>1271450145</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>A list of accounts under which services are configured to run.  This list will not include the default accounts, including LocalSystem, LocalService, and NetworkService.
Example: .\\servuser</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Startname from win32_service where (Startname &amp;lt;&amp;gt; &amp;#039;LocalSystem&amp;#039; AND Startname &amp;lt;&amp;gt; &amp;#039;NT AUTHORITY\\LocalService&amp;#039; AND Startname &amp;lt;&amp;gt; &amp;#039;NT AUTHORITY\\NetworkService&amp;#039; AND Startname &amp;lt;&amp;gt;  &amp;#039;NT AUTHORITY\\LOCAL SERVICE&amp;#039; AND Startname &amp;lt;&amp;gt; &amp;#039;NT AUTHORITY\\NETWORK SERVICE&amp;#039;)</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>108</cache_row_id>
          </sensor>
          <sensor>
            <id>216</id>
            <name>Security Event Log IDs</name>
            <hash>1314534715</hash>
            <string_count>0</string_count>
            <category>Windows Event Logs</category>
            <description>Event identifier code for Security log events as shown in the Windows NT Event Viewer tool.
Example: 4648</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select EventCode from Win32_NTLogEvent where LogFile = &amp;#039;Security&amp;#039; and TimeWritten &amp;gt; &amp;#039;$$GETUTCDATE$$86000$$&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>109</cache_row_id>
          </sensor>
          <sensor>
            <id>218</id>
            <name>Used Memory</name>
            <hash>1315630323</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Memory in use in MB from client machine.
Example: 6348 MB</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Used Memory
&amp;#039;========================================

Option Explicit

Dim objWMIService, colItems, objItem, intTotalMemory, intAvailableMemory

Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
 
&amp;#039;Gets total memory
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * FROM Win32_Computersystem &amp;quot;)
For Each objItem In colItems  
 intTotalMemory = Int(objItem.TotalPhysicalMemory / 1024 / 1024)
Next 
&amp;#039;Gets available memory
Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;Select * FROM Win32_PerfFormattedData_PerfOS_Memory &amp;quot;)
For Each objItem In colItems  
 intAvailableMemory = objItem.AvailableMBytes
Next

&amp;#039; We didn&amp;#039;t use committed bytes here, because that is often bigger than total - available

WScript.Echo intTotalMemory - intAvailableMemory &amp;amp; &amp;quot; MB&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
memLine=$(free -m | grep &amp;quot;Mem&amp;quot;)
set -- $memLine
echo $3 MB</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

ACTIVE_BLOCKS=$(vm_stat | grep &amp;quot;Pages active&amp;quot; | awk &amp;#039;{ print $3 }&amp;#039; | sed &amp;#039;s/\.//&amp;#039;)
ACTIVE=$((($ACTIVE_BLOCKS+SPECULATIVE_BLOCKS)*4096/1048576))
echo $ACTIVE MB</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>110</cache_row_id>
          </sensor>
          <sensor>
            <id>220</id>
            <name>FileVault Details</name>
            <hash>1326015223</hash>
            <string_count>0</string_count>
            <category>Security</category>
            <description>Returns information on the FileVault status of a machine
Example: If Available | Fully Secure | Status</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
&amp;#039; 
&amp;#039; 

WScript.Echo &amp;quot;N/A on Windows&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
# 
# Sensor that goes through the current status of the drives via diskutil,
# and outputs the current FileVault status


CORESTORAGESTATUS=&amp;quot;/private/tmp/corestorage.txt&amp;quot;
ENCRYPTSTATUS=&amp;quot;/private/tmp/encrypt_status.txt&amp;quot;
ENCRYPTDIRECTION=&amp;quot;/private/tmp/encrypt_direction.txt&amp;quot;

DEVICE_COUNT=`diskutil cs list | grep -E &amp;quot;^CoreStorage logical volume groups&amp;quot; | awk &amp;#039;{print $5}&amp;#039; | sed -e&amp;#039;s/(//&amp;#039;`

EGREP_STRING=&amp;quot;&amp;quot;
if [ &amp;quot;$DEVICE_COUNT&amp;quot; != &amp;quot;1&amp;quot; ]; then
  EGREP_STRING=&amp;quot;^\| *&amp;quot;
fi

# yet another reason to doscourage use of bash replace
# what happens when the minor number becomes 10? BOOM
#osversionlong=`sw_vers -productVersion`
#osvers=${osversionlong:3:1}
osvers=$(sw_vers -productVersion | awk -F\. &amp;#039;{print $2}&amp;#039;)

CONTEXT=`diskutil cs list | grep -E &amp;quot;$EGREP_STRING\Encryption Context&amp;quot; | sed -e&amp;#039;s/\|//&amp;#039; | awk &amp;#039;{print $3}&amp;#039;`
ENCRYPTIONEXTENTS=`diskutil cs list | grep -E &amp;quot;$EGREP_STRING\Has Encrypted Extents&amp;quot; | sed -e&amp;#039;s/\|//&amp;#039; | awk &amp;#039;{print $4}&amp;#039;`
ENCRYPTION=`diskutil cs list | grep -E &amp;quot;$EGREP_STRING\Encryption Type&amp;quot; | sed -e&amp;#039;s/\|//&amp;#039; | awk &amp;#039;{print $3}&amp;#039;`
CONVERTED=`diskutil cs list | grep -E &amp;quot;$EGREP_STRING\Size \(Converted\)&amp;quot; | sed -e&amp;#039;s/\|//&amp;#039; | awk &amp;#039;{print $5, $6}&amp;#039;`
SIZE=`diskutil cs list | grep -E &amp;quot;$EGREP_STRING\Size \(Total\)&amp;quot; | sed -e&amp;#039;s/\|//&amp;#039; | awk &amp;#039;{print $5, $6}&amp;#039;`

# Checks to see if the OS on the Mac is 10.7 or 10.8.
# These older versions of mac OS do not have the ability to encrypt

if [[ ${osvers} -lt 7 ]]; then
  echo &amp;quot;Not Available|No|None&amp;quot;
fi



if [[ ${osvers} -ge 7 ]]; then
  diskutil cs list &amp;gt;&amp;gt; $CORESTORAGESTATUS
  
    # If the Mac is running 10.7 or 10.8, but not does not have
    # any CoreStorage volumes, the status is:
    # Not Enabled
    
    if grep -iE &amp;#039;No CoreStorage&amp;#039; $CORESTORAGESTATUS 1&amp;gt;/dev/null; then
       echo &amp;quot;Available|No|None&amp;quot;
    fi
    
    if grep -iE &amp;#039;Logical Volume Family&amp;#039; $CORESTORAGESTATUS 1&amp;gt;/dev/null; then

    # This section does 10.7-specific checking of the Mac&amp;#039;s
    # FileVault 2 status

      if [ &amp;quot;$CONTEXT&amp;quot; = &amp;quot;Present&amp;quot; ]; then
        if [ &amp;quot;$ENCRYPTION&amp;quot; = &amp;quot;AES-XTS&amp;quot; ]; then
	      diskutil cs list | grep -E &amp;quot;$EGREP_STRING\Conversion Status&amp;quot; | sed -e&amp;#039;s/\|//&amp;#039; | awk &amp;#039;{print $3}&amp;#039; &amp;gt;&amp;gt; $ENCRYPTSTATUS
		    if grep -iE &amp;#039;Complete&amp;#039; $ENCRYPTSTATUS 1&amp;gt;/dev/null; then 
		      echo &amp;quot;Available|Yes|Encrypted&amp;quot;
            else
		      if  grep -iE &amp;#039;Converting&amp;#039; $ENCRYPTSTATUS 1&amp;gt;/dev/null; then
		        diskutil cs list | grep -E &amp;quot;$EGREP_STRING\Conversion Direction&amp;quot; | sed -e&amp;#039;s/\|//&amp;#039; | awk &amp;#039;{print $3}&amp;#039; &amp;gt;&amp;gt; $ENCRYPTDIRECTION
		          if grep -iE &amp;#039;Forward&amp;#039; $ENCRYPTDIRECTION 1&amp;gt;/dev/null; then
		            echo &amp;quot;Available|No|Encrypting $CONVERTED of $SIZE&amp;quot;
                  else
		            echo &amp;quot;Available|No|Unknown&amp;quot;
	              fi
               fi
             fi
        else
            if [ &amp;quot;$ENCRYPTION&amp;quot; = &amp;quot;None&amp;quot; ]; then
              diskutil cs list | grep -E &amp;quot;$EGREP_STRING\Conversion Direction&amp;quot; | sed -e&amp;#039;s/\|//&amp;#039; | awk &amp;#039;{print $3}&amp;#039; &amp;gt;&amp;gt; $ENCRYPTDIRECTION
                if grep -iE &amp;#039;Backward&amp;#039; $ENCRYPTDIRECTION 1&amp;gt;/dev/null; then
                  echo &amp;quot;Available|No|Decrypting $CONVERTED of $SIZE&amp;quot;
                elif grep -iE &amp;#039;-none-&amp;#039; $ENCRYPTDIRECTION 1&amp;gt;/dev/null; then
                  echo &amp;quot;Available|No|Not Encrypted&amp;quot;
                fi
            fi 
        fi
      fi  
fi
fi
    # This section does 10.8-specific checking of the Mac&amp;#039;s
    # FileVault 2 status

      if [ &amp;quot;$ENCRYPTIONEXTENTS&amp;quot; = &amp;quot;Yes&amp;quot; ]; then
        if [ &amp;quot;$ENCRYPTION&amp;quot; = &amp;quot;AES-XTS&amp;quot; ]; then
	      diskutil cs list | grep -E &amp;quot;$EGREP_STRING\Fully Secure&amp;quot; | sed -e&amp;#039;s/\|//&amp;#039; | awk &amp;#039;{print $3}&amp;#039; &amp;gt;&amp;gt; $ENCRYPTSTATUS
		    if grep -iE &amp;#039;Yes&amp;#039; $ENCRYPTSTATUS 1&amp;gt;/dev/null; then 
		      echo &amp;quot;Available|Yes|Encrypted&amp;quot;
            else
		      if  grep -iE &amp;#039;No&amp;#039; $ENCRYPTSTATUS 1&amp;gt;/dev/null; then
		        diskutil cs list | grep -E &amp;quot;$EGREP_STRING\Conversion Direction&amp;quot; | sed -e&amp;#039;s/\|//&amp;#039; | awk &amp;#039;{print $3}&amp;#039; &amp;gt;&amp;gt; $ENCRYPTDIRECTION
		          if grep -iE &amp;#039;forward&amp;#039; $ENCRYPTDIRECTION 1&amp;gt;/dev/null; then
		            echo &amp;quot;Available|No|Encrypting $CONVERTED of $SIZE&amp;quot;

                  else
		          if grep -iE &amp;#039;backward&amp;#039; $ENCRYPTDIRECTION 1&amp;gt;/dev/null; then
                  	    echo &amp;quot;Available|No|Decrypting $CONVERTED of $SIZE&amp;quot;
                          elif grep -iE &amp;#039;-none-&amp;#039; $ENCRYPTDIRECTION 1&amp;gt;/dev/null; then
                            echo &amp;quot;Available|No|Not Encrypted&amp;quot;
	              fi
               fi
             fi
      fi  
fi
fi



# Remove the temp files created during the script

if [ -f /private/tmp/corestorage.txt ]; then
   rm /private/tmp/corestorage.txt
fi

if [ -f /private/tmp/encrypt_status.txt ]; then
   rm /private/tmp/encrypt_status.txt
fi

if [ -f /private/tmp/encrypt_direction.txt ]; then
   rm /private/tmp/encrypt_direction.txt
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Availablity</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Fully Secure</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Status</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>111</cache_row_id>
          </sensor>
          <sensor>
            <id>222</id>
            <name>Printers</name>
            <hash>1348043492</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns printers connected to a system.
Example:HP LaserJet 4400c</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select DriverName from Win32_Printer</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>112</cache_row_id>
          </sensor>
          <sensor>
            <id>224</id>
            <name>Default Login Domain</name>
            <hash>1348161929</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Name of the domain of the most recently logged in user.
Example: CORP</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Default Login Domain
&amp;#039;========================================

Dim reg , strComputer
strComputer = &amp;quot;.&amp;quot;
Set reg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

strKeyPath = GetKeyPath()
&amp;#039;strKeyPath = &amp;quot;Software\Microsoft\Windows NT\CurrentVersion\Winlogon&amp;quot;
strValueName = &amp;quot;DefaultDomainName&amp;quot; 

const HKEY_CURRENT_USER = &amp;amp;H80000001
const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

On Error Resume Next
reg.GetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue
If strValue &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
	Wscript.Echo strValue
Else
	Wscript.Echo &amp;quot;Default Domain Not Set&amp;quot;
End If

Function GetKeyPath()
	
	Dim key32path, key64path, keyPath
	key32Path = &amp;quot;Software\Microsoft\Windows NT\CurrentVersion\Winlogon&amp;quot;
	key64Path = &amp;quot;Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Winlogon&amp;quot;

	If RegKeyExists(reg , HKEY_LOCAL_MACHINE, key64Path) Then
		keyPath = key64Path
	ElseIf RegKeyExists(reg , HKEY_LOCAL_MACHINE, key32Path) Then
		keyPath = key32Path
	End If
	GetKeyPath = keyPath
End Function

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>113</cache_row_id>
          </sensor>
          <sensor>
            <id>226</id>
            <name>Startup Programs</name>
            <hash>1404374135</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>A list of programs configured to automatically run on the client machine.  Also includes the command line entry to run the program.
Example: Windows Mobile Device Center | C:\Windows\WindowsMobile\wmdc.exe</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Startup Programs
&amp;#039;========================================

&amp;#039; This sensor will return values from the 32-bit and 64-bit areas of the
&amp;#039; registry that defines auto-run programs.
&amp;#039; This is a multi-column sensor that has output that looks like:
&amp;#039; Name|Command Line

Option Explicit

Dim strSep

strSep = &amp;quot;|&amp;quot;

GetAutoRunPrograms strSep

Function GetAutoRunPrograms(strSep)
&amp;#039; This function will output the two values

	Const HKLM = &amp;amp;h80000002
	
	Dim strComputer, strStartupRegPath, strStartupWow64RegPath
	Dim objRegistry, strFinalOutputString
	
	strStartupRegPath = &amp;quot;Software\Microsoft\Windows\CurrentVersion\Run&amp;quot;
	strStartupWow64RegPath = &amp;quot;Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Run&amp;quot;
	
	strFinalOutputString = &amp;quot;&amp;quot;
	Set objRegistry = Getx64RegistryProvider()
	If RegKeyExists(HKLM, strStartupRegPath, objRegistry) Then	
		strFinalOutputString = GetValues(objRegistry, HKLM, strStartupRegPath)
	End If
	If Not strFinalOutputString = &amp;quot;&amp;quot; Then
		strFinalOutputString = strFinalOutputString &amp;amp; vbCrLf
	End If
	If RegKeyExists(HKLM, strStartupWow64RegPath, objRegistry) Then
		strFinalOutputString = strFinalOutputString _ 
			&amp;amp; GetValues(objRegistry, HKLM, strStartupWow64RegPath)
	End If
	
	WScript.Echo strFinalOutputString
End Function &amp;#039;GetAutoRunPrograms

Function GetValues(objRegistry, hiveConst, keyPath)

	Dim arrKeyNames, arrTypes, arrValueNames, strValueName
	Dim strValueData, i, strOutputString
		
	objRegistry.EnumValues hiveConst, keyPath, arrValueNames, arrTypes
	
	If Not IsArray(arrValueNames) Then
		arrValueNames = Array(&amp;quot;&amp;quot;)
		arrTypes = Array(1)
	End If
	
	strOutputString = &amp;quot;&amp;quot;
	For i = LBound(arrValueNames) To UBound(arrValueNames)
		strValueName = arrValueNames(i)
		strValueData = GetRegValue(objRegistry, hiveConst, keyPath, strValueName, arrTypes(i))
		If Not ( IsNull(strValueName) Or IsNull(strValueData) ) Then
			If i = UBound(arrValueNames) Then
				strOutputString = strOutputString &amp;amp; strValueName &amp;amp; strSep &amp;amp; strValueData
			Else
				strOutputString = strOutputString &amp;amp; strValueName &amp;amp; strSep &amp;amp; strValueData &amp;amp; vbCrLf
			End If
		End If
	Next	
	GetValues = strOutputString
End Function &amp;#039;GetValues

Function GetRegValue(objRegistry, hiveConst, keyPath, strValueName, constType)

	Const REG_SZ        = 1
	Const REG_EXPAND_SZ = 2
	Const REG_BINARY    = 3
	Const REG_DWORD     = 4
	Const REG_MULTI_SZ  = 7
	Const REG_QWORD     = 11

	Dim strValue, arrBytes, uValue, arrValues

	Select Case constType
		Case REG_SZ  
			objRegistry.GetStringValue hiveConst, keyPath, strValueName, strValue
			GetRegValue =  strValue
			Exit Function
		Case REG_EXPAND_SZ
			objRegistry.GetExpandedStringValue hiveConst, keyPath, strValueName, strValue
			GetRegValue =  strValue
			Exit Function
		Case REG_BINARY
			objRegistry.GetBinaryValue hiveConst, keyPath, strValueName, arrBytes
			strBytes = &amp;quot;&amp;quot;
			For Each uByte in arrBytes
				strBytes = strBytes &amp;amp; Hex(uByte) &amp;amp; &amp;quot; &amp;quot;
			Next
			GetRegValue =  strBytes
			Exit Function
		Case REG_DWORD
			objRegistry.GetDWORDValue hiveConst, keyPath, strValueName, uValue
			GetRegValue =  CStr(uValue)				  
			Exit Function
		Case REG_QWORD
			objRegistry.GetQWORDValue hiveConst, keyPath, strValueName, uValue
			GetRegValue =  CStr(uValue)				  
			Exit Function
		Case REG_MULTI_SZ
			objRegistry.GetMultiStringValue hiveConst, keyPath, strValueName, arrValues				  				
			For Each strValue in arrValues
				GetRegValue =  strValue 
			Next
			Exit Function
	End Select
End Function &amp;#039;GetRegValue

Function RegKeyExists(sHive, sRegKey, objReg)
	Dim aValueNames, aValueTypes
	If objReg.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Command Line</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>114</cache_row_id>
          </sensor>
          <sensor>
            <id>228</id>
            <name>Physical Volumes</name>
            <hash>1426187539</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description></description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
&amp;#039; 
&amp;#039; 

WScript.Echo &amp;quot;N/A on Windows&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
# get physical volumes
/usr/sbin/pvdisplay 2&amp;gt; /dev/null | grep &amp;quot;PV Name&amp;quot; | awk &amp;#039;{ print $3 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# get VG physical volumes
lspv | awk &amp;#039;{ print $1,$3,$4 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>115</cache_row_id>
          </sensor>
          <sensor>
            <id>230</id>
            <name>DHCP Server</name>
            <hash>1471370561</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>The addresses of the configured DHCP servers, If a machine is on DHCP.
Example: 192.168.1.1</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select DHCPServer from win32_networkadapterconfiguration where IPEnabled=&amp;#039;True&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>IPAddress</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>116</cache_row_id>
          </sensor>
          <sensor>
            <id>232</id>
            <name>NET Version</name>
            <hash>1496471156</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Returns the full versions numbers of all installed .NET.</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;
&amp;#039;  .NET Version
&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;
&amp;#039; This sensor returns the highest .NET Version installed on the endpoint

Option Explicit

Dim strComputer, strKeyPath10, strKeyPath11, strkeyPath20, strKeyPath30, strKeyPath35, strKeyPath40, strkeyPath4c, strKeyPath45, objRegistry, strValueName, strValue, strNoNET, strValue10, strValue11, strValue20, strValue30, strValue35, strValue40, strValue4C, strValue45, byPass4c, byPass40
Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002
strComputer = &amp;quot;.&amp;quot;

strKeyPath10 = &amp;quot;SOFTWARE\Microsoft\NET Framework Setup\NDP\v1.0.3705\&amp;quot;
strKeyPath11 = &amp;quot;SOFTWARE\Microsoft\NET Framework Setup\NDP\v1.1.4322\&amp;quot;
strKeyPath20 = &amp;quot;SOFTWARE\Microsoft\NET Framework Setup\NDP\v2.0.50727\&amp;quot;
strKeyPath30 = &amp;quot;SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.0\&amp;quot;
strKeyPath35 = &amp;quot;SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.5\&amp;quot;
strKeyPath40 = &amp;quot;SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\&amp;quot;
strKeyPath4C = &amp;quot;SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Client\&amp;quot;
strKeyPath45 = &amp;quot;Software\Microsoft\NET Framework Setup\NDP\v4\Full\&amp;quot;

Set objRegistry = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

strValue = NULL

&amp;#039;Find existence of .NET1.0
strValueName = &amp;quot;Version&amp;quot;
objRegistry.GetStringValue HKEY_LOCAL_MACHINE, strKeyPath10, strValueName, strValue10
If IsNull(strValue10) Then
	strNoNet = &amp;quot;.NET not installed&amp;quot;
Else
	strValue = strValue10
End If

&amp;#039;Find existence of .NET1.1
strValueName = &amp;quot;Version&amp;quot;
objRegistry.GetStringValue HKEY_LOCAL_MACHINE, strKeyPath11, strValueName, strValue11
If IsNull(strValue11) Then
	strNoNet = &amp;quot;.NET not installed&amp;quot;
Else
	strValue = strValue11
End If

&amp;#039;Find existence of .NET2.0
strValueName = &amp;quot;Version&amp;quot;
objRegistry.GetStringValue HKEY_LOCAL_MACHINE, strKeyPath20, strValueName, strValue20
If IsNull(strValue20) Then
	strNoNet = &amp;quot;.NET not installed&amp;quot;
Else
	strValue = strValue20
End If

&amp;#039;Find existence of .NET3.0
strValueName = &amp;quot;Version&amp;quot;
objRegistry.GetStringValue HKEY_LOCAL_MACHINE, strKeyPath30, strValueName, strValue30
If IsNull(strValue30) Then
	strNoNet = &amp;quot;.NET not installed&amp;quot;
Else
	strValue = strValue30
End If

&amp;#039;Find existence of .NET3.5
strValueName = &amp;quot;Version&amp;quot;
objRegistry.GetStringValue HKEY_LOCAL_MACHINE, strKeyPath35, strValueName, strValue35
If IsNull(strValue35) Then
	strNoNet = &amp;quot;.NET not installed&amp;quot;
Else
	strValue = strValue35
End If

&amp;#039;Find existence of .NET4.0 Client Version - but only if .NET4.0 Full Version Not Found
strValueName = &amp;quot;Version&amp;quot;
objRegistry.GetStringValue HKEY_LOCAL_MACHINE, strKeyPath4C, strValueName, strValue4C
If IsNull(strValue4C) Then
	strNoNet = &amp;quot;.NET not installed&amp;quot;
Else
	strValue = strValue4C
End If

&amp;#039;Find existence of .NET4.0 and Bypass test for .NET4.0 Client if Found
strValueName = &amp;quot;Version&amp;quot;
objRegistry.GetStringValue HKEY_LOCAL_MACHINE, strKeyPath40, strValueName, strValue40
If IsNull(strValue40) Then
	strNoNet = &amp;quot;.NET not installed&amp;quot;
Else
	strValue = strValue40
End If

&amp;#039;Find existence of .NET4.5 Client Version
strValueName = &amp;quot;Version&amp;quot;
objRegistry.GetStringValue HKEY_LOCAL_MACHINE, strKeyPath45, strValueName, strValue45
If IsNull(strValue45) Then
	strNoNet = &amp;quot;.NET not installed&amp;quot;
Else
	If InStr(strValue45, &amp;quot;4.5.&amp;quot;) &amp;gt; 0 Then
		strValue = strValue45
	End If
End If

If IsNull(strValue)Then
	WScript.Echo strNoNet
Else
	WScript.Echo strValue
End If</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>7200</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>117</cache_row_id>
          </sensor>
          <sensor>
            <id>234</id>
            <name>Onboard Devices</name>
            <hash>151176619</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the name of any device which is built into the motherboard.
Example: ES1371</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Description from Win32_OnBoardDevice</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>118</cache_row_id>
          </sensor>
          <sensor>
            <id>236</id>
            <name>Registry Key Value Exists</name>
            <hash>1512811088</hash>
            <string_count>0</string_count>
            <category>Registry</category>
            <description>Returns True if the Registry Value exists, False if not.</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Registry Value Exists
&amp;#039;========================================

&amp;#039;Columns:
&amp;#039; User | Data | Type | Architecture | KeyPath | Value

&amp;#039; Value is a hidden column for later use in sensor-fed actions (modify, delete)

strKey = unescape(&amp;quot;||strKey||&amp;quot;)
strValue = unescape(&amp;quot;||strValue||&amp;quot;)

&amp;#039;strKey = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
&amp;#039;strValue = &amp;quot;ServerPort&amp;quot;

&amp;#039;strKey = &amp;quot;HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Internet Settings&amp;quot;
&amp;#039;strValue = &amp;quot;Emailname&amp;quot;
strSep = &amp;quot;~~&amp;quot;


&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive

&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)

If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
	For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserName = GetUserForSIDLocal(objReg,strUserKey)
			If strUserName = False Then strUserName = strUserKey
			strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
			hasValues32 = ValueExists(objReg, objCTX, constHive, strFullUserKey, strValue, 32)
			If hasValues32 Then hasAnyResult = True
		End If
	Next
Else &amp;#039; was another hive
	hasValues32 = ValueExists(objReg, objCtx, constHive, strKey, strValue, 32)
	If hasValues32 Then hasAnyResult = True
End If


If Is64 Then
	Set objCtx = GetObjCtx(64)
	Set objReg = GetObjReg(objCtx)
	If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
	&amp;#039; go through each User&amp;#039;s hive in 64-bit context
		For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
				strUserName = GetUserForSIDLocal(objReg,strUserKey)
				If strUserName = False Then strUserName = strUserKey
				strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
				hasValues64 = ValueExists(objReg, objCTX, constHive, strKey, strValue, 64)
				If hasValues64 Then hasAnyResult = True	
			End If
		Next
	Else &amp;#039; was another hive
		hasValues64 = ValueExists(objReg, objCtx, constHive, strKey, strValue, 64)
		If hasValues64 Then hasAnyResult = True
	End If
End If

If (hasAnyResult) Then
	WScript.Echo &amp;quot;True&amp;quot;
Else
	WScript.Echo &amp;quot;False&amp;quot;
End If

&amp;#039;Goes through all values in a key, returns True if strValue is found
Function ValueExists(objReg, objCtx, constHive, strKey, strValue, intBit)

	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
	
	arrNames = Outparams.sNames
	arrTypes = Outparams.Types

	If Not IsNull(arrNames) Then
		For i = LBound(arrNames) To UBound(arrNames)
			strValueName = arrNames(i)
			
			&amp;#039;if strValue is found, echo
			If LCase(strValueName) = LCase(strValue) Then
				ValueExists = True
				Exit Function
			End If
		Next
	End If
	ValueExists = False
End Function

Function GetDisplayString(strKey, strType, strValue, intBit)
	If intBit = 64 Then
		strArch = &amp;quot;64-bit&amp;quot;
	Else
		strArch = &amp;quot;32-bit&amp;quot;
	End If
			
	GetDisplayString = _
		strValue &amp;amp; strSep &amp;amp; _
		strType &amp;amp; strSep &amp;amp; _
		strArch
End Function

Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	GetSubKeys = Outparams.sNames
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function


Function GetHiveConst(hive)
	Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
	Const HKEY_CURRENT_USER   = &amp;amp;H80000001
	Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
	Const HKEY_USERS          = &amp;amp;H80000003

	Select Case UCase(hive)
		Case &amp;quot;HKLM&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKCR&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
			GetHiveConst = HKEY_CURRENT_USER
		Case &amp;quot;HKEY_USERS&amp;quot;
			GetHiveConst = HKEY_USERS
	End Select
	
	If IsEmpty(GetHiveConst) Then
		WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
		WScript.Quit
	End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
			strUserData = Left(strUserData,intDatPos - 1)
			&amp;#039; find last backslash
			intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
			&amp;#039; get right from that pos
			strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
			GetUserForSIDLocal = strUserData
		Else
			strUserData = False
		End If
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;},{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strValue&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Version&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Value&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key value to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  ||strValue||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;},{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strValue&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Version&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Value&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key value to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  ||strValue||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;},{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strValue&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Version&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Value&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key value to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  ||strValue||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;},{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strValue&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Version&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Value&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key value to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  ||strValue||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Registry Key","helpString":"Enter the key path to query","defaultValue":"","promptText":"e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft","maxChars":0,"key":"strKey","restrict":null,"validationExpressions":[{"helpString":"Value must be at least 5 characters","expression":"\\S{5}","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"},{"label":"Registry Value","helpString":"Enter the key value to query","defaultValue":"","promptText":"e.g. Version","maxChars":0,"key":"strValue","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>119</cache_row_id>
          </sensor>
          <sensor>
            <id>238</id>
            <name>Screen Saver Active</name>
            <hash>1526750078</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Indicates whether a screen saver is enabled on the client machine.
Example: True</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Screen Saver Active
&amp;#039;========================================

&amp;#039; This sensor will report on whether the screen saver is active

Option Explicit

WScript.Echo GetScreenSaverActive

Function GetScreenSaverActive
	
	Dim objWMIService, colDesktops
	Dim strComputer, objDesktop, bIsActive
	
	strComputer = &amp;quot;.&amp;quot;
	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
		&amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;) 

	Set colDesktops = objWMIService.ExecQuery _ 
		(&amp;quot;Select ScreenSaverActive from Win32_Desktop&amp;quot;) 
	If Not IsNull(colDesktops) Then
		For Each objDesktop In colDesktops	
			bIsActive = objDesktop.ScreenSaverActive
		Next
		If bIsActive Then
			GetScreenSaverActive = &amp;quot;True&amp;quot;
		Else
			GetScreenSaverActive = &amp;quot;False&amp;quot;
		End If
	Else
		GetScreenSaverActive = &amp;quot;WMI Error&amp;quot;
	End If
	
	&amp;#039;Cleanup
	Set colDesktops = Nothing
	Set objWMIService = Nothing
End Function &amp;#039;GetScreenSaverActive</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>120</cache_row_id>
          </sensor>
          <sensor>
            <id>240</id>
            <name>Established Connections</name>
            <hash>1528412180</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Any established connections currently being made.  This multi-column Sensor displays the process responsible for the connection, the display name of the process (if available), and the target IP Address and port.  Processes and IP ranges can be excluded in the Sensor definition.
Example: chrome.exe | Google Chrome | 173.194.79.99:80</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Established Connections
&amp;#039;========================================

showProcess = True
showPort = True
showDNSName = False

Dim strcommand, results, excludeProcesses, excludeSubnets, taniumDebug
Dim strSep : strSep = &amp;quot;|&amp;quot;
&amp;#039; This is a multi-column sensor that looks like:
&amp;#039;Process|Name|Target IP

excludeProcesses = &amp;quot;TaniumClient.exe,TaniumReceiver.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;chrome.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;iexplore.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;chrome.exe, iexplore.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;trillian.exe&amp;quot;

excludeSubnets = &amp;quot;127.0.0.0:255.255.255.0&amp;quot;
&amp;#039;excludeSubnets = &amp;quot;72.14.213.0:255.255.255.0, 74.125.223.0:255.255.255.0-74.125.225.0:255.255.255.0&amp;quot;

taniumDebug = False


excludeProcesses = Split(LCase(excludeProcesses), &amp;quot;,&amp;quot;)
excludeSubnets = Split(excludeSubnets, &amp;quot;,&amp;quot;)

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)  
query = &amp;quot;select name, executablepath, processId from win32_process&amp;quot;
Set colResults = objWMIService.ExecQuery(query)

&amp;#039;dictionary for process-app pairs
Set processes = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

For Each result In colResults 
	processId = CStr(result.ProcessId)
	processPath = result.ExecutablePath
	processes.Add processId, result.Name &amp;amp; &amp;quot;,&amp;quot; &amp;amp; processPath &amp;#039; tie IDs to exes,path - split later
Next

strcommand = &amp;quot;cmd /c netstat -aon -p TCP | find &amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;TCP&amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot; | find &amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;ESTABLISHED&amp;quot; &amp;amp; Chr(34)

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Set objScriptExec = objShell.Exec (strCommand)
strPingResults = LCase(objScriptExec.StdOut.ReadAll)

results = Split(strPingResults, vbCrLf)
j = 0

For Each line In results
	line = cleanWhitespace(Trim(line))
	
	If line &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then 
		lineResults = Split(line)
		i = 0
		Dim strPort, strPid, strConnectionType, strForeignIp, strApp
		For Each word In lineResults
			If i = 1 Then
				strPort = word
			ElseIf i = 2 Then
				strForeignIp = word
			ElseIf i = 3 Then
				strConnectionType = word
			ElseIf i = 4 Then
				strPid = word
			End If
			
			i = i + 1
		Next
		
		&amp;#039;DO NOT INCLUDE EXCLUDED APPS
		strAppEntry = processes.Item(strPid) &amp;#039; looks like process.exe, Process Path
		arrAppEntry = Split(strAppEntry,&amp;quot;,&amp;quot;)
		strAppExe = arrAppEntry(0)
		strAppPath = arrAppEntry(1)
		
		isNotExcludedApp = Not(ContainedInArray(LCase(strAppExe), excludeProcesses))
		
		&amp;#039;DO NOT INCLUDE EXCLUDED SUBNETS
		isNotExcludedSubnet = Not(ContainedInSubnet(strForeignIp, excludeSubnets))
		
		If Not(IsEmpty(strAppExe)) _
			And isNotExcludedApp _ 
			And isNotExcludedSubnet Then
			
			If Not showPort Then 
				arrTemp = Split(strForeignIp, &amp;quot;:&amp;quot;)
				strForeignIp = arrTemp(0)
			End If
			
			If showDNSName Then
				arrTemp = Split(strForeignIp, &amp;quot;:&amp;quot;)
				strForeignIp = ReverseDNSLookup(arrTemp(0))
				If UBound(arrTemp) &amp;gt;=1 Then 
					strForeignIp = strForeignIp &amp;amp; &amp;quot;:&amp;quot; &amp;amp; arrTemp(1)
				End If
			End If 
			
			If showProcess Then
				results(j) = strAppExe &amp;amp; strSep &amp;amp; ProcessNameToApplicationName(strAppPath,strAppExe) &amp;amp; strSep &amp;amp; strForeignIp
			Else
				results(j) = strSep &amp;amp; strSep &amp;amp; strForeignIp
			End If	
		Else
			If taniumDebug Then WScript.Echo &amp;quot;      excluded: &amp;quot; &amp;amp; strApp &amp;amp; &amp;quot; &amp;quot; &amp;amp; strForeignIp
			results(j) = &amp;quot;&amp;quot;   
		End If 
		
		j = j + 1
	End If
Next

results = RemDups(results)

If UBound(results) &amp;lt; 1 Then
	If GetLocale() &amp;lt;&amp;gt; 1033 Then
		WScript.Echo &amp;quot;English Language OS Required&amp;quot;
	End If
End If
 
For Each result In results 
	WScript.Echo result
Next

WScript.Quit

Function ReverseDNSLookup(strIPAddress)
	ReverseDNSLookup = strIPAddress	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	
	Set objExecCommand = objShell.Exec(&amp;quot;%comspec% /c nslookup &amp;quot; &amp;amp; strIPAddress)
	
	strResults = objExecCommand.StdOut.ReadAll
	
	If InStr(strResults, &amp;quot;Name:&amp;quot;) Then
		arrNameTemp = Split(strResults, &amp;quot;Name:&amp;quot;)
		arrName = Split(Trim(arrNameTemp(1)), Chr(13))
		
		ReverseDNSLookup = arrName(0)
	End If	
End Function

Function ContainedInSubnet(str, arr)
	Dim strIp, strSubnet, strMask
	temp = Split(str, &amp;quot;:&amp;quot;)
	strIp = temp(0)
	
	For Each item In arr
		If InStr(item, &amp;quot;-&amp;quot;) Then &amp;#039;Subnet range
			temp = Split(item, &amp;quot;-&amp;quot;)
			lower = Split(temp(0), &amp;quot;:&amp;quot;)
			upper = Split(temp(1), &amp;quot;:&amp;quot;)
			lowerSubnet = Trim(lower(0))
			lowerMask = Trim(lower(1))
			upperSubnet = Trim(upper(0))
			upperMask = Trim(upper(1))
			
			If StringToBinary(strIp) &amp;gt; StringToBinary(Subnet(lowerSubnet, lowerMask)) _
				And StringToBinary(strIp) &amp;lt; StringToBinary(Subnet(upperSubnet, upperMask)) Then
				ContainedInSubnet = True
				Exit Function
			End If 
		Else &amp;#039;Single subnet
			parts = Split(item, &amp;quot;:&amp;quot;)
			strSubnet = Trim(parts(0))
			strMask = Trim(parts(1))
			If Subnet(strIp, strMask) = Subnet(strSubnet, strMask) Then
				ContainedInSubnet = True
				Exit Function
			End If
		End If 
	Next
	ContainedInSubnet = False
End Function

Function ContainedInArray(str, arr)
	For Each item In arr 
		If str = Trim(item) Then
			ContainedInArray = True
			Exit Function
		End If   
	Next
	ContainedInArray = False
End Function

Function cleanWhitespace(strStarter)
	intStarter = Len(strStarter)
	For i = intStarter To 2 Step -1
		strChars = Space(i)
		strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
	Next
	cleanWhitespace = strStarter
End Function

Function RemDups(ByVal anArray)
	Dim d, item, thekeys
	Set d = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
	d.removeall
	d.CompareMode = 0
	For Each item In anArray
		If Len(item) &amp;gt; 0 Then
			If Not d.Exists(item) Then d.Add item, item
		End If
	Next
	thekeys = d.keys
	Set d = Nothing
	RemDups = thekeys
End Function

Function Subnet(strAddress, strMask)
	intSubnetLength = SubnetLength(strMask)
	Subnet = BinaryToString(Left(StringToBinary(strAddress), intSubnetLength) &amp;amp; String(32 - intSubnetLength, &amp;quot;0&amp;quot;))
End Function

Function SubnetLength(strMask)
	strMaskBinary = StringToBinary(strMask)
	SubnetLength = Len(Left(strMaskBinary, InStr(strMaskBinary, &amp;quot;0&amp;quot;) - 1))
End Function

Function BinaryToString(strBinary)
	For intOctetPos = 1 To 4
		strOctetBinary = Right(Left(strBinary, intOctetPos * 8), 8)
		intOctet = 0
		intValue = 1
		For intBinaryPos = 1 To Len(strOctetBinary)
			If Left(Right(strOctetBinary, intBinaryPos), 1) = &amp;quot;1&amp;quot; Then intOctet = intOctet + intValue
			intValue = intValue * 2
		Next
		If BinaryToString = Empty Then BinaryToString = CStr(intOctet) Else BinaryToString = BinaryToString &amp;amp; &amp;quot;.&amp;quot; &amp;amp; CStr(intOctet)
	Next
End Function

Function StringToBinary(strAddress)
	objAddress = Split(strAddress, &amp;quot;.&amp;quot;, -1)
	For Each strOctet In objAddress
		intOctet = CInt(strOctet)
		strOctetBinary = &amp;quot;&amp;quot;
		For x = 1 To 8
			If intOctet Mod 2 &amp;gt; 0 Then
				strOctetBinary = &amp;quot;1&amp;quot; &amp;amp; strOctetBinary
			Else
				strOctetBinary = &amp;quot;0&amp;quot; &amp;amp; strOctetBinary
			End If
			intOctet = Int(intOctet / 2)
		Next
		StringToBinary = StringToBinary &amp;amp; strOctetBinary
	Next
End Function

Function ProcessNameToApplicationName(strExecutablePath, strExecutableName)
	&amp;#039; This function will return the full application name of a running executable
	
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	arrPathParts = Split(strExecutablePath,&amp;quot;\&amp;quot;)
	
	If UBound(arrPathParts) &amp;lt; 0 Then &amp;#039;can be -1 for no split, such as the System process
		ProcessNameToApplicationName = strExecutableName
		Set fso = Nothing
		Exit Function
	End If
	strExecutable = arrPathParts(UBound(arrPathParts))
	
	If fso.FileExists(strExecutablePath) Then
		Dim strOutput, fileVersion, fileVersionOutput, fullName
		
		Set execFile = fso.GetFile(strExecutablePath)
		fullName = GetDescription(execFile.ParentFolder.Path, strExecutable)
		If Not fullName = &amp;quot;&amp;quot; Then
			ProcessNameToApplicationName = fullName
		Else
			ProcessNameToApplicationName = strExecutableName
		End If
	Else &amp;#039; file doesn&amp;#039;t exist or inaccessible
		ProcessNameToApplicationName = strExecutableName
	End If
	
End Function &amp;#039;ProcessNameToApplicationName

Function GetDescription(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &amp;quot;File description&amp;quot;)
	If IsEmpty(descIndex) Then
		descIndex = GetAttributeIndex(folderPath, &amp;quot;Description&amp;quot;)
	End If
	GetDescription = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function GetFileProperty(folderPath, fileName, fileProperty)
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	GetFileProperty = objFolder.GetDetailsOf(objFolder.Parsename(fileName), fileProperty)
End Function

Function GetAttributeIndex(folderPath, attrTarget)
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	For i = 0 To 50
		attrName = objFolder.GetDetailsOf(objFolder.Items, i)
		If LCase(attrName) = LCase(attrTarget) Then
			GetAttributeIndex = i
			Exit Function
		End If
	Next
	
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
if [ ! -d ./tmp ]; then
  mkdir ./tmp
  chmod 0700 ./tmp
fi

tmpfile=&amp;quot;./tmp/tanium.$$&amp;quot;
rm -f &amp;quot;$tmpfile&amp;quot;
lsof -p ^$PPID -iTCP -sTCP:ESTABLISHED -P +c 15 -n  &amp;gt; &amp;quot;$tmpfile&amp;quot;
cat &amp;quot;$tmpfile&amp;quot; | awk &amp;#039;$1 != &amp;quot;COMMAND&amp;quot; { print $1&amp;quot;|&amp;quot;$1&amp;quot;|&amp;quot;substr($0,index($0,&amp;quot;&amp;gt;&amp;quot;)+1,index($0,&amp;quot; (ESTABLISHED)&amp;quot;)-(index($0,&amp;quot;&amp;gt;&amp;quot;)+1))}&amp;#039;
rm -f &amp;quot;$tmpfile&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
if [ ! -d ./tmp ]; then
  mkdir ./tmp
  chmod 0700 ./tmp
fi

tmpfile=&amp;quot;./tmp/tanium.$$&amp;quot;
rm -f &amp;quot;$tmpfile&amp;quot;
lsof -p ^$PPID -iTCP -sTCP:ESTABLISHED -P +c 15 -n  &amp;gt; &amp;quot;$tmpfile&amp;quot;
cat &amp;quot;$tmpfile&amp;quot; | awk &amp;#039;$1 != &amp;quot;COMMAND&amp;quot; { print $1&amp;quot;|&amp;quot;$1&amp;quot;|&amp;quot;substr($0,index($0,&amp;quot;&amp;gt;&amp;quot;)+1,index($0,&amp;quot; (ESTABLISHED)&amp;quot;)-(index($0,&amp;quot;&amp;gt;&amp;quot;)+1))}&amp;#039;
rm -f &amp;quot;$tmpfile&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Process</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Target IP</name>
                <index>2</index>
                <value_type>IPAddress</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>121</cache_row_id>
          </sensor>
          <sensor>
            <id>242</id>
            <name>Operating System Boot Directory</name>
            <hash>1544486184</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the directory the Operating System boots from.
Example:\\Windows</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select BootDirectory from win32_BootConfiguration</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
df -h / | grep -v Filesystem | awk &amp;#039;{ print $1 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>122</cache_row_id>
          </sensor>
          <sensor>
            <id>244</id>
            <name>USB Device</name>
            <hash>15451865</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns a list of USB devices currently plugged in to the client machine.
Example: HID Keyboard Device</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from Win32_PnPEntity where (Status=&amp;#039;OK&amp;#039; and DeviceID like &amp;#039;%HID%&amp;#039;)</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>123</cache_row_id>
          </sensor>
          <sensor>
            <id>246</id>
            <name>Sound Card</name>
            <hash>1579270802</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Name of sound card in client machine.
Example: SoundMAX Integrated Digital HD Audio</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Name from Win32_SoundDevice</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
system_profiler SPAudioDataType | grep &amp;quot;^Audio:&amp;quot; -A2 | tail -n 1 | sed -e &amp;#039;s/^ *//&amp;#039; -e &amp;#039;s/:$//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>124</cache_row_id>
          </sensor>
          <sensor>
            <id>248</id>
            <name>BIOS Vendor</name>
            <hash>1580351176</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Manufacturer or vendor of the BIOS.
Example: Dell, Inc.</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Manufacturer from win32_BIOS</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode -s bios-vendor</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
echo &amp;quot;IBM&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>125</cache_row_id>
          </sensor>
          <sensor>
            <id>250</id>
            <name>System Event Log IDs</name>
            <hash>1591480148</hash>
            <string_count>0</string_count>
            <category>Windows Event Logs</category>
            <description>Event codes for Windows event logs of type System and Error.
Example: 8009</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select EventCode from Win32_NTLogEvent where LogFile = &amp;#039;System&amp;#039; and Type = &amp;#039;Error&amp;#039; and TimeWritten &amp;gt; &amp;#039;$$GETUTCDATE$$86000$$&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>126</cache_row_id>
          </sensor>
          <sensor>
            <id>252</id>
            <name>Registry Value Data</name>
            <hash>1591958393</hash>
            <string_count>0</string_count>
            <category>Registry</category>
            <description>Returns the data of a supplied value in a supplied registry key.  If the hive is HKEY_USERS, it will attempt to output the user name associated with the key.  HKEY_CURRENT_USER will only return data for the SYSTEM account which the Tanium Client runs as.
Example: John | 4.1.314.7020 | REG_SZ|32-bit</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Registry Value Data
&amp;#039;========================================

&amp;#039;Columns:
&amp;#039; User | Data | Type | Architecture | KeyPath | Value

&amp;#039; Value is a hidden column for later use in sensor-fed actions (modify, delete)

strKey = unescape(&amp;quot;||strKey||&amp;quot;)
strValue = unescape(&amp;quot;||strValue||&amp;quot;)


&amp;#039; Pass (Default) in for value name to indicate default value
If LCase(strValue) = &amp;quot;(default)&amp;quot; Then strValue = &amp;quot;&amp;quot;


&amp;#039;strKey = &amp;quot;HKLM\Software\Tanium\Tanium Client
&amp;#039;strValue = &amp;quot;Version&amp;quot;

&amp;#039;strKey = &amp;quot;HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Internet Settings&amp;quot;
&amp;#039;strValue = &amp;quot;Emailname&amp;quot;
strSep = &amp;quot;~~&amp;quot;


&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive

&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)

If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
	For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserName = GetUserForSIDLocal(objReg,strUserKey)
			If strUserName = False Then strUserName = strUserKey
			strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
			hasValues32 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 32)
			If hasValues32 Then hasAnyResult = True
		End If
	Next
Else &amp;#039; was another hive
	hasValues32 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 32)
	If hasValues32 Then hasAnyResult = True
End If

&amp;#039; Do not return second value set in different context unnecessarily
Dim strKeyPrefix,bSkipSecondContextCheck
bSkipSecondContextCheck = False
strKeyPrefix = Split(strKey,&amp;quot;\&amp;quot;)(0) &amp;#039; Software, for instance, even for HEKY_USERS

Select Case Ucase(strKeyPrefix)
	Case &amp;quot;SOFTWARE&amp;quot;
		bSkipSecondContextCheck = False
	Case Else
		bSkipSecondContextCheck = True
End Select

If Is64 And Not bSkipSecondContextCheck Then
	Set objCtx = GetObjCtx(64)
	Set objReg = GetObjReg(objCtx)
	If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
	&amp;#039; go through each User&amp;#039;s hive in 64-bit context
		For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
				strUserName = GetUserForSIDLocal(objReg,strUserKey)
				If strUserName = False Then strUserName = strUserKey
				strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
				hasValues64 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 64)
				If hasValues64 Then hasAnyResult = True	
			End If
		Next
	Else &amp;#039; was another hive
		hasValues64 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 64)
		If hasValues64 Then hasAnyResult = True
	End If
End If

If Not (hasAnyResult) Then
	WScript.Echo &amp;quot;Key/Value not found&amp;quot;
End If

&amp;#039;Goes through all values in a key, returns True if strValue is found
Function CheckValues(objReg, objCtx, constHive, strKey, strValue, intBit)
	Dim Inparams, Outparams
	
	&amp;#039; Check whether looking for Default value
	If strValue = &amp;quot;&amp;quot; Then
		&amp;#039; Explicitly check for default value
		EchoValue objReg, objCtx, constHive, strKey, &amp;quot;&amp;quot;, 1, intBit
		CheckValues = True
		Exit Function
	End If
	
	Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
	
	arrNames = Outparams.sNames
	arrTypes = Outparams.Types

	If Not IsNull(arrNames) Then
		For i = LBound(arrNames) To UBound(arrNames)
			strValueName = arrNames(i)
			
			&amp;#039;if strValue is found, echo
			If LCase(strValueName) = LCase(strValue) Then
				EchoValue objReg, objCtx, constHive, strKey, strValue, arrTypes(i), intBit
				CheckValues = True
				Exit Function
			End If
		Next
	End If
	CheckValues = False
End Function

Function GetDisplayString(strKey, strType, strValue, intBit)
	If intBit = 64 Then
		strArch = &amp;quot;64-bit&amp;quot;
	Else
		strArch = &amp;quot;32-bit&amp;quot;
	End If

	GetDisplayString = _
		strValue &amp;amp; strSep &amp;amp; _
		strType &amp;amp; strSep &amp;amp; _
		strArch
End Function

Function EchoValue(objReg, objCtx, constHive, strKey, strValue, constType, intBit)
	&amp;#039; Note the key that was being searched, will be a hidden column
	strOutputKey = strHive&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
	Dim objInParams, objOutParams
	Select Case constType
		Case REG_SZ  
			Set objInParams = objReg.Methods_(&amp;quot;GetStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetStringValue&amp;quot;, objInParams, , objCtx)
			
			WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_SZ&amp;quot;, objOutParams.sValue, intBit) _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
		Case REG_EXPAND_SZ
			Set objInParams = objReg.Methods_(&amp;quot;GetExpandedStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetExpandedStringValue&amp;quot;, objInParams, , objCtx)
	
			WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_EXPAND_SZ&amp;quot;, objOutParams.sValue, intBit) _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
		Case REG_BINARY
			Set objInParams = objReg.Methods_(&amp;quot;GetBinaryValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetBinaryValue&amp;quot;, objInParams, , objCtx)

			strBytes = &amp;quot;&amp;quot;
			For Each uByte in objOutParams.uValue
				strTemp = Hex(uByte)
				If Len(strTemp) &amp;lt; 2 Then
					strTemp = &amp;quot;0&amp;quot; &amp;amp; strTemp
				End If	
				strBytes = strBytes &amp;amp; strTemp &amp;amp; &amp;quot; &amp;quot;
			Next
			
			WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_BINARY&amp;quot;, strBytes, intBit) _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
		Case REG_DWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetDWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetDWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_DWORD&amp;quot;, CStr(objOutParams.uValue), intBit) _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
		Case REG_QWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetQWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetQWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_QWORD&amp;quot;, CStr(objOutParams.uValue), intBit) _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
		Case REG_MULTI_SZ
		    Set objInParams = objReg.Methods_(&amp;quot;GetMultiStringValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetMultiStringValue&amp;quot;, objInParams, , objCtx)
		
			arrValues = objOutParams.sValue
			strResponse = &amp;quot;&amp;quot;

			For Each strTemp In arrValues
				WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_MULTI_SZ&amp;quot;, strTemp, intBit) _
					&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
			Next

	End Select
End Function


Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	GetSubKeys = Outparams.sNames
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function


Function GetHiveConst(hive)
	Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
	Const HKEY_CURRENT_USER   = &amp;amp;H80000001
	Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
	Const HKEY_USERS          = &amp;amp;H80000003

	Select Case UCase(hive)
		Case &amp;quot;HKLM&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKCR&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
			GetHiveConst = HKEY_CURRENT_USER
		Case &amp;quot;HKEY_USERS&amp;quot;
			GetHiveConst = HKEY_USERS
	End Select
	
	If IsEmpty(GetHiveConst) Then
		WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
		WScript.Quit
	End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
			strUserData = Left(strUserData,intDatPos - 1)
			&amp;#039; find last backslash
			intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
			&amp;#039; get right from that pos
			strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
			GetUserForSIDLocal = strUserData
		Else
			strUserData = False
		End If
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;},{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strValue&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Version. Use (Default) to get default value.&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Value&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key value to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  ||strValue||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;},{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strValue&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Version. Use (Default) to get default value.&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Value&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key value to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  ||strValue||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;},{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strValue&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Version. Use (Default) to get default value.&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Value&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key value to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  ||strValue||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;},{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strValue&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Version. Use (Default) to get default value.&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Value&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key value to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  ||strValue||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Registry Key","helpString":"Enter the key path to query","defaultValue":"","promptText":"e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft","maxChars":0,"key":"strKey","restrict":null,"validationExpressions":[{"helpString":"Value must be at least 5 characters","expression":"\\S{5}","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"},{"label":"Registry Value","helpString":"Enter the key value to query","defaultValue":"","promptText":"e.g. Version. Use (Default) to get default value.","maxChars":0,"key":"strValue","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>~~</delimiter>
            <subcolumns>
              <subcolumn>
                <name>User</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Data</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Type</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Architecture</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>KeyPath</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Value</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>1</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>127</cache_row_id>
          </sensor>
          <sensor>
            <id>254</id>
            <name>Disk Drive Details</name>
            <hash>1652607578</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Multi-column sensor that returns details on the type, size, and free space of all partitions on the machine.
Example:ST3808110AS ATA Device|C:|250G|120G</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; Sensor:  Disk Drive Details
&amp;#039; disk-drive-details.vbs
&amp;#039;
&amp;#039; Multicolumn sensor that returns all of the drive details on a single line

Option Explicit

Dim objWMIService, objDiskDrives, objDiskDrive, objDiskPartitions, objDiskPartition
Dim objLogicalDisks, objLogicalDisk
Dim strEscapedDeviceID

Set objWMIService = GetObject(&amp;quot;winmgmts:{impersonationLevel=Impersonate}!//.&amp;quot;)
Set objDiskDrives = objWMIService.ExecQuery(&amp;quot;SELECT Caption, DeviceID, SerialNumber FROM Win32_DiskDrive&amp;quot;)
 
For Each objDiskDrive In objDiskDrives

    strEscapedDeviceID = _
        Replace(objDiskDrive.DeviceID, &amp;quot;\&amp;quot;, &amp;quot;\\&amp;quot;, 1, -1, vbTextCompare)
    Set objDiskPartitions = objWMIService.ExecQuery _
        (&amp;quot;ASSOCIATORS OF {Win32_DiskDrive.DeviceID=&amp;quot;&amp;quot;&amp;quot; &amp;amp; _
            strEscapedDeviceID &amp;amp; &amp;quot;&amp;quot;&amp;quot;} WHERE &amp;quot; &amp;amp; _
                &amp;quot;AssocClass = Win32_DiskDriveToDiskPartition&amp;quot;)
 
    For Each objDiskPartition In objDiskPartitions
        Set objLogicalDisks = objWMIService.ExecQuery _
            (&amp;quot;ASSOCIATORS OF {Win32_DiskPartition.DeviceID=&amp;quot;&amp;quot;&amp;quot; &amp;amp; _
                objDiskPartition.DeviceID &amp;amp; &amp;quot;&amp;quot;&amp;quot;} WHERE &amp;quot; &amp;amp; _
                    &amp;quot;AssocClass = Win32_LogicalDiskToPartition&amp;quot;)
 
        For Each objLogicalDisk In objLogicalDisks
            WScript.Echo objDiskDrive.Caption &amp;amp; &amp;quot;|&amp;quot; &amp;amp; objLogicalDisk.DeviceID &amp;amp; &amp;quot;|&amp;quot; &amp;amp; _
            SizeInGB(objLogicalDisk.Size) &amp;amp; &amp;quot;|&amp;quot; &amp;amp; SizeInGB(objLogicalDisk.FreeSpace)
        Next
    Next
Next

Function SizeInGB(orgSize)
	Dim dblSize, intSize, strResult
	strResult = &amp;quot;&amp;quot;
    If Not IsNull(orgSize) Then
	    dblSize = CDbl(orgSize)
	    dblSize = dblSize / 1024 / 1024 / 1024
	    intSize = CInt(dblSize)
		strResult = intSize &amp;amp; &amp;quot; GB&amp;quot;
    End If
    
    SizeInGB = strResult
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Drive Letter</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Size</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Free Space</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>128</cache_row_id>
          </sensor>
          <sensor>
            <id>256</id>
            <name>High CPU Consumption</name>
            <hash>1670489640</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Indicates whether the client machine is currently experiencing high utilization of its CPU.
Example: Under threshold</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; High CPU Consumption
&amp;#039;========================================

Const HKLM = &amp;amp;H80000002 
strComputer = &amp;quot;.&amp;quot;

Set objWMIService = _
  	GetObject(&amp;quot;Winmgmts:{impersonationlevel=impersonate}!\Root\Cimv2&amp;quot;)

Set colProcItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process where Name = &amp;#039;Idle&amp;#039;&amp;quot;)
For Each objItem in colProcItems
	N1 = objItem.PercentProcessorTime
	D1 = objItem.TimeStamp_Sys100NS
Next

WScript.sleep(3000)
	
Set colProcItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process where Name = &amp;#039;Idle&amp;#039;&amp;quot;)
For Each objItem in colProcItems
	N2 = objItem.PercentProcessorTime
	D2 = objItem.TimeStamp_Sys100NS
Next

numLogicalProcessors = 0

Set colItems = objWMIService.ExecQuery(&amp;quot;SELECT * FROM Win32_Processor&amp;quot;) 
For Each objItem in colItems 
	Dim intLogicalProcessors 
	intLogicalProcessors = 1
	
	On Error Resume Next
	intLogicalProcessors = CInt(objItem.NumberOfLogicalProcessors)
	On Error Goto 0

	numLogicalProcessors = numLogicalProcessors + intLogicalProcessors
Next

&amp;#039; CounterType - PERF_100NSEC_TIMER
&amp;#039; Formula = ((N2 - N1) / (D2 - D1)) x 100
If ( 0 = (D2-D1) ) Or D1 &amp;gt; D2 then
	WScript.echo &amp;quot;System Timestamp Error&amp;quot;
ElseIf N1 &amp;gt; N2 Then
	WScript.Echo &amp;quot;Performance Counter Error&amp;quot;
Else
	percentage = Round(100 - ((N2 - N1) / (D2 - D1)) * 100 / numLogicalProcessors, 0)
	If percentage &amp;gt; 80 Then
		WScript.echo percentage &amp;amp; &amp;quot; %&amp;quot;
	Else
		WScript.echo &amp;quot;Under 80% threshold&amp;quot;
	End if
End if

Set wmi_service = nothing</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>129</cache_row_id>
          </sensor>
          <sensor>
            <id>258</id>
            <name>System Drive</name>
            <hash>170942492</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Hard drive location hosting system directory on Windows machines.
Example: C:</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select SystemDrive from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>130</cache_row_id>
          </sensor>
          <sensor>
            <id>260</id>
            <name>High Memory Consumption</name>
            <hash>1718946935</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Indicates whether the machine is above an acceptable threshold for memory utilization.
Example: Under threshold</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; High Memory Consumption
&amp;#039;========================================

Set oWsh = WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)  
Set oWshSysEnv = oWsh.Environment(&amp;quot;PROCESS&amp;quot;)  
Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)     
&amp;#039;Gets MEMORY Usage  
Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;Select * FROM Win32_PerfFormattedData_PerfOS_Memory &amp;quot;)  
For Each objItem In colItems     
strLinePercentCommittedBytesInUse = strLinePercentCommittedBytesInUse &amp;amp; &amp;quot; &amp;quot; &amp;amp; objItem.PercentCommittedBytesInUse  
Next    
If strLinePercentCommittedBytesInUse &amp;gt; 60 THEN  
wscript.echo strLinePercentCommittedBytesInUse &amp;amp; &amp;quot; percent&amp;quot;  
Else   
wscript.echo &amp;quot;Under Threshold&amp;quot;  
End If</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>131</cache_row_id>
          </sensor>
          <sensor>
            <id>262</id>
            <name>Local User Password Change Dates</name>
            <hash>1723627713</hash>
            <string_count>0</string_count>
            <category>Security</category>
            <description>Returns the last time the password was set for each user account.
Example:  taniumuser|2013-10-31</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Set objNetwork = CreateObject(&amp;quot;Wscript.Network&amp;quot;)
strComputer = objNetwork.ComputerName
Set colAccounts = GetObject(&amp;quot;WinNT://&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;&amp;quot;)
colAccounts.Filter = Array(&amp;quot;user&amp;quot;)
For Each objUser In colAccounts
  intPasswordAge = objUser.PasswordAge
  intPasswordAge = intPasswordAge * -1 
  dtmChangeDate = DateAdd(&amp;quot;s&amp;quot;, intPasswordAge, Now)
  strChangeDate = Year(dtmChangeDate)
  strChangeDate = strChangeDate &amp;amp; &amp;quot;-&amp;quot; &amp;amp; Right(&amp;quot;0&amp;quot; &amp;amp; Month(dtmChangeDate), 2)
  strChangeDate = strChangeDate &amp;amp; &amp;quot;-&amp;quot; &amp;amp; Right(&amp;quot;0&amp;quot; &amp;amp; Day(dtmChangeDate), 2)
  Wscript.Echo objUser.Name &amp;amp; &amp;quot;|&amp;quot; &amp;amp; strChangeDate
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

for TUSER in $( grep -v &amp;quot;/bin/false&amp;quot; /etc/passwd | awk -F &amp;#039;:&amp;#039; &amp;#039;{ print $1 }&amp;#039; ); do
  TLAST=&amp;quot;$( chage -l &amp;quot;$TUSER&amp;quot; | grep &amp;quot;Last password change&amp;quot; | awk -F &amp;#039;: &amp;#039; &amp;#039;{ print $2 }&amp;#039; )&amp;quot;
  TDATE=&amp;quot;$( date -d &amp;quot;$TLAST&amp;quot; &amp;quot;+%Y-%m-%d&amp;quot; )&amp;quot;
  echo &amp;quot;$TUSER|$TDATE&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

for TUSER in $( dscl . list /Users | grep -v &amp;quot;^_.*&amp;quot; ); do
  # exclude daemon, nobody, and root because everything segfaults on them
  if [ &amp;quot;$TUSER&amp;quot; != &amp;quot;daemon&amp;quot; ] &amp;amp;&amp;amp; [ &amp;quot;$TUSER&amp;quot; != &amp;quot;nobody&amp;quot; ] &amp;amp;&amp;amp; [ &amp;quot;$TUSER&amp;quot; != &amp;quot;root&amp;quot; ]; then
    dscl . read &amp;quot;/Users/$TUSER&amp;quot; PasswordPolicyOptions | grep -v &amp;quot;PasswordPolicyOptions:&amp;quot; &amp;gt; temp.plist
    TLAST=&amp;quot;$( /usr/libexec/PlistBuddy -c &amp;#039;print passwordLastSetTime&amp;#039; temp.plist )&amp;quot;
    TDATE=&amp;quot;$( date -j -f &amp;quot;%a %b %d %T %Z %Y&amp;quot; &amp;quot;$TLAST&amp;quot; &amp;quot;+%Y-%m-%d&amp;quot; )&amp;quot;
    echo &amp;quot;$TUSER|$TDATE&amp;quot;
  fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>60</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>User</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Last Password Set Time</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>132</cache_row_id>
          </sensor>
          <sensor>
            <id>264</id>
            <name>Network Throughput Outbound</name>
            <hash>1735107559</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the current output throughput, in KB/Sec, of the network interface used to connect to the tanium server.
Example: 1024 KB/S</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Network Throughput Outbound
&amp;#039;========================================

&amp;#039; This sensor will use windows performance counters
&amp;#039; and attempt to retrieve network traffic information
&amp;#039; only for the interface being used to connect to the tanium server
&amp;#039; results are in kilobytes per second

Option Explicit

Dim strTaniumIPAddress: strTaniumIPAddress = GetTaniumIPAddress
Dim strComputer: strComputer = &amp;quot;.&amp;quot;


Dim strDescriptionToMatch, strNameToMatch, strIPAddress, strFinalOutputString
Dim objWMIService, colItems, objItem

&amp;#039; First we get the &amp;quot;Name&amp;quot; property of the adapter with our target IP address
&amp;#039; out of WMI.  Because Name is the closest thing to match the Description
&amp;#039; field in the performance counter, but it&amp;#039;s not exact due to how some
&amp;#039; characters are displayed, we will remove troublesome characters
&amp;#039; and attempt to match on that

&amp;#039; Since the entire sensor&amp;#039;s output depends on if the two strings match, we
&amp;#039; can set the one string to something it won&amp;#039;t match on (because _) to be safe
strDescriptionToMatch = &amp;quot;_ImpossibleToMatch&amp;quot;

Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_NetworkAdapterConfiguration where IPEnabled = True&amp;quot;,,48)
For Each objItem In colItems
	For Each strIPAddress In objItem.IPAddress
		If strIPAddress = strTaniumIPAddress Then
			&amp;#039; WScript.Echo &amp;quot;IP Address Tanium is using: &amp;quot; &amp;amp; strIPAddress
			strDescriptionToMatch = CleanString(objItem.Description)
			&amp;#039; WScript.Echo &amp;quot;Description to be matched: &amp;quot; &amp;amp; strDescriptionToMatch
		End If
	Next
Next

Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfFormattedData_Tcpip_NetworkInterface&amp;quot;,,48)

For Each objItem in colItems
	strNameToMatch = CleanString(objItem.Name)
	&amp;#039; WScript.Echo &amp;quot;Name: &amp;quot; &amp;amp; strNameToMatch
	If LCase(strNameToMatch) = LCase(strDescriptionToMatch) Then
		&amp;#039; WScript.Echo &amp;quot;I have matched &amp;quot; &amp;amp; strNameToMatch &amp;amp; &amp;quot; and &amp;quot; &amp;amp; strDescriptionToMatch
		&amp;#039; We can now report bandwidth
		strFinalOutputString = FormatNumber(objItem.BytesSentPersec / 1024,0,-1) &amp;amp; &amp;quot; KB/S&amp;quot;
	End If
Next

If strFinalOutputString = &amp;quot;&amp;quot; Then
	&amp;#039; The two names are too dissimilar, or can&amp;#039;t get IP address for tanium client
	WScript.Echo &amp;quot;Cannot determine which adapter to measure&amp;quot;
Else 
	WScript.Echo strFinalOutputString
End If


&amp;#039; Cleanup
Set objWMIService = Nothing
Set colItems = Nothing 
Set objItem = Nothing

&amp;#039;&amp;#039; End Main Line

&amp;#039;&amp;#039; Helper Functions
Function CleanString(strInput)
&amp;#039; This function will remove non-alphanumeric characters
	Dim objRegEx
	
	Set objRegEx = CreateObject(&amp;quot;VBScript.RegExp&amp;quot;)
	
	objRegEx.Global = True   
	objRegEx.Pattern = &amp;quot;[^A-Za-z0-9]&amp;quot;
	CleanString = objRegEx.Replace(strInput, &amp;quot;&amp;quot;)
	
	Set objRegEx = Nothing
End Function &amp;#039;CleanString

Function GetTaniumIPAddress
&amp;#039; Modified from the ua-scan code to remove the subnet and last octet calculations
&amp;#039; which are irrelevant for these purposes.
&amp;#039; Returns the IP address that the client uses for Tanium activity
&amp;#039; (talking to server and other clients)

	Dim strComputer, objReg, strCommand, objShell, objScriptExec
	Dim strResults, arrPathPingLines, strPathPingLine, arrPathPingWords
	Dim strIPAddress, strTaniumPath, strClientAddress
	Dim strServerName
	
	strComputer = &amp;quot;.&amp;quot;
	Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)
	Const HKLM = &amp;amp;h80000002
	
		
	&amp;#039;&amp;#039;###########Get Tanium Key on 64/32bit computers##########
	
	strTaniumPath = GetTaniumRegistryPath()
	
	
	&amp;#039; if we can pull this from the registry (newer client version), just use that
	objReg.GetStringValue HKLM, strTaniumPath &amp;amp; &amp;quot;\Status&amp;quot;, &amp;quot;ClientAddress&amp;quot;, strClientAddress
	If strClientAddress &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
		strClientAddress = Left(strClientAddress,InStr(strClientAddress,&amp;quot;_&amp;quot;)-1)
		strClientAddress = Right(strClientAddress,len(strClientAddress)-InStrRev(strClientAddress,&amp;quot;:&amp;quot;))
		&amp;#039; WScript.Echo &amp;quot;Found &amp;quot; &amp;amp; strClientAddress &amp;amp; &amp;quot; in Registry&amp;quot;
		GetTaniumIPAddress = strClientAddress
		&amp;#039;Cleanup
		Set objReg = Nothing
		Exit Function
	End If
	
	&amp;#039;Otherwise use PathPing to determine client IP used by Tanium

	&amp;#039;&amp;#039;# Read the ServerName value

	objReg.GetStringValue HKLM, strTaniumPath, &amp;quot;ServerName&amp;quot;, strServerName

	strCommand = &amp;quot;pathping -4 -q 1 -w 1 -n &amp;quot; &amp;amp; strServerName
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	strResults = objScriptExec.StdOut.ReadAll
	
	arrPathPingLines = Split(strResults, vbCrLf)
	For Each strPathPingLine In arrPathPingLines
		arrPathPingWords = Split(CleanWhitespace(Trim(strPathPingLine)), &amp;quot; &amp;quot;)
		If UBound(arrPathPingWords) &amp;gt; 0 Then
			If arrPathPingWords(0) = &amp;quot;0&amp;quot; Then
				strIPAddress = arrPathPingWords(1)
				Exit For
			End If
		End If	
	Next
	
	Set objShell = Nothing
	Set objScriptExec = Nothing
	Set objReg = Nothing

	If Not IsNull(strIPAddress) Then
		GetTaniumIPAddress = strIPAddress
	Else
		GetTaniumIPAddress = False
	End If
End Function &amp;#039;GetTaniumIPAddress

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function CleanWhitespace(strStarter)
	Dim intStarter, i, strChars
	intStarter = Len(strStarter)
	For i = intStarter to 2 Step -1
		strChars = Space(i)
		strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
	Next
	CleanWhitespace = strStarter
End Function &amp;#039;CleanWhiteSpace</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

intKB=1024
intMB=1048576

N=$(ls -1 /sys/class/net | awk &amp;#039;{ print $1 }&amp;#039;| sort -u)

/usr/bin/printf %s &amp;quot;$N&amp;quot; | cut -d &amp;#039; &amp;#039; -f1 | while IFS= read -r line
do
   NIC=$(echo $line)
   P=$(cat /sys/class/net/$NIC/statistics/tx_bytes)
   N1=$P
   sleep 2
   P=$(cat /sys/class/net/$NIC/statistics/tx_bytes)
   N2=$P
   NF=$((($N2-$N1)/2))
   if [ $NF -gt $intMB ]; then
      NF=$(($NF/$intMB))
      echo $NIC:$NF Mbps
   elif [ $NF -gt $intKB ]; then
      NF=$(($NF/$intKB))
      echo $NIC:$NF KB/S
   else
      echo $NIC:$NF B/S
   fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
OS=$(uname -r)

case &amp;quot;$OS&amp;quot; in
&amp;#039;5.11&amp;#039;)
  for iface in `ifconfig -a | egrep -v &amp;#039;ether|inet|lo0&amp;#039; | grep : | awk -F: &amp;#039;{ print $1 }&amp;#039; | sort -u`
  do
    obytes=$(dlstat $iface | grep -v LINK | awk &amp;#039;{ print $5 }&amp;#039;)
    echo &amp;quot;$iface:$obytes&amp;quot;
  done
  ;;

*)
    for t in `kstat -p -c net| grep obytes64 | awk &amp;#039;{ print $1&amp;quot;#&amp;quot;$2 }&amp;#039;`
    do
      iface=$(echo &amp;quot;$t&amp;quot; | awk -F: &amp;#039;{ print $3 }&amp;#039;)
      obytes=$(echo &amp;quot;$t&amp;quot; | awk -F# &amp;#039;{ print $2 }&amp;#039;)
      echo &amp;quot;$iface:$obytes&amp;quot;
    done
  ;;
esac</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>133</cache_row_id>
          </sensor>
          <sensor>
            <id>266</id>
            <name>x64/x86?</name>
            <hash>1742036917</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns whether the client machine is 64-bit or 32-bit (x86).
Example: X86-based PC</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; x64-x86.vbs - returns the architecture of the machine

Option Explicit

If Is64() Then
	WScript.Echo &amp;quot;x64-based PC&amp;quot;
Else
	WScript.Echo &amp;quot;x86-based PC&amp;quot;
End If

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If
	Next
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
#http://www.stata.com/support/faqs/windows/64-bit-compliance/

arch=`uname -a | tr &amp;#039;[A-Z]&amp;#039; &amp;#039;[a-z]&amp;#039;`;

if [[ &amp;quot;${arch}&amp;quot; == *x86_64* ]]; then
	echo &amp;quot;x64-based PC&amp;quot;;
elif [[ &amp;quot;${arch}&amp;quot; == *ia64* ]]; then
	echo &amp;quot;x64-based PC&amp;quot;;
elif [[ &amp;quot;${arch}&amp;quot; == *i686* ]]; then
	echo &amp;quot;x86-based PC&amp;quot;;
 
else
	echo &amp;quot;&amp;quot;;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
#http://www.stata.com/support/faqs/windows/64-bit-compliance/
# Mac OS X 10.6.8 (or greater) is a 64-bit operating system.

arch=`uname -a | tr &amp;#039;[A-Z]&amp;#039; &amp;#039;[a-z]&amp;#039;`;

if [[ &amp;quot;${arch}&amp;quot; == *x86_64* ]]; then
	echo &amp;quot;x64-based PC&amp;quot;;
elif [[ &amp;quot;${arch}&amp;quot; == *ia64* ]]; then
	echo &amp;quot;x64-based PC&amp;quot;;
elif [[ &amp;quot;${arch}&amp;quot; == *i686* ]]; then
	echo &amp;quot;x86-based PC&amp;quot;;
 
else
	echo &amp;quot;&amp;quot;;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>134</cache_row_id>
          </sensor>
          <sensor>
            <id>268</id>
            <name>Ram Slots Unused</name>
            <hash>1785623864</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the number of empty, unused RAM slots.
Example:2</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; RAM Slots Unused
&amp;#039;========================================

&amp;#039; This sensor will return the number of free RAM slots

Option Explicit

FreeRAMSlots

Function FreeRAMSlots
&amp;#039; This function returns the number of free RAM slots
	Dim strComputer
	Dim objWMIService, colPMAs, objPMA
	Dim colPMs, objPM
	
	&amp;#039; How many slots exist
	Dim intSlots: intSlots = 0
	&amp;#039; How many MemoryDevices are present
	Dim intMemorySticks: intMemorySticks = 0
		
	strComputer = &amp;quot;.&amp;quot;
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
	&amp;#039;Use = 3 is system RAM
	&amp;#039; This is the number of slots in the system.
	Set colPMAs = objWMIService.ExecQuery(&amp;quot;Select MemoryDevices from Win32_PhysicalMemoryArray where use=&amp;#039;3&amp;#039;&amp;quot;,,48)
	
	For Each objPMA In colPMAs
		&amp;#039; There should be only one
		&amp;#039; but just in case
		intSlots = intSlots + objPMA.MemoryDevices
		&amp;#039; WScript.Echo &amp;quot;objPMA.MemoryDevices is total slots: &amp;quot; &amp;amp; objPMA.MemoryDevices
	Next
	
	&amp;#039; Cleanup
	Set colPMAs = Nothing
	
	&amp;#039; A new query - asking for DeviceLocator where memory type does not 
	&amp;#039; equal 11 (Flash RAM)
	&amp;#039; DeviceLocator is the label of the socket that holds the memory
	&amp;#039; So this is the number of sockets in the system
	Set colPMs = objWMIService.ExecQuery(&amp;quot;Select DeviceLocator from Win32_PhysicalMemory where MemoryType!=&amp;#039;11&amp;#039;&amp;quot;)
	
	For Each objPM In colPMs
		&amp;#039;Each loop through indicates another slot
		intMemorySticks = intMemorySticks + 1
	Next
	
	&amp;#039; output is total slots minus memory sticks in use
	WScript.Echo intSlots - intMemorySticks
	
	&amp;#039;Cleanup
	Set colPMs = Nothing
	Set objWMIService = Nothing
End Function &amp;#039;FreeRAMSlots</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>NumericInteger</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>135</cache_row_id>
          </sensor>
          <sensor>
            <id>270</id>
            <name>Network Printers</name>
            <hash>1806420230</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns printers which are connected via Network
Example: HP LaserJet 4400c</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select DriverName from Win32_Printer where Network = True</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>136</cache_row_id>
          </sensor>
          <sensor>
            <id>272</id>
            <name>Established Ports by Application</name>
            <hash>1810333216</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Parameterized Sensor that shows which addresses the process is connecting to and over what local port.
Example: 0.0.0.0:17500</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Established Ports by Application
&amp;#039;========================================

Dim strcommand,bHasOutput

check = Trim(Unescape(&amp;quot;||app||&amp;quot;))

strComputer = &amp;quot;.&amp;quot;    
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)  
query = &amp;quot;select name, processId from win32_process where name = &amp;#039;&amp;quot; &amp;amp; check &amp;amp; &amp;quot;&amp;#039;&amp;quot;
Set colResults = objWMIService.ExecQuery(query)

Set processes = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

For Each result In colResults 
   processId = CStr(result.ProcessId)
   processes.Add processId, result.Name
Next

strcommand = &amp;quot;cmd /c netstat -aon -p TCP | find &amp;quot; &amp;amp; chr(34) &amp;amp; &amp;quot;TCP&amp;quot; &amp;amp; Chr(34)

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Set objScriptExec = objShell.Exec (strCommand)
strPingResults = LCase(objScriptExec.StdOut.ReadAll)

results = Split(strPingResults, vbCrLf)
bHasOutput = False
for Each line in results
   line = cleanWhitespace(Trim(line))
   lineResults = Split(line)
   i = 0
   Dim strPort, strPid, strConnectionType
   For Each word In lineResults
      If i = 1 Then
         strPort = word
      ElseIf i = 3 Then
         strConnectionType = word
      ElseIf i = 4 Then
         strPid = word
      End If
      
      i = i + 1
   Next
   If processes.Exists(strPid) And (strConnectionType = &amp;quot;listening&amp;quot; Or strConnectionType = &amp;quot;established&amp;quot;) Then
		WScript.echo strPort &amp;amp; &amp;quot; &amp;quot; &amp;amp; processes.Item(strPid)
		bHasOutput = True
   End If   
Next

If Not bHasOutput Then
	If GetLocale() &amp;lt;&amp;gt; 1033 Then
		WScript.Echo &amp;quot;English Language OS Required&amp;quot;
	End If
End If


Function cleanWhitespace(strStarter)
   intStarter = Len(strStarter)
   For i = intStarter to 2 Step -1
      strChars = Space(i)
      strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
   Next
   cleanWhitespace = strStarter
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

urldecode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/\+/ /g&amp;#039; -e &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

if [ ! -d ./tmp ]; then
  mkdir ./tmp
  chmod 0700 ./tmp
fi

tmpfile=./tmp/tanium.$$
rm -f &amp;quot;$tmpfile&amp;quot;

lsof -p ^$PPID -iTCP -sTCP:ESTABLISHED -P +c 15 -n &amp;gt; &amp;quot;$tmpfile&amp;quot; 
application=$(urldecode &amp;quot;||app||&amp;quot;)
cat $tmpfile | awk -v app=$application &amp;#039;tolower($1)==tolower(app) {print substr($0,index($0,$9),index($0,&amp;quot;&amp;gt;&amp;quot;)-index($0,$9)-1)}&amp;#039;
rm -f &amp;quot;$tmpfile&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

urldecode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/\+/ /g&amp;#039; -e &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

if [ ! -d ./tmp ]; then
  mkdir ./tmp
  chmod 0700 ./tmp
fi

tmpfile=./tmp/tanium.$$
rm -f &amp;quot;$tmpfile&amp;quot;
lsof -p ^$PPID -iTCP -sTCP:ESTABLISHED -P +c 15 -n &amp;gt; &amp;quot;$tmpfile&amp;quot; 
application=$(urldecode &amp;quot;||app||&amp;quot;)
cat $tmpfile | awk -v app=$application &amp;#039;tolower($1)==tolower(app) {print substr($0,index($0,$9),index($0,&amp;quot;&amp;gt;&amp;quot;)-index($0,$9)-1)}&amp;#039;
rm -f &amp;quot;$tmpfile&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 2 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{2}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;app&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. svchost.exe&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Process Name to examine&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the process name to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||app||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 2 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{2}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;app&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. svchost.exe&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Process Name to examine&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the process name to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||app||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Process Name to examine","helpString":"Enter the process name to query","defaultValue":"","promptText":"e.g. svchost.exe","maxChars":0,"key":"app","restrict":null,"validationExpressions":[{"helpString":"Value must be at least 2 characters","expression":"\\S{2}","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>137</cache_row_id>
          </sensor>
          <sensor>
            <id>274</id>
            <name>Network Throughput Percentage</name>
            <hash>1819649983</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the current throughput, as a percentage of total possible, of the network interface used to connect to the tanium server.
Example: 50%</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Network Throughput Percentage
&amp;#039;========================================

&amp;#039; This sensor will use windows performance counters
&amp;#039; and attempt to retrieve network traffic information
&amp;#039; only for the interface being used to connect to the tanium server
&amp;#039; to show the total througput (in and out) as a percentage of capability

Option Explicit

Dim strTaniumIPAddress: strTaniumIPAddress = GetTaniumIPAddress
Dim strComputer: strComputer = &amp;quot;.&amp;quot;

Dim strDescriptionToMatch, strNameToMatch, strIPAddress, strFinalOutputString
Dim objWMIService, colItems, objItem, colNAItems, objNAItem, strMaxSpeed
Dim strRawDescription

&amp;#039; First we get the &amp;quot;Name&amp;quot; property of the adapter with our target IP address
&amp;#039; out of WMI.  Because Name is the closest thing to match the Description
&amp;#039; field in the performance counter, but it&amp;#039;s not exact due to how some
&amp;#039; characters are displayed, we will remove troublesome characters
&amp;#039; and attempt to match on that

&amp;#039; Since the entire sensor&amp;#039;s output depends on if the two strings match, we
&amp;#039; can set the one string to something it won&amp;#039;t match on (because _) to be safe
strDescriptionToMatch = &amp;quot;_ImpossibleToMatch&amp;quot;

Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_NetworkAdapterConfiguration where IPEnabled = True&amp;quot;,,48)
For Each objItem In colItems
	For Each strIPAddress In objItem.IPAddress
		If strIPAddress = strTaniumIPAddress Then
			&amp;#039; WScript.Echo &amp;quot;IP Address Tanium is using: &amp;quot; &amp;amp; strIPAddress
			strDescriptionToMatch = CleanString(objItem.Description)
			strRawDescription = objItem.Description
			&amp;#039; WScript.Echo &amp;quot;Description to be matched: &amp;quot; &amp;amp; strDescriptionToMatch
		End If
	Next
Next

Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfFormattedData_Tcpip_NetworkInterface&amp;quot;,,48)

For Each objItem in colItems
	strNameToMatch = CleanString(objItem.Name)
	&amp;#039; WScript.Echo &amp;quot;Name: &amp;quot; &amp;amp; strNameToMatch
	If LCase(strNameToMatch) = LCase(strDescriptionToMatch) Then
		&amp;#039; WScript.Echo &amp;quot;I have matched &amp;quot; &amp;amp; strNameToMatch &amp;amp; &amp;quot; and &amp;quot; &amp;amp; strDescriptionToMatch

		If Not IsNull(strMaxSpeed) Then &amp;#039; must have this value
			strFinalOutputString = FormatNumber(objItem.BytesTotalPersec / objItem.CurrentBandwidth * 100,0,-1) &amp;amp; &amp;quot;%&amp;quot;
		End If
	End If
Next

If strFinalOutputString = &amp;quot;&amp;quot; Then
	&amp;#039; The two names are too dissimilar, or can&amp;#039;t get IP address for tanium client
	WScript.Echo &amp;quot;Cannot determine which adapter to measure&amp;quot;
Else 
	WScript.Echo strFinalOutputString
End If


&amp;#039; Cleanup
Set objWMIService = Nothing
Set colItems = Nothing 
Set objItem = Nothing

&amp;#039;&amp;#039; End Main Line

&amp;#039;&amp;#039; Helper Functions
Function CleanString(strInput)
&amp;#039; This function will remove non-alphanumeric characters
	Dim objRegEx
	
	Set objRegEx = CreateObject(&amp;quot;VBScript.RegExp&amp;quot;)
	
	objRegEx.Global = True   
	objRegEx.Pattern = &amp;quot;[^A-Za-z0-9]&amp;quot;
	CleanString = objRegEx.Replace(strInput, &amp;quot;&amp;quot;)
	
	Set objRegEx = Nothing
End Function &amp;#039;CleanString

Function GetTaniumIPAddress
&amp;#039; Modified from the ua-scan code to remove the subnet and last octet calculations
&amp;#039; which are irrelevant for these purposes.
&amp;#039; Returns the IP address that the client uses for Tanium activity
&amp;#039; (talking to server and other clients)

	Dim strComputer, objReg, strCommand, objShell, objScriptExec
	Dim strResults, arrPathPingLines, strPathPingLine, arrPathPingWords
	Dim strIPAddress, strTaniumPath, strClientAddress
	Dim strServerName
	
	strComputer = &amp;quot;.&amp;quot;
	Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)
	Const HKLM = &amp;amp;h80000002
	
		
	&amp;#039;&amp;#039;###########Get Tanium Key on 64/32bit computers##########
	
	strTaniumPath = GetTaniumRegistryPath()
	
	
	&amp;#039; if we can pull this from the registry (newer client version), just use that
	objReg.GetStringValue HKLM, strTaniumPath &amp;amp; &amp;quot;\Status&amp;quot;, &amp;quot;ClientAddress&amp;quot;, strClientAddress
	If strClientAddress &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
		strClientAddress = Left(strClientAddress,InStr(strClientAddress,&amp;quot;_&amp;quot;)-1)
		strClientAddress = Right(strClientAddress,len(strClientAddress)-InStrRev(strClientAddress,&amp;quot;:&amp;quot;))
		&amp;#039; WScript.Echo &amp;quot;Found &amp;quot; &amp;amp; strClientAddress &amp;amp; &amp;quot; in Registry&amp;quot;
		GetTaniumIPAddress = strClientAddress
		&amp;#039;Cleanup
		Set objReg = Nothing
		Exit Function
	End If
	
	&amp;#039;Otherwise use PathPing to determine client IP used by Tanium

	&amp;#039;&amp;#039;# Read the ServerName value

	objReg.GetStringValue HKLM, strTaniumPath, &amp;quot;ServerName&amp;quot;, strServerName

	strCommand = &amp;quot;pathping -4 -q 1 -w 1 -n &amp;quot; &amp;amp; strServerName
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	strResults = objScriptExec.StdOut.ReadAll
	
	arrPathPingLines = Split(strResults, vbCrLf)
	For Each strPathPingLine In arrPathPingLines
		arrPathPingWords = Split(CleanWhitespace(Trim(strPathPingLine)), &amp;quot; &amp;quot;)
		If UBound(arrPathPingWords) &amp;gt; 0 Then
			If arrPathPingWords(0) = &amp;quot;0&amp;quot; Then
				strIPAddress = arrPathPingWords(1)
				Exit For
			End If
		End If	
	Next
	
	Set objShell = Nothing
	Set objScriptExec = Nothing
	Set objReg = Nothing

	If Not IsNull(strIPAddress) Then
		GetTaniumIPAddress = strIPAddress
	Else
		GetTaniumIPAddress = False
	End If
End Function &amp;#039;GetTaniumIPAddress

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function CleanWhitespace(strStarter)
	Dim intStarter, i, strChars
	intStarter = Len(strStarter)
	For i = intStarter to 2 Step -1
		strChars = Space(i)
		strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
	Next
	CleanWhitespace = strStarter
End Function &amp;#039;CleanWhiteSpace</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>138</cache_row_id>
          </sensor>
          <sensor>
            <id>276</id>
            <name>Local User Login Dates</name>
            <hash>182214159</hash>
            <string_count>0</string_count>
            <category>Software</category>
            <description>Returns the names and dates of the last users to log in.
Example: John.Doe 7/25/2012</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Local User Login Dates
&amp;#039;========================================

Option Explicit  

&amp;#039;Uses date math - set locale

SetLocale(GetTaniumLocale)
Dim strSep: strSep = &amp;quot;|&amp;quot;
Dim objNetwork : Set objNetwork = CreateObject(&amp;quot;WScript.Network&amp;quot;) 
Dim objGroup : Set objGroup = GetObject(&amp;quot;WinNT://.&amp;quot;) 
objGroup.Filter = Array(&amp;quot;user&amp;quot;) 
Dim objUser 
For Each objUser In objGroup     
On Error Resume Next         
WScript.Echo objUser.name &amp;amp; strSep &amp;amp; left(GetObject(objUser.adsPath).LastLogin,Instr(GetObject(objUser.adsPath).LastLogin,&amp;quot; &amp;quot;))     
On Error GoTo 0 
Next


Function GetTaniumLocale
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

	Dim objWshShell
	Dim intLocaleID
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Tanium\Tanium Client\LocaleID&amp;quot;)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client\LocaleID&amp;quot;)
	End If
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	&amp;#039; Cleanup
	Set objWshShell = Nothing

End Function &amp;#039;GetTaniumLocale</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
YEAR=$(date | cut -d &amp;#039; &amp;#039; -f6)
last | egrep -v &amp;#039;reboot|^$|wtmp&amp;#039; | awk &amp;#039;{ print $1&amp;quot;|&amp;quot;$5&amp;quot;-&amp;quot;$6 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Date</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>139</cache_row_id>
          </sensor>
          <sensor>
            <id>278</id>
            <name>Run Once Keys</name>
            <hash>1832324705</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the run once keys that define which programs will be started when a user logs in.
Example:  System|GlobalProtect|"C:\Program Files\Palo Alto Networks\GlobalProtect\PanGPA.exe"</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Run Once Keys
&amp;#039;========================================

&amp;#039; returns the system and user keys for a given key

Option Explicit

Const strSep = &amp;quot;|&amp;quot;

Dim strKeyPath, strKeyPath32, dictResults, strValue

strKeyPath = &amp;quot;Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;quot;
strKeyPath32 = &amp;quot;Software\Wow6432Node\Microsoft\Windows\CurrentVersion\RunOnce&amp;quot;
    
Set dictResults = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

AddValuesForKey dictResults, strKeyPath
AddValuesForKey dictResults, strKeyPath32

For Each strValue In dictResults.Keys
    WScript.Echo strValue
Next

Sub AddValuesForKey(dictResults, strKey)
&amp;#039; This function will output the two values

    Const HKLM = &amp;amp;h80000002
    Const HKEY_USERS = &amp;amp;H80000003
    
    Dim objRegistry
    Dim arrUserKeys,strUserKey, strUserKeyPath
    
    &amp;#039; get System Keys
    Set objRegistry = Getx64RegistryProvider()
    If RegKeyExists(HKLM, strKey, objRegistry) Then  
        GetValues objRegistry, HKLM, strKey, dictResults, &amp;quot;System&amp;quot;
    End If
    
    &amp;#039; get User Keys
    objRegistry.EnumKey HKEY_USERS, &amp;quot;&amp;quot;,arrUserKeys
    For Each strUserKey In arrUserKeys
        If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
            strUserKeyPath = strUserKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strKey
            If RegKeyExists(HKEY_USERS,strUserKeyPath, objRegistry) Then
                GetValues objRegistry, HKEY_USERS, strUserKeyPath, dictResults, &amp;quot;User&amp;quot;
            End If
         End If 
    Next 
End Sub &amp;#039;AddValuesForKey

Sub GetValues(objRegistry, hiveConst, keyPath, dictValues, strPrefix)
    Dim arrKeyNames, arrTypes, arrValueNames, strValueName
    Dim strValueData, i, strEntry
        
    objRegistry.EnumValues hiveConst, keyPath, arrValueNames, arrTypes
    
    If Not IsArray(arrValueNames) Then
        arrValueNames = Array(&amp;quot;&amp;quot;)
        arrTypes = Array(1)
    End If
    
    For i = LBound(arrValueNames) To UBound(arrValueNames)
        strValueName = arrValueNames(i)
        strValueData = GetRegValue(objRegistry, hiveConst, keyPath, strValueName, arrTypes(i))
        If Not ( IsNull(strValueName) Or IsNull(strValueData) ) Then
            strEntry = strPrefix &amp;amp; strSep &amp;amp; strValueName &amp;amp; strSep &amp;amp; strValueData
            If Not dictValues.Exists(strEntry) Then 
                dictValues.Add strEntry, True
            End If 
        End If
    Next    
End Sub &amp;#039;GetValues

Function GetRegValue(objRegistry, hiveConst, keyPath, strValueName, constType)

    Const REG_SZ        = 1
    Const REG_EXPAND_SZ = 2
    Const REG_BINARY    = 3
    Const REG_DWORD     = 4
    Const REG_MULTI_SZ  = 7
    Const REG_QWORD     = 11

    Dim strValue, arrBytes, uValue, arrValues

    Select Case constType
        Case REG_SZ  
            objRegistry.GetStringValue hiveConst, keyPath, strValueName, strValue
            GetRegValue =  strValue
            Exit Function
        Case REG_EXPAND_SZ
            objRegistry.GetExpandedStringValue hiveConst, keyPath, strValueName, strValue
            GetRegValue =  strValue
            Exit Function
        Case REG_BINARY
            objRegistry.GetBinaryValue hiveConst, keyPath, strValueName, arrBytes
            strBytes = &amp;quot;&amp;quot;
            For Each uByte in arrBytes
                strBytes = strBytes &amp;amp; Hex(uByte) &amp;amp; &amp;quot; &amp;quot;
            Next
            GetRegValue =  strBytes
            Exit Function
        Case REG_DWORD
            objRegistry.GetDWORDValue hiveConst, keyPath, strValueName, uValue
            GetRegValue =  CStr(uValue)               
            Exit Function
        Case REG_QWORD
            objRegistry.GetQWORDValue hiveConst, keyPath, strValueName, uValue
            GetRegValue =  CStr(uValue)               
            Exit Function
        Case REG_MULTI_SZ
            objRegistry.GetMultiStringValue hiveConst, keyPath, strValueName, arrValues                             
            For Each strValue in arrValues
                GetRegValue =  strValue 
            Next
            Exit Function
    End Select
End Function &amp;#039;GetRegValue

Function RegKeyExists(sHive, sRegKey, objReg)
    Dim aValueNames, aValueTypes
    If objReg.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
        RegKeyExists = True
    Else
        RegKeyExists = False
    End If
End Function &amp;#039; RegKeyExists


Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Type</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Command Line</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>140</cache_row_id>
          </sensor>
          <sensor>
            <id>280</id>
            <name>SQL Server CPU Consumption</name>
            <hash>1845399463</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description>Current CPU utilization percentage by SQL Server process on client machine.
Example: 8%</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Server CPU Consumption
&amp;#039;========================================
&amp;#039;@INCLUDE=sql/mssql_connection_utils.vbs

Option Explicit

Dim dictInstances, strInstance, Process

Set dictInstances = GetMSSQLInstances()

If dictInstances.Count &amp;gt; 0 Then 
	For Each Process In GetObject(&amp;quot;winmgmts:&amp;quot;).ExecQuery(&amp;quot;Select * from Win32_Process where Name = &amp;#039;sqlservr.exe&amp;#039;&amp;quot;)   
		WScript.echo CPUUSage(Process.Handle) &amp;amp; &amp;quot;%&amp;quot;  
	Next  
End If

Function CPUUSage( ProcID ) 
	Dim objService, objInstance1, objInstance2, N1, N2, D1, D2, Nd, Dd, PercentProcessorTime  
	On Error Resume Next   
	Set objService = GetObject(&amp;quot;Winmgmts:{impersonationlevel=impersonate}!\Root\Cimv2&amp;quot;)     
	For Each objInstance1 In objService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process where Name = &amp;#039;sqlservr&amp;#039;&amp;quot;)        
		N1 = objInstance1.PercentProcessorTime        
		D1 = objInstance1.TimeStamp_Sys100NS      
		Exit For    
	Next  
	WScript.Sleep(2000)     
	For Each objInstance2 In objService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process where Name = &amp;#039;sqlservr&amp;#039;&amp;quot;)        
		N2 = objInstance2.PercentProcessorTime        
		D2 = objInstance2.TimeStamp_Sys100NS      
		Exit For    
	Next    
	On Error Goto 0
	
	&amp;#039; CounterType - PERF_100NSEC_TIMER_INV   
	&amp;#039; Formula - (1- ((N2 - N1) / (D2 - D1))) x 100     
	Nd = (N2 - N1)     
	Dd = (D2 - D1)     
	PercentProcessorTime = ( (Nd/Dd))  * 100    
	CPUUSage = Round(PercentProcessorTime, 0) 
End Function 

&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: sql/mssql_connection_utils.vbs

&amp;#039; Common constants for MSSQL lookups
Const AD_OPEN_STATIC = 3 
Const AD_LOCK_OPTIMISTIC = 3  


Function GetMSSQLInstances()
    Dim dictResult, objWMIService, colServices, objService
    Dim strCaption, strInstance, intStartIndex, intStopIndex
    Set dictResult = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

    Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
    Set colServices = objWMIService.ExecQuery (&amp;quot;select * from win32_Service&amp;quot;)  
    For Each objService In colServices
        strCaption = objService.Caption
    
        If (InStr(strCaption,&amp;quot;SQL Server&amp;quot;) &amp;lt;&amp;gt; 0 And ObjService.State = &amp;quot;Running&amp;quot;) Then    
            &amp;#039; OK -- found SQL Server on this machien, now we need to find the instance name
            &amp;#039; if this is the correct service
            strInstance = &amp;quot;.&amp;quot;
            intStartIndex = InStr(strCaption, &amp;quot;(&amp;quot;)
            intStopIndex = InStr(strCaption, &amp;quot;)&amp;quot;)
            
            If(intStartIndex &amp;lt;&amp;gt; 0) And (intStopIndex &amp;lt;&amp;gt; 0) Then 
                strInstance = Mid(strCaption, intStartIndex + 1, intStopIndex - intStartIndex - 1)
                    
                If strInstance = &amp;quot;MSSQLSERVER&amp;quot; Then 
                    strInstance = &amp;quot;.&amp;quot;
                End If 

                If Not dictResult.Exists(strInstance) Then
                    dictResult.Add strInstance, True
                End if
            End If             
        End If  
    Next  
    
    Set GetMSSQLInstances = dictResult

End Function &amp;#039; GetMSSQLInstances

Function GenMSSQLConnectionStr(strInstance, strCatalog) 
    Dim strDataSource, strConnection

    If strInstance = &amp;quot;.&amp;quot; Then 
        strDataSource = strInstance
    Else 
        strDataSource = &amp;quot;.\&amp;quot; &amp;amp; strInstance
    End If 

    strConnection = &amp;quot;Provider=SQLOLEDB;Data Source=&amp;quot; &amp;amp; strDataSource &amp;amp; &amp;quot;;Trusted_Connection=Yes;Initial Catalog=&amp;quot; &amp;amp; strCatalog &amp;amp; &amp;quot;;&amp;quot;

    GenMSSQLConnectionStr = strConnection
End Function &amp;#039; OpenMSSQLConnection

Function GetMSSQLSensorInstanceStr(strInstance)
    If strInstance = &amp;quot;.&amp;quot; Then
        GetMSSQLSensorInstanceStr = &amp;quot;&amp;quot;
    Else
        GetMSSQLSensorInstanceStr = &amp;quot; (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
    End If
End Function &amp;#039; GetMSSQLSensorInstanceStr
&amp;#039;- End file: sql/mssql_connection_utils.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>141</cache_row_id>
          </sensor>
          <sensor>
            <id>282</id>
            <name>Tanium Server Name List</name>
            <hash>1865193433</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Retrieves the Tanium Server Name List from the Client's Registry
Example: server.domain.com,server1.domain.com</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Server Name List
&amp;#039;========================================


Option Explicit

Const HKLM = &amp;amp;h80000002

Dim objReg
Dim strTaniumRegPath, strCurrentTaniumServerNameListValue
Dim strComputer

strComputer = &amp;quot;.&amp;quot;

Set objReg = _ 
	GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; _ 
	&amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

strTaniumRegPath = GetTaniumRegistryPath()
&amp;#039;retrieve current server name value
objReg.GetStringValue HKLM, strTaniumRegPath, &amp;quot;ServerNameList&amp;quot;, strCurrentTaniumServerNameListValue

If Not IsNull(strCurrentTaniumServerNameListValue) Then 
	WScript.Echo strCurrentTaniumServerNameListValue
Else 
	WScript.Echo &amp;quot;Not Set&amp;quot;
End If 

&amp;#039;Cleanup
Set objReg = Nothing

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>142</cache_row_id>
          </sensor>
          <sensor>
            <id>284</id>
            <name>Audio Controller</name>
            <hash>189860887</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Description of the onboard audio controller for the computer.
Example: Intel(R) High Definition Audio Controller</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Description from win32_onboarddevice where DeviceType=7</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
lspci | grep &amp;#039;audio controller&amp;#039; | awk -F&amp;#039;audio controller: &amp;#039; &amp;#039;{print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
system_profiler SPAudioDataType | grep -w -A2 &amp;quot;^Audio:&amp;quot; | tail -1 | sed -e &amp;#039;s/^ *//&amp;#039; -e &amp;#039;s/:$//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>143</cache_row_id>
          </sensor>
          <sensor>
            <id>286</id>
            <name>Tanium Buffer Count</name>
            <hash>191451006</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>The number of buffered messages currently queued to be processed by the Tanium client on each client machine.
Example: 2</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Buffer Count 
&amp;#039;========================================

strKeyPath = &amp;quot;SOFTWARE\Tanium\Tanium Client\Status&amp;quot;
strValueName = &amp;quot;BufferCount&amp;quot; 

const HKEY_CURRENT_USER = &amp;amp;H80000001
const HKEY_LOCAL_MACHINE = &amp;amp;H80000002
strComputer = &amp;quot;.&amp;quot;

Set oReg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp;_
 strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;) 

On Error Resume Next

  oReg.GetDWORDValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue

  Wscript.Echo strValue

On Error Goto 0</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>144</cache_row_id>
          </sensor>
          <sensor>
            <id>288</id>
            <name>Active Devices</name>
            <hash>1927765752</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>All hardware devices currently in use by a computer.
Example: Microsoft PS/2 Mouse</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Active Devices
&amp;#039;========================================

On Error Resume Next
strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PnPEntity where status = &amp;#039;OK&amp;#039; and service is not null and service &amp;lt;&amp;gt; &amp;#039;pci&amp;#039;&amp;quot;,,48)
For Each objItem in colItems
	If Not Left(objItem.PNPDeviceId, Len(&amp;quot;ROOT&amp;quot;)) = &amp;quot;ROOT&amp;quot; Then
	    Wscript.Echo objItem.Caption
	End If 
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>145</cache_row_id>
          </sensor>
          <sensor>
            <id>290</id>
            <name>Last Application Launch Date</name>
            <hash>1927941770</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Returns the date that each application was last launched on.
Example: Notepad | 9/18/2012</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Last Application Launch Date
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;
Const HKLM = &amp;amp;h80000002
Set reg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

strKeyPath = GetTaniumRegistryPath() &amp;amp; &amp;quot;\Sensor Data\Applications&amp;quot;

If RegKeyExists(reg, HKLM, strKeyPath) Then
	reg.EnumKey HKLM, strKeyPath, arrSubKeys
	If IsArray(arrSubKeys) Then
		For Each Subkey In arrSubKeys
			&amp;#039;Wscript.Echo Subkey
			newKeyPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; Subkey
			
			reg.GetStringValue HKLM, newKeyPath, &amp;quot;Last Start&amp;quot;, strLastStart
			reg.GetStringValue HKLM, newKeyPath, &amp;quot;Description&amp;quot;, strDescription
			WScript.Echo strDescription &amp;amp; &amp;quot;|&amp;quot; &amp;amp; strLastStart
		Next
	Else	
		WScript.Echo &amp;quot;Application data not initialized&amp;quot;
	End If
Else	
	WScript.Echo &amp;quot;Application data not initialized&amp;quot;
End If

Function GetTaniumRegistryPath
	&amp;#039;GetTaniumRegistryPath works in x64 or x32
	&amp;#039;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
	
	&amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
	On Error Resume Next
	strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
	On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
	
	If strPath = &amp;quot;&amp;quot; Then
		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
		On Error Resume Next
		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
	End If
	
	If Not strPath = &amp;quot;&amp;quot; Then
		GetTaniumRegistryPath = strFoundTaniumRegistryPath
	Else
		GetTaniumRegistryPath = False
		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
	End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Application Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Date</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>146</cache_row_id>
          </sensor>
          <sensor>
            <id>292</id>
            <name>System Environment Variables</name>
            <hash>1978207968</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the currently defined system variables
Example:  windir=c:\Windows</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; System Environment Variables
&amp;#039;========================================

Option Explicit

Const EXPAND_VARS = False

Dim wshShell, wshSysEnv, strItem

Set wshShell = CreateObject( &amp;quot;WScript.Shell&amp;quot; )
Set wshSysEnv = wshShell.Environment( &amp;quot;SYSTEM&amp;quot; )
For Each strItem In wshSysEnv
	If EXPAND_VARS Then 
		WScript.Echo wshShell.ExpandEnvironmentStrings( strItem )
	Else 
		WScript.Echo strItem
	End If
Next
Set wshSysEnv = Nothing
Set wshShell = Nothing</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>147</cache_row_id>
          </sensor>
          <sensor>
            <id>294</id>
            <name>User Accounts</name>
            <hash>1988427982</hash>
            <string_count>0</string_count>
            <category>User</category>
            <description>List of user accounts on a linux client machine.
Example: webadmin</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
cat /etc/passwd | grep -v &amp;quot;sbin/nologin&amp;quot; | cut -d: -f1</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
cat /etc/passwd | grep -v &amp;quot;sbin/nologin&amp;quot; | cut -d: -f1</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>148</cache_row_id>
          </sensor>
          <sensor>
            <id>296</id>
            <name>Driver Details</name>
            <hash>1994896093</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Return details about loaded drivers
Example:
WIMMount|Stopped|C:\Windows\system32\drivers\wimmount.sys|6.3.9600.16384</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Driver Details
&amp;#039;========================================
&amp;#039; this sensor will return specific data about all drivers in the driver store
&amp;#039; many columns are parsed, but only a few are output
&amp;#039; set hash type to something valid (md5 or sha1) in order to enable hash output
&amp;#039; which would change the column count

Option Explicit

On Error Resume Next
Dim strHashType
&amp;#039; Either MD5 or SHA1. If neither, do not hash
&amp;#039; requires IR tools to hash
&amp;#039;strHashType = &amp;quot;MD5&amp;quot;
&amp;#039;strHashType = &amp;quot;SHA1&amp;quot;
strHashType = &amp;quot;None&amp;quot;

Dim strCommand,objShell,objScriptExec,strDriverResults,results,line
Dim arrFields,strMName,strDName,strDesc,strDType,strStartMode,strState,strStatus,strAccStop
Dim strAccPause,strPP,strCode,strBSS,strLinkDate,strPath,strInit,strFixedPath
Dim strFindChr,strReplaceChr,strSep,bHasOutput,dictOut,strOut,strSystem32Location,objFSO
Dim dictFilesToHash,inputFile,bHashOutput,strHashOfDriver,strFileVersion

Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
Set dictFilesToHash = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

&amp;#039; call the 64-bit driver query on a 64-bit machine when necessary
strSystem32Location = FixFileSystemRedirectionForPath(objFSO.GetSpecialFolder(1))

strCommand = &amp;quot;cmd /c &amp;quot;&amp;amp;strSystem32Location&amp;amp;&amp;quot;\driverquery.exe /V /NH /FO CSV&amp;quot;

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Set objScriptExec = objShell.Exec (strCommand)
strDriverResults = objScriptExec.StdOut.ReadAll

results = Split(strDriverResults, vbCrLf)

strFindChr = Chr(34)
strReplaceChr = &amp;quot;&amp;quot;

strSep = &amp;quot;|&amp;quot;

Set dictOut = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

bHasOutput = False
For Each line in results
	arrFields = Split(line, Chr(34)&amp;amp;Chr(44))
	If UBound(arrFields) &amp;gt;= 14 Then
		strMName = Replace(Trim(arrFields(0)),strFindChr,strReplaceChr)
		strDName = Replace(Trim(arrFields(1)),strFindChr,strReplaceChr)
		strDesc = Replace(Trim(arrFields(2)),strFindChr,strReplaceChr)
		strDType = Replace(Trim(arrFields(3)),strFindChr,strReplaceChr)
		strStartMode = Replace(Trim(arrFields(4)),strFindChr,strReplaceChr)
		strState = Replace(Trim(arrFields(5)),strFindChr,strReplaceChr)
		strStatus = Replace(Trim(arrFields(6)),strFindChr,strReplaceChr)
		strAccStop = Replace(Trim(arrFields(7)),strFindChr,strReplaceChr)
		strAccPause = Replace(Trim(arrFields(8)),strFindChr,strReplaceChr)
		strPP = Replace(Trim(arrFields(9)),strFindChr,strReplaceChr)
		strCode = Replace(Trim(arrFields(10)),strFindChr,strReplaceChr)
		strBSS = Replace(Trim(arrFields(11)),strFindChr,strReplaceChr)
		strLinkDate = Replace(Trim(arrFields(12)),strFindChr,strReplaceChr)
		strPath = Replace(Trim(arrFields(13)),strFindChr,strReplaceChr)
		strPath = Replace(strPath,&amp;quot;\??\&amp;quot;,&amp;quot;&amp;quot;) &amp;#039;&amp;#039; eliminate strange path chars
		strInit = Replace(Trim(arrFields(14)),strFindChr,strReplaceChr)
		strFixedPath = FixFileSystemRedirectionForPath(strPath)
		strFixedPath = LCase(strFixedPath) &amp;#039; necessary for dict compare later
		strFileVersion = GetFileVersion(objFSO,strFixedPath)
		strOut = strDName &amp;amp; strSep &amp;amp; strState &amp;amp; strSep &amp;amp; strPath &amp;amp; strSep &amp;amp; strFileVersion
		If Not dictOut.Exists(strOut) Then
			dictOut.Add strOut,strFixedPath
			If Not dictFilesToHash.Exists(LCase(strFixedPath)) Then
				&amp;#039; Default message is Cannot Hash if the IR tools are not installed properly or file cannot be hashed
				dictFilesToHash.Add LCase(strFixedPath),&amp;quot;cannot hash&amp;quot;
			End If
			bHasOutput = True
		End If
	End If
Next

strHashType = LCase(strHashType)
If strHashType = &amp;quot;md5&amp;quot; Or strHashType = &amp;quot;sha1&amp;quot; Then
	inputFile = GetTaniumDir(&amp;quot;Tools\IR&amp;quot;) &amp;amp; &amp;quot;driver-details-with-hash-&amp;quot;&amp;amp;strHashType&amp;amp;&amp;quot;.xml&amp;quot;
	&amp;#039;delete potential previous input file on entry
	On Error Resume Next
	If objFSO.FileExists(inputFile) Then
		objFSO.DeleteFile inputFile, True
	End If
	On Error Goto 0
	CreateXmlInputFileByHashType dictFilesToHash,inputFile,strHashType
	&amp;#039; add the hash of the files to the files to hash dictionary
	AddHashToHashesDictFromMD5Output inputFile,dictFilesToHash,strHashType
	On Error Resume Next
	&amp;#039;delete potential previous input file on entry
	If objFSO.FileExists(inputFile) Then
		objFSO.DeleteFile inputFile, True
	End If
	On Error Goto 0
End If

If Not bHasOutput Then
	WScript.echo  &amp;quot;Error: driver data cannot be interpreted&amp;quot;
Else
bHashOutput = False
If strHashType = &amp;quot;md5&amp;quot; Or strHashType = &amp;quot;sha1&amp;quot; Then bHashOutput = True
	For Each strOut In dictOut.Keys
		If bHashOutput Then
			If dictFilesToHash.Exists(dictOut.Item(strOut)) Then
				strHashOfDriver = dictFilesToHash.Item(dictOut.Item(strOut))
			Else
				strHashOfDriver = &amp;quot;unknown&amp;quot;
			End If
			WScript.Echo strOut &amp;amp; strSep &amp;amp; strHashOfDriver
		Else
			WScript.Echo strOut
		End If
	Next
End If


Function GetFileVersion(ByRef fso, strPath)
	Dim strVersion
	If fso.FileExists(strPath) Then
		On Error Resume Next
		strVersion = fso.GetFileVersion(strPath)
		On Error Goto 0
		If strVersion = &amp;quot;&amp;quot; Then
			strVersion = &amp;quot;Version not found&amp;quot;
		End If
	Else 
		strVersion = &amp;quot;File not found&amp;quot;
	End If

	GetFileVersion = strVersion
End Function &amp;#039;GetFileVersion

Function FixFileSystemRedirectionForPath(ByVal strFilePath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.
	
	Dim objFSO, strSystem32Location,strWindowsLocation,objShell
	Dim strProgramFilesx86
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

	strFilePath = LCase(strFilePath)
	strWindowsLocation = LCase(objFSO.GetSpecialFolder(0))
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)
	
	If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
		If InStr(strFilePath,strSystem32Location) = 1 Then
			strFilePath = Replace(strFilePath,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
		End If
	End If
	FixFileSystemRedirectionForPath = strFilePath
	
	&amp;#039;Cleanup
	Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will undo the changes made to a path by the 
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

	Dim objFSO,strSystem32Location,strNewSystem32Location
	
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	
	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
	
	UnFixFileSystemRedirectionForPath = Replace(strFilePath,strNewSystem32Location,strSystem32Location)
	
	&amp;#039;Cleanup
	Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath

Function CreateXmlInputFileByHashType(fileStrings, inputFileName, strHashType)
	If Not (strHashType = &amp;quot;md5&amp;quot; Or strHashType = &amp;quot;sha1&amp;quot;) Then
		WScript.Echo &amp;quot;Invalid hash type: &amp;quot; &amp;amp; strHashType&amp;amp; &amp;quot;, Quitting&amp;quot;
		WScript.Quit
	End If
	Dim masterXmlDom
	Set masterXmlDom = CreateObject(&amp;quot;Msxml2.DOMDocument&amp;quot;)
    masterXmlDom.Async = false
	
	Dim oFSO, oExistingTextFile, existingXML
	Set oFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
		
	Dim pi
	Set pi = masterXmlDom.createProcessingInstruction(&amp;quot;xml&amp;quot;, &amp;quot;version=&amp;#039;1.0&amp;#039; encoding=&amp;#039;UTF-8&amp;#039;&amp;quot;)
	masterXmlDom.insertBefore pi, masterXmlDom.firstChild
	
	Dim fcivElement
	Set fcivElement = masterXmlDom.createElement(&amp;quot;FCIV&amp;quot;)
	masterXmlDom.appendChild fcivElement
	
	Dim fPath, fileEntryElement, nameElement, hashtypeElement
	For Each fPath In fileStrings
		fPath = FixFileSystemRedirectionForPath(fPath)
		
		Set fileEntryElement = masterXmlDom.createElement(&amp;quot;FILE_ENTRY&amp;quot;)
		fcivElement.appendChild fileEntryElement
		
		Set nameElement = masterXmlDom.createElement(&amp;quot;name&amp;quot;)
		nameElement.text = fPath
		fileEntryElement.appendChild nameElement
		
		Set hashtypeElement = masterXmlDom.createElement(UCase(strHashType))
		fileEntryElement.appendChild hashtypeElement
	Next	
	&amp;#039;WScript.Echo &amp;quot;Current XML: &amp;quot; &amp;amp; masterXmlDom.xml
	masterXmlDom.save(inputFileName)
	
End Function &amp;#039;CreateXmlInputFileByHashType

Function AddHashToHashesDictFromMD5Output(inputFileName,ByRef dictFilesToHash,strHashType)
&amp;#039; takes a dictionary of files to hash, adds their hash to the file. Carefully consdier
&amp;#039; whether the path is fixed for file system redirection

	Dim objShell, objExec, bErr
	Dim strLine,arrLine,strErrFile,intHashLength,strHasherPath
		
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

	&amp;#039; Ensure file exists
	If Not objFSO.FileExists(inputFileName) Then
		WScript.Echo &amp;quot;Error: XML input file not written&amp;quot;
		&amp;#039;Cleanup and exit
		Set objShell = Nothing
		Set objFSO = Nothing
		Exit Function
	End If
	
	&amp;#039; Ensure utility exists
	strHasherPath = GetTaniumDir(&amp;quot;Tools\IR&amp;quot;) &amp;amp; &amp;quot;fciv.exe&amp;quot;
	If Not objFSO.FileExists(strHasherPath) Then
		WScript.Echo &amp;quot;Error: Could not locate hash utility, ensure machine has Tanium IR tools&amp;quot;
		&amp;#039;Cleanup and exit
		Set objShell = Nothing
		Set objFSO = Nothing
		Exit Function
	End If
	
	strHashType = LCase(strHashType) &amp;#039; must be md5 or sha1
	Select Case strHashType
		Case &amp;quot;md5&amp;quot;
			intHashLength = 32
		Case &amp;quot;sha1&amp;quot;
			intHashLength = 40
		Case Else
			WScript.Echo &amp;quot;Invalid hash type: &amp;quot; &amp;amp;strHashType&amp;amp;&amp;quot;, quitting&amp;quot;
			WScript.Quit
	End Select

	Set objExec = objShell.Exec(Chr(34)&amp;amp;strHasherPath&amp;amp;Chr(34)&amp;amp; &amp;quot; -v -&amp;quot;&amp;amp;strHashType&amp;amp;&amp;quot; -xml &amp;quot; &amp;amp; Chr(34)&amp;amp;inputFileName&amp;amp;Chr(34))
	&amp;#039; examine output
	Dim fName, fHex
	While objExec.StdOut.AtEndOfStream &amp;lt;&amp;gt; True
		strLine = LCase(Trim(objExec.StdOut.ReadLine))

		If Len(strLine) &amp;gt; 2 Then strLine = Left(strLine, Len(strLine)-2) &amp;#039;adjust for 2 invisible characters at end of line
		
		&amp;#039;Start processesing on lines that are file names
		&amp;#039;This is based on the second character being a :, such as C: or D:
		If Mid(strLine,2,1) = &amp;quot;:&amp;quot; Then
			fName = strLine
			objExec.StdOut.SkipLine
			strLine = LCase(Trim(objExec.StdOut.ReadLine))
			If Len(strLine) &amp;gt; 0 Then strLine = Left(strLine, Len(strLine)-1) &amp;#039;adjust for 1 invisible character at end of line
			fHex = Right(strLine,intHashLength)
			If dictFilesToHash.Exists(fName) Then
				dictFilesToHash.Item(fName) = fHex
				&amp;#039; WScript.Echo fName&amp;amp;strSep&amp;amp;fHex
			End If
		End If
	Wend

	strErrFile = GetTaniumDir(&amp;quot;Tools\IR&amp;quot;) &amp;amp; &amp;quot;fciv.err&amp;quot;
	If objFSO.FileExists(strErrFile) Then
		objFSO.DeleteFile strErrFile, True
	End If
End Function &amp;#039;AddHashToHashesDictFromMD5Output


Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
		If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
			strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
		End If	
	
		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		If fso.FolderExists(strPath) Then
			If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
				&amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
				GeneratePath strPath &amp;amp; strSubDir, fso
			End If
			GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
		Else
			&amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
			WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
			GetTaniumDir = False
		End If
	Else
		WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
		GetTaniumDir = False
	End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
	GeneratePath = False

	If Not fso.FolderExists(pFolderPath) Then
		If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
			GeneratePath = True
			Call fso.CreateFolder(pFolderPath)
		End If
	Else
		GeneratePath = True
	End If
End Function &amp;#039;GeneratePath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>2700</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Display Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>State</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Path</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Version</name>
                <index>3</index>
                <value_type>Version</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <cache_row_id>149</cache_row_id>
          </sensor>
          <sensor>
            <id>298</id>
            <name>Time Zone</name>
            <hash>2006202074</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>The currently specified time zone for the client machine.
Example: (UTC-08:00) Pacific Time (US &amp; Canada)</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select Description from Win32_TimeZone</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
date &amp;#039;+%Z&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>150</cache_row_id>
          </sensor>
          <sensor>
            <id>300</id>
            <name>Local Administrators Without Groups</name>
            <hash>2060254274</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns users (but not groups) who are members of the Local Administrators group on Windows.  Will not list the individual members of groups in the Local Administrators group.
Example: Administrator</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Local Administrators Without Groups
&amp;#039;========================================

&amp;#039; output of membership (individual users but no groups) of Local Administrators
&amp;#039; will not list members of sub-groups

Option Explicit

Dim strMember

For Each strMember In GetLocalAdminAccountsMinusGroups
	WScript.Echo strMember
Next

Function GetLocalAdminAccountsMinusGroups
    Dim objWMIService,strLocalAdminQuery,colItems,objItem,strMembers,strComputerName,arrReturn,i
    Set objWMIService = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
    
	&amp;#039; Get Computer Name
    Set colItems = objWMIService.ExecQuery( &amp;quot;Select * from Win32_ComputerSystem&amp;quot;, , 48 )
    For Each objItem in colItems
        strComputerName = objItem.Name
    Next	    
    
    strLocalAdminQuery = &amp;quot;select * from Win32_GroupUser where GroupComponent = &amp;quot; &amp;amp; chr(34) &amp;amp; &amp;quot;Win32_Group.Domain=&amp;#039;&amp;quot; &amp;amp; strComputerName &amp;amp; &amp;quot;&amp;#039;,Name=&amp;#039;Administrators&amp;#039;&amp;quot; &amp;amp; Chr(34)
    
    Set ColItems = objWMIService.ExecQuery(strLocalAdminQuery)
    strMembers = &amp;quot;&amp;quot;
    arrReturn = Array() &amp;#039; set up return array
    i = 0
    For Each objItem In colItems
    	i = i + 1
    	If Not InStr(LCase(objItem.PartComponent),&amp;quot;win32_group.domain&amp;quot;) &amp;gt; 0 Then			
	        Dim strMemberName, NamesArray, strDomainName, DomainNameArray
	        NamesArray = Split(objItem.PartComponent,&amp;quot;,&amp;quot;)
	        strMemberName = Replace(Replace(NamesArray(1),Chr(34),&amp;quot;&amp;quot;),&amp;quot;Name=&amp;quot;,&amp;quot;&amp;quot;)
	        DomainNameArray = Split(NamesArray(0),&amp;quot;=&amp;quot;)
	        strDomainName = Replace(DomainNameArray(1),Chr(34),&amp;quot;&amp;quot;)
	        If strDomainName &amp;lt;&amp;gt; strComputerName Then
	            strMemberName = strDomainName &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strMemberName
	        End If
	        ReDim Preserve arrReturn(UBound(arrReturn) + 1) &amp;#039; increase array by one
	        arrReturn(UBound(arrReturn)) = strMemberName
		End If
    Next
    
    GetLocalAdminAccountsMinusGroups = arrReturn
End Function &amp;#039;GetLocalAdminAccountsMinusGroups</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>151</cache_row_id>
          </sensor>
          <sensor>
            <id>302</id>
            <name>Recently Closed Connections</name>
            <hash>2074877994</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns any recently closed connection, ie those connection currently in CLOSED_WAIT or TIME_WAIT.  If the process that owned the connection can be determined, it will be included.
Example: Google Chrome | 173.194.79.99:80</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Recently Closed Connections
&amp;#039;========================================

&amp;#039; Returns all of the connections which are currently in timewait or closewait

Option Explicit

Dim showPort : showPort = True
Dim taniumDebug : taniumDebug = False
Dim strSep : strSep = &amp;quot;|&amp;quot;

Dim excludeProcesses, excludePorts, excludeSubnets

Dim strcommand, results, objWMIService, query, colResults, processes, result, processId
Dim processPath, objShell, objScriptExec, strNetStatResults, line, lineResults, j, i, word
Dim strAppEntry, arrAppEntry, strAppExe, strAppPath, Item

excludeProcesses = Array(&amp;quot;taniumclient.exe&amp;quot;,&amp;quot;taniumreceiver.exe&amp;quot;)
excludePorts = Array(&amp;quot;17472&amp;quot;)
excludeSubnets = Array(&amp;quot;127.0.0.0:255.255.255.0&amp;quot;)


Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
query = &amp;quot;select name, executablepath, processId from win32_process&amp;quot;
Set colResults = objWMIService.ExecQuery(query)

&amp;#039;dictionary for process-app pairs
Set processes = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

For Each result In colResults 
   processId = CStr(result.ProcessId)
   processPath = result.ExecutablePath
   processes.Add processId, result.Name &amp;amp; &amp;quot;,&amp;quot; &amp;amp; processPath &amp;#039; tie IDs to exes,path - split later
Next

strcommand = &amp;quot;cmd /c netstat -aon -p TCP | find &amp;quot; &amp;amp; chr(34) &amp;amp; &amp;quot;TCP&amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot; | find /V &amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;LISTENING&amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot; | find /V &amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;ESTABLISHED&amp;quot; &amp;amp; Chr(34)

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Set objScriptExec = objShell.Exec (strCommand)
strNetStatResults = LCase(objScriptExec.StdOut.ReadAll)

results = Split(strNetStatResults, vbCrLf)

j = 0
For Each line in results
   line = cleanWhitespace(Trim(line))
   
   lineResults = Split(line)
   i = 0
   Dim strPort, strPid, strConnectionType, strForeignIp, arrForeignIp, strIp, strApp
   Dim strLocalIp, arrLocalIp, strLocalPort
   Dim isNotExcludedApp, isNotExcludedSubnet,isNotClientPortUsage
   For Each word In lineResults
      If i = 1 Then
         strLocalIp = word
      ElseIf i = 2 Then
         strForeignIp = word
      ElseIf i = 3 Then
         strConnectionType = word
      ElseIf i = 4 Then
         strPid = word
      End If
      
      i = i + 1
   Next
   
   &amp;#039;DO NOT INCLUDE EXCLUDED APPS
   strAppEntry = processes.Item(strPid) &amp;#039; looks like process.exe, Process Path
   arrAppEntry = Split(strAppEntry,&amp;quot;,&amp;quot;)
   strAppExe = arrAppEntry(0)
   strAppPath = arrAppEntry(1)
   
   isNotExcludedApp = Not(ContainedInArray(LCase(strAppExe), excludeProcesses))
   
   &amp;#039;DO NOT INCLUDE EXCLUDED SUBNETS
   arrForeignIp = Split(strForeignIp, &amp;quot;:&amp;quot;)
   strIp = arrForeignIp(0)
   strPort = arrForeignIp(1)

   isNotExcludedSubnet = Not(ContainedInSubnet(strIp, excludeSubnets))

   arrLocalIp = Split(strLocalIp, &amp;quot;:&amp;quot;)
   strLocalPort = arrLocalIp(1)

   isNotClientPortUsage = Not(ContainedInArray(strLocalPort, excludePorts)) And Not(ContainedInArray(strPort, excludePorts))
   
   If Not(IsEmpty(strAppExe)) _
      And isNotExcludedApp _ 
      And isNotExcludedSubnet _
      And isNotClientPortUsage Then
	  If Not showPort Then 
		strForeignIp = strIp
	  End If

	  If strPid = &amp;quot;0&amp;quot; Then 
      	  results(j) = &amp;quot;Unknown&amp;quot; &amp;amp; strSep &amp;amp; strForeignIp
      Else 
      	  results(j) = ProcessNameToApplicationName(strAppPath,strAppExe) &amp;amp; strSep &amp;amp; strForeignIp
      End If 
   Else
      If taniumDebug Then WScript.Echo &amp;quot;      excluded: &amp;quot; &amp;amp; strApp &amp;amp; &amp;quot; &amp;quot; &amp;amp; strForeignIp
      results(j) = &amp;quot;&amp;quot;   
   End If 
   
   j = j + 1
Next

results = RemDups(results)

If UBound(results) &amp;lt; 1 Then
	If GetLocale() &amp;lt;&amp;gt; 1033 Then
		WScript.Echo &amp;quot;English Language OS Required&amp;quot;
	End If
End If

For Each result In results 
   WScript.Echo result
Next

WScript.Quit

Function ContainedInSubnet(strIp, arr)
   Dim strSubnet, strMask, temp, parts

   For Each item In arr
      If InStr(item, &amp;quot;-&amp;quot;) Then &amp;#039;Subnet range
         temp = Split(item, &amp;quot;-&amp;quot;)
         lower = Split(temp(0), &amp;quot;:&amp;quot;)
         upper = Split(temp(1), &amp;quot;:&amp;quot;)
         lowerSubnet = Trim(lower(0))
         lowerMask = Trim(lower(1))
         upperSubnet = Trim(upper(0))
         upperMask = Trim(upper(1))
         
         If StringToBinary(strIp) &amp;gt; StringToBinary(Subnet(lowerSubnet, lowerMask)) _
            And StringToBinary(strIp) &amp;lt; StringToBinary(Subnet(upperSubnet, upperMask)) Then
            ContainedInSubnet = True
            Exit Function
         End If 
      Else &amp;#039;Single subnet
         parts = Split(item, &amp;quot;:&amp;quot;)
         strSubnet = Trim(parts(0))
         strMask = Trim(parts(1))
         If Subnet(strIp, strMask) = Subnet(strSubnet, strMask) Then
            ContainedInSubnet = True
            Exit Function
         End If
      End If 
   Next
   ContainedInSubnet = False
End Function

Function ContainedInArray(str, arr)
	Dim strItem
   	For Each strItem In arr 
      If str = strItem Then
         ContainedInArray = True
         Exit Function
      End If   
   Next
   ContainedInArray = False
End Function

Function ContainedInDict(str, dict)
	ContainedInDict = dict.Exists(str)
End Function

Function cleanWhitespace(strStarter)
	Dim intStarter, i, strChars
   	intStarter = Len(strStarter)
   	For i = intStarter to 2 Step -1
      	strChars = Space(i)
      	strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
   	Next
   	cleanWhitespace = strStarter
End Function

Function RemDups(ByVal anArray)
   Dim d, item, thekeys
   Set d = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
   d.removeall
   d.CompareMode = 0
   For Each item In anArray
      If Len(item) &amp;gt; 0 Then
         If Not d.Exists(item) Then d.Add item, item
      End If
   Next
   thekeys = d.keys
   Set d = Nothing
   RemDups = thekeys
End Function

Function Subnet(strAddress, strMask)
	Dim intSubnetLength
   	intSubnetLength = SubnetLength(strMask)
   	Subnet = BinaryToString(Left(StringToBinary(strAddress), intSubnetLength) &amp;amp; String(32 - intSubnetLength, &amp;quot;0&amp;quot;))
End Function

Function SubnetLength(strMask)
	Dim strMaskBinary
   	strMaskBinary = StringToBinary(strMask)
   	SubnetLength = Len(Left(strMaskBinary, InStr(strMaskBinary, &amp;quot;0&amp;quot;) - 1))
End Function

Function BinaryToString(strBinary)
	Dim intOctetPos, strOctetBinary, intOctet, intValue, intBinaryPos
   For intOctetPos = 1 To 4
      strOctetBinary = Right(Left(strBinary, intOctetPos * 8), 8)
      intOctet = 0
      intValue = 1
      For intBinaryPos = 1 To Len(strOctetBinary)
         If Left(Right(strOctetBinary, intBinaryPos), 1) = &amp;quot;1&amp;quot; Then intOctet = intOctet + intValue
         intValue = intValue * 2
      Next
      If BinaryToString = Empty Then BinaryToString = CStr(intOctet) Else BinaryToString = BinaryToString &amp;amp; &amp;quot;.&amp;quot; &amp;amp; CStr(intOctet)
   Next
End Function

Function StringToBinary(strAddress)
	Dim objAddress, strOctet, intOctet, strOctetBinary, x
   	objAddress = Split(strAddress, &amp;quot;.&amp;quot;, -1)
   	For Each strOctet In objAddress
      	intOctet = CInt(strOctet)
      	strOctetBinary = &amp;quot;&amp;quot;
      	For x = 1 To 8
         	If intOctet Mod 2 &amp;gt; 0 Then
            	strOctetBinary = &amp;quot;1&amp;quot; &amp;amp; strOctetBinary
         	Else
            	strOctetBinary = &amp;quot;0&amp;quot; &amp;amp; strOctetBinary
         	End If
         	intOctet = Int(intOctet / 2)
      	Next
      	StringToBinary = StringToBinary &amp;amp; strOctetBinary
   	Next
End Function

Function ProcessNameToApplicationName(strExecutablePath, strExecutableName)
&amp;#039; This function will return the full application name of a running executable

		Dim fso, arrPathParts, strExecutable
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		
		arrPathParts = Split(strExecutablePath,&amp;quot;\&amp;quot;)

		If UBound(arrPathParts) &amp;lt; 0 Then &amp;#039;can be -1 for no split, such as the System process
			ProcessNameToApplicationName = strExecutableName
			Set fso = Nothing
			Exit Function
		End If
		strExecutable = arrPathParts(UBound(arrPathParts))
		
		If fso.FileExists(strExecutablePath) Then
			Dim execFile, strOutput, fileVersion, fileVersionOutput, fullName
		
			Set execFile = fso.GetFile(strExecutablePath)
			fullName = GetDescription(execFile.ParentFolder.Path, strExecutable)
			If Not fullName = &amp;quot;&amp;quot; Then
				ProcessNameToApplicationName = fullName
			Else
				ProcessNameToApplicationName = strExecutableName
			End If
		Else &amp;#039; file doesn&amp;#039;t exist or inaccessible
			ProcessNameToApplicationName = strExecutableName
		End If

End Function &amp;#039;ProcessNameToApplicationName

Function GetDescription(folderPath, fileName)
	Dim descIndex
	descIndex = GetAttributeIndex(folderPath, &amp;quot;File description&amp;quot;)
	If IsEmpty(descIndex) Then
		descIndex = GetAttributeIndex(folderPath, &amp;quot;Description&amp;quot;)
	End If
	GetDescription = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function GetFileProperty(folderPath, fileName, fileProperty)
	Dim objShell, objFolder
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	GetFileProperty = objFolder.GetDetailsOf(objFolder.Parsename(fileName), fileProperty)
End Function

Function GetAttributeIndex(folderPath, attrTarget)
	Dim objShell, objFolder, i, attrName
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	For i = 0 to 50
		attrName = objFolder.GetDetailsOf(objFolder.Items, i)
		If LCase(attrName) = LCase(attrTarget) Then
			GetAttributeIndex = i
			Exit Function
		End If
	Next
End Function

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		GetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		GetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;GetTaniumRegistryPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Target IP</name>
                <index>1</index>
                <value_type>IPAddress</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>152</cache_row_id>
          </sensor>
          <sensor>
            <id>304</id>
            <name>Default Login UserID</name>
            <hash>2095666087</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Last user name entered in the "Log On to Windows" dialog box.
Example: tanium_admin</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Default Login UserID
&amp;#039;========================================

Dim reg , strComputer
strComputer = &amp;quot;.&amp;quot;
Set reg = Getx64RegistryProvider()

strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&amp;quot;
strValueName = &amp;quot;DefaultUserName&amp;quot; 

const HKEY_CURRENT_USER = &amp;amp;H80000001
const HKEY_LOCAL_MACHINE = &amp;amp;H80000002
strComputer = &amp;quot;.&amp;quot;

reg.GetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue
If strValue &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
	Wscript.Echo strValue
Else
	Wscript.Echo &amp;quot;Default Login User Not Set&amp;quot;
End If
  
Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>153</cache_row_id>
          </sensor>
          <sensor>
            <id>306</id>
            <name>Logged in User Details</name>
            <hash>2106396979</hash>
            <string_count>0</string_count>
            <category>User</category>
            <description>Provides various properties for users which are currently logged into the machine.
Example: CORP\john.doe | John Doe | john.doe@organization.com</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Logged In User Details
&amp;#039;========================================

&amp;#039; This sensor will retrieve various properties of all users which are currently logged in

Option Explicit

Dim intRandomWaitInMilliseconds
intRandomWaitInMilliseconds = 10000
&amp;#039; each client will wait up to 10 seconds to retrieve information from AD to stagger the load

RandomWait(intRandomWaitInMilliseconds)

Dim strSep : strSep = &amp;quot;|&amp;quot;

Dim strReturnedAttribute1 : strReturnedAttribute1 = Trim(Unescape(&amp;quot;givenName&amp;quot;)) &amp;#039; first name
Dim strReturnedAttribute2 : strReturnedAttribute2 = Trim(Unescape(&amp;quot;sn&amp;quot;)) &amp;#039; last name
Dim strReturnedAttribute3 : strReturnedAttribute3 = Trim(Unescape(&amp;quot;proxyAddresses&amp;quot;)) &amp;#039; email addresses as array

&amp;#039;Get the NETBIOS name of the domain
Dim objSystemInfo,strDomain
Set objSystemInfo = CREATEOBJECT(&amp;quot;ADSystemInfo&amp;quot;)

On Error Resume Next
strDomain = objSystemInfo.DomainShortName
On Error Goto 0


&amp;#039; List all users currently logged in

Dim objWMIService,colItems,objItem,strUser,strUserDomain,i

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;) 
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Process Where Name=&amp;#039;explorer.exe&amp;#039;&amp;quot;,,48)

i = 0
For Each objItem in colItems
    objItem.GetOwner strUser, strUserDomain
    i = i + 1
    GetDetails strUser,strUserDomain
Next

If i = 0 Then
    Wscript.Echo &amp;quot;No users logged in&amp;quot;
End If


&amp;#039;&amp;#039; --- helper functions --- &amp;#039;&amp;#039;

Sub GetDetails(strUser,strUserDomain)
&amp;#039; Echo output with attributes
    Dim strDN,emails,strEmail,strPrimaryEmail,strBackupEmail,strOutEmail
    Dim strProperty1,strProperty2
    strDN = getUserDN(strUser,strUserDomain)
    emails = GetAttribute(strDN,strReturnedAttribute3)
    If IsArray(emails) Then &amp;#039; loop through all entries, try to pick primary
        strPrimaryEmail = &amp;quot;&amp;quot;
        strBackupEmail = &amp;quot;&amp;quot;
        strOutEmail = &amp;quot;&amp;quot;
        For Each strEmail In emails
            &amp;#039; primary has SMTP in capital letters
            strBackupEmail = Mid(strEmail,6,Len(strEmail))
            If InStr(strEmail,&amp;quot;SMTP&amp;quot;) = 1 Then
                strPrimaryEmail = Mid(strEmail,6,Len(strEmail))
            End If
        Next
        If strPrimaryEmail &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
            strOutEmail = strPrimaryEmail
        Else
            strOutEmail = strBackupEmail
        End If
    Else &amp;#039;single entry
        strOutEmail = GetAttribute(strDN,strReturnedAttribute3)
    End If
    
    If strOutEmail = &amp;quot;&amp;quot; Then strOutEmail = &amp;quot;Unknown or Local User&amp;quot;
    strProperty1 = &amp;quot;&amp;quot;
    strProperty2 = &amp;quot;&amp;quot;
    strProperty1 = GetAttribute(strDN,strReturnedAttribute1)
    
    If strProperty1 = &amp;quot;&amp;quot; Then 
        strProperty1 = &amp;quot;Unknown or Local&amp;quot;
        strProperty2 = &amp;quot;User&amp;quot;
    Else
        strProperty2 = GetAttribute(strDN,strReturnedAttribute2)
    End If
        
    WScript.Echo strUserDomain&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strUser&amp;amp;strSep&amp;amp;strProperty1 _
        &amp;amp;&amp;quot; &amp;quot;&amp;amp;strProperty2&amp;amp;strSep&amp;amp;strOutEmail
        
End Sub &amp;#039;GetDetails

Function RandomWait(intWaitTimeInMilliseconds)
&amp;#039; waits a random amount of time
    
    Randomize(TaniumRandomSeed)
    intWaitTimeInMilliseconds = Int( ( intWaitTimeInMilliseconds + 1 ) * Rnd )
    WScript.Sleep(intWaitTimeInMilliseconds)
    
End Function &amp;#039;RandomWait

Function GetAttribute(strDn,strAttribute)
&amp;#039; Returns the AD attribute of a DN
    
    Const E_ADS_PROPERTY_NOT_FOUND  = &amp;amp;h8000500D
    Dim objADObj,attribute
    
    On Error Resume Next
    Set objADObj = GetObject _
        (&amp;quot;LDAP://&amp;quot; &amp;amp; strDn)
    If Err.Number &amp;lt;&amp;gt; 0 Then
        &amp;#039; WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; Err.Description &amp;amp; &amp;quot; - cannot bind to AD&amp;quot;
    End If
    
    attribute = objADObj.Get(strAttribute)
     
    If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
        &amp;#039; WScript.Echo &amp;quot;The &amp;quot; &amp;amp; strAttribute &amp;amp; &amp;quot; attribute is not set in AD.&amp;quot;
    Else
        GetAttribute = attribute
    End If
    
    On Error Goto 0
    
End Function &amp;#039;GetAttribute

Function getUserDN(BYVAL strUser,BYVAL strUserDomain)
   &amp;#039; Function to get the distinguished name of a user
   &amp;#039; from the older domain format (domain\user) using
   &amp;#039; name translate
   
    On Error Resume Next
    CONST ADS_NAME_INITTYPE_GC = 3
    CONST ADS_NAME_TYPE_NT4 = 3
    Const ADS_NAME_TYPE_1779 = 1
   
    Dim objTrans
    
    SET objTrans = CREATEOBJECT(&amp;quot;NameTranslate&amp;quot;)
    &amp;#039; Initialize name translate using global catalog
    objTrans.Init ADS_NAME_INITTYPE_GC, &amp;quot;&amp;quot;
    &amp;#039; Input computer name (NT Format)
    objTrans.SET ADS_NAME_TYPE_NT4, strUserDomain &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strUser
    &amp;#039; Get Distinguished Name.
    getUserDN = objTrans.GET(ADS_NAME_TYPE_1779)
    On Error Goto 0
End Function &amp;#039;GetUserDN

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function TaniumRandomSeed
&amp;#039; for randomizing sensor code, the default seed is not random enough
    Dim timerNum
    timerNum = Timer()
    If timerNum &amp;lt; 1 Then
        TaniumRandomSeed = (GetTaniumComputerID / Timer() * 10 )
    Else
        TaniumRandomSeed = GetTaniumComputerID / Timer
    End If
End Function &amp;#039;TaniumRandomSeed

Function GetTaniumComputerID
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

    Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002
    
    Dim objReg
    Dim intClientID,strID,strKeyPath,strValueName,dwValue
    
    
    Set objReg=GetObject( _
        &amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp;_ 
        &amp;quot;.\root\default:StdRegProv&amp;quot;)
    strKeyPath = GetTaniumRegistryPath
    strValueName = &amp;quot;ComputerID&amp;quot;
    
    objReg.GetDWORDValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,dwValue
    GetTaniumComputerID = ReinterpretSignedAsUnsigned(dwValue)
    
End Function &amp;#039;GetTaniumComputerID

Function ReinterpretSignedAsUnsigned(ByVal x)
      If x &amp;lt; 0 Then x = x + 2^32
      ReinterpretSignedAsUnsigned = x
End Function &amp;#039;ReinterpretSignedAsUnsigned</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
for u in $(who -u | cut -d&amp;quot; &amp;quot; -f1 | sort | uniq)
do
   name=$(egrep &amp;quot;^$u:&amp;quot; /etc/passwd | awk -F: &amp;#039;{ print $5 }&amp;#039;)
   echo &amp;quot;$u|$name|&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
for u in $(who -u | cut -d&amp;quot; &amp;quot; -f1 | sort | uniq)
do
   name=$(egrep &amp;quot;^$u:&amp;quot; /etc/passwd | awk -F: &amp;#039;{ print $5 }&amp;#039;)
   echo &amp;quot;$u|$name|&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Userid</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Full Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Email Address</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>154</cache_row_id>
          </sensor>
          <sensor>
            <id>308</id>
            <name>Network Drives Accessed</name>
            <hash>2114351169</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the share path of network shares the host is connected to.
Example: \\\\server\\share</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select RemotePath from Win32_NetworkConnection</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>155</cache_row_id>
          </sensor>
          <sensor>
            <id>310</id>
            <name>CPU Manufacturer</name>
            <hash>2130080578</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The manufacturer of the CPU.
Example: GenuineIntel</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select Manufacturer from Win32_Processor</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
grep -m 1 -i &amp;quot;vendor_id&amp;quot; /proc/cpuinfo | awk -F&amp;quot;: &amp;quot; &amp;#039;{print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
cpu=$(system_profiler SPHardwareDataType | grep &amp;#039;Processor Name&amp;#039; | awk -F&amp;#039;:&amp;#039;  &amp;#039;{split($2,a,&amp;quot; &amp;quot;); print a[1]}&amp;#039;)
if [ &amp;quot;&amp;quot; = &amp;quot;$cpu&amp;quot; ]
then
	echo &amp;quot;Unknown&amp;quot;
else
	echo &amp;quot;$cpu&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
uname -i</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>156</cache_row_id>
          </sensor>
          <sensor>
            <id>312</id>
            <name>Outlook Version</name>
            <hash>2154864096</hash>
            <string_count>0</string_count>
            <category>Office</category>
            <description>Returns the version of Microsoft Office Outlook installed.
Example: Outlook 2003, Version: 11.0</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Outlook Version
&amp;#039;========================================

strExe = &amp;quot;outlook.exe&amp;quot;

EchoOutlookVersion(&amp;quot;Software\Microsoft\Office&amp;quot;)

WScript.Echo &amp;quot;Outlook not found&amp;quot;

Function PrintVersionString(strVersion)
	Select Case (Left(strVersion,4))
		Case &amp;quot;10.0&amp;quot;
			WScript.echo &amp;quot;Outlook 2002, Version:&amp;quot; &amp;amp; strVersion
			Exit Function
		Case &amp;quot;11.0&amp;quot;
			WScript.echo &amp;quot;Outlook 2003, Version:&amp;quot; &amp;amp; strVersion
			Exit Function
		Case &amp;quot;12.0&amp;quot; 
			WScript.echo &amp;quot;Outlook 2007, Version:&amp;quot; &amp;amp; strVersion
			Exit Function
		Case &amp;quot;14.0&amp;quot; 
			wscript.echo &amp;quot;Outlook 2010, Version:&amp;quot; &amp;amp; strVersion
			Exit Function
		Case &amp;quot;15.0&amp;quot; 
			wscript.echo &amp;quot;Outlook 2013, Version:&amp;quot; &amp;amp; strVersion
			Exit Function			
	End Select
	WScript.Echo &amp;quot;Unknown Outlook, Version: &amp;quot; &amp;amp; strVersion
End Function

Function EchoOutlookVersion(strKey)
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	Const HKLM = &amp;amp;h80000002
	strComputer = &amp;quot;.&amp;quot;
	Set reg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)
	
	If RegKeyExists(reg, HKLM, strKey) Then
&amp;#039;		WScript.Echo &amp;quot;Office Found, attempt to get path&amp;quot;
		
		reg.enumKey HKLM, strKey, subKeys
		
		For Each subKey In subKeys
			If RegKeyExists(reg, HKLM, strKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; subKey &amp;amp; &amp;quot;\Common\InstallRoot&amp;quot;) Then
				reg.getStringValue HKLM, strKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; subKey &amp;amp; &amp;quot;\Common\InstallRoot&amp;quot;, &amp;quot;Path&amp;quot;, strPath
				If Not IsNull(strPath) Then
					If fso.FolderExists(strPath) Then
						If fso.FileExists(strPath &amp;amp; &amp;quot;outlook.exe&amp;quot;) Then
							PrintVersionString(fso.GetFileVersion(strPath&amp;amp;&amp;quot;outlook.exe&amp;quot;))
							WScript.Quit
						End If	
					End If
				End If
			End If
		Next
	End If
End Function


Function RegKeyExists(objRegistry, sHive, sRegKey)
  Dim aValueNames, aValueTypes
  If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
    RegKeyExists = True
  Else
    RegKeyExists = False
  End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>157</cache_row_id>
          </sensor>
          <sensor>
            <id>314</id>
            <name>Last Logins</name>
            <hash>2177412849</hash>
            <string_count>0</string_count>
            <category>User</category>
            <description>Returns details about last logins on systems.
Example: user.name      pts/1    192.168.1.2  Thu Nov  8 22:07:30 -0800 2012</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
lastlog | tail -n +2 | grep -v &amp;quot;**Never&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
last | tail +2 | egrep -v &amp;quot;Never|reboot|shutdown|wtmp|^$&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get last logins
last | tail -n +2 | egrep -vi &amp;quot;never|reboot|shutdown|wtmp|^$&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>158</cache_row_id>
          </sensor>
          <sensor>
            <id>316</id>
            <name>Path Permissions</name>
            <hash>2183585490</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>Returns the permissions of the given file or folder path
Example:  NT AUTHORITY\SYSTEM (I)(F)</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; File Permissions
&amp;#039;========================================

Option Explicit

Const SINGLE_USER_WITH_PERMISSIONS = &amp;quot;NT AUTHORITY\SYSTEM&amp;quot;

Dim strPath, dictAcls, strUser

strPath = unescape(&amp;quot;||file||&amp;quot;)
&amp;#039;strPath = &amp;quot;c:\test\afile.txt&amp;quot;

Set dictAcls = GetPermissions(strPath)

If dictAcls Is Nothing Then
	WScript.Echo &amp;quot;Unable to get permissions or does not exist&amp;quot;
Else 
	&amp;#039; Process the ACLs.  Here what we will use to determine:
	&amp;#039;   If the directory only has access by one user, it is restricted.  Other wise it is not
	&amp;#039;   restricted.  If that single user matches our constant, then we just say &amp;quot;Restricted&amp;quot;, otherwise
	&amp;#039;   we say &amp;quot;Restricted - &amp;quot; &amp;amp; user name
	
	If dictAcls.Count = 0 Then
		WScript.Echo &amp;quot;Error:  No permissions&amp;quot;
	Else
		Dim strAcl
		For Each strAcl In dictAcls.Keys
			WScript.Echo strAcl &amp;amp; &amp;quot; &amp;quot; &amp;amp; dictAcls.Item(strAcl)
		Next
	End If 
End If


Function GetPermissions(strPath)
	Dim strCmd, objShell, objShellExec, objFSO, strCommandOutput, arrCommandOutput, dictResults, i
	Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	
	Set dictResults = Nothing
	If objFSO.FolderExists(strPath) Or objFSO.FileExists(strPath) Then
		
		If IsPreVista() Then 
			strCmd = &amp;quot;cmd /c cacls &amp;quot;&amp;amp;Chr(34)&amp;amp;strPath&amp;amp;Chr(34)
		Else 
			strCmd = &amp;quot;cmd /c icacls &amp;quot;&amp;amp;Chr(34)&amp;amp;strPath&amp;amp;Chr(34)
		
		End If	
		Set objShellExec = objShell.Exec(strCmd)
		
		strCommandOutput = objShellExec.StdOut.ReadAll
		If objShellExec.ExitCode = 0 Then
			&amp;#039; process the output
			arrCommandOutput = Split(strCommandOutput, vbLf)
			Set dictResults = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
			
			&amp;#039; clean the results, so its only the actual permissions, does not include the dir or spaces
			For i = 0 To UBound(arrCommandOutput)
				Dim strLine, arrPermissions
				strLine = Trim (arrCommandOutput(i))
				
				&amp;#039; if the line begins with the name of the folder, remove the name of the path
				If InStr(strLine, strPath) = 1 Then
					strLine = Trim(Right(strLine, Len(strLine) - Len(strPath)))
				End If 
				
				If strLine &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not (InStr(strLine, &amp;quot;Successfully processed&amp;quot;) &amp;gt; 0) Then 
					&amp;#039; skip blank lines, and the &amp;quot;Successfully processed 1 files; Failed processing 0 files&amp;quot; line
					arrPermissions = Split(strLine, &amp;quot;:&amp;quot;)
					If Not dictResults.Exists(arrPermissions(0)) And UBound(arrPermissions) &amp;gt; 0 Then
						&amp;#039; WScript.Echo &amp;quot;Adding &amp;quot; &amp;amp; arrPermissions(0) &amp;amp; &amp;quot;   &amp;quot; &amp;amp; arrPermissions(1)
						dictResults.Add arrPermissions(0), arrPermissions(1)
					End If
				End If 
			Next
		End If
	End If
	
	Set GetPermissions = dictResults
End Function

Function IsPreVista()
	Dim strMajorVersion, bResult
	
	bResult = False
	strMajorVersion = GetOSMajorVersion()
	
	If Left(strMajorVersion, 1) = &amp;quot;5&amp;quot; Then 
		bResult = True
	End If
	
	IsPreVista = bResult
End Function &amp;#039; IsPreVista

Function GetOSMajorVersion
	&amp;#039; Returns the OS Major Version
	&amp;#039; A different way to examine the OS instead of by name
	
	Dim objWMIService,colItems,objItem
	Dim strVersion
	
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;select Version from win32_operatingsystem&amp;quot;)    
	For Each objItem In colItems
		strVersion = objItem.Version &amp;#039; like 6.2.9200
		strVersion = Left(strVersion,Len(strVersion) - 5)
	Next
	
	GetOSMajorVersion = strVersion
	
End Function &amp;#039;GetOSMajorVersion


Function GetTaniumDir(strSubDir)
	&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
	&amp;#039;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	
	keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
	
	&amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
	On Error Resume Next
	strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
	On Error Goto 0
	
	If strPath = &amp;quot;&amp;quot; Then
		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
		On Error Resume Next
		strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
		On Error Goto 0
	End If
	
	If Not strPath = &amp;quot;&amp;quot; Then
		If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
			strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
		End If	
		
		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		If fso.FolderExists(strPath) Then
			If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
				&amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
				GeneratePath strPath &amp;amp; strSubDir, fso
			End If
			GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
		Else
			&amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
			WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
			GetTaniumDir = False
		End If
	Else
		WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
		GetTaniumDir = False
	End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
	GeneratePath = False
	
	If Not fso.FolderExists(pFolderPath) Then
		If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
			GeneratePath = True
			Call fso.CreateFolder(pFolderPath)
		End If
	Else
		GeneratePath = True
	End If
End Function &amp;#039;GeneratePath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;promptText&amp;quot;:&amp;quot;File or Folder Path&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{3}&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;File or Folder path must be at least 3 characters&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;helpString&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;The path to the file or folder permissions to return.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;promptText&amp;quot;:&amp;quot;File or Folder Path&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{3}&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;File or Folder path must be at least 3 characters&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;helpString&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;The path to the file or folder permissions to return.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;promptText&amp;quot;:&amp;quot;File or Folder Path&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{3}&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;File or Folder path must be at least 3 characters&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;helpString&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;The path to the file or folder permissions to return.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;promptText&amp;quot;:&amp;quot;File or Folder Path&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{3}&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;File or Folder path must be at least 3 characters&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;helpString&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;The path to the file or folder permissions to return.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"The path to the file or folder permissions to return.","helpString":"","defaultValue":"","promptText":"File or Folder Path","maxChars":0,"key":"file","restrict":null,"validationExpressions":[{"helpString":"File or Folder path must be at least 3 characters","expression":"\\S{3}","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>159</cache_row_id>
          </sensor>
          <sensor>
            <id>318</id>
            <name>Operating System Temp Directory</name>
            <hash>2222730558</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the gobal temp directory of the Operating System.
Example: C:\Temp</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select TempDirectory from win32_BootConfiguration</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
echo &amp;quot;/tmp&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
echo &amp;quot;/tmp&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>160</cache_row_id>
          </sensor>
          <sensor>
            <id>320</id>
            <name>Stopped Service Short Name</name>
            <hash>2254780098</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>A list of the short names of all services currently in the stopped state.
Example: defragsvc</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Name from win32_Service where State=&amp;#039;Stopped&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>161</cache_row_id>
          </sensor>
          <sensor>
            <id>322</id>
            <name>Monitor Resolution</name>
            <hash>2265461905</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns details about connected displays.
Example:1024 by 768 pixels, True Color, 60 Hertz</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select VideoMode from win32_DisplayControllerConfiguration</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Resolution</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Color Mode</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Refresh Rate</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>162</cache_row_id>
          </sensor>
          <sensor>
            <id>324</id>
            <name>AD Short Domain</name>
            <hash>2322714946</hash>
            <string_count>0</string_count>
            <category>Active Directory</category>
            <description>Returns the short, NetBIOS name of a machine's domain.
Example: CORP</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; AD Short Domain
&amp;#039;========================================

Option Explicit
On Error Resume Next 
Dim objSysInfo
Set objSysInfo = CreateObject(&amp;quot;ADSystemInfo&amp;quot;) 

If IsNull(objSysInfo.DomainShortName) Then
	WScript.Echo &amp;quot;N/A&amp;quot;
Else
	WScript.Echo objSysInfo.DomainShortName
End If</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>163</cache_row_id>
          </sensor>
          <sensor>
            <id>326</id>
            <name>SQL Server Databases</name>
            <hash>2344747808</hash>
            <string_count>0</string_count>
            <category>Software</category>
            <description>List of database names from SQL Server on client machines.
Example: tanium</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Server Databases
&amp;#039;========================================

Const adOpenStatic = 3
 Const adLockOptimistic = 3
 Set objConnection = CreateObject(&amp;quot;ADODB.Connection&amp;quot;) 
 Set objRecordSet = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;)  
 objConnection.Open _     
 &amp;quot;Provider=SQLOLEDB;Data Source=.;&amp;quot; &amp;amp; _         
 &amp;quot;Trusted_Connection=Yes;Initial Catalog=master;&amp;quot;  
 objRecordSet.Open &amp;quot;select name from master..sysdatabases&amp;quot;, _         
 objConnection, adOpenStatic, adLockOptimistic  
 ObjRecordSet.MoveFirst  
 for each Record in objRecordSet.Properties    
 strValue = objRecordSet(&amp;quot;name&amp;quot;)    
 wscript.echo strValue    
 ObjRecordSet.MoveNext    
 If (ObjRecordset.EOF = True) THEN       
 objRecordset.Close       
 Exit For    
End If 
next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>164</cache_row_id>
          </sensor>
          <sensor>
            <id>328</id>
            <name>Volume Group Names</name>
            <hash>2353715452</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>Display Volume Group Names</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
&amp;#039; 
&amp;#039; 

WScript.Echo &amp;quot;N/A on Windows&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
# get LVM Logical volumes
/usr/sbin/lvdisplay 2&amp;gt; /dev/null | grep &amp;quot;LV Name&amp;quot; | awk &amp;#039;{ print $3 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>165</cache_row_id>
          </sensor>
          <sensor>
            <id>330</id>
            <name>Predicted Disk Failures</name>
            <hash>2357545787</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns drives and the S.M.A.R.T. status of the drives on machines which have a failing drive reporting through S.M.A.R.T.
Example: Drive | SMART Report</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Predicted Disk Failures
&amp;#039;========================================

Option Explicit

Dim strSep

strSep = &amp;quot;|&amp;quot;
&amp;#039; Output is 
&amp;#039; Drive | S.M.A.R.T. Report


ShowSmartAlerts(strSep)

&amp;#039;----------End Main-------------&amp;#039;
Function ShowSmartAlerts(strSep)
	Dim strComputer
    dim objWMI, objInstance, objStatus, strStatus
    
    &amp;#039;Because this could bomb out
    On Error Resume Next

	strComputer = &amp;quot;.&amp;quot;
    Set objWMI = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\WMI&amp;quot;)

    Set objStatus = objWMI.InstancesOf(&amp;quot;MSStorageDriver_FailurePredictStatus&amp;quot;,48)
        For Each objDriveReport in objStatus
        	If objDriveReport.PredictFailure Then
                   WScript.Echo objDriveReport.InstanceName &amp;amp; strSep &amp;amp; objDriveReport.Reason
            End If
        Next

    On Error Goto 0
    
    &amp;#039;Cleanup
    Set objStatus = Nothing
    Set objWMI = Nothing
End Function &amp;#039;ShowSmartAlerts</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Drive</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>S.M.A.R.T. Report</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>166</cache_row_id>
          </sensor>
          <sensor>
            <id>332</id>
            <name>Load Average</name>
            <hash>2361722934</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the average CPU load on a Mac or Linux system 
Example: 0.00 0.03 0.10</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
line=$(cat /proc/loadavg)
set -- $line
echo $1 $2 $3</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
uptime | awk -F&amp;#039;: &amp;#039; &amp;#039; /load averages:/ { print $2 } &amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
/usr/bin/w | grep load | awk -F, &amp;#039;{ print $4 }&amp;#039; | awk &amp;#039;{ print $3 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get load average. Uses output from the w command
/usr/bin/w | grep load | awk -F, &amp;#039;{ print $4 }&amp;#039; | awk &amp;#039;{ print $3 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>167</cache_row_id>
          </sensor>
          <sensor>
            <id>334</id>
            <name>Client Time</name>
            <hash>2370758491</hash>
            <string_count>0</string_count>
            <category>Miscellaneous</category>
            <description>The local time on the managed client.
Example: 5:17:44 PM</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Client Time
&amp;#039;========================================

&amp;#039; This sensor will return the Time the client thinks it is

Option Explicit

SetLocale(GetTaniumLocale())

WScript.Echo FormatDateTime((Time), 3)

Function GetTaniumLocale() 
    Dim objWshShell, intLocaleID
    
    intLocaleID = &amp;quot;&amp;quot;
    
    Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    On Error Resume Next
    intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\&amp;quot; &amp;amp; GetTaniumRegistryPath() &amp;amp; &amp;quot;\LocaleID&amp;quot;)
    On Error Goto 0
    If intLocaleID = &amp;quot;&amp;quot; Then
        GetTaniumLocale = 1033 &amp;#039; default to us/English
    Else
        GetTaniumLocale = intLocaleID
    End If

    Set objWshShell = Nothing
End Function &amp;#039; GetTaniumLocale

&amp;#039; get-tanium-regpath.vbs

&amp;#039; Updated to always generate path so that GetTaniumDir can take multiple folder arguments
&amp;#039; Updated to always look for the Path string value and not assume a bogus entry
&amp;#039; in the wrong area is valid.  A valid entry will always have a Path string value
&amp;#039; uses objshell registry reads which should be faster and more reliable

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

date &amp;quot;+%r&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

date &amp;quot;+%r&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>168</cache_row_id>
          </sensor>
          <sensor>
            <id>336</id>
            <name>Installed Application Version</name>
            <hash>2387001299</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>The version string of applications which match the parameter given.
Example:  11.5.502.146</description>
            <creation_time>2015-09-14T13:39:11</creation_time>
            <modification_time>2015-09-14T13:39:11</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Installed Application Version
&amp;#039;========================================
&amp;#039;@INCLUDE=utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039; This sensor will return information in the uninstall areas of the registry.
&amp;#039; it is parameterized and will output the version string for an application that
&amp;#039; matches

SensorRandomize()

strApplicationMatchString = LCase(Trim(Unescape(&amp;quot;||application||&amp;quot;)))

Set objRegistry = Getx64RegistryProvider()
keyPath = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&amp;quot;
key64Path = &amp;quot;SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall&amp;quot;

Const HKLM = &amp;amp;H80000002
Const HKEY_USERS = &amp;amp;H80000003

&amp;#039; list out 32-bit applications on a 64-bit system
If RegKeyExists(HKLM, key64Path) Then
	objRegistry.EnumKey HKLM, key64Path, arrSubKeys
	GetApplications HKLM,key64path,arrSubKeys
End If

&amp;#039; list out 32-bit applications on a 32-bit system, or 64-bit applications
&amp;#039; on a 64-bit system.
If RegKeyExists(HKLM, keyPath) Then
	objRegistry.EnumKey HKLM, keypath, arrSubKeys
	GetApplications HKLM,keypath,arrSubKeys
End If

&amp;#039; Also list out applications installed to HKEY_Users areas
&amp;#039; which will be appended to the arrSubKeys

objRegistry.EnumKey HKEY_USERS, &amp;quot;&amp;quot;, arrUserKeys
For Each strSIDkey In arrUserKeys
	If RegKeyExists(HKEY_USERS, strSIDKEY&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath) Then
		objRegistry.EnumKey HKEY_USERS, strSIDkey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath, arrSubKeys
		GetApplications HKEY_USERS,strSIDKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;keyPath,arrSubKeys
	End If
Next


Function GetApplications(HIVE, keypath,arrSubKeys)
	Set applications = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
	On Error Resume Next
	For Each key in arrSubKeys
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;DisplayName&amp;quot;, displayName
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;DisplayVersion&amp;quot;, version
		objRegistry.GetDWORDValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;SystemComponent&amp;quot;, systemComponent	
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;UninstallString&amp;quot;, uninstallString	
		objRegistry.GetStringValue HIVE,keyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; key,&amp;quot;ParentKeyName&amp;quot;, parentKey	
	
		&amp;#039; assume it&amp;#039;s not uninstallable
		bUninstallable = &amp;quot;Not Uninstallable&amp;quot;
				
		If displayName &amp;lt;&amp;gt; &amp;quot;&amp;quot; _
			And Not IsNull(uninstallString) _ 
			And IsNull(parentKey) _
			And InStr(displayName, &amp;quot;Hotfix&amp;quot;) = 0 _
			And InStr(displayName, &amp;quot;Update for&amp;quot;) = 0 _
	 		And InStr(displayName, &amp;quot;Security Update for&amp;quot;) = 0 _
	 	Then 
	 		If InStr(LCase(uninstallString), &amp;quot;msiexec&amp;quot;) Then
	 			&amp;#039; replace any /I with /X and add silent flags
	 			uninstallString = Replace(uninstallString,&amp;quot;/I&amp;quot;,&amp;quot;/X&amp;quot;) &amp;amp; &amp;quot; /qn /noreboot&amp;quot; 
	  			bUninstallable = &amp;quot;Is Uninstallable&amp;quot;
	  		End If
	 		If IsNull(systemComponent) Or systemComponent = 0 Then
				If IsNull(version) Then
					version = GetVersionInString(displayName)
				End If
				&amp;#039; This is a multi-column sensor.  Last two columns are hidden.
				If InStr(LCase(displayName),strApplicationMatchString) &amp;gt; 0 Then
					displayString = version
					If Not applications.Exists(displayString) Then
						applications.Add displayString, &amp;quot;&amp;quot;
					End If 						
				End If
			End If 	
		End If 
	Next
	On Error Goto 0
	
	SortDictionary applications, 1 &amp;#039; This calls a sorting function specific to dictionaries
	arrApplicationsKeys = applications.Keys
	For Each application In arrApplicationsKeys
		&amp;#039; final output of the sensor
		WScript.Echo application
	Next
End Function &amp;#039;GetApplications

Function RegKeyExists(sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function SortDictionary(objDict, intSort)
 &amp;#039;   objDict - the dictionary to sort
 &amp;#039;   intSort - the field to sort (1=key, 2=item)
 
   &amp;#039; declare constants
   Const dictKey  = 1
   Const dictItem = 2
 
   &amp;#039; declare our variables
   Dim strDict()
   Dim objKey
   Dim strKey,strItem
   Dim X,Y,Z
 
   &amp;#039; get the dictionary count
   Z = objDict.Count
 
   &amp;#039; we need more than one item to warrant sorting
   If Z &amp;gt; 1 Then
     &amp;#039; create an array to store dictionary information
     ReDim strDict(Z,2)
     X = 0
     &amp;#039; populate the string array
     For Each objKey In objDict
         strDict(X,dictKey)  = CStr(objKey)
         strDict(X,dictItem) = CStr(objDict(objKey))
         X = X + 1
     Next
 
     &amp;#039; perform a a shell sort of the string array
     For X = 0 To (Z - 2)
       For Y = X To (Z - 1)
         If StrComp(strDict(X,intSort),strDict(Y,intSort),vbTextCompare) &amp;gt; 0 Then
             strKey  = strDict(X,dictKey)
             strItem = strDict(X,dictItem)
             strDict(X,dictKey)  = strDict(Y,dictKey)
             strDict(X,dictItem) = strDict(Y,dictItem)
             strDict(Y,dictKey)  = strKey
             strDict(Y,dictItem) = strItem
         End If
       Next
     Next
 
     &amp;#039; erase the contents of the dictionary object
     objDict.RemoveAll
 
     &amp;#039; repopulate the dictionary with the sorted information
     For X = 0 To (Z - 1)
       objDict.Add strDict(X,dictKey), strDict(X,dictItem)
     Next
 
   End If
 End Function &amp;#039;SortDictionary

Function GetVersionInString(ByVal strTemp)
&amp;#039; examines a string and returns a version string at the end of it
	Dim strOut
	strOut = &amp;quot;&amp;quot;
	If Not IsNull(strTemp) Then
		strTemp = StrReverse(strTemp)
		Dim strLookAtChar,intCurPos
		Dim bNumbersStartMarked : bNumbersStartMarked = False

		For intCurPos = 1 To Len(strTemp)		
			strLookAtChar = Mid(strTemp,intCurPos,1)
			If IsNumeric(strLookAtChar) Or strLookAtChar = &amp;quot;.&amp;quot; Or strLookAtChar = &amp;quot;-&amp;quot; Then
				bNumbersStartMarked = True
				strOut = strOut &amp;amp; strLookAtChar
			End If
		If bNumbersStartMarked And ( (Not IsNumeric(strLookAtChar) And strLookAtChar &amp;lt;&amp;gt; &amp;quot;.&amp;quot; And strLookAtChar &amp;lt;&amp;gt; &amp;quot;-&amp;quot;) ) Then
			Exit For
		End If	
		Next
		strOut = StrReverse(strOut)
	Else
		strOut = &amp;quot;&amp;quot;
	End If
	
	If Len(strOut) = 0 Then strOut = &amp;quot;N/A&amp;quot;
	
	GetVersionInString = strOut
	
End Function &amp;#039;GetVersionInString

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039;&amp;#039; -- Begin Random Sleep Functions -- &amp;#039;&amp;#039;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &amp;#039; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&amp;#039; sleeps for a random period of time, intSleepTime is in seconds
&amp;#039; if the sensor randomize flag is on
&amp;#039; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&amp;#039; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;amp;&amp;quot;\Sensor Data\Random Sleep&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeFlag&amp;quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeScalingPercentage&amp;quot;)
	On Error Goto 0
	If intRandomizeFlag &amp;gt; 0 Then
		If intRandomizeScalingPercentage &amp;gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &amp;quot;Randomize scaling percentage of &amp;quot; _ 
				&amp;amp; intRandomizeScalingPercentage &amp;amp; &amp;quot; applied, new sleep time is &amp;quot; &amp;amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &amp;#039; convert to milliseconds
		&amp;#039; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&amp;#039; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &amp;quot;Sleeping for &amp;quot; &amp;amp; intSensorRandomizeWaitTime &amp;amp; &amp;quot; milliseconds&amp;quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &amp;quot;Done sleeping, continuing ...&amp;quot;
	Else 
		SensorRandomizeEcho &amp;quot;SensorRandomize Not Enabled - No Op&amp;quot;
	End If
End Function &amp;#039;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&amp;#039; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &amp;lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID / Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID / Timer
	End If
End Function &amp;#039;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&amp;#039;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&amp;#039;&amp;#039; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &amp;quot;ComputerID&amp;quot;
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strKeyPath&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strValueName)
    If Err.Number &amp;lt;&amp;gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &amp;#039;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &amp;lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &amp;#039;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &amp;#039;SensorRandomizeEcho
&amp;#039; -- End Random Sleep Functions --&amp;#039;
&amp;#039;- End file: utils/SensorRandomization/SensorRandomizationFunctions.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
############################################
## Script Name: application_version.sh	            ##
## Created: 16 MAR 2014			            ##
## Author: James Hoscheit - Tanium                      ##
##              &amp;lt;james.hoscheit@tanium.com&amp;gt;	            ##
##              Egon Rinderer - Tanium                          ##
##              &amp;lt;egon.rinderer@tanium.com&amp;gt;               ##
## Purpose: To query an application version on   ##
##                  a Linux system.	                          ##
############################################


file=&amp;quot;||application||&amp;quot;

#if [ &amp;quot;$#&amp;quot; -eq &amp;quot;0&amp;quot; ]
#then
#	exit 1
#else
#	file=$1
#fi

if [ -f /bin/rpm ] #rpm based solutions
then
	installedPkg=`rpm -q $file`
	if [ `echo $installedPkg | grep -v &amp;#039;not installed&amp;#039; | grep -c $file` -gt 0 ]
	then
		echo $installedPkg | awk -F&amp;#039;el&amp;#039; &amp;#039;{print $1}&amp;#039; | awk -F&amp;#039;-&amp;#039; &amp;#039;{print $2}&amp;#039;
	else
		echo &amp;quot;not installed&amp;quot;
	fi

elif [ -f /usr/bin/apt-get ] #.deb based solutions
then
	installedPkg=`dpkg -l $file 2&amp;gt;/dev/null`
	installedPkg2=`echo $installedPkg | sed &amp;#039;s/^.*=== /ii.*$/&amp;#039;`
	if [ `echo $installedPkg2 | egrep -c &amp;#039;^ii&amp;#039;` -gt 0 ]
	then
		echo $installedPkg2 | egrep &amp;#039;^ii&amp;#039; | awk &amp;#039;{print $3}&amp;#039;
	else
		echo &amp;quot;not installed&amp;quot;
	fi
else
	echo &amp;quot;unknown Linux installed&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
############################################
## Script Name: application_version.sh	            ##
## Created: 16 MAR 2014			            ##
## Author: James Hoscheit - Tanium                      ##
##              &amp;lt;james.hoscheit@tanium.com&amp;gt;	            ##
##              Egon Rinderer - Tanium                          ##
##              &amp;lt;egon.rinderer@tanium.com&amp;gt;               ##
## Purpose: To query an application version on   ##
##                  a Mac system.	                          ##
############################################

version=`system_profiler SPApplicationsDataType | grep -i -A2 &amp;quot;||application||&amp;quot; | grep &amp;quot;^ *Version&amp;quot; | awk -F&amp;#039;: &amp;#039; &amp;#039;{print $2}&amp;#039;`

if [ ${#version} -eq 0 ]
then
     echo &amp;quot;Not installed&amp;quot;
else
     echo $version
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;application&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Adobe Flash Player&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Application Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the application name to search for&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||application||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
############################################
## Script Name: application_version.sh           
## Purpose: To query an application version on AIX
############################################

appname=&amp;quot;||application||&amp;quot;

/usr/bin/lslpp -Lq &amp;quot;$appname&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
if [ $? -eq 0 ]; then
  /usr/bin/lslpp -Lqc &amp;quot;$appname&amp;quot; | awk -F: &amp;#039;{ print $3 }&amp;#039;
else
  echo &amp;quot;not installed&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Application Name","helpString":"Enter the application name to search for","defaultValue":"","promptText":"e.g. Adobe Flash Player","maxChars":0,"key":"application","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>169</cache_row_id>
          </sensor>
          <sensor>
            <id>338</id>
            <name>CPU Architecture</name>
            <hash>2463256440</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Describes the architecture of the CPU/processor.
Example: i386, X86-based PC</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select SystemType from Win32_ComputerSystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
arch</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
arch</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
# Return CPU Family
arch -k</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
# Return CPU Architecture
echo $(uname -p)</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>170</cache_row_id>
          </sensor>
          <sensor>
            <id>340</id>
            <name>Registry Key Exists</name>
            <hash>2490353155</hash>
            <string_count>0</string_count>
            <category>Registry</category>
            <description>Returns True if the Registry Key exists, False if not.</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Registry Key Exists
&amp;#039;========================================

&amp;#039;Columns:
&amp;#039; User | Subkey Name | Architecture | KeyPath

strKey = unescape(&amp;quot;||strKey||&amp;quot;)

&amp;#039;strKey = &amp;quot;HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Tanium\Tanium Server&amp;quot;
&amp;#039;strKey = &amp;quot;HKEY_CURRENT_USER\Software\TortoiseSVN&amp;quot;

strSep = &amp;quot;|&amp;quot;


&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive


&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)
If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
	For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserName = GetUserForSIDLocal(objReg,strUserKey)
			If strUserName = False Then strUserName = strUserKey
			strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
			hasValues32 = RegKeyExists(objReg, constHive, strFullUserKey)
			If hasValues32 Then hasAnyResult = True
		End If
	Next
Else &amp;#039; was another hive
	hasValues32 = RegKeyExists(objReg, constHive, strKey)
	If hasValues32 Then hasAnyResult = True
End If

If Is64 Then
	Set objCtx = GetObjCtx(64)
	Set objReg = GetObjReg(objCtx)
	If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
	&amp;#039; go through each User&amp;#039;s hive in 64-bit context
		For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
				strUserName = GetUserForSIDLocal(objReg,strUserKey)
				If strUserName = False Then strUserName = strUserKey
				strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
				hasValues64 = RegKeyExists(objReg, constHive, strFullUserKey)
				If hasValues64 Then hasAnyResult = True	
			End If
		Next
	Else &amp;#039; was another hive	
		hasValues64 = RegKeyExists(objReg, constHive, strKey)
		If hasValues64 Then hasAnyResult = True	
	End If
End If

If (hasAnyResult) Then
	WScript.Echo &amp;quot;True&amp;quot;
Else
	WScript.Echo &amp;quot;False&amp;quot;
End If

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	GetSubKeys = Outparams.sNames
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function


Function GetHiveConst(hive)
	Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
	Const HKEY_CURRENT_USER   = &amp;amp;H80000001
	Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
	Const HKEY_USERS          = &amp;amp;H80000003

	Select Case UCase(hive)
		Case &amp;quot;HKLM&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKCR&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
			GetHiveConst = HKEY_CURRENT_USER
		Case &amp;quot;HKEY_USERS&amp;quot;
			GetHiveConst = HKEY_USERS
	End Select
	
	If IsEmpty(GetHiveConst) Then
		WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
		WScript.Quit
	End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
			strUserData = Left(strUserData,intDatPos - 1)
			&amp;#039; find last backslash
			intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
			&amp;#039; get right from that pos
			strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
			GetUserForSIDLocal = strUserData
		Else
			strUserData = False
		End If
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Registry Key","helpString":"Enter the registry key to query","defaultValue":"","promptText":"e.g. HKEY_USERS\\Software\\Key","maxChars":0,"key":"strKey","restrict":null,"validationExpressions":[{"helpString":"Value must be at least 5 characters","expression":"\\S{5}","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>171</cache_row_id>
          </sensor>
          <sensor>
            <id>342</id>
            <name>Default Printer</name>
            <hash>2505938414</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Name of the default printer.
Example: HP Color LaserJet 3500</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select DriverName from Win32_Printer Where Default = True</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>172</cache_row_id>
          </sensor>
          <sensor>
            <id>344</id>
            <name>AD Distinguished Name</name>
            <hash>2513829483</hash>
            <string_count>0</string_count>
            <category>Active Directory</category>
            <description>The full Active Directory distinguished name for the computer
Example: CN=Win8-test5,CN=Computers,DC=corp,DC=com</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; AD Distinguished Name
&amp;#039;========================================


&amp;#039; Returns a single column value
&amp;#039; Only checks a single registry context

Const GPKey = &amp;quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy&amp;quot;
Dim strSubKey,strValue,strSep,strKey,words,strHive,constHive,hasValues32,hasAnyResult
Dim hasValues64,strUserKey,strFullUserKey,bEchoOnlyValue
Dim objCtx,objReg,bSkipSecondCheckOverride

bEchoOnlyValue = True
bSkipSecondCheckOverride = True &amp;#039; Check in one place
strSubKey = &amp;quot;\State\Machine&amp;quot;
strValue = &amp;quot;Distinguished-Name&amp;quot;
strSep = &amp;quot;~~&amp;quot;

strKey = GPKey&amp;amp;strSubKey

&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive

&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)

If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
   For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
      If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
         strUserName = GetUserForSIDLocal(objReg,strUserKey)
         If strUserName = False Then strUserName = strUserKey
         strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
         hasValues32 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 32)
         If hasValues32 Then hasAnyResult = True
      End If
   Next
Else &amp;#039; was another hive
   hasValues32 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 32)
   If hasValues32 Then hasAnyResult = True
End If

&amp;#039; Do not return second value set in different context unnecessarily
Dim strKeyPrefix,bSkipSecondContextCheck
bSkipSecondContextCheck = False
strKeyPrefix = Split(strKey,&amp;quot;\&amp;quot;)(0) &amp;#039; Software, for instance, even for HEKY_USERS

Select Case Ucase(strKeyPrefix)
   Case &amp;quot;SOFTWARE&amp;quot;
      If bSkipSecondCheckOverride Then
         bSkipSecondContextCheck = True
      Else
         bSkipSecondContextCheck = False
      End If
   Case Else
      bSkipSecondContextCheck = True
End Select

If Is64 And Not bSkipSecondContextCheck Then
   Set objCtx = GetObjCtx(64)
   Set objReg = GetObjReg(objCtx)
   If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
   &amp;#039; go through each User&amp;#039;s hive in 64-bit context
      For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
      If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
            strUserName = GetUserForSIDLocal(objReg,strUserKey)
            If strUserName = False Then strUserName = strUserKey
            strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
            hasValues64 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 64)
            If hasValues64 Then hasAnyResult = True   
         End If
      Next
   Else &amp;#039; was another hive
      hasValues64 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 64)
      If hasValues64 Then hasAnyResult = True
   End If
End If

If Not (hasAnyResult) Then
   WScript.Echo &amp;quot;Key/Value not found&amp;quot;
End If

&amp;#039;Goes through all values in a key, returns True if strValue is found
Function CheckValues(objReg, objCtx, constHive, strKey, strValue, intBit)

   Dim Inparams, Outparams,arrNames,arrTypes,i,strValueName
   Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
   Inparams.Hdefkey = constHive
   Inparams.sSubkeyname = strKey
   Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
   
   arrNames = Outparams.sNames
   arrTypes = Outparams.Types

   If Not IsNull(arrNames) Then
      For i = LBound(arrNames) To UBound(arrNames)
         strValueName = arrNames(i)
         
         &amp;#039;if strValue is found, echo
         If LCase(strValueName) = LCase(strValue) Then
            EchoValue objReg, objCtx, constHive, strKey, strValue, arrTypes(i), intBit, bEchoOnlyValue
            CheckValues = True
            Exit Function
         End If
      Next
   End If
   CheckValues = False
End Function

Function GetDisplayString(strKey, strType, strValue, intBit, bEchoOnlyValue)
   Dim strArch
   If intBit = 64 Then
      strArch = &amp;quot;64-bit&amp;quot;
   Else
      strArch = &amp;quot;32-bit&amp;quot;
   End If
   If bEchoOnlyValue Then
      GetDisplayString = strValue
   Else
      GetDisplayString = _
         strValue &amp;amp; strSep &amp;amp; _
         strType &amp;amp; strSep &amp;amp; _
         strArch
   End If
End Function

Function EchoValue(objReg, objCtx, constHive, strKey, strValue, constType, intBit, bOnlyValueData)
   &amp;#039; Note the key that was being searched, will be a hidden column
   Dim strOutputKey
   strOutputKey = strHive&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
   
   Dim objInParams, objOutParams
   Select Case constType
      Case REG_SZ  
         Set objInParams = objReg.Methods_(&amp;quot;GetStringValue&amp;quot;).InParameters
         objInParams.hDefKey = constHive
         objInParams.sSubKeyName = strKey
         objInParams.sValueName = strValue         
         Set objOutParams = objReg.ExecMethod_(&amp;quot;GetStringValue&amp;quot;, objInParams, , objCtx)
         If bOnlyValueData Then
            WScript.Echo GetDisplayString(strKey, &amp;quot;REG_SZ&amp;quot;, objOutParams.sValue, intBit, bOnlyValueData)
         Else
            WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_SZ&amp;quot;, objOutParams.sValue, intBit) _
               &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
         End If
      Case REG_EXPAND_SZ
         Set objInParams = objReg.Methods_(&amp;quot;GetExpandedStringValue&amp;quot;).InParameters
         objInParams.hDefKey = constHive
         objInParams.sSubKeyName = strKey
         objInParams.sValueName = strValue         
         Set objOutParams = objReg.ExecMethod_(&amp;quot;GetExpandedStringValue&amp;quot;, objInParams, , objCtx)
         If bOnlyValueData Then
            WScript.Echo GetDisplayString(strKey, &amp;quot;REG_EXPAND_SZ&amp;quot;, objOutParams.sValue, intBit, bOnlyValueData)
         Else  
            WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_EXPAND_SZ&amp;quot;, objOutParams.sValue, intBit, bOnlyValueData) _
               &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
         End If
      Case REG_BINARY
         Set objInParams = objReg.Methods_(&amp;quot;GetBinaryValue&amp;quot;).InParameters
         objInParams.hDefKey = constHive
         objInParams.sSubKeyName = strKey
         objInParams.sValueName = strValue         
         Set objOutParams = objReg.ExecMethod_(&amp;quot;GetBinaryValue&amp;quot;, objInParams, , objCtx)

         strBytes = &amp;quot;&amp;quot;
         For Each uByte in objOutParams.uValue
            strTemp = Hex(uByte)
            If Len(strTemp) &amp;lt; 2 Then
               strTemp = &amp;quot;0&amp;quot; &amp;amp; strTemp
            End If   
            strBytes = strBytes &amp;amp; strTemp &amp;amp; &amp;quot; &amp;quot;
         Next
         If bOnlyValueData Then
            WScript.Echo GetDisplayString(strKey, &amp;quot;REG_BINARY&amp;quot;, strBytes, intBit)
         Else
            WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_BINARY&amp;quot;, strBytes, intBit, bOnlyValueData) _
               &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
         End If         
      Case REG_DWORD
          Set objInParams = objReg.Methods_(&amp;quot;GetDWordValue&amp;quot;).InParameters
          objInParams.hDefKey = constHive
          objInParams.sSubKeyName = strKey
          objInParams.sValueName = strValue
          Set objOutParams = objReg.ExecMethod_(&amp;quot;GetDWordValue&amp;quot;, objInParams, , objCtx)
         If bOnlyValueData Then
            WScript.Echo GetDisplayString(strKey, &amp;quot;REG_DWORD&amp;quot;, CStr(objOutParams.uValue), intBit, bOnlyValueData)
         Else     
            WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_DWORD&amp;quot;, CStr(objOutParams.uValue), intBit) _
               &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
         End If
      Case REG_QWORD
          Set objInParams = objReg.Methods_(&amp;quot;GetQWordValue&amp;quot;).InParameters
          objInParams.hDefKey = constHive
          objInParams.sSubKeyName = strKey
          objInParams.sValueName = strValue
          Set objOutParams = objReg.ExecMethod_(&amp;quot;GetQWordValue&amp;quot;, objInParams, , objCtx)
         If bOnlyValueData Then
            WScript.Echo GetDisplayString(strKey, &amp;quot;REG_QWORD&amp;quot;, CStr(objOutParams.uValue), intBit, bOnlyValueData)
         Else     
            WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_QWORD&amp;quot;, CStr(objOutParams.uValue), intBit) _
               &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
         End If
      Case REG_MULTI_SZ
          Set objInParams = objReg.Methods_(&amp;quot;GetMultiStringValue&amp;quot;).InParameters
          objInParams.hDefKey = constHive
          objInParams.sSubKeyName = strKey
          objInParams.sValueName = strValue
          Set objOutParams = objReg.ExecMethod_(&amp;quot;GetMultiStringValue&amp;quot;, objInParams, , objCtx)
      
         arrValues = objOutParams.sValue
         strResponse = &amp;quot;&amp;quot;

         For Each strTemp In arrValues
            If bOnlyValueData Then
               WScript.Echo GetDisplayString(strKey, &amp;quot;REG_MULTI_SZ&amp;quot;, strTemp, intBit, bOnlyValueData)
            Else
               WScript.Echo strUserName &amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_MULTI_SZ&amp;quot;, strTemp, intBit) _
                  &amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue
            End If
         Next

   End Select
End Function


Function GetObjCtx(intArch)
   Dim objCtx
   Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
   objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
   objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
   Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
   Dim objLocator, objServices
   Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
   Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
   Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
   Dim Inparams, Outparams
   Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
   Inparams.Hdefkey = constHive
   Inparams.sSubkeyname = strKey
   Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
   GetSubKeys = Outparams.sNames
End Function

Function Is64 
   Dim objWMIService, colItems, objItem
   Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
   Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
   For Each objItem In colItems
      If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
         Is64 = True
      Else
         Is64 = False
      End If      
   Next
End Function


Function GetHiveConst(hive)
   Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
   Const HKEY_CURRENT_USER   = &amp;amp;H80000001
   Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
   Const HKEY_USERS          = &amp;amp;H80000003

   Select Case UCase(hive)
      Case &amp;quot;HKLM&amp;quot;
         GetHiveConst = HKEY_LOCAL_MACHINE
      Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
         GetHiveConst = HKEY_LOCAL_MACHINE
      Case &amp;quot;HKCR&amp;quot;
         GetHiveConst = HKEY_CLASSES_ROOT
      Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
         GetHiveConst = HKEY_CLASSES_ROOT
      Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
         GetHiveConst = HKEY_CURRENT_USER
      Case &amp;quot;HKEY_USERS&amp;quot;
         GetHiveConst = HKEY_USERS
   End Select
   
   If IsEmpty(GetHiveConst) Then
      WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
      WScript.Quit
   End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

   Const HKLM = &amp;amp;h80000002
   
   Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
   
   strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
   objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
   If Not IsNull(strUserData) Then
   &amp;#039; strUserData would look like
   &amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
      intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
      &amp;#039; strip off the dat file
      If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
         strUserData = Left(strUserData,intDatPos - 1)
         &amp;#039; find last backslash
         intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
         &amp;#039; get right from that pos
         strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
         GetUserForSIDLocal = strUserData
      Else
         strUserData = False
      End If
   Else
      GetUserForSIDLocal = False
   End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>173</cache_row_id>
          </sensor>
          <sensor>
            <id>346</id>
            <name>Manufacturer</name>
            <hash>2542613392</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns System or Motherboard manufacturer (OS Dependent).
Example: Apple</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Manufacturer from win32_baseboard</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode -s system-manufacturer</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
echo Apple</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>174</cache_row_id>
          </sensor>
          <sensor>
            <id>348</id>
            <name>Installed HotFixes</name>
            <hash>254407409</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns a list of hotfixes that have previously been applied to the client machine.
Example: Microsoft National Language Support Downlevel APIs</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select Description from Win32_QuickFixEngineering</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
/usr/bin/lslpp -ec 2&amp;gt;&amp;amp;1</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>175</cache_row_id>
          </sensor>
          <sensor>
            <id>350</id>
            <name>Application Event Log Search</name>
            <hash>2574398281</hash>
            <string_count>0</string_count>
            <category>Miscellaneous</category>
            <description>A parameterized Sensor that allows an operator to search for a particular string in the Windows application event logs.
Example: The Apache service reported the following error: [Tue Jan 01 17:14:24 2010] [warn] PassEnv variable CommonProgramFiles(x86) was undefined</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Option Explicit 

Dim strQuery, objWMIService, objItem, colItems, strEvent, re, intEventLogDays

&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039; parameters &amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;&amp;#039;
&amp;#039; days back to look
intEventLogDays = 5
&amp;#039; string to look for
strEvent = Unescape(&amp;quot;||EVENT||&amp;quot;)

&amp;#039; for testing 
&amp;#039;strEvent = Unescape(&amp;quot;apache&amp;quot;)

&amp;#039; make sure the parameter only contains legal characters
Set re = New RegExp
re.Pattern = &amp;quot;^[ 0-9a-zA-Z]+$&amp;quot;
If Not re.Test(strEvent) Then
	WScript.Echo &amp;quot;Only space and alphanumeric characters allowed for parameter&amp;quot;
	WScript.Quit
End If 

strQuery = &amp;quot;Select * from Win32_NTLogEvent where LogFile = &amp;#039;Application&amp;#039; and Message like &amp;#039;%&amp;quot; &amp;amp; strEvent &amp;amp; &amp;quot;%&amp;#039; and TimeWritten &amp;gt; &amp;quot; &amp;amp; getLastMonthDate 
Set objWMIService = GetObject(&amp;quot;Winmgmts:{impersonationlevel=impersonate}!\Root\Cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(strQuery)   
For Each objItem in colItems
		If Not IsNull(objItem.Message) Then 
			WScript.Echo objItem.Message
		End If 
Next

Function GetLastMonthDate 
   &amp;#039;subtract &amp;quot;eventLogDays&amp;quot; days worth of seconds
   Dim epoc, monthAgo, strMon, strDay
   epoc = date2epoch(Now()) - intEventLogDays*24*60*60
   monthAgo = epoch2date(epoc)
   strMon = Month(monthAgo)
   If strMon &amp;lt; 10 Then
      strMon = &amp;quot;0&amp;quot;&amp;amp;strMon
   End If
   strDay = Day(monthAgo)
   If strDay &amp;lt; 10 Then
      strDay = &amp;quot;0&amp;quot;&amp;amp;strDay
   End If
   
   GetLastMonthDate = Year(monthAgo) &amp;amp; strMon &amp;amp; strDay
End Function

function date2epoch(myDate)
   date2epoch = DateDiff(&amp;quot;s&amp;quot;, &amp;quot;01/01/1970 00:00:00&amp;quot;, myDate)
end Function

function epoch2date(myEpoch)
   epoch2date = DateAdd(&amp;quot;s&amp;quot;, myEpoch, &amp;quot;01/01/1970 00:00:00&amp;quot;)
end Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 3 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{3}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;EVENT&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. terminated unexpectedly&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Event string to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the event string to search for&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||EVENT||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 3 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{3}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;EVENT&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. terminated unexpectedly&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Event string to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the event string to search for&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||EVENT||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 3 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{3}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;EVENT&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. terminated unexpectedly&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Event string to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the event string to search for&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||EVENT||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 3 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{3}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;EVENT&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. terminated unexpectedly&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Event string to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the event string to search for&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||EVENT||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Event string to search for","helpString":"Enter the event string to search for","defaultValue":"","promptText":"e.g. terminated unexpectedly","maxChars":0,"key":"EVENT","restrict":null,"validationExpressions":[{"helpString":"Value must be at least 3 characters","expression":"\\S{3}","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>176</cache_row_id>
          </sensor>
          <sensor>
            <id>352</id>
            <name>Motherboard Name</name>
            <hash>2595849133</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the motherboard product name of a system.
Example: 440BX Desktop Reference Platform</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Product from win32_baseboard</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode -s baseboard-product-name</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>177</cache_row_id>
          </sensor>
          <sensor>
            <id>354</id>
            <name>Video Graphics Card RAM</name>
            <hash>2607823237</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Amount of RAM in the video card in the client machine.
Example: 256MB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Video Graphics Card RAM
&amp;#039;========================================

&amp;#039; This sensor will return the amount of video RAM a machine 
&amp;#039; has in each card, in Megabytes

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_VideoController&amp;quot;,,48)

For Each objItem in colItems
	If Not isNull(objItem.AdapterRAM) Then
		WScript.Echo CLng((objItem.AdapterRAM /1024)/1024) &amp;amp; &amp;quot;MB&amp;quot;
	End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>NumericInteger</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>178</cache_row_id>
          </sensor>
          <sensor>
            <id>356</id>
            <name>UAC Status</name>
            <hash>2614767778</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns Enabled or Disabled based on the status of Windows User Access Control on the client machine.
Example: Enabled</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; UAC Status
&amp;#039;========================================
&amp;#039; This will determine whether UAC is on or off

Option Explicit

WScript.Echo GetUACStatus

Function GetUACStatus
&amp;#039; This function uses the correct way to access 64-bit registry
&amp;#039; in a 32-bit context to query a single registry value and
&amp;#039; Determine if UAC is on
	
	Dim objReg, objCtx
	Dim strUACRegKey, strUACRegVal, strUACStatus
	
	Const HKLM = &amp;amp;H80000002
	
	If Is64 Then
		Set objCtx = GetObjCtx(64)
		Set objReg = GetObjReg(objCtx)
	Else
		Set objCtx = GetObjCtx(32)
		Set objReg = GetObjReg(objCtx)
	End If

	strUACRegKey = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\&amp;quot;
	strUACRegVal = &amp;quot;EnableLua&amp;quot;
	
		&amp;#039;RegKeyExists Example
	If RegKeyExists(objReg, HKLM, strUACRegKey) Then
		strUACStatus = CStr(GetDwordValue(objReg, HKLM, strUACRegKey, strUACRegVal))
		
		If strUACStatus = &amp;quot;1&amp;quot; Then 
			GetUACStatus = &amp;quot;Enabled&amp;quot;
		ElseIf strUACStatus = &amp;quot;0&amp;quot; Then
			GetUACStatus = &amp;quot;Disabled&amp;quot;
		Else
			GetUACStatus = &amp;quot;UAC Not Applicable to this OS&amp;quot;
		End If		
	Else
		GetUACStatus = &amp;quot;Pre-UAC OS&amp;quot;
	End If
	
	&amp;#039; Cleanup
	Set objReg = Nothing
	Set objCtx = Nothing
End Function &amp;#039;GetUACStatus

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
	&amp;#039; Cleanup
	Set objWMIService = Nothing
	Set colItems = Nothing
End Function &amp;#039;Is64


Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function &amp;#039;GetObjCtx

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function &amp;#039;GetObjReg

Function RegKeyExists(objReg, constHive, strKey)
	Dim objNames, objTypes, objValues, Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams)
	
	If Outparams.ReturnValue = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
	&amp;#039; Cleanup
	Set Inparams = Nothing
	Set Outparams = Nothing		
End Function &amp;#039;RegKeyExists

Function GetDWordValue(objReg, constHive, strKey, strValue)
	Dim objInParams, objOutParams
    Set objInParams = objReg.Methods_(&amp;quot;GetDWordValue&amp;quot;).InParameters
    objInParams.hDefKey = constHive
    objInParams.sSubKeyName = strKey
    objInParams.sValueName = strValue
    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetDWordValue&amp;quot;, objInParams)
	If Not IsNull(objOutParams) Then
		If Not IsNull(objOutParams.uValue) Then
			GetDWordValue = CStr(objOutParams.uValue)
		End If
	End If
	&amp;#039; Cleanup
	Set objInParams = Nothing
	Set objOutParams = Nothing
End Function &amp;#039;GetDWordValue</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>179</cache_row_id>
          </sensor>
          <sensor>
            <id>358</id>
            <name>Domain Member</name>
            <hash>2620257697</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns true if the machine is part of an Active Directory domain.
Example: TRUE, FALSE</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select PartofDomain from win32_ComputerSystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>180</cache_row_id>
          </sensor>
          <sensor>
            <id>360</id>
            <name>Network Throughput Total</name>
            <hash>2623590847</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the current total throughput, in KB/Sec, of the network interface used to connect to the tanium server.
Example: 2048 KB/S</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Network Throughput Total
&amp;#039;========================================

&amp;#039; This sensor will use windows performance counters
&amp;#039; and attempt to retrieve network traffic information
&amp;#039; only for the interface being used to connect to the tanium server
&amp;#039; results are in kilobytes per second

Option Explicit

Dim strTaniumIPAddress: strTaniumIPAddress = GetTaniumIPAddress
Dim strComputer: strComputer = &amp;quot;.&amp;quot;


Dim strDescriptionToMatch, strNameToMatch, strIPAddress, strFinalOutputString
Dim objWMIService, colItems, objItem

&amp;#039; First we get the &amp;quot;Name&amp;quot; property of the adapter with our target IP address
&amp;#039; out of WMI.  Because Name is the closest thing to match the Description
&amp;#039; field in the performance counter, but it&amp;#039;s not exact due to how some
&amp;#039; characters are displayed, we will remove troublesome characters
&amp;#039; and attempt to match on that

&amp;#039; Since the entire sensor&amp;#039;s output depends on if the two strings match, we
&amp;#039; can set the one string to something it won&amp;#039;t match on (because _) to be safe
strDescriptionToMatch = &amp;quot;_ImpossibleToMatch&amp;quot;

Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_NetworkAdapterConfiguration where IPEnabled = True&amp;quot;,,48)
For Each objItem In colItems
	For Each strIPAddress In objItem.IPAddress
		If strIPAddress = strTaniumIPAddress Then
			&amp;#039; WScript.Echo &amp;quot;IP Address Tanium is using: &amp;quot; &amp;amp; strIPAddress
			strDescriptionToMatch = CleanString(objItem.Description)
			&amp;#039; WScript.Echo &amp;quot;Description to be matched: &amp;quot; &amp;amp; strDescriptionToMatch
		End If
	Next
Next

Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfFormattedData_Tcpip_NetworkInterface&amp;quot;,,48)

For Each objItem in colItems
	strNameToMatch = CleanString(objItem.Name)
	&amp;#039; WScript.Echo &amp;quot;Name: &amp;quot; &amp;amp; strNameToMatch
	If LCase(strNameToMatch) = LCase(strDescriptionToMatch) Then
		&amp;#039; WScript.Echo &amp;quot;I have matched &amp;quot; &amp;amp; strNameToMatch &amp;amp; &amp;quot; and &amp;quot; &amp;amp; strDescriptionToMatch
		&amp;#039; We can now report bandwidth
		strFinalOutputString = FormatNumber(objItem.BytesTotalPersec / 1024,0,-1) &amp;amp; &amp;quot; KB/S&amp;quot;
	End If
Next

If strFinalOutputString = &amp;quot;&amp;quot; Then
	&amp;#039; The two names are too dissimilar, or can&amp;#039;t get IP address for tanium client
	WScript.Echo &amp;quot;Cannot determine which adapter to measure&amp;quot;
Else 
	WScript.Echo strFinalOutputString
End If


&amp;#039; Cleanup
Set objWMIService = Nothing
Set colItems = Nothing 
Set objItem = Nothing

&amp;#039;&amp;#039; End Main Line

&amp;#039;&amp;#039; Helper Functions
Function CleanString(strInput)
&amp;#039; This function will remove non-alphanumeric characters
	Dim objRegEx
	
	Set objRegEx = CreateObject(&amp;quot;VBScript.RegExp&amp;quot;)
	
	objRegEx.Global = True   
	objRegEx.Pattern = &amp;quot;[^A-Za-z0-9]&amp;quot;
	CleanString = objRegEx.Replace(strInput, &amp;quot;&amp;quot;)
	
	Set objRegEx = Nothing
End Function &amp;#039;CleanString

Function GetTaniumIPAddress
&amp;#039; Modified from the ua-scan code to remove the subnet and last octet calculations
&amp;#039; which are irrelevant for these purposes.
&amp;#039; Returns the IP address that the client uses for Tanium activity
&amp;#039; (talking to server and other clients)

	Dim strComputer, objReg, strCommand, objShell, objScriptExec
	Dim strResults, arrPathPingLines, strPathPingLine, arrPathPingWords
	Dim strIPAddress, strTaniumPath, strClientAddress
	Dim strServerName
	
	strComputer = &amp;quot;.&amp;quot;
	Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)
	Const HKLM = &amp;amp;h80000002
	
		
	&amp;#039;&amp;#039;###########Get Tanium Key on 64/32bit computers##########
	
	strTaniumPath = GetTaniumRegistryPath()
	
	
	&amp;#039; if we can pull this from the registry (newer client version), just use that
	objReg.GetStringValue HKLM, strTaniumPath &amp;amp; &amp;quot;\Status&amp;quot;, &amp;quot;ClientAddress&amp;quot;, strClientAddress
	If strClientAddress &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
		strClientAddress = Left(strClientAddress,InStr(strClientAddress,&amp;quot;_&amp;quot;)-1)
		strClientAddress = Right(strClientAddress,len(strClientAddress)-InStrRev(strClientAddress,&amp;quot;:&amp;quot;))
		&amp;#039; WScript.Echo &amp;quot;Found &amp;quot; &amp;amp; strClientAddress &amp;amp; &amp;quot; in Registry&amp;quot;
		GetTaniumIPAddress = strClientAddress
		&amp;#039;Cleanup
		Set objReg = Nothing
		Exit Function
	End If
	
	&amp;#039;Otherwise use PathPing to determine client IP used by Tanium

	&amp;#039;&amp;#039;# Read the ServerName value

	objReg.GetStringValue HKLM, strTaniumPath, &amp;quot;ServerName&amp;quot;, strServerName

	strCommand = &amp;quot;pathping -4 -q 1 -w 1 -n &amp;quot; &amp;amp; strServerName
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	strResults = objScriptExec.StdOut.ReadAll
	
	arrPathPingLines = Split(strResults, vbCrLf)
	For Each strPathPingLine In arrPathPingLines
		arrPathPingWords = Split(CleanWhitespace(Trim(strPathPingLine)), &amp;quot; &amp;quot;)
		If UBound(arrPathPingWords) &amp;gt; 0 Then
			If arrPathPingWords(0) = &amp;quot;0&amp;quot; Then
				strIPAddress = arrPathPingWords(1)
				Exit For
			End If
		End If	
	Next
	
	Set objShell = Nothing
	Set objScriptExec = Nothing
	Set objReg = Nothing

	If Not IsNull(strIPAddress) Then
		GetTaniumIPAddress = strIPAddress
	Else
		GetTaniumIPAddress = False
	End If
End Function &amp;#039;GetTaniumIPAddress

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function CleanWhitespace(strStarter)
	Dim intStarter, i, strChars
	intStarter = Len(strStarter)
	For i = intStarter to 2 Step -1
		strChars = Space(i)
		strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
	Next
	CleanWhitespace = strStarter
End Function &amp;#039;CleanWhiteSpace</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>181</cache_row_id>
          </sensor>
          <sensor>
            <id>362</id>
            <name>Packet Loss</name>
            <hash>2648511780</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns data about percent of packet loss on Windows machines.
Example: 5 %</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Packet Loss
&amp;#039;========================================

&amp;#039; This sensor looks at TCP-level performance counters and
&amp;#039; does some basic math to determine a packet loss percentage


Option Explicit

Dim objWMIService,colItems
Dim objItem,strFinalOutputString

Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfFormattedData_Tcpip_TCPv4&amp;quot;,,48)

For Each objItem in colItems
	If (objItem.SegmentsRetransmittedPersec &amp;gt; 0 AND objItem.SegmentsPerSec &amp;gt; 0) Then
		strFinalOutputString = FormatNumber(objItem.SegmentsRetransmittedPersec / objItem.SegmentsPerSec * 100,0,-1) &amp;amp; &amp;quot; %&amp;quot;
		WScript.Echo strFinalOutputString
	Else
		WScript.Echo &amp;quot;Cannot determine packet loss&amp;quot;
	End If
	
Next

&amp;#039; Cleanup
Set objWMIService = Nothing
Set colItems = Nothing 
Set objItem = Nothing</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>182</cache_row_id>
          </sensor>
          <sensor>
            <id>364</id>
            <name>Local Account Last Password Change Days Ago</name>
            <hash>2680423840</hash>
            <string_count>0</string_count>
            <category>User</category>
            <description>Returns local accounts and number of days ago that the password was changed.
Example:
user.name|19</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Local Account Last Password Change Days Ago
&amp;#039;========================================


Option Explicit

Dim objAccounts,objUser,dtmLastPasswordChangeDate,intDaysSince
Dim strChangeDate,strSep


strSep = &amp;quot;|&amp;quot;
&amp;#039; Multi-column output
&amp;#039; Account Name|Days Since Last Password Change
SetLocale(1033) &amp;#039;Uses RFC822, requires US/English

On Error Resume Next

Set objAccounts = GetObject(&amp;quot;WinNT://.&amp;quot;)
objAccounts.Filter = Array(&amp;quot;User&amp;quot;)

For Each objUser In objAccounts
	On Error Resume Next
	dtmLastPasswordChangeDate = GetObject(&amp;quot;WinNT://./&amp;quot;&amp;amp;objUser.Name).PasswordAge
	If IsNull(objUser.PasswordAge) Then
		Wscript.Echo objUser.Name&amp;amp;strSep&amp;amp;&amp;quot;N/A&amp;quot;
	Else
		dtmLastPasswordChangeDate = DateAdd(&amp;quot;s&amp;quot;, -objUser.PasswordAge, Now())
		intDaysSince = Abs(DateDiff(&amp;quot;d&amp;quot;,Now(),dtmLastPasswordChangeDate))
		strChangeDate = vbTimeToRFC822(dtmLastPasswordChangeDate,GetRFC822Bias)
		On Error Resume Next
		If objUser.PasswordAge = 0 Then
			intDaysSince = &amp;quot;Never&amp;quot;
		End If
		On Error Goto 0
		Wscript.Echo objUser.Name&amp;amp;strSep&amp;amp;intDaysSince
	End If
Next



Function vbTimeToRFC822(myDate, offset)
&amp;#039;SetLocale outside of function in global scope
&amp;#039; must be set so that month is displayed with US/English abbreviations
&amp;#039; as per the standard

	If Not GetLocale = 1033 Then
		WScript.Echo &amp;quot;Locale Code must be 1033, use SetLocale&amp;quot;
		WScript.Quit
	End If
   Dim myDay, myDays, myMonth, myYear
   Dim myHours, myMinutes, myMonths, mySeconds

   myDate = CDate(myDate)
   myDay = WeekdayName(Weekday(myDate),true)
   myDays = zeroPad(Day(myDate), 2)
   myMonth = MonthName(Month(myDate), true)
   myYear = Year(myDate)
   myHours = zeroPad(Hour(myDate), 2)
   myMinutes = zeroPad(Minute(myDate), 2)
   mySeconds = zeroPad(Second(myDate), 2)

   vbTimeToRFC822 = myDay&amp;amp;&amp;quot;, &amp;quot;&amp;amp; _
                                  myDays&amp;amp;&amp;quot; &amp;quot;&amp;amp; _
                                  myMonth&amp;amp;&amp;quot; &amp;quot;&amp;amp; _ 
                                  myYear&amp;amp;&amp;quot; &amp;quot;&amp;amp; _
                                  myHours&amp;amp;&amp;quot;:&amp;quot;&amp;amp; _
                                  myMinutes&amp;amp;&amp;quot;:&amp;quot;&amp;amp; _
                                  mySeconds&amp;amp;&amp;quot; &amp;quot;&amp;amp; _ 
                                  offset
End Function &amp;#039;vbTimeToRFC822


Function zeroPad(m, t)
   zeroPad = String(t-Len(m),&amp;quot;0&amp;quot;)&amp;amp;m
End Function

Function GetRFC822Bias
&amp;#039; This function returns a string which is a 
&amp;#039; timezone bias for RFC822 format
&amp;#039; considers daylight savings
&amp;#039; we choose 4 digits and a sign (+ or -)

	Dim objWMIService,colTimeZone,objTimeZone
	
	Dim intTZBiasInMinutes,strSign,strReturnString

	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
	    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
	Set colTimeZone = objWMIService.ExecQuery(&amp;quot;Select * from Win32_ComputerSystem&amp;quot;)
	 
	For Each objTimeZone in colTimeZone
	    intTZBiasInMinutes = objTimeZone.CurrentTimeZone
	Next

	&amp;#039; The offset is explicitly signed
	If intTZBiasInMinutes &amp;lt; 0 Then
		strSign = &amp;quot;-&amp;quot;
	Else
		strSign = &amp;quot;+&amp;quot;
	End If
	
	strReturnString = CStr(Abs(intTZBiasInMinutes))
	&amp;#039; no offset is greater than three digits but RFC822 bias seems to
	&amp;#039; usually take the form of 1 alpha / 4 digit as described as 
	&amp;#039; valid in ANSI X3.51-1975

	strReturnString = zeroPad(strReturnString,4)

	GetRFC822Bias = strSign&amp;amp;strReturnString
	
	&amp;#039;Cleanup
	Set colTimeZone = Nothing
	Set objWMIService = Nothing
	
End Function &amp;#039;GetRFC822Bias</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Account Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Days Since Last Password Change</name>
                <index>1</index>
                <value_type>NumericInteger</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <cache_row_id>183</cache_row_id>
          </sensor>
          <sensor>
            <id>366</id>
            <name>PowerShell Version</name>
            <hash>2704923764</hash>
            <string_count>0</string_count>
            <category>PowerShell</category>
            <description>Returns the version(s) of PowerShell installed on a system
Example: 2.0</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; PowerShell Version
&amp;#039;========================================

Option Explicit

Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002 
Dim objReg
Dim strKeyPath,arrValueNames,arrValueTypes,i,strValue,strValue3,strKey3Path, strKey 
Dim bV1orV2NotFound, bV3Found

Set objReg=Getx32RegistryProvider

&amp;#039;Depending on the PowerShell version the key path will be different. 
&amp;#039;As of July 2015 the two situations are \1\ (versions 1 and 2) or \3\ (versions &amp;gt; 2)
strKeyPath = &amp;quot;Software\Microsoft\PowerShell\1\PowerShellEngine&amp;quot;
strKey3Path = &amp;quot;Software\Microsoft\PowerShell\3\PowerShellEngine&amp;quot;
strKey = &amp;quot;PowerShellVersion&amp;quot;

&amp;#039;Check if newer versions are installed
objReg.GetStringValue HKEY_LOCAL_MACHINE,strKey3Path,strKey,strValue
&amp;#039;If newer versions were not found fall back to legacy path
If IsNull(strValue) Then
    objReg.GetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strKey,strValue
End If
&amp;#039;if the legacy path is does not exist then PowerShell is not installed
If IsNull(strValue) Then
    WScript.Echo &amp;quot;PowerShell not installed&amp;quot;
Else
    WScript.Echo strValue
End If

Function Getx32RegistryProvider
    &amp;#039; Returns the 32 bit registry provider on all platforms:  32 bit on 32 bit systems, 32 bit on 64 bit systems
    &amp;#039; Useful if you want your script to behave the same regardless of if run in 32 bit or 64 bit cscript
    Dim objWMIService, iArchType, objCtx, objLocator, objServices, objRegProv
    
    iArchType = 32
   
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx32RegistryProvider = objRegProv
End Function &amp;#039; Getx32RegistryProvider</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>184</cache_row_id>
          </sensor>
          <sensor>
            <id>368</id>
            <name>Local Printers</name>
            <hash>2706539957</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns printers which are not connected via Network
Example: HP LaserJet 4400c</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select DriverName from Win32_Printer where Network = False</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>185</cache_row_id>
          </sensor>
          <sensor>
            <id>370</id>
            <name>Tanium Client Neighborhood</name>
            <hash>2735360016</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Returns the Forward Peers and Backwards Peers returned by the server with which the client should communicate.
Example: 10.0.0.1:17472, 10.0.02:17472 | 10.0.0.10:17472</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client Neighborhood List
&amp;#039;========================================

Option Explicit

Const INCLUDE_PORTS = False

Dim strClientIPAddress, strNeighborhoodList
Dim arrIPs, strIP, strPort, bReachedMe, strBackwards, strForwards

strClientIPAddress = Trim(GetClientIPAddress())
strNeighborhoodList = Trim(GetNeighborhoodList())

If(strClientIPAddress = &amp;quot;&amp;quot;) Then 
	WScript.Echo &amp;quot;Error:  Client IP Address Not Found&amp;quot;
	WScript.Quit
End If

If(strNeighborhoodList = &amp;quot;&amp;quot;) Then 
	WScript.Echo &amp;quot;Error:  Neighborhood List Not Found&amp;quot;
	WScript.Quit
End If

arrIPs = Split(strNeighborhoodList, &amp;quot;,&amp;quot;)
strBackwards = &amp;quot;&amp;quot;
strForwards = &amp;quot;&amp;quot;
bReachedMe = False
For Each strIP In arrIPs
	strIP = Trim(strIP)
	strPort = GetIPPort(strIP)
	If strIP = strClientIPAddress Then 
		bReachedMe = True
	ElseIf strPort &amp;lt;&amp;gt; &amp;quot;0&amp;quot; Then 	
		If Not bReachedMe Then 
			strBackwards = strBackwards &amp;amp; GetReadableIPs(strIP) &amp;amp; &amp;quot; &amp;quot;
		ElseIf bReachedMe Then 
			strForwards = strForwards &amp;amp; GetReadableIPs(strIP) &amp;amp; &amp;quot; &amp;quot;
		End If
	End If
Next

strBackwards = Replace(Trim(strBackwards), &amp;quot; &amp;quot;, &amp;quot;,&amp;quot;)
strForwards = Replace(Trim(strForwards), &amp;quot; &amp;quot; , &amp;quot;,&amp;quot;)


WScript.Echo strBackwards &amp;amp; &amp;quot;|&amp;quot; &amp;amp; strForwards

&amp;#039;----------End Main Line-----------&amp;#039;

Function GetReadableIPs(strIPs)
	Dim arrFront, arrIPInfo, strPort, strResult
	arrFront = Split(strIPs,&amp;quot;_&amp;quot;)
	arrIPInfo = Split(arrFront(0), &amp;quot;:&amp;quot;)
	strPort = arrIPInfo(1)
	
	If INCLUDE_PORTS Then 
		strResult = arrIPInfo(2) &amp;amp; &amp;quot;:&amp;quot; &amp;amp; strPort
	Else 
		strResult = arrIPInfo(2)
	End If 

	GetReadableIPs = strResult
End Function &amp;#039; GetReadableIPs

Function GetIPPort(strIPs)
	Dim arrFront, arrIPInfo, strPort
	arrFront = Split(strIPs,&amp;quot;_&amp;quot;)
	arrIPInfo = Split(arrFront(0), &amp;quot;:&amp;quot;)
	strPort = arrIPInfo(1)
	
	GetIPPort = strPort
End Function &amp;#039; GetIPPort

Function GetClientIPAddress()
	Const HKLM = &amp;amp;h80000002
	
	Dim strTaniumRegistryKey, strComputer, strClientIPAddress
	Dim objReg
	
	&amp;#039; Set up access to registry via WMI
	strComputer = &amp;quot;.&amp;quot;
	
	Set objReg = _
		GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; _ 
		&amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

	strTaniumRegistryKey = GetTaniumRegistryPath() &amp;amp; &amp;quot;\Status&amp;quot;

	objReg.GetStringValue HKLM, strTaniumRegistryKey, &amp;quot;ClientAddress&amp;quot;, strClientIPAddress
	
	If Not IsNull(strClientIPAddress) Then
		GetClientIPAddress = strClientIPAddress
	Else
		GetClientIPAddress = &amp;quot;&amp;quot;
	End If

	&amp;#039; Cleanup
	Set objReg = Nothing


End Function &amp;#039; GetClientIPAddress

Function GetNeighborhoodList()
	Const HKLM = &amp;amp;h80000002
	
	Dim strTaniumRegistryKey, strComputer, strNeighborhoodList
	Dim objReg
	
	&amp;#039; Set up access to registry via WMI
	strComputer = &amp;quot;.&amp;quot;
	
	Set objReg = _
		GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; _ 
		&amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

	strTaniumRegistryKey = GetTaniumRegistryPath() &amp;amp; &amp;quot;\Status&amp;quot;

	objReg.GetStringValue HKLM, strTaniumRegistryKey, &amp;quot;NeighborhoodList&amp;quot;, strNeighborhoodList
	
	If Not IsNull(strNeighborhoodList) Then
		GetNeighborhoodList = strNeighborhoodList
	Else
		GetNeighborhoodList = &amp;quot;&amp;quot;
	End If

	&amp;#039; Cleanup
	Set objReg = Nothing
End Function &amp;#039;GetLogLevel

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
CI=$(cat TaniumClientStatus.ini | grep ClientAddress= | sed -r &amp;#039;s/512\:([0-9]{1,5})://g&amp;#039; | sed -e &amp;#039;s/, / /g&amp;#039; -e &amp;#039;s/_/ /g&amp;#039; -e &amp;#039;s/ClientAddress=//g&amp;#039; | xargs -n1 | sort -u | xargs)
TS=$(cat TaniumClientStatus.ini | grep NeighborhoodList= | sed -r &amp;#039;s/512\:([0-9]{1,5})://g&amp;#039; | sed -e &amp;#039;s/, / /g&amp;#039; -e &amp;#039;s/_/ /g&amp;#039; -e &amp;#039;s/NeighborhoodList=//g&amp;#039; -e &amp;#039;s/ /, /g&amp;#039; -e &amp;#039;s/$/, /g&amp;#039; | xargs -n1 | sort -u | sort -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n | xargs | sed -e &amp;#039;s/,$//g&amp;#039;)
TFS=$( echo $TS | rev | cut -c 1- | rev | sed -e &amp;#039;s/.*&amp;#039;$CI&amp;#039;, //g&amp;#039; -e &amp;#039;s/.*&amp;#039;$CI&amp;#039;$/NoAddress_NoAddress/g&amp;#039; -e &amp;#039;s/ //g&amp;#039;)
TBS=$( echo $TS | sed -e &amp;#039;s/&amp;#039;$CI&amp;#039;.*//g&amp;#039; -e &amp;#039;s/ //g&amp;#039; -e &amp;#039;s/,$//g&amp;#039;)
echo $TBS&amp;quot;|&amp;quot;$TFS</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Backwards</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Forwards</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <cache_row_id>186</cache_row_id>
          </sensor>
          <sensor>
            <id>372</id>
            <name>Primary Owner Name</name>
            <hash>2753029185</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the name of the Primary System Owner on Windows.  This  is set at OS install time.
Example: John Doe</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select PrimaryOwnerName from win32_ComputerSystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>187</cache_row_id>
          </sensor>
          <sensor>
            <id>374</id>
            <name>Tanium Client Action Timing</name>
            <hash>2758038984</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>The number of seconds it took to download and complete the Action once a Client first sees the Action.
Example: 300 seconds</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Action Timing
&amp;#039;========================================

strId = unescape(&amp;quot;||strId||&amp;quot;)

strDownloadPath =  GetTaniumDir(&amp;quot;Downloads&amp;quot;)

Dim fso
Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

strActionLog = strDownloadPath &amp;amp; &amp;quot;action_&amp;quot; &amp;amp; strId &amp;amp; &amp;quot;.log&amp;quot;

Const ForReading = 1


If fso.FileExists(strActionLog) Then
	Set objReadLog = fso.OpenTextFile(strActionLog, ForReading)

	dim strLine

	Do Until objReadLog.AtEndOfStream
	    strLine = objReadLog.ReadLine
	Loop

	objReadLog.Close

	if instr(strLine, &amp;quot;Command Completed&amp;quot;) &amp;gt; 0 Then
		Set objLog = fso.GetFile(strActionLog)
		dCreated = objLog.DateCreated
		dModified = objLog.DateLastModified
		Wscript.echo DateDiff(&amp;quot;s&amp;quot;, dCreated, dModified) &amp;amp; &amp;quot; seconds&amp;quot;
	else
		Wscript.echo &amp;quot;Action in process&amp;quot;
	End if
Else
	Wscript.echo &amp;quot;Action does not exist&amp;quot;
End If

Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
    
    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
            strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
        End If  
    
        Dim fso
        Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
        If fso.FolderExists(strPath) Then
            If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
                &amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
                GeneratePath strPath &amp;amp; strSubDir, fso
            End If
            GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
        Else
            &amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
            WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
            GetTaniumDir = False
        End If
    Else
        WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
        GetTaniumDir = False
    End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
    GeneratePath = False

    If Not fso.FolderExists(pFolderPath) Then
        If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
            GeneratePath = True
            Call fso.CreateFolder(pFolderPath)
        End If
    Else
        GeneratePath = True
    End If
End Function &amp;#039;GeneratePath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;strId&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\d+&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Numbers only&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. 1234&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the Action ID number as seen in the Action History&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Action ID number&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strId||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;strId&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\d+&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Numbers only&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. 1234&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the Action ID number as seen in the Action History&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Action ID number&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strId||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;strId&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\d+&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Numbers only&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. 1234&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the Action ID number as seen in the Action History&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Action ID number&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strId||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;strId&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\d+&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Numbers only&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. 1234&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the Action ID number as seen in the Action History&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Action ID number&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strId||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Action ID number","helpString":"Enter the Action ID number as seen in the Action History","defaultValue":"","promptText":"e.g. 1234","maxChars":0,"key":"strId","restrict":null,"validationExpressions":[{"helpString":"Numbers only","expression":"\\d+","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>60</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>188</cache_row_id>
          </sensor>
          <sensor>
            <id>376</id>
            <name>BIOS Current Language</name>
            <hash>2759217311</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Currently configured language for the BIOS.
Example: en|US|iso8859-1</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select CurrentLanguage from win32_BIOS</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>189</cache_row_id>
          </sensor>
          <sensor>
            <id>378</id>
            <name>Maximum Process Memory Size</name>
            <hash>276664624</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the maximum amount of memory, in Kilobytes, that a process can use.  This may be free physical RAM and virtual RAM combined, or may be an arbitrary upper ceiling.
Example: 2097024</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select MaxProcessMemorySize from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

MEM=$(ulimit -d)
echo $MEM</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/usr/xpg4/bin/sh

MEM=$(ulimit -d)
echo $MEM</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh

MEM=$(ulimit -d)
echo $MEM</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>190</cache_row_id>
          </sensor>
          <sensor>
            <id>380</id>
            <name>Network Adapter Name</name>
            <hash>2783988057</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the names of network adapters that are active.
Example: VMware Accelerated AMD PCNet Adapter</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Name from win32_networkadapter where NetConnectionStatus=2</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
lspci | grep Ethernet | awk -F&amp;#039;Ethernet controller: &amp;#039; &amp;#039;{print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
ifconfig -a | grep flags | awk -F: &amp;#039;{ print $1 }&amp;#039; | grep -v lo0 | sort -u</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get ethernet network adapter names
lscfg | grep Ethernet | awk &amp;#039;{ print $2 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>191</cache_row_id>
          </sensor>
          <sensor>
            <id>382</id>
            <name>Is Mac</name>
            <hash>2800817874</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns whether the machine is a Mac.  True if so, False if not.
Example: True</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Is Mac
&amp;#039;========================================

Wscript.echo &amp;quot;False&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
echo True</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>192</cache_row_id>
          </sensor>
          <sensor>
            <id>384</id>
            <name>Last Reboot</name>
            <hash>2811135310</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the time the last reboot occurred.
Example: 2012-12-11 09:01</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Last Reboot
&amp;#039; (See also OS Boot Time)
&amp;#039;========================================

&amp;#039; This sensor will return the time the OS booted up

Option Explicit

Dim dateBootTime, strFinalOutputString, strSep
&amp;#039; Force output in a specific time format
SetLocale(1033)

strSep = &amp;quot;|&amp;quot;
dateBootTime = GetBootTime

WScript.Echo Year(dateBootTime) &amp;amp; &amp;quot;-&amp;quot; &amp;amp; zeroPad(Month(dateBootTime),2) &amp;amp; &amp;quot;-&amp;quot; &amp;amp; zeroPad(Day(dateBootTime),2) &amp;amp; &amp;quot; &amp;quot; &amp;amp; FormatDateTime(dateBootTime,vbShortTime)

&amp;#039;-----------End Main-------------&amp;#039;

Function zeroPad(m, t)
	zeroPad = String(t-Len(m),&amp;quot;0&amp;quot;)&amp;amp;m
End Function &amp;#039;zeroPad
  
Function GetBootTime
&amp;#039; Retrieves a nicely formatted bootup time
    Dim objSWbemDateTime
    Dim objWMIService
    Dim colOperatingSystems
    Dim objOperatingSystem
    Dim strComputer
    Dim colTimeZone
    Dim objTimeZone
    Dim intTZBiasInMinutes
    Dim dateBootTime
    
    strComputer = &amp;quot;.&amp;quot;
    
    Set objSWbemDateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
    Set colOperatingSystems = objWMIService.ExecQuery (&amp;quot;Select * from Win32_OperatingSystem&amp;quot;)
     
    For Each objOperatingSystem in colOperatingSystems
        objSWbemDateTime.Value = objOperatingSystem.LastBootUpTime
        dateBootTime = CDate(objSWbemDateTime.GetVarDate(False))
    Next

    &amp;#039; Now to correct for time zones 
    Set colTimeZone = objWMIService.ExecQuery(&amp;quot;Select * from Win32_ComputerSystem&amp;quot;)
     
    For Each objTimeZone in colTimeZone
        intTZBiasInMinutes = objTimeZone.CurrentTimeZone
        dateBootTime = DateAdd(&amp;quot;n&amp;quot;, intTZBiasInMinutes, dateBootTime)
    Next

    
    &amp;#039;return result
    GetBootTime = dateBootTime
    
    &amp;#039;Cleanup
    Set objSWbemDateTime = Nothing
    Set objWMIService = Nothing
    Set colOperatingSystems = Nothing
    Set colTimeZone = Nothing

End Function &amp;#039;GetBootTime</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
line=$(who -b)
set -- $line
echo ${line#*&amp;quot;boot&amp;quot;}</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
temp=$(who -b | awk -F&amp;#039;~ &amp;#039; &amp;#039; /reboot/ { print $2 } &amp;#039;)
echo $temp</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
last reboot| tail -1 | cut -d&amp;#039; &amp;#039; -f4-8</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>193</cache_row_id>
          </sensor>
          <sensor>
            <id>386</id>
            <name>Time Zone Offset</name>
            <hash>2811171321</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the time offset in minutes. Example: -0700</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Time Zone Offset
&amp;#039;========================================

Option Explicit

WScript.Echo GetRFC822Bias

Function GetRFC822Bias
&amp;#039; This function returns a string which is a 
&amp;#039; timezone bias for RFC822 format
&amp;#039; considers daylight savings
&amp;#039; we choose 4 digits and a sign (+ or -)

	Dim objWMIService,colTimeZone,objTimeZone
	
	Dim intTZBiasInMinutes,strSign,strReturnString

	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
	    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
	Set colTimeZone = objWMIService.ExecQuery(&amp;quot;Select * from Win32_ComputerSystem&amp;quot;)
	 
	For Each objTimeZone in colTimeZone
	    intTZBiasInMinutes = objTimeZone.CurrentTimeZone
	Next

	&amp;#039; The offset is explicitly signed
	If intTZBiasInMinutes &amp;lt; 0 Then
		strSign = &amp;quot;-&amp;quot;
	Else
		strSign = &amp;quot;+&amp;quot;
	End If
	
	strReturnString = CStr(Abs(intTZBiasInMinutes))
	&amp;#039; no offset is greater than three digits but RFC822 bias seems to
	&amp;#039; usually take the form of 1 alpha / 4 digit as described as 
	&amp;#039; valid in ANSI X3.51-1975

	strReturnString = zeroPad(strReturnString,4)

	GetRFC822Bias = strSign&amp;amp;strReturnString
	
	&amp;#039;Cleanup
	Set colTimeZone = Nothing
	Set objWMIService = Nothing
	
End Function &amp;#039;GetRFC822Bias

Function zeroPad(m, t)
   zeroPad = String(t-Len(m),&amp;quot;0&amp;quot;)&amp;amp;m
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
echo `date +%z`</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
echo `date +%z`</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
date &amp;#039;+%z&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>194</cache_row_id>
          </sensor>
          <sensor>
            <id>388</id>
            <name>File Creation Date</name>
            <hash>2812601404</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>Returns the creation date of the file specified by the parameter.
Example: 12-12-2014 18:00</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; File Creation Date
&amp;#039;========================================
Option Explicit

SetLocale(1033)

Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFilePath,o
strFilePath = unescape(&amp;quot;||filepath||&amp;quot;)
&amp;#039; Testing strings
&amp;#039;strFilePath = unescape(&amp;quot;%userprofile%\AppData\afile.txt&amp;quot;)
&amp;#039;strFilePath = unescape(&amp;quot;c:\Windows\regedit.exe&amp;quot;)

strFilePath = FixFileSystemRedirectionForPath(strFilePath)

Set o = New TaniumOutput

If InStr(LCase(strFilePath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFilePath
Else
    ListNoUserVars strFilePath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict

Sub ListFileCreationDate(strFilePath,strUserProfileName)
	Dim bUserDirsFlag, fso, objFile, dCreation, strCreation
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FileExists(strFilePath) Then
		Set objFile = fso.GetFile(strFilePath)
   		dCreation = objFile.DateCreated
   		strCreation = FormatDateTime(dCreation, vbShortDate) &amp;amp; &amp;quot; &amp;quot; &amp;amp; FormatDateTime(dCreation, vbShortTime)

		If bUserDirsFlag Then
			o.AddLine &amp;quot;User Profile: &amp;quot; &amp;amp; strUserProfileName &amp;amp; &amp;quot; : &amp;quot; &amp;amp; strCreation
		Else
			o.AddLine strCreation
		End If
	Else
		If Not bUserDirsFlag Then
			o.AddLine &amp;quot;File &amp;quot; &amp;amp; strFilePath &amp;amp; &amp;quot; not found&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFilePath)
&amp;#039; plain check if a file exists
    strFilePath = FixFileSystemRedirectionForPath(strFilePath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFilePath = objShell.ExpandEnvironmentStrings( strFilePath )
	
	ListFileCreationDate strFilePath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFilePath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFilePath = Replace(LCase(strFilePath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFilePath = objShell.ExpandEnvironmentStrings( strFilePath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFileCreationDate strValue&amp;amp;strFilePath, strValue
        End If
    Next

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {   &amp;quot;parameters&amp;quot;:[      {         &amp;quot;validationExpressions&amp;quot;:[            {               &amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,               &amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,               &amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,               &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,               &amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;            }         ],         &amp;quot;key&amp;quot;:&amp;quot;filepath&amp;quot;,         &amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\windows\\test.txt, or %userprofile%\\test.txt&amp;quot;,         &amp;quot;label&amp;quot;:&amp;quot;File path and name to search for&amp;quot;,         &amp;quot;helpString&amp;quot;:&amp;quot;Enter the file path of which to return the creation date.  Only %userprofile% is acceptable to loop through user directories.&amp;quot;,         &amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;restrict&amp;quot;:null,         &amp;quot;maxChars&amp;quot;:0,         &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,         &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;      }   ],   &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,   &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filepath||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

urldecode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/\+/ /g&amp;#039; -e &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

filename=$(urldecode &amp;quot;||filepath||&amp;quot;)

if [ ! -n &amp;quot;$filename&amp;quot; ]
then
	echo ERROR: file name not specified
	exit 1
fi

stat -f &amp;quot;%SB&amp;quot; &amp;quot;$filename&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {   &amp;quot;parameters&amp;quot;:[      {         &amp;quot;validationExpressions&amp;quot;:[            {               &amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,               &amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,               &amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,               &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,               &amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;            }         ],         &amp;quot;key&amp;quot;:&amp;quot;filepath&amp;quot;,         &amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\windows\\test.txt, or %userprofile%\\test.txt&amp;quot;,         &amp;quot;label&amp;quot;:&amp;quot;File path and name to search for&amp;quot;,         &amp;quot;helpString&amp;quot;:&amp;quot;Enter the file path of which to return the creation date.  Only %userprofile% is acceptable to loop through user directories.&amp;quot;,         &amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;restrict&amp;quot;:null,         &amp;quot;maxChars&amp;quot;:0,         &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,         &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;      }   ],   &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,   &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filepath||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {   &amp;quot;parameters&amp;quot;:[      {         &amp;quot;validationExpressions&amp;quot;:[            {               &amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,               &amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,               &amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,               &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,               &amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;            }         ],         &amp;quot;key&amp;quot;:&amp;quot;filepath&amp;quot;,         &amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\windows\\test.txt, or %userprofile%\\test.txt&amp;quot;,         &amp;quot;label&amp;quot;:&amp;quot;File path and name to search for&amp;quot;,         &amp;quot;helpString&amp;quot;:&amp;quot;Enter the file path of which to return the creation date.  Only %userprofile% is acceptable to loop through user directories.&amp;quot;,         &amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;restrict&amp;quot;:null,         &amp;quot;maxChars&amp;quot;:0,         &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,         &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;      }   ],   &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,   &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filepath||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"File path and name to search for","helpString":"Enter the file path of which to return the creation date.  Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\windows\\test.txt, or %userprofile%\\test.txt","maxChars":0,"key":"filepath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>BESDate</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>195</cache_row_id>
          </sensor>
          <sensor>
            <id>390</id>
            <name>IP Connections</name>
            <hash>2819106613</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the protocol, local address / port, process name, application name, remote port, and connection state for all active IP connections on an endpoint.
Example: tcp|192.168.95.186:51866|explorer.exe|Windows Explorer|165.254.58.66:80|established</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; IP Connections
&amp;#039;========================================

&amp;#039;Option Explicit

Dim showProcess, showPort, showRemoteConnection

showProcess = True
showRemotePort = True
showLocalPort = False
showRemoteConnection = True

Dim strcommand, results, excludeProcesses, excludeSubnets, excludeListenPorts, excludeRemotePorts, taniumDebug
Dim strSep : strSep = &amp;quot;|&amp;quot;
&amp;#039; This is a multi-column sensor that looks like:
&amp;#039;Process|Name|Target IP

excludeProcesses = &amp;quot;TaniumClient.exe,TaniumReceiver.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;chrome.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;iexplore.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;chrome.exe, iexplore.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;trillian.exe&amp;quot;

excludeSubnets = &amp;quot;127.0.0.0:255.255.255.0&amp;quot;
&amp;#039;excludeSubnets = &amp;quot;72.14.213.0:255.255.255.0, 74.125.223.0:255.255.255.0-74.125.225.0:255.255.255.0&amp;quot;

excludeListenPorts = &amp;quot;17472&amp;quot;
&amp;#039; excludeListenPorts = &amp;quot;17472,80,443&amp;quot;

excludeRemotePorts = &amp;quot;17472&amp;quot;
&amp;#039; excludeRemotePorts = &amp;quot;17472,80,443&amp;quot;

taniumDebug = False


excludeProcesses = Split(LCase(excludeProcesses), &amp;quot;,&amp;quot;)
excludeSubnets = Split(excludeSubnets, &amp;quot;,&amp;quot;)
excludeListenPorts = Split(excludeListenPorts, &amp;quot;,&amp;quot;)
excludeRemotePorts = Split(excludeRemotePorts, &amp;quot;,&amp;quot;)

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)  
query = &amp;quot;select name, executablepath, processId from win32_process&amp;quot;
Set colResults = objWMIService.ExecQuery(query)

&amp;#039;dictionary for process-app pairs
Set processes = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

For Each result In colResults 
   processId = CStr(result.ProcessId)
   processPath = result.ExecutablePath
   processes.Add processId, result.Name &amp;amp; &amp;quot;,&amp;quot; &amp;amp; processPath &amp;#039; tie IDs to exes,path - split later
Next

&amp;#039; unlike established connections, shows connections in all states
strcommand = &amp;quot;cmd /c netstat -aon -p TCP | find &amp;quot; &amp;amp; chr(34) &amp;amp; &amp;quot;TCP&amp;quot; &amp;amp; Chr(34)

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Set objScriptExec = objShell.Exec (strCommand)
strNSResults = LCase(objScriptExec.StdOut.ReadAll)

results = Split(strNSResults, vbCrLf)
j = 0

For Each line in results
   line = cleanWhitespace(Trim(line))
   
   lineResults = Split(line)
   i = 0
   Dim strPort, strPid, strConnectionState, strForeignIP, strApp
   For Each word In lineResults
      If i = 0 Then
         strProtocol = word   
      ElseIf i = 1 Then
         strLocalIP = word
      ElseIf i = 2 Then
         strForeignIP = word
      ElseIf i = 3 Then
         strConnectionState = word
      ElseIf i = 4 Then
         strPid = word
      End If
      
      i = i + 1
   Next
   
   &amp;#039;DO NOT INCLUDE EXCLUDED APPS
   strAppEntry = processes.Item(strPid) &amp;#039; looks like process.exe, Process Path
   arrAppEntry = Split(strAppEntry,&amp;quot;,&amp;quot;)
   strAppExe = arrAppEntry(0)
   strAppPath = arrAppEntry(1)
   
   isNotExcludedApp = Not(ContainedInArray(LCase(strAppExe), excludeProcesses))
   
   &amp;#039;DO NOT INCLUDE EXCLUDED SUBNETS
   isNotExcludedSubnet = Not(ContainedInSubnet(strForeignIP, excludeSubnets))
   
   &amp;#039;DO NOT INCLUDE EXCLUDED LISTEN PORTS
   isNotExcludedListenPort = Not(ContainedInArray(Split(strLocalIP, &amp;quot;:&amp;quot;)(1), excludeListenPorts))
   
   &amp;#039;DO NOT INCLUDE EXCLUDED REMOTE PORTS
   isNotExcludedRemotePort = Not(ContainedInArray(Split(strForeignIP, &amp;quot;:&amp;quot;)(1), excludeRemotePorts))
   
   If Not(IsEmpty(strAppExe)) _
      And isNotExcludedApp _ 
      And isNotExcludedSubnet _
      And isNotExcludedListenPort _
      And IsNotExcludedRemotePort Then

	  If Not showRemotePort Then 
	  	arrTemp = Split(strForeignIP, &amp;quot;:&amp;quot;)
		strForeignIP = arrTemp(0)
	  End If

	  If Not showLocalPort And strConnectionState &amp;lt;&amp;gt; &amp;quot;listening&amp;quot; Then 
	  	arrTemp = Split(strLocalIP, &amp;quot;:&amp;quot;)
		strLocalIP = arrTemp(0)
	  End If
   
      If showProcess Then
      	results(j) = strProtocol &amp;amp; strSep &amp;amp; strLocalIP &amp;amp; strSep &amp;amp; strAppExe &amp;amp; strSep &amp;amp; ProcessNameToApplicationName(strAppPath,strAppExe) &amp;amp; strSep &amp;amp; strForeignIP &amp;amp; strSep &amp;amp; strConnectionState
      Else
        results(j) = strProtocol &amp;amp; strSep &amp;amp; strLocalIP &amp;amp; strSep &amp;amp; strSep &amp;amp; strForeignIP &amp;amp; strSep &amp;amp; strConnectionState
      End If	
   Else
      If taniumDebug Then WScript.Echo &amp;quot;      excluded: &amp;quot; &amp;amp; strApp &amp;amp; &amp;quot; &amp;quot; &amp;amp; strForeignIP
      results(j) = &amp;quot;&amp;quot;   
   End If 
   
   j = j + 1
Next

results = RemDups(results)

If UBound(results) &amp;lt; 1 Then
	If GetLocale() &amp;lt;&amp;gt; 1033 Then
		WScript.Echo &amp;quot;English Language OS Required&amp;quot;
	End If
End If

For Each result In results 
   WScript.Echo result
Next

WScript.Quit

Function ContainedInSubnet(str, arr)
   Dim strIp, strSubnet, strMask
   temp = Split(str, &amp;quot;:&amp;quot;)
   strIp = temp(0)

   For Each item In arr
      If InStr(item, &amp;quot;-&amp;quot;) Then &amp;#039;Subnet range
         temp = Split(item, &amp;quot;-&amp;quot;)
         lower = Split(temp(0), &amp;quot;:&amp;quot;)
         upper = Split(temp(1), &amp;quot;:&amp;quot;)
         lowerSubnet = Trim(lower(0))
         lowerMask = Trim(lower(1))
         upperSubnet = Trim(upper(0))
         upperMask = Trim(upper(1))
         
         If StringToBinary(strIp) &amp;gt; StringToBinary(Subnet(lowerSubnet, lowerMask)) _
            And StringToBinary(strIp) &amp;lt; StringToBinary(Subnet(upperSubnet, upperMask)) Then
            ContainedInSubnet = True
            Exit Function
         End If 
      Else &amp;#039;Single subnet
         parts = Split(item, &amp;quot;:&amp;quot;)
         strSubnet = Trim(parts(0))
         strMask = Trim(parts(1))
         If Subnet(strIp, strMask) = Subnet(strSubnet, strMask) Then
            ContainedInSubnet = True
            Exit Function
         End If
      End If 
   Next
   ContainedInSubnet = False
End Function

Function ContainedInArray(str, arr)
   For Each item In arr 
      If str = Trim(item) Then
         ContainedInArray = True
         Exit Function
      End If   
   Next
   ContainedInArray = False
End Function

Function cleanWhitespace(strStarter)
   intStarter = Len(strStarter)
   For i = intStarter to 2 Step -1
      strChars = Space(i)
      strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
   Next
   cleanWhitespace = strStarter
End Function

Function RemDups(ByVal anArray)
   Dim d, item, thekeys
   Set d = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
   d.removeall
   d.CompareMode = 0
   For Each item In anArray
      If Len(item) &amp;gt; 0 Then
         If Not d.Exists(item) Then d.Add item, item
      End If
   Next
   thekeys = d.keys
   Set d = Nothing
   RemDups = thekeys
End Function

Function Subnet(strAddress, strMask)
   intSubnetLength = SubnetLength(strMask)
   Subnet = BinaryToString(Left(StringToBinary(strAddress), intSubnetLength) &amp;amp; String(32 - intSubnetLength, &amp;quot;0&amp;quot;))
End Function

Function SubnetLength(strMask)
   strMaskBinary = StringToBinary(strMask)
   SubnetLength = Len(Left(strMaskBinary, InStr(strMaskBinary, &amp;quot;0&amp;quot;) - 1))
End Function

Function BinaryToString(strBinary)
   For intOctetPos = 1 To 4
      strOctetBinary = Right(Left(strBinary, intOctetPos * 8), 8)
      intOctet = 0
      intValue = 1
      For intBinaryPos = 1 To Len(strOctetBinary)
         If Left(Right(strOctetBinary, intBinaryPos), 1) = &amp;quot;1&amp;quot; Then intOctet = intOctet + intValue
         intValue = intValue * 2
      Next
      If BinaryToString = Empty Then BinaryToString = CStr(intOctet) Else BinaryToString = BinaryToString &amp;amp; &amp;quot;.&amp;quot; &amp;amp; CStr(intOctet)
   Next
End Function

Function StringToBinary(strAddress)
   objAddress = Split(strAddress, &amp;quot;.&amp;quot;, -1)
   For Each strOctet In objAddress
      intOctet = CInt(strOctet)
      strOctetBinary = &amp;quot;&amp;quot;
      For x = 1 To 8
         If intOctet Mod 2 &amp;gt; 0 Then
            strOctetBinary = &amp;quot;1&amp;quot; &amp;amp; strOctetBinary
         Else
            strOctetBinary = &amp;quot;0&amp;quot; &amp;amp; strOctetBinary
         End If
         intOctet = Int(intOctet / 2)
      Next
      StringToBinary = StringToBinary &amp;amp; strOctetBinary
   Next
End Function

Function ProcessNameToApplicationName(strExecutablePath, strExecutableName)
&amp;#039; This function will return the full application name of a running executable

		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		
		arrPathParts = Split(strExecutablePath,&amp;quot;\&amp;quot;)

		If UBound(arrPathParts) &amp;lt; 0 Then &amp;#039;can be -1 for no split, such as the System process
			ProcessNameToApplicationName = strExecutableName
			Set fso = Nothing
			Exit Function
		End If
		strExecutable = arrPathParts(UBound(arrPathParts))
		
		If fso.FileExists(strExecutablePath) Then
			Dim strOutput, fileVersion, fileVersionOutput, fullName
		
			Set execFile = fso.GetFile(strExecutablePath)
			fullName = GetDescription(execFile.ParentFolder.Path, strExecutable)
			If Not fullName = &amp;quot;&amp;quot; Then
				ProcessNameToApplicationName = fullName
			Else
				ProcessNameToApplicationName = strExecutableName
			End If
		Else &amp;#039; file doesn&amp;#039;t exist or inaccessible
			ProcessNameToApplicationName = strExecutableName
		End If

End Function &amp;#039;ProcessNameToApplicationName

Function GetDescription(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &amp;quot;File description&amp;quot;)
	If IsEmpty(descIndex) Then
		descIndex = GetAttributeIndex(folderPath, &amp;quot;Description&amp;quot;)
	End If
	GetDescription = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function GetFileProperty(folderPath, fileName, fileProperty)
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	GetFileProperty = objFolder.GetDetailsOf(objFolder.Parsename(fileName), fileProperty)
End Function

Function GetAttributeIndex(folderPath, attrTarget)
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	For i = 0 to 50
		attrName = objFolder.GetDetailsOf(objFolder.Items, i)
		If LCase(attrName) = LCase(attrTarget) Then
			GetAttributeIndex = i
			Exit Function
		End If
	Next
	
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Protocol</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Local IP and Port</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Process</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Application</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Remote IP and Port</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Connection State</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>196</cache_row_id>
          </sensor>
          <sensor>
            <id>392</id>
            <name>VMware Guest</name>
            <hash>2823285829</hash>
            <string_count>0</string_count>
            <category>Software</category>
            <description>Returns True if client machine is a guest VM in VMware.
Example: True</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; WMware Guest
&amp;#039;========================================
On Error Resume Next
strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_ComputerSystem&amp;quot;,,48)
For Each objItem in colItems
	If objItem.Model = &amp;quot;VMware Virtual Platform&amp;quot; Then WScript.Echo &amp;quot;True&amp;quot;
	WScript.Quit
Next

Set colItems = objWMIService.ExecQuery _
(&amp;quot;Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True&amp;quot;)
For Each objItem in colItems
	If Left(objItem.MACAddress, 8) = &amp;quot;00:0C:29&amp;quot; Then WScript.Echo &amp;quot;True&amp;quot;
	WScript.Quit
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

commout=&amp;quot;&amp;#039;dmidecode | awk &amp;#039;VMware Virtual Platform/ {print $3,$4,$5}&amp;#039; 2&amp;gt; /dev/null&amp;#039;&amp;quot;

if [[ &amp;quot;$commout&amp;quot; == *&amp;quot;Virtual&amp;quot;* ]]
 then
   echo &amp;quot;True&amp;quot;
else
   echo &amp;quot;False&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>197</cache_row_id>
          </sensor>
          <sensor>
            <id>394</id>
            <name>Tanium Client Dump Files</name>
            <hash>283520893</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Report date and size of Tanium Client dumpfiles.</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; Report information about Tanium Client dumpfiles, gathering information from
&amp;#039; the Tanium ContentLogs for the &amp;quot;clean-stale-tanium-client-data&amp;quot; action and log
&amp;#039; files not yet deleted by said action.
&amp;#039;
&amp;#039; The sensor returns two columns:
&amp;#039;
&amp;#039;    Created Date     | Size in MB
&amp;#039;   ------------------+------------
&amp;#039;    YYYY-MM-DD hh:mm |          N
&amp;#039;
Option Explicit

&amp;#039; Dumpfile information by creation date to avoid duplicates
Dim dumpFileDict: set dumpFileDict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

&amp;#039; Gather dumpfile information
&amp;#039; From the content logs, if they have been deleted
PopulateFromLogs dumpFileDict
&amp;#039; Or physically on disk, if they haven&amp;#039;t been deleted
PopulateDumpFiles dumpFileDict

&amp;#039; And report
ReportDumpFiles dumpFileDict


Sub PopulateFromLogs(filesDict)
    &amp;#039; Gather information about previously deleted dumpfiles
    Dim re: set re = New RegExp
    &amp;#039; This RegEx pattern follows the messages logged by the stale data action
    re.Pattern = &amp;quot;Deleted Dump,(\d+)/(\d+)/(\d+) (\d+):(\d+):(\d+) (\w+),(\d+) B&amp;quot;

    &amp;#039; The Tanium client&amp;#039;s directory
    Dim strTaniumDir: strTaniumDir = GetTaniumClientDir()
    Dim logsDir: logsDir = strTaniumDir &amp;amp; &amp;quot;\ContentLogs&amp;quot;
    Dim logName: logName = &amp;quot;clean-stale-tanium-client-data.vbs.log&amp;quot;

    Dim objFile
    Dim objFSO: set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    If Not objFSO.FolderExists(logsDir) Then
       &amp;#039; Some endpoints will not have the stale data cleanup action deployed
       Exit Sub
    End If
    For Each objFile In objFSO.GetFolder(logsDir).Files
        If Mid(objFile.Name, 1, len(logName)) = logName Then
           Dim fso: set fso = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
           Dim   f: set f = fso.OpenTextFile(logsDir &amp;amp; &amp;quot;/&amp;quot; &amp;amp; objFile.Name)
           &amp;#039; Look for &amp;quot;Deleted Dumps&amp;quot; in this file&amp;#039;s messages
           Do Until f.AtEndOfStream
              Dim row: row = f.ReadLine()
              &amp;#039; A &amp;quot;Deleted Dump&amp;quot; row?
              If re.test(row) Then
                 &amp;#039; Parse the date, time and bytes elements
                 Dim rex: set rex = re.Execute(row)

                 &amp;#039; Date parsing
                 Dim  year: year  = CInt(rex(0).SubMatches(2))
                 Dim month: month = CInt(rex(0).SubMatches(0))
                 Dim   day: day   = CInt(rex(0).SubMatches(1))
                 Dim  date: date  = DateSerial(year, month, day)

                 &amp;#039; Time parsing
                 Dim   hour: hour   = CInt(rex(0).SubMatches(3))
                 Dim minute: minute = CInt(rex(0).SubMatches(4))
                 Dim second: second = CInt(rex(0).SubMatches(5))
                 Dim   ampm: ampm   = rex(0).SubMatches(6)
                 Dim time
                 If ampm = &amp;quot;AM&amp;quot; Then
                    If hour &amp;lt; 12 Then
                       time = TimeSerial(hour, minute, second)
                    Else
                       time = TimeSerial(00, minute, second)
                    End If
                 Else
                    If hour &amp;lt; 12 Then
                       time = TimeSerial(12 + hour, minute, second)
                    Else
                       time = TimeSerial(12, minute, second)
                    End if
                 End If
                 &amp;#039; Date + Time
                 Dim datetime: datetime = date + time
                 &amp;#039; Add to the registry of deleted dumpfiles
                 If Not filesDict.Exists(datetime) Then
                    &amp;#039; Add the file information to the dictionary
                    filesDict.Add datetime,CInt(rex(0).SubMatches(7))
                 End If
              End If
           Loop
           f.Close
        End If
    Next
End Sub &amp;#039;PopulateFromLogs


Sub PopulateDumpFiles(filesDict)
    &amp;#039; Gather information about the dumpfiles present on disk

    &amp;#039; The Tanium client&amp;#039;s directory
    Dim strTaniumDir: strTaniumDir = GetTaniumClientDir()
    Dim objFSO: set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    Dim objFile
    For Each objFile In objFSO.GetFolder(strTaniumDir).Files
        Dim strFileName: strFileName = objFile.Name
        If Mid(strFileName,Len(strFileName) - 3) = &amp;quot;.dmp&amp;quot; Then
           &amp;#039; Add to the dumpfile dictronary if the date is not there
           If Not filesDict.Exists(objFile.DateCreated) Then
              &amp;#039; Add the file information to the dictionary
              filesDict.Add objFile.DateCreated,objFile.Size
            End If
        End If
    Next
End Sub &amp;#039;PopulateDumpFilesDict


Function ISODate(dateVal)
    &amp;#039; Parts from a date
    Dim dY: dY = CStr(DatePart(&amp;quot;yyyy&amp;quot;, dateVal))
    dY = String(4 - Len(dY), &amp;quot;0&amp;quot;) &amp;amp; dY
    Dim dM: dM = CStr(DatePart(&amp;quot;m&amp;quot;, dateVal))
    dM = String(2 - Len(dM), &amp;quot;0&amp;quot;) &amp;amp; dM
    Dim dD: dD = CStr(DatePart(&amp;quot;d&amp;quot;, dateVal))
    dD = String(2 - Len(dD), &amp;quot;0&amp;quot;) &amp;amp; dD
    Dim dh: dh = CStr(DatePart(&amp;quot;h&amp;quot;, dateVal))
    dh = String(2 - Len(dh), &amp;quot;0&amp;quot;) &amp;amp; dh
    Dim dn: dn = CStr(DatePart(&amp;quot;n&amp;quot;, dateVal))
    dn = String(2 - Len(dn), &amp;quot;0&amp;quot;) &amp;amp; dn
    Dim ds: ds = CStr(DatePart(&amp;quot;s&amp;quot;, dateVal))
    ds = String(2 - Len(ds), &amp;quot;0&amp;quot;) &amp;amp; ds

    &amp;#039; Return in a pretty format
    ISODate = dY &amp;amp; &amp;quot;-&amp;quot; &amp;amp; dM &amp;amp; &amp;quot;-&amp;quot; &amp;amp; dD &amp;amp; &amp;quot; &amp;quot; &amp;amp; dh &amp;amp; &amp;quot;:&amp;quot; &amp;amp; dn &amp;amp; &amp;quot;:&amp;quot; &amp;amp; ds
End Function &amp;#039;ISODate


Sub ReportDumpFiles(filesDict)
    &amp;#039; Report on each dumpfile&amp;#039;s information for oldest to newest
    If 0 = filesDict.count Then
       WScript.Echo &amp;quot;No Dump Files|||&amp;quot;
       Exit Sub
    End If

    Dim fDate
    For Each fDate in filesDict
        Dim fSize: fSize = filesDict.Item(fDate)
        &amp;#039; The size in MB (instead of bytes)
        Dim fSzMB: fSzMB = CLng(fSize / 1024 / 1024)
        &amp;#039; And a pretty ISO-8601 date down to the minute, not second
        Dim sDate: sDate = Mid(ISODate(fDate), 1, 16)
        &amp;#039; Report
        WScript.Echo sDate &amp;amp; &amp;quot;|&amp;quot; &amp;amp; fSzMB
    Next
End Sub &amp;#039;ReportDumpFile


Function GetTaniumClientDir
    &amp;#039;GetTaniumClientDir works in x64 or x32

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath

    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;

    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0

    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
    End If

    If Not strPath = &amp;quot;&amp;quot; Then
        Dim fso
        Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
        If fso.FolderExists(strPath) Then
            GetTaniumClientDir = strPath
        Else
            GetTaniumClientDir = False
        End If
    Else
        GetTaniumClientDir = False
    End If
End Function &amp;#039;GetTaniumClientDir</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>1800</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Create Date</name>
                <index>0</index>
                <value_type>WMIDate</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Size (MB)</name>
                <index>1</index>
                <value_type>NumericInteger</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <cache_row_id>198</cache_row_id>
          </sensor>
          <sensor>
            <id>396</id>
            <name>Network Throughput Inbound</name>
            <hash>2845896284</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the current inbound throughput, in KB/Sec, of the network interface used to connect to the tanium server.
Example: 1024 KB/S</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Network Throughput Inbound
&amp;#039;========================================

&amp;#039; This sensor will use windows performance counters
&amp;#039; and attempt to retrieve network traffic information
&amp;#039; only for the interface being used to connect to the tanium server
&amp;#039; results are in kilobytes per second

Option Explicit

Dim strTaniumIPAddress: strTaniumIPAddress = GetTaniumIPAddress
Dim strComputer: strComputer = &amp;quot;.&amp;quot;

Dim strDescriptionToMatch, strNameToMatch, strIPAddress, strFinalOutputString
Dim objWMIService, colItems, objItem

&amp;#039; First we get the &amp;quot;Name&amp;quot; property of the adapter with our target IP address
&amp;#039; out of WMI.  Because Name is the closest thing to match the Description
&amp;#039; field in the performance counter, but it&amp;#039;s not exact due to how some
&amp;#039; characters are displayed, we will remove troublesome characters
&amp;#039; and attempt to match on that

&amp;#039; Since the entire sensor&amp;#039;s output depends on if the two strings match, we
&amp;#039; can set the one string to something it won&amp;#039;t match on (because _) to be safe
strDescriptionToMatch = &amp;quot;_ImpossibleToMatch&amp;quot;

Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_NetworkAdapterConfiguration where IPEnabled = True&amp;quot;,,48)
For Each objItem In colItems
	For Each strIPAddress In objItem.IPAddress
		If strIPAddress = strTaniumIPAddress Then
			&amp;#039; WScript.Echo &amp;quot;IP Address Tanium is using: &amp;quot; &amp;amp; strIPAddress
			strDescriptionToMatch = CleanString(objItem.Description)
			&amp;#039; WScript.Echo &amp;quot;Description to be matched: &amp;quot; &amp;amp; strDescriptionToMatch
		End If
	Next
Next

Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfFormattedData_Tcpip_NetworkInterface&amp;quot;,,48)

For Each objItem in colItems
	strNameToMatch = CleanString(objItem.Name)
	&amp;#039; WScript.Echo &amp;quot;Name: &amp;quot; &amp;amp; strNameToMatch
	If LCase(strNameToMatch) = LCase(strDescriptionToMatch) Then
		&amp;#039; WScript.Echo &amp;quot;I have matched &amp;quot; &amp;amp; strNameToMatch &amp;amp; &amp;quot; and &amp;quot; &amp;amp; strDescriptionToMatch
		&amp;#039; We can now report bandwidth
		strFinalOutputString = FormatNumber(objItem.BytesReceivedPersec / 1024,0,-1) &amp;amp; &amp;quot; KB/S&amp;quot;
	End If
Next

If strFinalOutputString = &amp;quot;&amp;quot; Then
	&amp;#039; The two names are too dissimilar, or can&amp;#039;t get IP address for tanium client
	WScript.Echo &amp;quot;Cannot determine which adapter to measure&amp;quot;
Else 
	WScript.Echo strFinalOutputString
End If


&amp;#039; Cleanup
Set objWMIService = Nothing
Set colItems = Nothing 
Set objItem = Nothing

&amp;#039;&amp;#039; End Main Line

&amp;#039;&amp;#039; Helper Functions
Function CleanString(strInput)
&amp;#039; This function will remove non-alphanumeric characters
	Dim objRegEx
	
	Set objRegEx = CreateObject(&amp;quot;VBScript.RegExp&amp;quot;)
	
	objRegEx.Global = True   
	objRegEx.Pattern = &amp;quot;[^A-Za-z0-9]&amp;quot;
	CleanString = objRegEx.Replace(strInput, &amp;quot;&amp;quot;)
	
	Set objRegEx = Nothing
End Function &amp;#039;CleanString

Function GetTaniumIPAddress
&amp;#039; Modified from the ua-scan code to remove the subnet and last octet calculations
&amp;#039; which are irrelevant for these purposes.
&amp;#039; Returns the IP address that the client uses for Tanium activity
&amp;#039; (talking to server and other clients)

	Dim strComputer, objReg, strCommand, objShell, objScriptExec
	Dim strResults, arrPathPingLines, strPathPingLine, arrPathPingWords
	Dim strIPAddress, strTaniumPath, strClientAddress
	Dim strServerName
	
	strComputer = &amp;quot;.&amp;quot;
	Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)
	Const HKLM = &amp;amp;h80000002
	
		
	&amp;#039;&amp;#039;###########Get Tanium Key on 64/32bit computers##########
	
	strTaniumPath = GetTaniumRegistryPath()
	
	
	&amp;#039; if we can pull this from the registry (newer client version), just use that
	objReg.GetStringValue HKLM, strTaniumPath &amp;amp; &amp;quot;\Status&amp;quot;, &amp;quot;ClientAddress&amp;quot;, strClientAddress
	If strClientAddress &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
		strClientAddress = Left(strClientAddress,InStr(strClientAddress,&amp;quot;_&amp;quot;)-1)
		strClientAddress = Right(strClientAddress,len(strClientAddress)-InStrRev(strClientAddress,&amp;quot;:&amp;quot;))
		&amp;#039; WScript.Echo &amp;quot;Found &amp;quot; &amp;amp; strClientAddress &amp;amp; &amp;quot; in Registry&amp;quot;
		GetTaniumIPAddress = strClientAddress
		&amp;#039;Cleanup
		Set objReg = Nothing
		Exit Function
	End If
	
	&amp;#039;Otherwise use PathPing to determine client IP used by Tanium

	&amp;#039;&amp;#039;# Read the ServerName value

	objReg.GetStringValue HKLM, strTaniumPath, &amp;quot;ServerName&amp;quot;, strServerName

	strCommand = &amp;quot;pathping -4 -q 1 -w 1 -n &amp;quot; &amp;amp; strServerName
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objScriptExec = objShell.Exec (strCommand)
	strResults = objScriptExec.StdOut.ReadAll
	
	arrPathPingLines = Split(strResults, vbCrLf)
	For Each strPathPingLine In arrPathPingLines
		arrPathPingWords = Split(CleanWhitespace(Trim(strPathPingLine)), &amp;quot; &amp;quot;)
		If UBound(arrPathPingWords) &amp;gt; 0 Then
			If arrPathPingWords(0) = &amp;quot;0&amp;quot; Then
				strIPAddress = arrPathPingWords(1)
				Exit For
			End If
		End If	
	Next
	
	Set objShell = Nothing
	Set objScriptExec = Nothing
	Set objReg = Nothing

	If Not IsNull(strIPAddress) Then
		GetTaniumIPAddress = strIPAddress
	Else
		GetTaniumIPAddress = False
	End If
End Function &amp;#039;GetTaniumIPAddress

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath


Function CleanWhitespace(strStarter)
	Dim intStarter, i, strChars
	intStarter = Len(strStarter)
	For i = intStarter to 2 Step -1
		strChars = Space(i)
		strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
	Next
	CleanWhitespace = strStarter
End Function &amp;#039;CleanWhiteSpace</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

intKB=1024
intMB=1048576

N=$(ls -1 /sys/class/net | awk &amp;#039;{ print $1 }&amp;#039;| sort -u)

/usr/bin/printf %s &amp;quot;$N&amp;quot; | cut -d &amp;#039; &amp;#039; -f1 | while IFS= read -r line
do
   NIC=$(echo $line)
   P=$(cat /sys/class/net/$NIC/statistics/rx_bytes)
   N1=$P
   sleep 2
   P=$(cat /sys/class/net/$NIC/statistics/rx_bytes)
   N2=$P
   NF=$((($N2-$N1)/2))
   if [ $NF -gt $intMB ]; then
      NF=$(($NF/$intMB))
      echo $NIC:$NF Mbps
   elif [ $NF -gt $intKB ]; then
      NF=$(($NF/$intKB))
      echo $NIC:$NF KB/S
   else
      echo $NIC:$NF B/S
   fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
OS=$(uname -r)

case &amp;quot;$OS&amp;quot; in
&amp;#039;5.11&amp;#039;)
  for iface in `ifconfig -a | egrep -v &amp;#039;ether|inet|lo0&amp;#039; | grep : | awk -F: &amp;#039;{ print $1 }&amp;#039; | sort -u`
  do
    rbytes=$(dlstat $iface | grep -v LINK | awk &amp;#039;{ print $3 }&amp;#039;)
    echo &amp;quot;$iface:$rbytes&amp;quot;
  done
  ;;

*)
    for t in `kstat -p -c net| grep rbytes64 | awk &amp;#039;{ print $1&amp;quot;#&amp;quot;$2 }&amp;#039;`
    do
      iface=$(echo &amp;quot;$t&amp;quot; | awk -F: &amp;#039;{ print $3 }&amp;#039;)
      rbytes=$(echo &amp;quot;$t&amp;quot; | awk -F# &amp;#039;{ print $2 }&amp;#039;)
      echo &amp;quot;$iface:$rbytes&amp;quot;
    done
  ;;
esac</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>199</cache_row_id>
          </sensor>
          <sensor>
            <id>398</id>
            <name>CPU</name>
            <hash>2853143977</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Description of the CPU.
Example: Intel(R) Core(TM) i5-2500 CPU @ 3.30GHz</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; CPU
&amp;#039;========================================

Option Explicit

Dim objWMIService, colProcessors, objProcessor
Dim strProcessorName, intProcessorSpeed

Set objWMIService = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
Set colProcessors = objWMIService.ExecQuery(&amp;quot;select Name,MaxClockSpeed from win32_processor&amp;quot;)

For Each objProcessor in colProcessors
	strProcessorName = objProcessor.Name
	intProcessorSpeed = CInt(objProcessor.MaxClockSpeed)
	If InStr(strProcessorName, &amp;quot;Intel Pentium III&amp;quot;) &amp;gt;0 And _
		Left(GetOSMajorVersion(), 1) = &amp;quot;5&amp;quot; And _
		intProcessorSpeed &amp;gt; 1000 Then 
		&amp;#039; Work around for this problem on Windows XP / Windows 2003 machines, where
		&amp;#039; wrong value is reported for the processor type:
		&amp;#039; http://support.microsoft.com/kb/953955
		
		strProcessorName = &amp;quot;Intel(R) Core(TM)2 Duo CPU&amp;quot;
	End If 
	WScript.Echo Trim(strProcessorName)
Next

Function GetOSMajorVersion
&amp;#039; Returns the OS Major Version
&amp;#039; A different way to examine the OS instead of by name

	Dim objWMIService,colItems,objItem
	Dim strVersion

	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;select Version from win32_operatingsystem&amp;quot;)    
	For Each objItem In colItems
		strVersion = objItem.Version &amp;#039; like 6.2.9200
		strVersion = Left(strVersion,Len(strVersion) - 5)
	Next
	
	GetOSMajorVersion = strVersion
	
End Function &amp;#039;GetOSMajorVersion</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
line=$(cat /proc/cpuinfo | grep &amp;quot;model name&amp;quot;)
set -- $line
echo ${line#*:}</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
name=$( system_profiler SPHardwareDataType | awk -F&amp;#039;: &amp;#039; &amp;#039; /Processor Name:/ { print $2 } &amp;#039; )
speed=$( system_profiler SPHardwareDataType | awk -F&amp;#039;: &amp;#039; &amp;#039; /Processor Speed:/ { print $2 } &amp;#039; )

echo $name $speed</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
# Get CPU model and NAME
# Getch from p[rtconf
# Processor Type: PowerPC_POWER3
# Processor Clock Speed: 333 MHz

psrinfo -v 0 | grep MHz |sed s/,// | awk &amp;#039;{ print $2,$6,$7 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get CPU name and speed
NAME=$(lsattr -E -l proc0 | awk &amp;#039;/Processor type/ { print $2 }&amp;#039;)
MHZ=&amp;quot;$(lsattr -E -l proc0 | grep &amp;quot;Processor Speed&amp;quot; | awk &amp;#039;{ printf &amp;quot;%0.1f&amp;quot;, $2/1000000 }&amp;#039;| sed s/\.0//)&amp;quot;
echo &amp;quot;$NAME @ ${MHZ}Mhz&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>200</cache_row_id>
          </sensor>
          <sensor>
            <id>400</id>
            <name>TCP connections</name>
            <hash>2866852225</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Lists all TCP connections on a machine wth their state.
Example: TaniumClient|</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
&amp;#039; 
&amp;#039; 

WScript.Echo &amp;quot;N/A on Windows&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
netstat -anpt | tail -n +3 | awk &amp;#039;{ print substr($7,index($7,&amp;quot;/&amp;quot;)+1) &amp;quot;|&amp;quot; substr($4,index($4,&amp;quot;:&amp;quot;)+1) &amp;quot;|&amp;quot; $5 &amp;quot;|&amp;quot; $6 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Process</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Local Port</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Foreign Address</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>State</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>201</cache_row_id>
          </sensor>
          <sensor>
            <id>402</id>
            <name>Default Web Browser</name>
            <hash>2932384540</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Default web browser for new users.  Note that this can be changed per user.
Example: Internet Explorer</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Default Web Browser
&amp;#039;========================================

&amp;#039; This sensor will return the name and version of the default web browser
&amp;#039; This is a multi-column sensor that looks like:
&amp;#039; Browser|Version
Option Explicit

&amp;#039; TAG: REDIRECTION

Dim strSep
strSep = &amp;quot;|&amp;quot;

GetDefaultWebBrowser strSep

Function GetDefaultWebBrowser(strSep)

	
	Dim objShell, objRE, objFSO
	Dim strComputer, strDefaultBrowserDetectionPath
	Dim strBrowserFolder, strDefaultBrowserExecutable, objMatch
	Dim strPrunedDefaultBrowserExecutable, strBrowserFileName
	Dim strDescription, strVersion, strCleanDefaultBrowserExecutable
	Dim arrBrowserCommand
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	Set objRE = New RegExp

	With objRE
	    .Pattern    = Chr(34)&amp;amp;&amp;quot;([^&amp;quot;&amp;amp;Chr(34)&amp;amp;&amp;quot;\r\n]*)&amp;quot;&amp;amp;Chr(34) &amp;#039; matches anything between first set of quotes
	    .Global     = False
	End With
	&amp;#039; The default browser executable is stored in this location in the registry	
	&amp;#039; Note that this location is the same in 32 and 64 bit registry providers
	strDefaultBrowserExecutable = objShell.RegRead(&amp;quot;HKEY_CLASSES_ROOT\http\shell\open\command\&amp;quot;)
	
	Set objMatch = objRE.Execute(strDefaultBrowserExecutable)
	If objMatch.Count = 1 Then
		strPrunedDefaultBrowserExecutable = objMatch.Item(0)
	End If
	&amp;#039; Catch case where the browser is specified without quotes and with progra~1
	&amp;#039; notation
	&amp;#039; The regex would have failed to produce a valid file.  Check file exists
	&amp;#039; and if not, assume it&amp;#039;s the progra~1 notation without quotes
	 &amp;#039;strDefaultBrowserExecutable = &amp;quot;C:\PROGRA~1\MOZILL~1\FIREFOX.EXE -requestPending -osint -url &amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot;%1&amp;quot; &amp;amp; Chr(34)
	If Not Left(strDefaultBrowserExecutable,1) = Chr(34) Then &amp;#039; if it doesn&amp;#039;t start with a quote
		&amp;#039; WScript.Echo &amp;quot;Found an ugly Command: &amp;quot; &amp;amp; strCleanDefaultBrowserExecutable
		arrBrowserCommand = Split(strDefaultBrowserExecutable, &amp;quot; &amp;quot; )
		strCleanDefaultBrowserExecutable = arrBrowserCommand(0)
		&amp;#039; WScript.Echo strCleanDefaultBrowserExecutable &amp;amp; &amp;quot; after split&amp;quot;
	Else
		strCleanDefaultBrowserExecutable = objRE.Replace(strPrunedDefaultBrowserExecutable, &amp;quot;$1&amp;quot;)
	End If
	

		
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	
	
	&amp;#039; Pass the folder and file name into GetFileDetails to find description and version
	strBrowserFolder = objFSO.GetParentFolderName(strCleanDefaultBrowserExecutable)
	strBrowserFileName = objFSO.GetFileName(strCleanDefaultBrowserExecutable)
&amp;#039; WScript.Echo strBrowserFolder &amp;amp; &amp;quot; Is folder&amp;quot;
&amp;#039; WScript.Echo strBrowserFileName &amp;amp; &amp;quot; Is File Name&amp;quot;
	strDescription = GetFileDescription(strBrowserFolder, strBrowserFileName)
	strVersion = GetFileVersion(strBrowserFolder, strBrowserFileName)
	
	WScript.Echo strDescription &amp;amp; strSep &amp;amp; strVersion
	
End Function &amp;#039;GetDefaultWebBrowser

Function GetFileVersion(folderName,fileName)
        On Error Resume Next
        Dim objShell
        Dim objFolder
        Dim HeaderInfoArray(250), i
        
        Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
        Set objFolder = objShell.NameSpace(folderName)

        If (not objFolder is nothing) Then
            For i = 0 to 250  
                HeaderInfoArray(i) = objFolder.GetDetailsOf(objFolder.Items, i)
            Next
            Dim objFolderItem

            Set objFolderItem = objFolder.ParseName(fileName)

            If (not objFolderItem Is Nothing) then
                Dim objInfo
                For i = 0 To 250        
                    objInfo = objFolder.GetDetailsOf(objFolderItem, i)
 					&amp;#039; WScript.Echo HeaderInfoArray(i) &amp;amp; &amp;quot; &amp;quot; &amp;amp; objFolder.GetDetailsOf(objFolderItem, i)
                    If LCase(HeaderInfoArray(i)) = &amp;quot;file version&amp;quot; Then
                    	GetFileVersion = objFolder.GetDetailsOf(objFolderItem, i)
                    	Exit Function
                    End If
                Next
            End If
            
            Set objFolderItem = Nothing
        End If
        
        Set objFolder = Nothing
        Set objShell = Nothing
        On Error Goto 0
End Function &amp;#039;GetFileVersion

Function GetFileDescription(folderName,fileName)
        On Error Resume Next
        Dim objShell
        Dim objFolder
        Dim HeaderInfoArray(250), i
        
        Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
        Set objFolder = objShell.NameSpace(folderName)

        If (not objFolder is nothing) Then
            For i = 0 to 250  
                HeaderInfoArray(i) = objFolder.GetDetailsOf(objFolder.Items, i)
            Next
            Dim objFolderItem

            Set objFolderItem = objFolder.ParseName(fileName)

            If (not objFolderItem Is Nothing) then
                Dim objInfo
                For i = 0 To 250        
                    objInfo = objFolder.GetDetailsOf(objFolderItem, i)
                     &amp;#039; WScript.Echo HeaderInfoArray(i) &amp;amp; &amp;quot; &amp;quot; &amp;amp; objFolder.GetDetailsOf(objFolderItem, i)
                    If LCase(HeaderInfoArray(i)) = &amp;quot;description&amp;quot; Or LCase(HeaderInfoArray(i)) = &amp;quot;file description&amp;quot; Then
                    	GetFileDescription = objFolder.GetDetailsOf(objFolderItem, i)
                    	Exit Function
                    End If
                Next
            End If
            
            Set objFolderItem = Nothing
        End If
        
        Set objFolder = Nothing
        Set objShell = Nothing
        On Error Goto 0
End Function &amp;#039;GetFileDescription

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Browser</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Version</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>202</cache_row_id>
          </sensor>
          <sensor>
            <id>404</id>
            <name>Low Disk Space</name>
            <hash>2939169480</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns disk drives which have less than 2 gigabytes free.
Example: C:</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from Win32_logicaldisk where (FreeSpace &amp;lt; 2000000000 AND Description=&amp;#039;Local Fixed Disk&amp;#039;)</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
kb=2097152
for df in $(df -Pl | egrep -v &amp;#039;/dev/shm|/boot|^ctfs|^proc|^mnttab|^objfs|^sharefs|^fd|Filesystem&amp;#039; | awk &amp;#039;{ print $4&amp;quot;:&amp;quot;$6 }&amp;#039; | cut -d &amp;#039; &amp;#039; -f1-2)
do
  sz=$(echo &amp;quot;$df&amp;quot; | cut -d: -f1)
  fs=$(echo &amp;quot;$df&amp;quot; | cut -d: -f2)
  sz=$(expr $sz + 0)
  if [ $sz -lt $kb ]; then
    echo $fs
  fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
kb=2097152
for df in $(df -lk | egrep -v &amp;#039;^/dev|^ctfs|^proc|^mnttab|^objfs|^sharefs|^fd|Filesystem&amp;#039; | awk &amp;#039;{ print $4&amp;quot;:&amp;quot;$6 }&amp;#039;)
do
  sz=$(echo &amp;quot;$df&amp;quot; | cut -d: -f1)
  fs=$(echo &amp;quot;$df&amp;quot; | cut -d: -f2)
  sz=$(expr $sz + 0)

  if [ $sz -lt $kb ]; then
    echo $fs
  fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>203</cache_row_id>
          </sensor>
          <sensor>
            <id>406</id>
            <name>Number Of Users</name>
            <hash>2950466201</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the number of user sessions for which the operating system is storing state.  This may differ from the number of interactively logged in users.
Example:3</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select NumberOfUsers from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
who | wc -l</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
who | wc -l</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
who | awk &amp;#039;{ print $1 }&amp;#039;| sort -u | wc -l | sed s/\ //g</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
who | awk &amp;#039;{ print $1 }&amp;#039;| sort -u | wc -l | sed s/\ //g</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>204</cache_row_id>
          </sensor>
          <sensor>
            <id>408</id>
            <name>Model</name>
            <hash>2961425050</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the Model of a system.
Example: Precision T1600</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Model from win32_ComputerSystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode -s system-product-name</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
system_profiler SPHardwareDataType | awk -F&amp;#039;: &amp;#039; &amp;#039; /Model Name:/ { print $2 } &amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
uname -i</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
lscfg -p| grep Model: | head -1 | awk &amp;#039;{ print $2 }&amp;#039; | cut -d, -f2</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>205</cache_row_id>
          </sensor>
          <sensor>
            <id>410</id>
            <name>Subnet Mask</name>
            <hash>2977419696</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>A list of all of the configured subnet masks for the network adapters of the client machine.
Example: 255.255.0.0</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select IPSubnet from win32_networkadapterconfiguration where IPEnabled=&amp;#039;True&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
netmask2ip() {
 o1=&amp;quot;0x$(echo &amp;quot;$1&amp;quot; | cut -c1-2)&amp;quot;
 o2=&amp;quot;0x$(echo &amp;quot;$1&amp;quot; | cut -c3-4)&amp;quot;
 o3=&amp;quot;0x$(echo &amp;quot;$1&amp;quot; | cut -c5-6)&amp;quot;
 o4=&amp;quot;0x$(echo &amp;quot;$1&amp;quot; | cut -c7-8)&amp;quot;
 ip=$(/usr/bin/printf &amp;quot;%d.%d.%d.%d&amp;quot; $o1 $o2 $o3 $o4)
 return $ip
}

for iface in `ifconfig -a | egrep -v &amp;quot;lo0|ether|inet6&amp;quot; | grep : | awk -F: &amp;#039;{ print $1 }&amp;#039;`
do
  netmask=$(ifconfig $iface| grep netmask | awk &amp;#039;{ print $4 }&amp;#039;)
  netmask2ip $netmask
  echo &amp;quot;$ip&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>IPAddress</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>206</cache_row_id>
          </sensor>
          <sensor>
            <id>412</id>
            <name>Operating System Language Code</name>
            <hash>2997757654</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the Language Code (LCID) of the Operating System.  This differs from the Locale Code returned in the Locale Code sensor.
Example: 1033</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select OSLanguage from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>NumericInteger</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>207</cache_row_id>
          </sensor>
          <sensor>
            <id>414</id>
            <name>Windows Server Installed Roles</name>
            <hash>3057103978</hash>
            <string_count>0</string_count>
            <category>Software</category>
            <description>Returns the currently installed roles on a Windows Server.
Example:  File Server</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Windows Server Installed Roles
&amp;#039;========================================

Option Explicit

If Not IsWindowsServer() Then
	WScript.Echo &amp;quot;Not Windows Server&amp;quot;
Else
	If Left(GetOSMajorVersion(), 1) = &amp;quot;5&amp;quot; Then
		WScript.Echo &amp;quot;Windows 2003 Server - Roles Not Available&amp;quot;
	Else 
		EchoInstalledRolesUsingWMI()
	End If
End If

Function EchoInstalledRolesUsingWMI()
	Dim objWMIService, colItems, objItem
	
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_ServerFeature&amp;quot;,,48)
	For Each objItem in colItems
	    Wscript.Echo objItem.Name
	Next
End Function &amp;#039; EchoInstalledRolesUsingWMI

Function IsWindowsServer()
	Dim bResult
	bResult = False

	Select Case (LCase(GetProductType))
		&amp;#039; Workstations will always output WinNT
		Case &amp;quot;servernt&amp;quot;
			bResult = True
		Case &amp;quot;lanmannt&amp;quot;
			bResult = True		
	End Select
	
	IsWindowsServer = bResult
End Function &amp;#039; IsWindowsServer
	
Function GetProductType

	Dim objShell
	Dim keyPath, strPath, strFoundPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyPath = &amp;quot;SYSTEM\CurrentControlSet\Control\ProductOptions&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyPath&amp;amp;&amp;quot;\ProductType&amp;quot;)
    On Error Goto 0
	strFoundPath = strPath
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		GetProductType = strFoundPath
  	Else
  		GetProductType = False
  		WScript.Echo &amp;quot;Error: Cannot determine OS type&amp;quot;
  		WScript.Quit
  	End If
End Function &amp;#039;GetProductType

Function GetOSMajorVersion
&amp;#039; Returns the OS Major Version
&amp;#039; A different way to examine the OS instead of by name

	Dim objWMIService,colItems,objItem
	Dim strVersion

	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;select Version from win32_operatingsystem&amp;quot;)    
	For Each objItem In colItems
		strVersion = objItem.Version &amp;#039; like 6.2.9200
		strVersion = Left(strVersion,Len(strVersion) - 5)
	Next
	
	GetOSMajorVersion = strVersion
	
End Function &amp;#039;GetOSMajorVersion</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>208</cache_row_id>
          </sensor>
          <sensor>
            <id>416</id>
            <name>Number of Processor Cores</name>
            <hash>3083322981</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the number of processor cores in all installed processors.  Not supported on all OS patch levels.
Example:2</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Number of Processor Cores
&amp;#039;========================================

On Error Resume Next

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Processor&amp;quot;,,48)

intNumCores = 0

For Each objItem in colItems
	intNumCores = intNumCores + objItem.NumberOfCores
	If intNumCores = 0 Then &amp;#039; machine does not support counting cores
		strOs = GetOS
		&amp;#039;Windows 2000 isn&amp;#039;t supported for core count, can&amp;#039;t determine hyperthreading
		If InStr(strOs, &amp;quot;2000&amp;quot;) &amp;gt; 0 Then
			WScript.Echo &amp;quot;Windows 2000 - Cannot determine&amp;quot;
		ElseIf InStr(strOs, &amp;quot;XP&amp;quot;) &amp;gt; 0 Then
			WScript.Echo &amp;quot;XP SP3 Required to determine&amp;quot;
		ElseIf InStr(strOs, &amp;quot;2003&amp;quot;) &amp;gt; 0 Then
			&amp;#039;For Win Server 2003 SEE KB 932370
			&amp;#039;http://support.microsoft.com/kb/932370/
			WScript.Echo &amp;quot;KB932370 Required to determine&amp;quot;
		Else
			WScript.Echo &amp;quot;N/A&amp;quot;
		End If
	End If
Next

If Not intNumCores = 0 Then
	WScript.Echo intNumCores
End If


Function GetOS
	Set oWsh = WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)    
	Set oWshSysEnv = oWsh.Environment(&amp;quot;PROCESS&amp;quot;)    
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)    
	Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;select Caption from win32_operatingsystem&amp;quot;)    
	For Each objItem In colItems       
	strStrip1 = Right(ObjItem.Caption, (Len(objItem.Caption) - Instr(objItem.Caption, &amp;quot; &amp;quot;)))   
	&amp;#039;strStrip2 = Right(strStrip1, (Len(strStrip1) - Instr(strStrip1, &amp;quot; &amp;quot;)))   
	if Instr(strStrip1,&amp;quot;Server&amp;quot; &amp;amp; Unescape(&amp;quot;%AE&amp;quot;)) &amp;lt;&amp;gt; 0 THEN   
	strOS = Replace(strStrip1,&amp;quot;Server&amp;quot; &amp;amp; Unescape(&amp;quot;%AE&amp;quot;),&amp;quot;Server&amp;quot;)   
	Else   
	strOS = strStrip1
	End IF   
	GetOS = Trim(strOS)
	Next
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>209</cache_row_id>
          </sensor>
          <sensor>
            <id>418</id>
            <name>Tanium Sensor Randomization Enabled</name>
            <hash>3103658637</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Returns if sensor execution is randomized on an endpoint, for better distribution on VDI / VM environments.
Example: Yes</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Sensor Randomization Enabled
&amp;#039;========================================


Option Explicit

Const HKLM = &amp;amp;h80000002

Dim objReg
Dim strTaniumRegPath, strSensorRandomizationEnabledValue
Dim strComputer

strComputer = &amp;quot;.&amp;quot;

Set objReg = _ 
	GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; _ 
	&amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

strTaniumRegPath = GetTaniumRegistryPath()
&amp;#039;retrieve registry entry for Sensor Randomization
objReg.GetDWordValue HKLM, strTaniumRegPath, &amp;quot;RandomSensorDelayInSeconds&amp;quot;, strSensorRandomizationEnabledValue

If Not IsNull(strSensorRandomizationEnabledValue) Then
	If strSensorRandomizationEnabledValue &amp;gt; 0 Then
		WScript.Echo &amp;quot;Yes&amp;quot;
		WScript.Echo strSensorRandomizationEnabledValue
	Else
		WScript.Echo &amp;quot;No&amp;quot;
	End If
Else 
	WScript.Echo &amp;quot;No&amp;quot;
End If 

&amp;#039;Cleanup
Set objReg = Nothing

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>210</cache_row_id>
          </sensor>
          <sensor>
            <id>420</id>
            <name>Internet Explorer Add-Ons</name>
            <hash>3114455387</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>List of add-ons to Internet Explorer and indicates whether they are a Toolbar, Extension, or Browser Helper Objects.
Example: Java(tm) Plug-In SSV Helper|BHO</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Internet Explorer Add-Ons
&amp;#039;========================================

Option Explicit

&amp;#039; WSHVersionOK &amp;#039;call if necessary
&amp;#039; SetLocale(GetTaniumLocale) &amp;#039;call if necessary

Dim is64bitmachine

is64bitmachine = Is64

&amp;#039;// BHOs
&amp;#039;HKLM\Software\Microsoft\Windows\CurrentVersion\explorer\Browser Helper Objects 
&amp;#039;// IE toolbars
&amp;#039;HKLM\Software\Microsoft\Internet Explorer\Toolbar
&amp;#039;// IE extensions
&amp;#039;HKLM\Software\Microsoft\Internet Explorer\Extensions
&amp;#039;// ActiveX
&amp;#039;HKCU\Software\Microsoft\Windows\CurrentVersion\Ext\Stats

Dim reg, strComputer, bShowInProcServer
Const HKCR = &amp;amp;H80000000
Const HKLM = &amp;amp;H80000002
Const HKU = &amp;amp;H80000003

strComputer = &amp;quot;.&amp;quot;
Set reg = Getx64RegistryProvider()

ListBHOs
ListToolbars
ListExtensions
ListActiveXControls

Function LookupClassName(clsid)
	Dim strKeyPath, value, inProc, rootErrorCheck, inProcErrorCheck
	strKeyPath = &amp;quot;CLSID\&amp;quot;&amp;amp;clsid
	rootErrorCheck = reg.GetStringValue(HKCR, strKeyPath,&amp;quot;&amp;quot;,value)
	If (rootErrorCheck=0 And Not IsNull(value)) Then
		inProcErrorCheck = reg.GetStringValue(HKCR, strKeyPath&amp;amp;&amp;quot;\InProcServer32&amp;quot;,&amp;quot;&amp;quot;,inProc)
		If inProcErrorCheck = 0 Then 
			value = inProc&amp;amp;&amp;quot;|&amp;quot;&amp;amp;value
		Else
			value = &amp;quot;Unknown&amp;quot;&amp;amp;&amp;quot;|&amp;quot;&amp;amp;value
		End If
        LookupClassName = value
    Else
    	strKeyPath = &amp;quot;Wow6432Node\CLSID\&amp;quot;&amp;amp;clsid
		rootErrorCheck = reg.GetStringValue(HKCR, strKeyPath,&amp;quot;&amp;quot;,value)
		If (rootErrorCheck=0 And Not IsNull(value)) Then
			inProcErrorCheck = reg.GetStringValue(HKCR, strKeyPath&amp;amp;&amp;quot;\InProcServer32&amp;quot;,&amp;quot;&amp;quot;,inProc)
			If inProcErrorCheck = 0 Then 
				value = inProc&amp;amp;&amp;quot;|&amp;quot;&amp;amp;value
			Else
				value = &amp;quot;Unknown&amp;quot;&amp;amp;&amp;quot;|&amp;quot;&amp;amp;value
			End If
        	LookupClassName = value			
        Else &amp;#039; cannot pull registry value, cannot look up class name
   			LookupClassName = &amp;quot;Unknown&amp;quot;&amp;amp;&amp;quot;|&amp;quot;&amp;amp;clsid
    	End If
	End If
End Function

Function LookupExtensionName(clsid)
	Dim strKeyPath, value, rootErrorCheck, inProc, inProcErrorCheck
	strKeyPath = &amp;quot;SOFTWARE\Microsoft\Internet Explorer\Extensions\&amp;quot;&amp;amp;clsid
	rootErrorCheck = reg.GetStringValue(HKLM, strKeyPath,&amp;quot;MenuText&amp;quot;,value)
	If (rootErrorCheck=0 And Not IsNull(value)) Then
		value = &amp;quot;N/A&amp;quot;&amp;amp;&amp;quot;|&amp;quot;&amp;amp;value &amp;#039; no InProcServer file name for an extension
        LookupExtensionName = value
    Else
    	strKeyPath = &amp;quot;SOFTWARE\wow6432node\Microsoft\Internet Explorer\Extensions&amp;quot;&amp;amp;clsid
		rootErrorCheck = reg.GetStringValue(HKLM, strKeyPath,&amp;quot;MenuText&amp;quot;,value)
		If (rootErrorCheck=0 And Not IsNull(value)) Then
			value = &amp;quot;N/A&amp;quot;&amp;amp;&amp;quot;|&amp;quot;&amp;amp;value &amp;#039; no InProcServer file name for an extension
        	LookupExtensionName = value
        Else
    		LookupExtensionName = &amp;quot;N/A&amp;quot;&amp;amp;&amp;quot;|&amp;quot;&amp;amp;clsid &amp;#039; no InProcServer file name for an extension
    	End If
	End If
End Function

Function ListBHOs
	&amp;#039;WScript.Echo &amp;quot;Listing BHOs&amp;quot;
	Dim strKeyPath, arrSubKeys, errorCheck, subkey
	strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\explorer\Browser Helper Objects&amp;quot;
	
	errorCheck = reg.EnumKey(HKLM, strKeyPath, arrSubKeys)
	If (errorCheck=0 and IsArray(arrSubKeys)) then
        For Each subkey In arrSubKeys
        	WScript.Echo LookupClassName(subkey) &amp;amp; &amp;quot;|BHO&amp;quot;
        Next
    End If
    
    If is64bitmachine Then
    	strKeyPath = &amp;quot;SOFTWARE\wow6432node\Microsoft\Windows\CurrentVersion\explorer\Browser Helper Objects&amp;quot;
	
		errorCheck = reg.EnumKey(HKLM, strKeyPath, arrSubKeys)
		If (errorCheck=0 and IsArray(arrSubKeys)) then
	        For Each subkey In arrSubKeys
	        	WScript.Echo LookupClassName(subkey) &amp;amp; &amp;quot;|BHO&amp;quot;
	        Next
	    End If
    End If
	
End Function

Function ListToolbars
	&amp;#039;WScript.Echo &amp;quot;Listing Toolbars&amp;quot;
	Dim strKeyPath, arrValues, errorCheck, value
	strKeyPath = &amp;quot;SOFTWARE\Microsoft\Internet Explorer\Toolbar&amp;quot;
	
	errorCheck = reg.EnumValues(HKLM, strKeyPath, arrValues)
	If (errorCheck=0 and IsArray(arrValues)) then
        For Each value In arrValues
        	WScript.Echo LookupClassName(value)&amp;amp; &amp;quot;|Toolbar&amp;quot;
        Next
    End If
    
    If is64bitmachine Then
    	strKeyPath = &amp;quot;SOFTWARE\wow6432node\Microsoft\Internet Explorer\Toolbar&amp;quot;
    	
		errorCheck = reg.EnumValues(HKLM, strKeyPath, arrValues)
		If (errorCheck=0 and IsArray(arrValues)) then
	        For Each value In arrValues
	        	WScript.Echo LookupClassName(value)&amp;amp; &amp;quot;|Toolbar&amp;quot;
	        Next
	    End If
    End If
End Function

Function ListExtensions
	&amp;#039;WScript.Echo &amp;quot;Listing Extensions&amp;quot;
	Dim strKeyPath, arrSubKeys, errorCheck, subkey
	strKeyPath = &amp;quot;SOFTWARE\Microsoft\Internet Explorer\Extensions&amp;quot;
	
	errorCheck = reg.EnumKey(HKLM, strKeyPath, arrSubKeys)
	If (errorCheck=0 and IsArray(arrSubKeys)) then
        For Each subkey In arrSubKeys
        	WScript.Echo LookupExtensionName(subkey)&amp;amp; &amp;quot;|Extension&amp;quot;
        Next
    End If
    
    If is64bitmachine Then
    	strKeyPath = &amp;quot;SOFTWARE\wow6432node\Microsoft\Internet Explorer\Extensions&amp;quot;
	
		errorCheck = reg.EnumKey(HKLM, strKeyPath, arrSubKeys)
		If (errorCheck=0 and IsArray(arrSubKeys)) then
	        For Each subkey In arrSubKeys
	        	WScript.Echo LookupExtensionName(subkey)&amp;amp; &amp;quot;|Extension&amp;quot;
	        Next
	    End If
    End If
End Function

Function ListActiveXControls
	Dim errorCheck, subkey, arrSubKeys, strKeyPath
	
	strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Ext&amp;quot;
	errorCheck = reg.EnumKey(HKU, &amp;quot;&amp;quot;, arrSubKeys)
	If (errorCheck=0 and IsArray(arrSubKeys)) then
		For Each subkey In arrSubKeys
			&amp;#039;WScript.Echo &amp;quot;Looking in subkey: &amp;quot;&amp;amp;subkey
			ListActiveXControlsForUser subkey
		Next
	End If
	
End Function

Function ListActiveXControlsForUser(userkey)
	&amp;#039;WScript.Echo &amp;quot;Listing ActiveXControls&amp;quot;
	Dim strKeyPath, arrSubKeys, errorCheck, subkey
	
	strKeyPath = userkey&amp;amp;&amp;quot;\SOFTWARE\Microsoft\Windows\CurrentVersion\Ext\Settings&amp;quot;	
	errorCheck = reg.EnumKey(HKU, strKeyPath, arrSubKeys)
	If (errorCheck=0 and IsArray(arrSubKeys)) then
        For Each subkey In arrSubKeys
        	WScript.Echo LookupClassName(subkey) &amp;amp; &amp;quot;|ActiveX&amp;quot;
        Next
    End If
    
    If is64bitmachine Then
    	strKeyPath = userkey&amp;amp;&amp;quot;\SOFTWARE\wow6432node\Microsoft\Windows\CurrentVersion\Ext\Settings&amp;quot;
		errorCheck = reg.EnumKey(HKU, strKeyPath, arrSubKeys)
		If (errorCheck=0 and IsArray(arrSubKeys)) then
	        For Each subkey In arrSubKeys
	        	WScript.Echo LookupClassName(subkey) &amp;amp; &amp;quot;|ActiveX&amp;quot;
	        Next
	    End If
    End If
	
	strKeyPath = userkey&amp;amp;&amp;quot;\SOFTWARE\Microsoft\Windows\CurrentVersion\Ext\Stats&amp;quot;	
	errorCheck = reg.EnumKey(HKU, strKeyPath, arrSubKeys)
	If (errorCheck=0 and IsArray(arrSubKeys)) then
        For Each subkey In arrSubKeys
        	WScript.Echo LookupClassName(subkey) &amp;amp; &amp;quot;|ActiveX&amp;quot;
        Next
    End If
    
    If is64bitmachine Then	
    	strKeyPath = userkey&amp;amp;&amp;quot;\SOFTWARE\wow6432node\Microsoft\Windows\CurrentVersion\Ext\Stats&amp;quot;
		errorCheck = reg.EnumKey(HKU, strKeyPath, arrSubKeys)
		If (errorCheck=0 and IsArray(arrSubKeys)) then
	        For Each subkey In arrSubKeys
	        	WScript.Echo LookupClassName(subkey) &amp;amp; &amp;quot;|ActiveX&amp;quot;
	        Next
	    End If
    End If
	
End Function


&amp;#039;&amp;#039; -- standard help functions -- &amp;#039;&amp;#039;
Sub WSHVersionOK
	If Not CDbl(WScript.Version) &amp;gt;= 5.6 Then
		WScript.Echo &amp;quot;Unsupported WSH version: &amp;quot; &amp;amp; WScript.Version
		WScript.Quit
	End If
End Sub &amp;#039;WSHVersionOK

Function GetTaniumLocale
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

	Dim objWshShell
	Dim intLocaleID
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Tanium\Tanium Client\LocaleID&amp;quot;)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client\LocaleID&amp;quot;)
	End If
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	&amp;#039; Cleanup
	Set objWshShell = Nothing

End Function &amp;#039;GetTaniumLocale
Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Add-On File</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Add-On Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Add-On Type</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>211</cache_row_id>
          </sensor>
          <sensor>
            <id>422</id>
            <name>Motherboard Version</name>
            <hash>3133617106</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the Version of a motherboard.
Example:9230</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Motherboard Version
&amp;#039;========================================

Set objWMIService = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
Set colMB = objWMIService.ExecQuery(&amp;quot;Select * from Win32_BaseBoard&amp;quot;)
For Each mb In colMB
mbVersion = mb.Version
WScript.Echo mbVersion
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode -s baseboard-version</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>212</cache_row_id>
          </sensor>
          <sensor>
            <id>424</id>
            <name>Revision of CPU</name>
            <hash>3133620839</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the revision number of installed CPUs.
Example: 5898</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Revision from win32_processor</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>213</cache_row_id>
          </sensor>
          <sensor>
            <id>426</id>
            <name>USB Device Details</name>
            <hash>314220795</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns of details of attached USB devices, including Description, vendor ID, and product ID.
Example:  Generic USB Hub|VMware, Inc.|Virtual USB Hub</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; USB Device Details
&amp;#039;========================================

Option Explicit

Const HARDWARE_TOOLS = &amp;quot;Tools\Hardware&amp;quot;
Const USB_ID_FILE = &amp;quot;usb.ids&amp;quot;
Const VIEWABLE_NAME = &amp;quot;VIEWABLE_NAME&amp;quot;


Dim objFSO, strToolsDir, strUSBIDs, dictVendors
Dim objWMIService, colItems, objItem

Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
strToolsDir = GetTaniumDir(HARDWARE_TOOLS)
strUSBIDs = strToolsDir &amp;amp; USB_ID_FILE

dictVendors = Null

Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;) 
Set colItems = objWMIService.ExecQuery( _
    &amp;quot;SELECT * FROM Win32_USBHub&amp;quot;,,48) 
For Each objItem in colItems 
	Dim strDevId, strPid, strVid
	strDevId = &amp;quot;&amp;quot;
	strPid = &amp;quot;&amp;quot;
	strVid = &amp;quot;&amp;quot;
	
	strDevId = objItem.DeviceID
	If(InStr(strDevId,&amp;quot;VID_&amp;quot;)&amp;lt;&amp;gt;0) Then
		strVid = Mid(strDevId,InStr(strDevId,&amp;quot;VID_&amp;quot;)+4,4)
	End If
	If(InStr(strDevId,&amp;quot;PID_&amp;quot;)&amp;lt;&amp;gt;0) Then
		strPid = Mid(strDevId,InStr(strDevId,&amp;quot;PID_&amp;quot;)+4,4)
	End If
	
	If(strDevId&amp;lt;&amp;gt;&amp;quot;&amp;quot; And strPid&amp;lt;&amp;gt;&amp;quot;&amp;quot; And strVid&amp;lt;&amp;gt;&amp;quot;&amp;quot;) Then
		&amp;#039; ok, only take on reading the in the usb.ids file if we have at least one device
		If(objFSO.FileExists(strUSBIDs) And IsNull(dictVendors)) Then 
			Set dictVendors = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
			LoadVendorProductMap dictVendors, strUSBIDs
		End If
	
		WScript.Echo GenOutputString(objItem.Description, strVid, strPid, dictVendors)
	End If
Next

Function GenOutputString(strDescription, strVid, strPid, dictVendors) 
	Dim strVidName, strPidName, dictVendor
	strVidName = strVid
	strPidName = strPid
	
	If Not IsNull(dictVendors) Then 
		If dictVendors.Exists(LCase(strVid)) Then 
			Set dictVendor = dictVendors.Item(LCase(strVid))
			
			strVidName = dictVendor.Item(VIEWABLE_NAME)
			If dictVendor.Exists(LCase(strPid)) Then 
				strPidName = dictVendor.Item(LCase(strPid))
			End If
		End if
	End If

	GenOutputString = strDescription &amp;amp; &amp;quot;|&amp;quot; &amp;amp; strVidName &amp;amp; &amp;quot;|&amp;quot; &amp;amp; strPidName
End Function &amp;#039; GenOutputString


Sub LoadVendorProductMap(dictVendors, strFile)
	Dim objFSO, objReadFile, bStopReading, strLine, dictCurrentVendor
	Dim strWords, strKey, strValue
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

	Set objReadFile = objFSO.OpenTextFile(strFile, 1, False)
	
	bStopReading = False

	Do While Not objReadFile.AtEndOfStream And Not bStopReading
		strLine = objReadFile.ReadLine
		
		If InStr(strLine, &amp;quot;# List of known device classes, subclasses and protocols&amp;quot;) &amp;gt; 0 Then 
			&amp;#039; this is our signal to stop -- after this are no more vendors
			bStopReading = True
		ElseIf Left(strLine, 1) = &amp;quot;#&amp;quot; Or Trim(strLine) = &amp;quot;&amp;quot; Then 
			&amp;#039; do nothing - this is a skip
		ElseIf Left(strLine, 1) = vbTab Then 
			strLine = Right(strLine, Len(strLine) - 1)
			strWords = Split(strLine, &amp;quot; &amp;quot;, 2)
			strKey = strWords(0)
			strValue = Trim(strWords(1))
			dictCurrentVendor.Add LCase(strKey), strValue		
		Else 
			strWords = Split(strLine, &amp;quot; &amp;quot;, 2)
			strKey = strWords(0)
			strValue = Trim(strWords(1))
			Set dictCurrentVendor = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
			If Not dictVendors.Exists(strKey) Then 
				dictVendors.Add LCase(strKey), dictCurrentVendor
			End If 
			dictCurrentVendor.Add VIEWABLE_NAME, strValue
		End If
	Loop
	objReadFile.Close

End Sub &amp;#039; LoadVendorProductMap

	
Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
    
    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
            strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
        End If  
    
        Dim fso
        Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
        If fso.FolderExists(strPath) Then
            If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
                &amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
                GeneratePath strPath &amp;amp; strSubDir, fso
            End If
            GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
        Else
            &amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
            WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
            GetTaniumDir = False
        End If
    Else
        WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
        GetTaniumDir = False
    End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
    GeneratePath = False

    If Not fso.FolderExists(pFolderPath) Then
        If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
            GeneratePath = True
            Call fso.CreateFolder(pFolderPath)
        End If
    Else
        GeneratePath = True
    End If
End Function &amp;#039;GeneratePath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Description</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Vendor ID</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Product ID</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>214</cache_row_id>
          </sensor>
          <sensor>
            <id>428</id>
            <name>Hardware Device Failed to Load</name>
            <hash>3145690673</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Provides errors codes for hardware devices that failed to load correctly at last boot.
Example: none</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select * from Win32_PnPEntity WHERE ConfigManagerErrorCode &amp;lt;&amp;gt; 0</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>215</cache_row_id>
          </sensor>
          <sensor>
            <id>430</id>
            <name>SQL Recovery Mode</name>
            <hash>3147407985</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description>Returns database name and recovery mode for that database from all databases in SQL Server on client machine.
Example: ReportServer SIMPLE</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Recovery Mode
&amp;#039;========================================
&amp;#039;@INCLUDE=sql/mssql_connection_utils.vbs

Option Explicit

Dim dictInstances, strInstance, objConnection

Set dictInstances = GetMSSQLInstances()

For Each strInstance In dictInstances.Keys
	Dim objRecordSet, Record, objRecordSet2, strDatabase, strDBRecovery
	Set objConnection = CreateObject(&amp;quot;ADODB.Connection&amp;quot;) 
	Set objRecordSet = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;) 
	Set objRecordSet2 = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;)  

	On Error Resume Next
	objConnection.Open GenMSSQLConnectionStr(strInstance, &amp;quot;master&amp;quot;)
	
	If objConnection.Errors.Count &amp;gt; 0 Then 
		WScript.Echo &amp;quot;Access Error (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
		Exit For
	End If 
	On Error Goto 0

	objRecordSet.Open &amp;quot;SELECT name FROM sys.databases&amp;quot;, objConnection, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC  
	For each Record in objRecordSet.Properties    
		strDatabase = objRecordSet(&amp;quot;name&amp;quot;)    
		objRecordSet2.Open &amp;quot;select databasepropertyex([name],&amp;#039;Recovery&amp;#039;) as [Recovery] from dbo.sysdatabases where name=&amp;quot; &amp;amp; &amp;quot;&amp;#039;&amp;quot; &amp;amp; strDatabase &amp;amp; &amp;quot;&amp;#039;&amp;quot;, _         
			objConnection, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC        
		strDBRecovery = objRecordSet2(&amp;quot;Recovery&amp;quot;)       
		WScript.echo strDatabase &amp;amp; &amp;quot; &amp;quot; &amp;amp; strDBRecovery &amp;amp; GetMSSQLSensorInstanceStr(strInstance)    
		objRecordset2.Close     
		objRecordSet.MoveNext    
		If (objRecordset.EOF = True) THEN       
			objRecordset.Close       
			Exit For    
		End If     
	Next 
Next
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: sql/mssql_connection_utils.vbs

&amp;#039; Common constants for MSSQL lookups
Const AD_OPEN_STATIC = 3 
Const AD_LOCK_OPTIMISTIC = 3  


Function GetMSSQLInstances()
    Dim dictResult, objWMIService, colServices, objService
    Dim strCaption, strInstance, intStartIndex, intStopIndex
    Set dictResult = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

    Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
    Set colServices = objWMIService.ExecQuery (&amp;quot;select * from win32_Service&amp;quot;)  
    For Each objService In colServices
        strCaption = objService.Caption
    
        If (InStr(strCaption,&amp;quot;SQL Server&amp;quot;) &amp;lt;&amp;gt; 0 And ObjService.State = &amp;quot;Running&amp;quot;) Then    
            &amp;#039; OK -- found SQL Server on this machien, now we need to find the instance name
            &amp;#039; if this is the correct service
            strInstance = &amp;quot;.&amp;quot;
            intStartIndex = InStr(strCaption, &amp;quot;(&amp;quot;)
            intStopIndex = InStr(strCaption, &amp;quot;)&amp;quot;)
            
            If(intStartIndex &amp;lt;&amp;gt; 0) And (intStopIndex &amp;lt;&amp;gt; 0) Then 
                strInstance = Mid(strCaption, intStartIndex + 1, intStopIndex - intStartIndex - 1)
                    
                If strInstance = &amp;quot;MSSQLSERVER&amp;quot; Then 
                    strInstance = &amp;quot;.&amp;quot;
                End If 

                If Not dictResult.Exists(strInstance) Then
                    dictResult.Add strInstance, True
                End if
            End If             
        End If  
    Next  
    
    Set GetMSSQLInstances = dictResult

End Function &amp;#039; GetMSSQLInstances

Function GenMSSQLConnectionStr(strInstance, strCatalog) 
    Dim strDataSource, strConnection

    If strInstance = &amp;quot;.&amp;quot; Then 
        strDataSource = strInstance
    Else 
        strDataSource = &amp;quot;.\&amp;quot; &amp;amp; strInstance
    End If 

    strConnection = &amp;quot;Provider=SQLOLEDB;Data Source=&amp;quot; &amp;amp; strDataSource &amp;amp; &amp;quot;;Trusted_Connection=Yes;Initial Catalog=&amp;quot; &amp;amp; strCatalog &amp;amp; &amp;quot;;&amp;quot;

    GenMSSQLConnectionStr = strConnection
End Function &amp;#039; OpenMSSQLConnection

Function GetMSSQLSensorInstanceStr(strInstance)
    If strInstance = &amp;quot;.&amp;quot; Then
        GetMSSQLSensorInstanceStr = &amp;quot;&amp;quot;
    Else
        GetMSSQLSensorInstanceStr = &amp;quot; (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
    End If
End Function &amp;#039; GetMSSQLSensorInstanceStr
&amp;#039;- End file: sql/mssql_connection_utils.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>216</cache_row_id>
          </sensor>
          <sensor>
            <id>432</id>
            <name>Total Swap</name>
            <hash>3147580256</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Total swap space configured by client machine.
Example: 4000 MB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
memLine=$(free -m | grep &amp;quot;Swap&amp;quot;)
set -- $memLine
echo $2 MB</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
#swapfile             dev    swaplo   blocks     free
#/dev/zvol/dsk/rpool/swap 195,1         8  2097144  2097144

swap=$(swap -l | grep -v swapfile | awk &amp;#039;{ print $4 }&amp;#039;)
swapMB=$(expr $swap \* 512 \/ 1024 \/ 1024)
echo &amp;quot;${swapMB}MB&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>swap -l | grep -v &amp;#039;device&amp;#039; | awk &amp;#039;{ print $4  }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>217</cache_row_id>
          </sensor>
          <sensor>
            <id>434</id>
            <name>Tanium Client Downloads Directory Details</name>
            <hash>3157180652</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>Returns the path to and size of the Tanium Client "Downloads" directory.  This is the directory to which Tanium Package files are downloaded.  It is considered temporary space and will clean itself out periodically.
Example: C:\Program Files (x86)\Tanium\Tanium Client\Downloads|139.4 MB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client Downloads Directory Details
&amp;#039;========================================

&amp;#039;Script will return path and size of Tanium Downloads directory

Option Explicit

SetLocale(GetTaniumLocale)

Const HKLM = &amp;amp;H80000002
Dim objRegistry,strTaniumClientKey
Dim objFSO,objFolder,strTaniumClientPath,strTaniumClientDownloadsPath
Dim strSize,strSep

strSep = &amp;quot;|&amp;quot;

Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

Set objRegistry=GetObject(&amp;quot;winmgmts:\\.\root\default:StdRegProv&amp;quot;)

strTaniumClientKey = GetTaniumRegistryPath()
If Not strTaniumClientKey = &amp;quot;&amp;quot; Then
	objRegistry.GetStringValue HKLM,strTaniumClientKey,&amp;quot;Path&amp;quot;,strTaniumClientPath
End If

If ( IsNull(strTaniumClientPath) Or strTaniumClientPath = &amp;quot;&amp;quot;) Or ( Not objFSO.FolderExists(strTaniumClientPath)) Then
	WScript.Echo &amp;quot;Tanium Client Directory Not Found&amp;quot;
Else
	strTaniumClientDownloadsPath = strTaniumClientPath&amp;amp;&amp;quot;\Downloads&amp;quot;
	Set objFolder = objFSO.GetFolder(strTaniumClientDownloadsPath)
	strSize = GetAccessibleFolderSize(strTaniumClientDownloadsPath)
	strSize = GetPrettyFileSize(strSize)
	Wscript.Echo strTaniumClientDownloadsPath &amp;amp; strSep &amp;amp; strSize
End If

&amp;#039; --- end main --- &amp;#039;

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function GetPrettyFileSize(strSize)
Dim dblSize
	dblSize = CDbl(strSize)

	If dblSize &amp;gt; 1024*1024*1024 Then &amp;#039;&amp;#039;Should be GB
		strSize = CStr(Round(dblSize / 1024 / 1024 / 1024, 1)) &amp;amp; &amp;quot; GB&amp;quot;	
	ElseIf dblsize &amp;gt; 1024*1024 Then  &amp;#039;&amp;#039;Should be MB
		strSize = CStr(Round(dblSize / 1024 / 1024, 1)) &amp;amp; &amp;quot; MB&amp;quot;
	ElseIf dblSize &amp;gt; 1024 Then  &amp;#039;&amp;#039;Should be kB
		strSize = CStr(Round(dblSize / 1024)) &amp;amp; &amp;quot; kB&amp;quot;
	Else
		strSize = CStr(dblSize) &amp;amp; &amp;quot; B&amp;quot;	
	End If	
	GetPrettyFileSize = strSize
End Function &amp;#039;GetPrettyFileSize


Function GetAccessibleFolderSize(strFolderPath)
&amp;#039; Gets the folder sizes that it is able to
&amp;#039; and skips those it has no rights to see
    On Error Resume Next &amp;#039; Permissions Errors potentially

	Dim objFSO
    Dim objFolder,objSubfolder,intSize,bHasSubfolders	
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	    
    bHasSubfolders = False

    Set objFolder = objFSO.GetFolder(strFolderPath)
    Err.Clear
    intSize = objFolder.Size
    If Err.Number &amp;lt;&amp;gt; 0 Then
        For Each objSubfolder in objFolder.SubFolders
            intSize = intSize + GetAccessibleFolderSize(objSubfolder.Path)
            bHasSubfolders = True
        Next

        If Not bHasSubfolders Then
            intSize = objFolder.Size
        End If
    End If

    GetAccessibleFolderSize = intSize
    
    On Error Goto 0

End Function &amp;#039;GetAccessibleFolderSize

Function GetTaniumLocale
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

	Dim objWshShell
	Dim intLocaleID
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Tanium\Tanium Client\LocaleID&amp;quot;)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client\LocaleID&amp;quot;)
	End If
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	&amp;#039; Cleanup
	Set objWshShell = Nothing

End Function &amp;#039;GetTaniumLocale</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Path</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Size</name>
                <index>1</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>218</cache_row_id>
          </sensor>
          <sensor>
            <id>436</id>
            <name>Total Memory</name>
            <hash>316030016</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The total physical memory installed in the client machine.
Example: 8000 MB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Total Memory
&amp;#039;========================================

Option Explicit

Dim objWMIService, colItems, objItem, strTotalMemory

Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
 
&amp;#039;Gets total memory
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * FROM Win32_Computersystem &amp;quot;)
For Each objItem In colItems  
 strTotalMemory = Int(objItem.TotalPhysicalMemory / 1024 / 1024)
 wscript.echo strTotalMemory &amp;amp; &amp;quot; MB&amp;quot;
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
memLine=$(free -m | grep &amp;quot;Mem&amp;quot;)
set -- $memLine
echo $2 MB</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
system_profiler SPHardwareDataType | awk -F&amp;#039;: &amp;#039; &amp;#039; /Memory:/ { print $2 } &amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
MEM=$(lsattr -El sys0 -a realmem| awk &amp;#039;{ print $2 }&amp;#039;)
TM=$(expr $MEM / 1000)
echo &amp;quot;$TM MB&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>219</cache_row_id>
          </sensor>
          <sensor>
            <id>438</id>
            <name>PCI Device</name>
            <hash>3170446499</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the names of PCI devices in the system.
Example:Intel(R) 82371AB/EB PCI Bus Master IDE Controller</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from Win32_PnPEntity where (Status=&amp;#039;OK&amp;#039; and DeviceID like &amp;#039;%PCI%&amp;#039;)</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>220</cache_row_id>
          </sensor>
          <sensor>
            <id>440</id>
            <name>Number of Logged In Users</name>
            <hash>3170496172</hash>
            <string_count>0</string_count>
            <category>User</category>
            <description>Returns the number of interactively logged in users.  On Windows, this will include Remote Desktop sessions.
Example: 2</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Number of Logged In Users
&amp;#039;========================================

Option Explicit

Dim objWMIService,colItems,objItem,i

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;) 
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Process Where Name=&amp;#039;explorer.exe&amp;#039;&amp;quot;,,48)

i = 0
For Each objItem in colItems
	i = i + 1
Next

WScript.Echo i</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
who -q | grep &amp;quot;users=&amp;quot; | cut -d= -f2</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
who | awk &amp;#039;{print $1}&amp;#039; | sort | uniq | wc -l | awk &amp;#039;{print $1}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/bash
who -q | grep &amp;quot;users=&amp;quot; | cut -d= -f2</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
who -q | grep &amp;quot;users=&amp;quot; | cut -d= -f2</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>221</cache_row_id>
          </sensor>
          <sensor>
            <id>442</id>
            <name>Locale Code</name>
            <hash>3177804004</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the OS Locale Code from the installed operating system.  This differs from the LCID returned in the OS language sensor.
Example:0409</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Locale from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>222</cache_row_id>
          </sensor>
          <sensor>
            <id>444</id>
            <name>Running Processes Memory Usage</name>
            <hash>319662655</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Returns all running processes along with the memory each process uses.  This is the process's working set.
Example: lsass.exe|23 MB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Running Processes Memory Usage
&amp;#039;========================================

Dim objWMIService,colItems,objItem,strSep,strMem,strProcess

strSep = &amp;quot;|&amp;quot;

Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Process&amp;quot;,,48)

On Error Resume Next
For Each objItem in colItems
	strProcess = objItem.Caption
	If Err.Number &amp;lt;&amp;gt; 0 Then strProcess = &amp;quot;Unknown&amp;quot;
	
	strMem = objItem.WorkingSetSize
	If Err.Number &amp;lt;&amp;gt; 0 Then strMem = &amp;quot;Unknown&amp;quot;
	
	WScript.Echo strProcess &amp;amp; strSep &amp;amp; PrettyFileSize(strMem)
Next
On Error Goto 0

Function PrettyFileSize(strSize)
	
	strSize = CStr(strSize) &amp;#039; convert all input to string
	
	Dim strOut,intKB,intMB,intGB,intSize
	
	If Not IsNumeric(strSize) Then
		strOut = &amp;quot;Unknown&amp;quot;
		PrettyFileSize = strOut
		Exit Function
	Else
		If Not CStr(CLng(strSize)) = strSize Then
			&amp;#039;not an integer
			strOut = &amp;quot;Unknown&amp;quot;
			PrettyFileSize = strOut
			Exit Function
		End If
	End If
	
	intSize = CLng(strSize)
	intKB = 1024
	intMB = 1024*1024
	intGB = 1024*1024*1024
	
	If intSize &amp;gt; intGB Then
		strOut = Int(intSize / intGB) &amp;amp; &amp;quot; GB&amp;quot;
	ElseIf intSize &amp;gt; intMB Then
		strOut = Int(intSize / intMB) &amp;amp; &amp;quot; MB&amp;quot;
	ElseIf intSize &amp;gt; intKB Then
		strOut = Int(intSize / intKB) &amp;amp; &amp;quot; KB&amp;quot;
	Else
		strOut = intSize &amp;amp; &amp;quot; B&amp;quot;
	End If
	
	PrettyFileSize = strOut
End Function &amp;#039;PrettyFileSize</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
# Get list of running process and memory uage (VSZ)
P=$(ps -eo comm,vsz)

intKB=1
intMB=1024
intGB=1048576

/usr/bin/printf %s &amp;quot;$P&amp;quot; | while IFS= read -r line
do
   PNME=$(echo $line | cut -d &amp;#039; &amp;#039; -f1)
   PSZE=$(echo $line | cut -d &amp;#039; &amp;#039; -f2)
   if [ &amp;quot;$PSZE&amp;quot; != &amp;quot;VSZ&amp;quot; -a &amp;quot;$PNME&amp;quot; != &amp;quot;ps&amp;quot; ]; then
      if [ $PSZE -gt $intKB ]; then
         PSZE=$(($PSZE/$intKB))
         echo $PNME&amp;quot;|&amp;quot;$PSZE KB
         continue
      fi
      if [ $PSZE -lt $intKB ]; then
         echo $PNME&amp;quot;|&amp;quot;&amp;#039;1 KB&amp;#039;
      fi
  fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
# Get list of running process and memory uage (VSZ)
P=$(ps axcl)

intKB=1024
intMB=1048576
intGB=1073741824

/usr/bin/printf %s &amp;quot;$P&amp;quot; | while IFS= read -r line
do
   PNME=$(echo $line | cut -d &amp;#039; &amp;#039; -f13)
   PSZE=$(echo $line | cut -d &amp;#039; &amp;#039; -f7)
   if [ &amp;quot;$PSZE&amp;quot; != &amp;quot;VSZ&amp;quot; -a &amp;quot;$PNME&amp;quot; != &amp;quot;ps&amp;quot; ]; then
      if [ $PSZE -gt $intKB ]; then
         PSZE=$(($PSZE/$intKB))
         echo $PNME&amp;quot;|&amp;quot;$PSZE KB
         continue
      fi
      if [ $PSZE -lt $intKB ]; then
         echo $PNME&amp;quot;|&amp;quot;&amp;#039;1 KB&amp;#039;
      fi
  fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
# Get list of running process and memory uage
intKB=1
intMB=1024
intGB=1048576
myzone=$(zonename)
if [ -z &amp;quot;$myzone&amp;quot; ]; then
  PSCMD=&amp;quot;ps -eo comm,vsz&amp;quot;
else
  PSCMD=&amp;quot;ps -z $myzone -o comm,vsz&amp;quot;
fi

P=$($PSCMD)

/usr/bin/printf %s &amp;quot;$P&amp;quot; | cut -d &amp;#039;&amp;#039; -f1 | while IFS= read -r line
do
   PNME=$(echo $line | cut -d &amp;#039; &amp;#039; -f1)
   PSZE=$(echo $line | cut -d &amp;#039; &amp;#039; -f2)
   if [ &amp;quot;$PSZE&amp;quot; != &amp;quot;VSZ&amp;quot; -a &amp;quot;$PNME&amp;quot; != &amp;quot;ps&amp;quot; ]; then
      if [ $PSZE -gt $intKB ]; then
         PSZE=$(($PSZE/$intKB))
         echo $PNME&amp;quot;|&amp;quot;$PSZE KB
         continue
      fi
      if [ $PSZE -lt $intKB ]; then
         echo $PNME&amp;quot;|&amp;quot;&amp;#039;1 KB&amp;#039;
      fi
  fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get list of running process and memory uage (VSZ)
P=$(ps -eo comm,vsz)

/usr/bin/printf %s &amp;quot;$P&amp;quot; | while IFS= read -r line
do
   PNME=$(echo $line | cut -d &amp;#039; &amp;#039; -f1)
   PSZE=$(echo $line | cut -d &amp;#039; &amp;#039; -f2)
   if [ &amp;quot;$PSZE&amp;quot; != &amp;quot;VSZ&amp;quot; -a &amp;quot;$PNME&amp;quot; != &amp;quot;ps&amp;quot; ]; then
     echo &amp;quot;$PNME|$PSZE&amp;quot;
   fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Process Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Memory Used</name>
                <index>1</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>223</cache_row_id>
          </sensor>
          <sensor>
            <id>446</id>
            <name>Listen Ports</name>
            <hash>3200371050</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns information network-aware processes and the ports they have bound to.
Example: googletalkplugin.exe Google Talk Plugin :60042</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Listen Ports
&amp;#039;========================================

showProcess = True
showPort = True

Dim strcommand, results, excludeProcesses, excludeSubnets, taniumDebug
Dim strSep : strSep = &amp;quot;|&amp;quot;
&amp;#039; This is a multi-column sensor that looks like:
&amp;#039;Process|Name|Target IP

excludeProcesses = &amp;quot;TaniumClient.exe,TaniumReceiver.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;chrome.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;iexplore.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;chrome.exe, iexplore.exe&amp;quot;
&amp;#039;excludeProcesses = &amp;quot;trillian.exe&amp;quot;

excludeSubnets = &amp;quot;127.0.0.0:255.255.255.0&amp;quot;
&amp;#039;excludeSubnets = &amp;quot;72.14.213.0:255.255.255.0, 74.125.223.0:255.255.255.0-74.125.225.0:255.255.255.0&amp;quot;

taniumDebug = False


excludeProcesses = Split(LCase(excludeProcesses), &amp;quot;,&amp;quot;)
excludeSubnets = Split(excludeSubnets, &amp;quot;,&amp;quot;)

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)  
query = &amp;quot;select name, executablepath, processId from win32_process&amp;quot;
Set colResults = objWMIService.ExecQuery(query)

&amp;#039;dictionary for process-app pairs
Set processes = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

For Each result In colResults 
   processId = CStr(result.ProcessId)
   processPath = result.ExecutablePath
   processes.Add processId, result.Name &amp;amp; &amp;quot;,&amp;quot; &amp;amp; processPath &amp;#039; tie IDs to exes,path - split later
Next

strcommand = &amp;quot;cmd /c netstat -aon -p TCP | find &amp;quot; &amp;amp; chr(34) &amp;amp; &amp;quot;TCP&amp;quot; &amp;amp; Chr(34) &amp;amp; &amp;quot; | find &amp;quot; &amp;amp; chr(34) &amp;amp; &amp;quot;LISTENING&amp;quot; &amp;amp; Chr(34)

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Set objScriptExec = objShell.Exec (strCommand)
strPingResults = LCase(objScriptExec.StdOut.ReadAll)

results = Split(strPingResults, vbCrLf)
j = 0

For Each line in results
   line = cleanWhitespace(Trim(line))
   
   lineResults = Split(line)
   i = 0
   Dim strPort, strPid, strConnectionType, strForeignIp, strApp
   For Each word In lineResults
      If i = 1 Then
         strPort = word
         strPort = Right(strPort, Len(strPort) - InStr(strPort, &amp;quot;:&amp;quot;) + 1)
      ElseIf i = 2 Then
         strForeignIp = word
      ElseIf i = 3 Then
         strConnectionType = word
      ElseIf i = 4 Then
         strPid = word
      End If
      
      i = i + 1
   Next
   
   &amp;#039;DO NOT INCLUDE EXCLUDED APPS
   strAppEntry = processes.Item(strPid) &amp;#039; looks like process.exe, Process Path
   arrAppEntry = Split(strAppEntry,&amp;quot;,&amp;quot;)
   strAppExe = arrAppEntry(0)
   strAppPath = arrAppEntry(1)
   
   isNotExcludedApp = Not(ContainedInArray(LCase(strAppExe), excludeProcesses))
   
   &amp;#039;DO NOT INCLUDE EXCLUDED SUBNETS
   isNotExcludedSubnet = Not(ContainedInSubnet(strForeignIp, excludeSubnets))
   
   If Not(IsEmpty(strAppExe)) _
      And isNotExcludedApp _ 
      And isNotExcludedSubnet Then

	  If Not showPort Then 
	  	arrTemp = Split(strForeignIp, &amp;quot;:&amp;quot;)
		strForeignIp = arrTemp(0)
	  End If

      If showProcess Then
      	results(j) = strAppExe &amp;amp; strSep &amp;amp; ProcessNameToApplicationName(strAppPath,strAppExe) &amp;amp; strSep &amp;amp; strPort
      Else
        results(j) = strSep &amp;amp; strSep &amp;amp; strForeignIp
      End If	
   Else
      If taniumDebug Then WScript.Echo &amp;quot;      excluded: &amp;quot; &amp;amp; strApp &amp;amp; &amp;quot; &amp;quot; &amp;amp; strForeignIp
      results(j) = &amp;quot;&amp;quot;   
   End If 
   
   j = j + 1
Next

results = RemDups(results)

If UBound(results) &amp;lt; 1 Then
	If GetLocale() &amp;lt;&amp;gt; 1033 Then
		WScript.Echo &amp;quot;English Language OS Required&amp;quot;
	End If
End If

For Each result In results 
   WScript.Echo result
Next

WScript.Quit

Function ContainedInSubnet(str, arr)
   Dim strIp, strSubnet, strMask
   temp = Split(str, &amp;quot;:&amp;quot;)
   strIp = temp(0)

   For Each item In arr
      If InStr(item, &amp;quot;-&amp;quot;) Then &amp;#039;Subnet range
         temp = Split(item, &amp;quot;-&amp;quot;)
         lower = Split(temp(0), &amp;quot;:&amp;quot;)
         upper = Split(temp(1), &amp;quot;:&amp;quot;)
         lowerSubnet = Trim(lower(0))
         lowerMask = Trim(lower(1))
         upperSubnet = Trim(upper(0))
         upperMask = Trim(upper(1))
         
         If StringToBinary(strIp) &amp;gt; StringToBinary(Subnet(lowerSubnet, lowerMask)) _
            And StringToBinary(strIp) &amp;lt; StringToBinary(Subnet(upperSubnet, upperMask)) Then
            ContainedInSubnet = True
            Exit Function
         End If 
      Else &amp;#039;Single subnet
         parts = Split(item, &amp;quot;:&amp;quot;)
         strSubnet = Trim(parts(0))
         strMask = Trim(parts(1))
         If Subnet(strIp, strMask) = Subnet(strSubnet, strMask) Then
            ContainedInSubnet = True
            Exit Function
         End If
      End If 
   Next
   ContainedInSubnet = False
End Function

Function ContainedInArray(str, arr)
   For Each item In arr 
      If str = Trim(item) Then
         ContainedInArray = True
         Exit Function
      End If   
   Next
   ContainedInArray = False
End Function

Function cleanWhitespace(strStarter)
   intStarter = Len(strStarter)
   For i = intStarter to 2 Step -1
      strChars = Space(i)
      strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
   Next
   cleanWhitespace = strStarter
End Function

Function RemDups(ByVal anArray)
   Dim d, item, thekeys
   Set d = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
   d.removeall
   d.CompareMode = 0
   For Each item In anArray
      If Len(item) &amp;gt; 0 Then
         If Not d.Exists(item) Then d.Add item, item
      End If
   Next
   thekeys = d.keys
   Set d = Nothing
   RemDups = thekeys
End Function

Function Subnet(strAddress, strMask)
   intSubnetLength = SubnetLength(strMask)
   Subnet = BinaryToString(Left(StringToBinary(strAddress), intSubnetLength) &amp;amp; String(32 - intSubnetLength, &amp;quot;0&amp;quot;))
End Function

Function SubnetLength(strMask)
   strMaskBinary = StringToBinary(strMask)
   SubnetLength = Len(Left(strMaskBinary, InStr(strMaskBinary, &amp;quot;0&amp;quot;) - 1))
End Function

Function BinaryToString(strBinary)
   For intOctetPos = 1 To 4
      strOctetBinary = Right(Left(strBinary, intOctetPos * 8), 8)
      intOctet = 0
      intValue = 1
      For intBinaryPos = 1 To Len(strOctetBinary)
         If Left(Right(strOctetBinary, intBinaryPos), 1) = &amp;quot;1&amp;quot; Then intOctet = intOctet + intValue
         intValue = intValue * 2
      Next
      If BinaryToString = Empty Then BinaryToString = CStr(intOctet) Else BinaryToString = BinaryToString &amp;amp; &amp;quot;.&amp;quot; &amp;amp; CStr(intOctet)
   Next
End Function

Function StringToBinary(strAddress)
   objAddress = Split(strAddress, &amp;quot;.&amp;quot;, -1)
   For Each strOctet In objAddress
      intOctet = CInt(strOctet)
      strOctetBinary = &amp;quot;&amp;quot;
      For x = 1 To 8
         If intOctet Mod 2 &amp;gt; 0 Then
            strOctetBinary = &amp;quot;1&amp;quot; &amp;amp; strOctetBinary
         Else
            strOctetBinary = &amp;quot;0&amp;quot; &amp;amp; strOctetBinary
         End If
         intOctet = Int(intOctet / 2)
      Next
      StringToBinary = StringToBinary &amp;amp; strOctetBinary
   Next
End Function

Function ProcessNameToApplicationName(strExecutablePath, strExecutableName)
&amp;#039; This function will return the full application name of a running executable

		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		
		arrPathParts = Split(strExecutablePath,&amp;quot;\&amp;quot;)

		If UBound(arrPathParts) &amp;lt; 0 Then &amp;#039;can be -1 for no split, such as the System process
			ProcessNameToApplicationName = strExecutableName
			Set fso = Nothing
			Exit Function
		End If
		strExecutable = arrPathParts(UBound(arrPathParts))
		
		If fso.FileExists(strExecutablePath) Then
			Dim strOutput, fileVersion, fileVersionOutput, fullName
		
			Set execFile = fso.GetFile(strExecutablePath)
			fullName = GetDescription(execFile.ParentFolder.Path, strExecutable)
			If Not fullName = &amp;quot;&amp;quot; Then
				ProcessNameToApplicationName = fullName
			Else
				ProcessNameToApplicationName = strExecutableName
			End If
		Else &amp;#039; file doesn&amp;#039;t exist or inaccessible
			ProcessNameToApplicationName = strExecutableName
		End If

End Function &amp;#039;ProcessNameToApplicationName

Function GetDescription(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &amp;quot;File description&amp;quot;)
	If IsEmpty(descIndex) Then
		descIndex = GetAttributeIndex(folderPath, &amp;quot;Description&amp;quot;)
	End If
	GetDescription = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function GetFileProperty(folderPath, fileName, fileProperty)
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	GetFileProperty = objFolder.GetDetailsOf(objFolder.Parsename(fileName), fileProperty)
End Function

Function GetAttributeIndex(folderPath, attrTarget)
	Set objShell = CreateObject(&amp;quot;Shell.Application&amp;quot;)
	Set objFolder = objShell.Namespace(folderPath)
	For i = 0 to 50
		attrName = objFolder.GetDetailsOf(objFolder.Items, i)
		If LCase(attrName) = LCase(attrTarget) Then
			GetAttributeIndex = i
			Exit Function
		End If
	Next
	
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
if [ ! -d ./tmp ]; then
  mkdir ./tmp
  chmod 0700 ./tmp
fi

tmpfile=&amp;quot;./tmp/tanium.$$&amp;quot;
rm -f &amp;quot;$tmpfile&amp;quot; 

lsof -p ^$PPID -iTCP -sTCP:LISTEN -P +c 15 -n &amp;gt; &amp;quot;$tmpfile&amp;quot;
cat &amp;quot;$tmpfile&amp;quot; | awk &amp;#039;$1 != &amp;quot;COMMAND&amp;quot; { print $1&amp;quot;|&amp;quot;$1&amp;quot;|&amp;quot;substr($9,index($9,&amp;quot;:&amp;quot;))}&amp;#039;

rm -f &amp;quot;$tmpfile&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
if [ ! -d ./tmp ]; then
  mkdir ./tmp
  chmod 0700 ./tmp
fi

tmpfile=&amp;quot;./tmp/tanium.$$&amp;quot;
rm -f &amp;quot;$tmpfile&amp;quot;

lsof -p ^$PPID -iTCP -sTCP:LISTEN -P +c 15 -n &amp;gt; &amp;quot;$tmpfile&amp;quot;
cat &amp;quot;$tmpfile&amp;quot; | awk &amp;#039;$1 != &amp;quot;COMMAND&amp;quot; { print $1&amp;quot;|&amp;quot;$1&amp;quot;|&amp;quot;substr($9,index($9,&amp;quot;:&amp;quot;))}&amp;#039;
rm -f &amp;quot;$tmpfile&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
# Get listening port info

if [ ! -d ./tmp ]; then
  mkdir ./tmp
  chmod 0700 ./tmp
fi

tmpfile1=&amp;quot;./tmp/tanium1.$$&amp;quot;
tmpfile2=&amp;quot;./tmp/tanium2.$$&amp;quot;
rm -rf &amp;quot;$tmpfile1&amp;quot; &amp;quot;$tmpfile2&amp;quot;


netstat -na | grep LISTEN | awk &amp;#039;{ print $1 }&amp;#039; | sed s/*\.//g &amp;gt; &amp;quot;$tmpfile1&amp;quot;
netstat -na | grep LISTEN | awk &amp;#039;{ print $1 }&amp;#039; | sed s/*\.//g  &amp;gt; &amp;quot;$tmpfile2&amp;quot;
DATA=$(paste &amp;quot;$tmpfile1&amp;quot; &amp;quot;$tmpfile2&amp;quot;)
/usr/bin/printf %s &amp;quot;$DATA&amp;quot; | while IFS= read -r line
do
  PORT=$(echo $line | cut -d &amp;#039; &amp;#039; -f1)
  PROC=$(echo $line | cut -d &amp;#039; &amp;#039; -f2)
  echo &amp;quot;$PROC|$PROC|$PORT&amp;quot;
done

/bin/rm -f &amp;quot;$tmpfile1&amp;quot; &amp;quot;$tmpfile2&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get listening port info
# Client may not have lsof so provide netstat alternative

if [ ! -d ./tmp ]; then
  mkdir ./tmp
  chmod 0700 ./tmp
fi

tmpfile1=&amp;quot;./tmp/tmpfile1.$$&amp;quot;
tmpfile2=&amp;quot;./tmp/tmpfile2.$$&amp;quot;

/bin/rm -f &amp;quot;$tmpfile1&amp;quot;
/bin/rm -f &amp;quot;$tmpfile2&amp;quot;

which lsof &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
if [ $? -eq 0 ]; then
  lsof -p ^$PPID -iTCP  -P +c 15 -n | grep LISTEN | awk &amp;#039;{ print $1&amp;quot;|&amp;quot;$3&amp;quot;|&amp;quot;$9 }&amp;#039; | sed s/*://g
else
  netstat -na | grep LISTEN | awk &amp;#039;{ print $4 }&amp;#039; | sed s/*\.//g &amp;gt; &amp;quot;$tmpfile1&amp;quot;
  netstat -a | grep LISTEN | awk &amp;#039;{ print $4 }&amp;#039; | sed s/*\.//g  &amp;gt; &amp;quot;$tmpfile2&amp;quot;
  DATA=$(paste &amp;quot;$tmpfile1&amp;quot; &amp;quot;$tmpfile2&amp;quot;)
  /usr/bin/printf %s &amp;quot;$DATA&amp;quot; | while IFS= read -r line
  do
   PORT=$(echo $line | cut -d &amp;#039; &amp;#039; -f1)
   PROC=$(echo $line | cut -d &amp;#039; &amp;#039; -f2)
   echo &amp;quot;$PROC|$PROC|$PORT&amp;quot;
  done
fi

/bin/rm -f &amp;quot;$tmpfile1&amp;quot; &amp;quot;$tmpfile2&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Process</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Local Port</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>224</cache_row_id>
          </sensor>
          <sensor>
            <id>448</id>
            <name>OS Boot Time</name>
            <hash>3226581166</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the Date and Time that the OS last booted in UTC.
Example:  Mon, 05 Jan 2015 15:17:59 +0000</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Option Explicit
Dim strComputer: strComputer = &amp;quot;.&amp;quot;
Dim objSWbemDateTime, objWMIService, colOperatingSystems, objOperatingSystem, dateBootTime
 
	
Set objSWbemDateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colOperatingSystems = objWMIService.ExecQuery (&amp;quot;Select * from Win32_OperatingSystem&amp;quot;)
	 
For Each objOperatingSystem in colOperatingSystems
	objSWbemDateTime.Value = objOperatingSystem.LastBootUpTime
	dateBootTime = CDate(objSWbemDateTime.GetVarDate(False))
Next

WScript.Echo RFC822(dateBootTime)

Function RFC822(d)
    &amp;#039; Date: Mon, 26 Dec 2011 12:58:33 GMT
    Dim a, b
    a = Split(&amp;quot;Mon,Tue,Wed,Thu,Fri,Sat,Sun&amp;quot;, &amp;quot;,&amp;quot;)
    b = Split(&amp;quot;Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec&amp;quot;, &amp;quot;,&amp;quot;)
    Dim tmp
    tmp = a(Weekday(d, 2) - 1) &amp;amp; &amp;quot;, &amp;quot; &amp;amp; _
        Right(&amp;quot;0&amp;quot; &amp;amp; Day(d), 2) &amp;amp; &amp;quot; &amp;quot; &amp;amp; _
        b(Month(d) - 1) &amp;amp; &amp;quot; &amp;quot; &amp;amp; _
        Year(d) &amp;amp; &amp;quot; &amp;quot; &amp;amp; _
        Right(&amp;quot;0&amp;quot; &amp;amp; Hour(d), 2) &amp;amp; &amp;quot;:&amp;quot; &amp;amp; _
        Right(&amp;quot;0&amp;quot; &amp;amp; Minute(d), 2) &amp;amp; &amp;quot;:&amp;quot; &amp;amp; _
        Right(&amp;quot;0&amp;quot; &amp;amp; Second(d), 2) &amp;amp; &amp;quot; +0000&amp;quot;
    RFC822 = tmp
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>BESDate</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>225</cache_row_id>
          </sensor>
          <sensor>
            <id>450</id>
            <name>UDP Connections</name>
            <hash>324032765</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description></description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
&amp;#039; 
&amp;#039; 

WScript.Echo &amp;quot;N/A on Windows&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
netstat -anpu | tail -n +3 | awk &amp;#039;{ print substr($6,index($6,&amp;quot;/&amp;quot;)+1) &amp;quot;|&amp;quot; substr($4,index($4,&amp;quot;:&amp;quot;)+1) &amp;quot;|&amp;quot; $5 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Process</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Local Address</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Foreign Address</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>226</cache_row_id>
          </sensor>
          <sensor>
            <id>452</id>
            <name>Network Adapter Type</name>
            <hash>3276808962</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the names of the network connections which are active.
Example: Local Area Connection</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select NetConnectionID from Win32_NetworkAdapter where (NetConnectionStatus = 2)</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>227</cache_row_id>
          </sensor>
          <sensor>
            <id>454</id>
            <name>Registry Key Subkeys</name>
            <hash>3285711879</hash>
            <string_count>0</string_count>
            <category>Registry</category>
            <description>Returns all subkeys of a supplied key.  If the hive is HKEY_USERS, it will attempt to output the user name associated with the key.  HKEY_CURRENT_USER will only return data for the SYSTEM account which the Tanium Client runs as.
Example: John |Sensor Data | 32-bit</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Registry Key Subkeys
&amp;#039;========================================

&amp;#039;Columns:
&amp;#039; User | Subkey Name | Architecture | KeyPath

strKey = unescape(&amp;quot;||strKey||&amp;quot;)

&amp;#039;strKey = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
&amp;#039;strKey = &amp;quot;HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Internet Settings&amp;quot;

strSep = &amp;quot;|&amp;quot;


&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive


&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)
If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
	For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserName = GetUserForSIDLocal(objReg,strUserKey)
			If strUserName = False Then strUserName = strUserKey
			strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
			hasValues32 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 32)
			If hasValues32 Then hasAnyResult = True
		End If
	Next
Else &amp;#039; was another hive
	hasValues32 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 32)
	If hasValues32 Then hasAnyResult = True
End If

If Is64 Then
	Set objCtx = GetObjCtx(64)
	Set objReg = GetObjReg(objCtx)
	If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
	&amp;#039; go through each User&amp;#039;s hive in 64-bit context
		For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
				strUserName = GetUserForSIDLocal(objReg,strUserKey)
				If strUserName = False Then strUserName = strUserKey
				strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
				hasValues64 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 64)
				If hasValues64 Then hasAnyResult = True	
			End If
		Next
	Else &amp;#039; was another hive	
		hasValues64 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 64)
		If hasValues64 Then hasAnyResult = True	
	End If
End If

If Not (hasAnyResult) Then
	WScript.Echo &amp;quot;Key/Value not found&amp;quot;
End If

&amp;#039;Goes through all values in a key, returns True if strValue is found
Function CheckValues(objReg, objCtx, constHive, strKey, strValue, intBit)

	&amp;#039; Note the key that was being searched, will be a hidden column
	strOutputKey = strHive&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
	
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	
	arrNames = Outparams.sNames

	If Not IsNull(arrNames) Then
		For i = LBound(arrNames) To UBound(arrNames)
			strValueName = arrNames(i)
			WScript.Echo strUserName &amp;amp; strSep &amp;amp; strValueName &amp;amp; strSep &amp;amp; intBit &amp;amp; &amp;quot;-bit&amp;quot; _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strValueName
		Next
		CheckValues = True

	Else
		CheckValues = False
	End If
End Function


Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	GetSubKeys = Outparams.sNames
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function


Function GetHiveConst(hive)
	Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
	Const HKEY_CURRENT_USER   = &amp;amp;H80000001
	Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
	Const HKEY_USERS          = &amp;amp;H80000003

	Select Case UCase(hive)
		Case &amp;quot;HKLM&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKCR&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
			GetHiveConst = HKEY_CURRENT_USER
		Case &amp;quot;HKEY_USERS&amp;quot;
			GetHiveConst = HKEY_USERS
	End Select
	
	If IsEmpty(GetHiveConst) Then
		WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
		WScript.Quit
	End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
			strUserData = Left(strUserData,intDatPos - 1)
			&amp;#039; find last backslash
			intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
			&amp;#039; get right from that pos
			strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
			GetUserForSIDLocal = strUserData
		Else
			strUserData = False
		End If
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Registry Key","helpString":"Enter the registry key to query","defaultValue":"","promptText":"e.g. HKEY_USERS\\Software\\Key","maxChars":0,"key":"strKey","restrict":null,"validationExpressions":[{"helpString":"Value must be at least 5 characters","expression":"\\S{5}","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>User</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Subkey Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Architecture</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>KeyPath</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>228</cache_row_id>
          </sensor>
          <sensor>
            <id>456</id>
            <name>Number of Processors</name>
            <hash>3320877330</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the number of physical processors on a system.  This may differ from the number of cores or number of logical processors.
Example:1</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select NumberofProcessors from win32_ComputerSystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
cat /proc/cpuinfo | grep processor | wc -l</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
system_profiler SPHardwareDataType | grep -i &amp;quot;Number of Processors&amp;quot; | awk -F&amp;#039;: &amp;#039; &amp;#039; { print $2 } &amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
# Get number of processors
psrinfo | wc -l | awk &amp;#039;{ print $1 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>229</cache_row_id>
          </sensor>
          <sensor>
            <id>458</id>
            <name>Organization</name>
            <hash>3369713834</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the Organization defined at OS install time.
Example: YourCorp</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Organization from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>230</cache_row_id>
          </sensor>
          <sensor>
            <id>460</id>
            <name>Recently Run Applications</name>
            <hash>341438855</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Returns applications that have been launched in the last number of days supplied.
Example: Microsoft Excel</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Recently Run Applications
&amp;#039;========================================

days = unescape(&amp;quot;||days||&amp;quot;)
If Not IsNumeric(days) Then 
	WScript.Echo &amp;quot;Parameter Not Number&amp;quot;
	WScript.Quit
End If 
days = CInt(days)

showDate = unescape(&amp;quot;||showDate||&amp;quot;)
showDate=LCase(showDate)
If showDate = &amp;quot;yes&amp;quot; Or showDate = &amp;quot;true&amp;quot; Then 
	bShowDate = True
Else 
	bShowDate = False
End If 

strComputer = &amp;quot;.&amp;quot;
Const HKLM = &amp;amp;h80000002
Set reg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

&amp;#039;Uses date math - set locale

SetLocale(1033)

strKeyPath = GetTaniumRegistryPath() &amp;amp; &amp;quot;\Sensor Data\Applications&amp;quot;

If RegKeyExists(reg, HKLM, strKeyPath) Then
	reg.EnumKey HKLM, strKeyPath, arrSubKeys
	If IsArray(arrSubKeys) Then
	For Each Subkey in arrSubKeys
		&amp;#039;Wscript.Echo Subkey
		newKeyPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; Subkey
		
		reg.GetStringValue HKLM, newKeyPath, &amp;quot;Last Start&amp;quot;, strLastStart
		reg.GetStringValue HKLM, newKeyPath, &amp;quot;Description&amp;quot;, strDescription

		If Not IsNull(strLastStart) Then
			If GetDaysOld(strLastStart) &amp;lt; days Then
				Dim strOutput
				strOutput = strDescription
				
				If bShowDate Then
					strOutput = strOutput &amp;amp; &amp;quot; - &amp;quot; &amp;amp; strLastStart
				End If
				WScript.Echo strOutput
			End If
		End If	
	Next
	End If
Else	
	WScript.Echo &amp;quot;Application data not initialized&amp;quot;
End If

function GetDaysOld(strDate)
	today = CDate( Month(Now) &amp;amp; &amp;quot;/&amp;quot; &amp;amp; Day(Now) &amp;amp; &amp;quot;/&amp;quot; &amp;amp; Year(Now))
	GetDaysOld = DateDiff(&amp;quot;d&amp;quot;, strDate, today)
End Function

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of previous days to search&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;7&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;7&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Number of Previous Days to Search&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;},{&amp;quot;values&amp;quot;:[&amp;quot;True&amp;quot;,&amp;quot;False&amp;quot;],&amp;quot;key&amp;quot;:&amp;quot;showDate&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter True or False whether to show the date.&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;requireSelection&amp;quot;:true,&amp;quot;label&amp;quot;:&amp;quot;Show Date?&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::DropDownParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::DropDownParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||showDate||  ||days||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of previous days to search&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;7&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;7&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Number of Previous Days to Search&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;},{&amp;quot;values&amp;quot;:[&amp;quot;True&amp;quot;,&amp;quot;False&amp;quot;],&amp;quot;key&amp;quot;:&amp;quot;showDate&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter True or False whether to show the date.&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;requireSelection&amp;quot;:true,&amp;quot;label&amp;quot;:&amp;quot;Show Date?&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::DropDownParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::DropDownParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||showDate||  ||days||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of previous days to search&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;7&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;7&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Number of Previous Days to Search&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;},{&amp;quot;values&amp;quot;:[&amp;quot;True&amp;quot;,&amp;quot;False&amp;quot;],&amp;quot;key&amp;quot;:&amp;quot;showDate&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter True or False whether to show the date.&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;requireSelection&amp;quot;:true,&amp;quot;label&amp;quot;:&amp;quot;Show Date?&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::DropDownParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::DropDownParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||showDate||  ||days||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of previous days to search&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;7&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;7&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Number of Previous Days to Search&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;},{&amp;quot;values&amp;quot;:[&amp;quot;True&amp;quot;,&amp;quot;False&amp;quot;],&amp;quot;key&amp;quot;:&amp;quot;showDate&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter True or False whether to show the date.&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;requireSelection&amp;quot;:true,&amp;quot;label&amp;quot;:&amp;quot;Show Date?&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::DropDownParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::DropDownParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||showDate||  ||days||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Number of Previous Days to Search","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of previous days to search","defaultValue":"7","key":"days","maximum":365,"value":"7","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"},{"label":"Show Date?","requireSelection":true,"helpString":"Enter True or False whether to show the date.","defaultValue":"","promptText":"","key":"showDate","value":"","values":["True","False"],"parameterType":"com.tanium.components.parameters::DropDownParameter","model":"com.tanium.components.parameters::DropDownParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>231</cache_row_id>
          </sensor>
          <sensor>
            <id>462</id>
            <name>Tanium Client Installation Date</name>
            <hash>3418227220</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>The date on which the currently installed Tanium Client was installed on each client machine.
Example: Wed, 13 Nov 2013 00:00:00 -0480</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client Install Date
&amp;#039;========================================

myLocale = GetLocale()
localLocale = 2057

strComputer = &amp;quot;.&amp;quot;
    Set objRegistry = _
       GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; _
       &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

&amp;#039;Uses date math - set locale

    Const HKLM = &amp;amp;H80000002

    keyPath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    key64Path = &amp;quot;Software\WOW6432Node\Tanium\Tanium Client&amp;quot;

    If Not RegKeyExists(HKLM, keyPath) Then
       keyPath = key64Path

       If Not RegKeyExists(HKLM, keyPath) Then
          WScript.Echo &amp;quot;Not installed&amp;quot;
          WScript.Quit
       End If
    End If

    objRegistry.GetStringValue HKLM, keyPath, &amp;quot;FirstInstall&amp;quot;, strFirstInstall
	If Not IsNull(strFirstInstall) Then
		SetLocale(localLocale)
		strFirstInstall = CDATE(strFirstInstall)
		WScript.Echo VBTimeToRFC822(strFirstInstall,GetRFC822Bias)
		SetLocale(myLocale)
		WScript.Quit		
	Else   
		WScript.Echo &amp;quot;Not installed&amp;quot;
	End If  

    Function RegKeyExists(sHive, sRegKey)
       Dim aValueNames, aValueTypes
       If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
          RegKeyExists = True
       Else
          RegKeyExists = False
       End If
    End Function
	

Function vbTimeToRFC822(myDate, offset)

   Dim myDay, myDays, myMonth, myYear
   Dim myHours, myMinutes, myMonths, mySeconds

   myDate = CDate(myDate)
   myDay = WeekdayName(Weekday(myDate),true)
   myDays = zeroPad(Day(myDate), 2)
   myMonth = MonthName(Month(myDate), true)
   myYear = Year(myDate)
   myHours = zeroPad(Hour(myDate), 2)
   myMinutes = zeroPad(Minute(myDate), 2)
   mySeconds = zeroPad(Second(myDate), 2)

   vbTimeToRFC822 = myDay&amp;amp;&amp;quot;, &amp;quot;&amp;amp; _
                                  myDays&amp;amp;&amp;quot; &amp;quot;&amp;amp; _
                                  myMonth&amp;amp;&amp;quot; &amp;quot;&amp;amp; _ 
                                  myYear&amp;amp;&amp;quot; &amp;quot;&amp;amp; _
                                  myHours&amp;amp;&amp;quot;:&amp;quot;&amp;amp; _
                                  myMinutes&amp;amp;&amp;quot;:&amp;quot;&amp;amp; _
                                  mySeconds&amp;amp;&amp;quot; &amp;quot;&amp;amp; _ 
                                  offset
End Function &amp;#039;vbTimeToRFC822


Function zeroPad(m, t)
   zeroPad = String(t-Len(m),&amp;quot;0&amp;quot;)&amp;amp;m
End Function

Function GetRFC822Bias
&amp;#039; This function returns a string which is a 
&amp;#039; timezone bias for RFC822 format
&amp;#039; considers daylight savings
&amp;#039; we choose 4 digits and a sign (+ or -)

	Dim objWMIService,colTimeZone,objTimeZone
	
	Dim intTZBiasInMinutes,strSign,strReturnString

	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
	    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
	Set colTimeZone = objWMIService.ExecQuery(&amp;quot;Select * from Win32_ComputerSystem&amp;quot;)
	 
	For Each objTimeZone in colTimeZone
	    intTZBiasInMinutes = objTimeZone.CurrentTimeZone
	Next

	&amp;#039; The offset is explicitly signed
	If intTZBiasInMinutes &amp;lt; 0 Then
		strSign = &amp;quot;-&amp;quot;
	Else
		strSign = &amp;quot;+&amp;quot;
	End If
	
	strReturnString = CStr(Abs(intTZBiasInMinutes))
	&amp;#039; no offset is greater than three digits but RFC822 bias seems to
	&amp;#039; usually take the form of 1 alpha / 4 digit as described as 
	&amp;#039; valid in ANSI X3.51-1975

	strReturnString = zeroPad(strReturnString,4)

	GetRFC822Bias = strSign&amp;amp;strReturnString
	
	&amp;#039;Cleanup
	Set colTimeZone = Nothing
	Set objWMIService = Nothing
End Function &amp;#039;GetRFC822Bias</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

whatlinux () {
        LINUX_TYPE=unknown
        if [ -f /etc/redhat-release ] || [ -f /etc/centos-release ]; then
              LINUX_TYPE=unknown
              if grep -qi &amp;#039;CentOS.*&amp;#039; /etc/redhat-release; then
                 LINUX_TYPE=rpm
              elif grep -qi &amp;#039;Red Hat.*&amp;#039; /etc/redhat-release; then
                 LINUX_TYPE=rpm
              fi
        fi
        if [ -f /usr/bin/lsb_release ]; then
           if lsb_release -d | grep -qi &amp;#039;CentOS.*&amp;#039;; then
                LINUX_TYPE=rpm
              elif lsb_release -d | grep -qi &amp;#039;Red Hat.*&amp;#039;; then
                LINUX_TYPE=rpm
           elif lsb_release -d | grep -qi &amp;#039;SUSE.*&amp;#039;; then
                LINUX_TYPE=rpm
           elif lsb_release -i | grep -qi &amp;#039;Ubuntu&amp;#039;; then
                LINUX_TYPE=deb
           elif lsb_release -i | grep -qi &amp;#039;Debian&amp;#039;; then
                LINUX_TYPE=deb
           fi
        fi
        echo &amp;quot;$LINUX_TYPE&amp;quot;
}

formatdate() {
   date -d &amp;quot;$1 $2 $3 $4 $5&amp;quot; +&amp;#039;%a, %d %b %Y %H:%M:%S %z&amp;#039;
}

result=$(whatlinux)
if [ $result = &amp;#039;rpm&amp;#039; ]; then
   rdate=$(rpm -qa --queryformat &amp;#039;%{installtime:date} %{name}\n&amp;#039; | grep anium | cut -d &amp;#039; &amp;#039; -f1-6)
   formatdate $rdate
elif [ $result = &amp;#039;deb&amp;#039; ]; then
   rdate=$(stat /var/lib/dpkg/info/taniumclient.postinst | grep Modify | cut -d &amp;#039; &amp;#039; -f2-6)
   formatdate $rdate
else
   echo &amp;quot;Unable to detect OS&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

formatdate() {
   date -jn &amp;quot;$2$3$4$1.$5&amp;quot; +&amp;#039;%a, %d %b %Y %H:%M:%S %z&amp;#039;
}

rdate=$(mdls -name kMDItemFSCreationDate /Library/Tanium/TaniumClient | sed -e &amp;#039;s/-/ /g&amp;#039; -e &amp;#039;s/:/ /g&amp;#039; | cut -d &amp;#039; &amp;#039; -f3-8)
formatdate $rdate</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh

formatdate () {

mo=$1
dy=$2
yr=$3
hr=$4
mn=$5

if [ $mo = &amp;quot;Jan&amp;quot; ]; then
  dmo=&amp;quot;01&amp;quot;
elif [ $mo = &amp;quot;Feb&amp;quot; ]; then
  dmo=&amp;quot;02&amp;quot;
elif [ $mo = &amp;quot;Mar&amp;quot; ]; then
  dmo=&amp;quot;03&amp;quot;
elif [ $mo = &amp;quot;Apr&amp;quot; ]; then
  dmo=&amp;quot;04&amp;quot;
elif [ $mo = &amp;quot;May&amp;quot; ]; then
  dmo=&amp;quot;05&amp;quot;
elif [ $mo = &amp;quot;Jun&amp;quot; ]; then
  dmo=&amp;quot;06&amp;quot;
elif [ $mo = &amp;quot;Jul&amp;quot; ]; then
  dmo=&amp;quot;07&amp;quot;
elif [ $mo = &amp;quot;Aug&amp;quot; ]; then
  dmo=&amp;quot;08&amp;quot;
elif [ $mo = &amp;quot;Sep&amp;quot; ]; then
  dmo=&amp;quot;09&amp;quot;
elif [ $mo = &amp;quot;Oct&amp;quot; ]; then
  dmo=&amp;quot;10&amp;quot;
elif [ $mo = &amp;quot;Nov&amp;quot; ]; then
  dmo=&amp;quot;11&amp;quot;
elif [ $mo = &amp;quot;Dec&amp;quot; ]; then
  dmo=&amp;quot;12&amp;quot;
fi

#http://www.linuxjournal.com/content/calculating-day-week
#There seems to be a bug around generating NRval/NFval values on 32/64 bit Solaris 10, added error handling.
#---
day=$dy
caldate=&amp;quot;$dmo $yr&amp;quot;
expr=&amp;quot;[^0-9]${day}[^0-9]&amp;quot;
cal $caldate | sed &amp;#039;s/^/ /;s/$/ /&amp;#039; &amp;gt; temp
NRval=$(cat temp | awk &amp;quot;/$expr/ { print NR }&amp;quot;)
NFval=$(cat temp | awk &amp;quot;/$expr/ { print NF }&amp;quot;)
if [ $NRval ]; then
   if [ $NRval -eq 3 ] ; then
      DOW=&amp;quot;$(( $day + ( 7 - $NFval ) ))&amp;quot;
   else
      DOW=$(cat temp | awk &amp;quot;/$expr/{ for (i=1;i&amp;lt;=NF;i++) { if (\$i~/${day}/) { print i }}}&amp;quot;)
   fi
fi
/bin/rm -f temp
#---
rdow=$(echo $DOW | cut -d &amp;#039; &amp;#039; -f8)
if [ $rdow ]; then
   if [ $rdow = 1 ]; then
      dow=&amp;quot;Sun&amp;quot;
   elif [ $rdow = 2 ]; then
      dow=&amp;quot;Mon&amp;quot;
   elif [ $rdow = 3 ]; then
      dow=&amp;quot;Tue&amp;quot;
   elif [ $rdow = 4 ]; then
      dow=&amp;quot;Wed&amp;quot;
   elif [ $rdow = 5 ]; then
      dow=&amp;quot;Thu&amp;quot;
   elif [ $rdow = 6 ]; then
      dow=&amp;quot;Fri&amp;quot;
   elif [ $rdow = 7 ]; then
      dow=&amp;quot;Sat&amp;quot;
   fi
else
   dow=Unk
fi

if [ $dow = &amp;quot;Unk&amp;quot; ]; then
   echo $dy $mo $yr $hr:$mn
else
   echo $dow, $dy $mo $yr $hr:$mn
fi
}
rdate=$(pkginfo -l TaniumClient | grep INSTDATE | cut -d &amp;#039; &amp;#039; -f5-10 | sed &amp;#039;s/:/ /g&amp;#039;)
formatdate $rdate</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
i=$(lslpp -hc TaniumClient | grep etc | awk -F: &amp;#039;{ print $7&amp;quot;#&amp;quot;$8 }&amp;#039; | sed &amp;#039;s/\;/:/g&amp;#039;)
idate=$(echo &amp;quot;$i&amp;quot; | cut -d# -f1)
itime=$(echo &amp;quot;$i&amp;quot; | cut -d# -f2)

m=$(echo &amp;quot;$idate&amp;quot; | cut -d/ -f1)
d=$(echo &amp;quot;$idate&amp;quot; | cut -d/ -f2)
y=$(echo &amp;quot;$idate&amp;quot; | cut -d/ -f3)

case &amp;quot;$m&amp;quot; in
 1|01) MON=Jan ;;
 2|02) MON=Feb ;;
 3|03) MON=Mar ;;
 4|04) MON=Apr ;;
 5|05) MON=May ;;
 6|06) MON=Jun ;;
 7|07) MON=Jul ;;
 8|08) MON=Aug ;;
 9|09) MON=Sep ;;
 10) MON=Oct ;;
 11) MON=Nov ;;
 12) MON=Dec ;;
esac

echo &amp;quot;,$MON $d 20$y $itime&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>BESDate</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>232</cache_row_id>
          </sensor>
          <sensor>
            <id>464</id>
            <name>Local Account Expiration Details</name>
            <hash>3418263806</hash>
            <string_count>0</string_count>
            <category>User</category>
            <description>Returns local accounts and days until they expire. Accounts which have no expiration date return "N/A"
Example:
user.name|19</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Local Account Expiration Details
&amp;#039;========================================


Option Explicit

Dim objAccounts,objUser,dtmExpirationDate,intDaysUntil,strSep

strSep = &amp;quot;|&amp;quot;
&amp;#039; Multi-column output
&amp;#039; Account Name|Days Until Expiration
SetLocale(1033) &amp;#039;Uses RFC822, requires US/English

On Error Resume Next

Set objAccounts = GetObject(&amp;quot;WinNT://.&amp;quot;)
objAccounts.Filter = Array(&amp;quot;User&amp;quot;)

For Each objUser In objAccounts
	If IsNull(objUser.AccountExpirationDate) Then
		Wscript.Echo objUser.Name &amp;amp; strSep &amp;amp; &amp;quot;N/A&amp;quot;
	Else
		dtmExpirationDate = objUser.AccountExpirationDate
		intDaysUntil = Abs(DateDiff(&amp;quot;d&amp;quot;,Now(),dtmExpirationDate))
		Wscript.Echo objUser.Name&amp;amp;intDaysUntil
	End If
Next



Function vbTimeToRFC822(myDate, offset)
&amp;#039;SetLocale outside of function in global scope
&amp;#039; must be set so that month is displayed with US/English abbreviations
&amp;#039; as per the standard

	If Not GetLocale = 1033 Then
		WScript.Echo &amp;quot;Locale Code must be 1033, use SetLocale&amp;quot;
		WScript.Quit
	End If
   Dim myDay, myDays, myMonth, myYear
   Dim myHours, myMinutes, myMonths, mySeconds

   myDate = CDate(myDate)
   myDay = WeekdayName(Weekday(myDate),true)
   myDays = zeroPad(Day(myDate), 2)
   myMonth = MonthName(Month(myDate), true)
   myYear = Year(myDate)
   myHours = zeroPad(Hour(myDate), 2)
   myMinutes = zeroPad(Minute(myDate), 2)
   mySeconds = zeroPad(Second(myDate), 2)

   vbTimeToRFC822 = myDay&amp;amp;&amp;quot;, &amp;quot;&amp;amp; _
                                  myDays&amp;amp;&amp;quot; &amp;quot;&amp;amp; _
                                  myMonth&amp;amp;&amp;quot; &amp;quot;&amp;amp; _ 
                                  myYear&amp;amp;&amp;quot; &amp;quot;&amp;amp; _
                                  myHours&amp;amp;&amp;quot;:&amp;quot;&amp;amp; _
                                  myMinutes&amp;amp;&amp;quot;:&amp;quot;&amp;amp; _
                                  mySeconds&amp;amp;&amp;quot; &amp;quot;&amp;amp; _ 
                                  offset
End Function &amp;#039;vbTimeToRFC822


Function zeroPad(m, t)
   zeroPad = String(t-Len(m),&amp;quot;0&amp;quot;)&amp;amp;m
End Function

Function GetRFC822Bias
&amp;#039; This function returns a string which is a 
&amp;#039; timezone bias for RFC822 format
&amp;#039; considers daylight savings
&amp;#039; we choose 4 digits and a sign (+ or -)

	Dim objWMIService,colTimeZone,objTimeZone
	
	Dim intTZBiasInMinutes,strSign,strReturnString

	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
	    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
	Set colTimeZone = objWMIService.ExecQuery(&amp;quot;Select * from Win32_ComputerSystem&amp;quot;)
	 
	For Each objTimeZone in colTimeZone
	    intTZBiasInMinutes = objTimeZone.CurrentTimeZone
	Next

	&amp;#039; The offset is explicitly signed
	If intTZBiasInMinutes &amp;lt; 0 Then
		strSign = &amp;quot;-&amp;quot;
	Else
		strSign = &amp;quot;+&amp;quot;
	End If
	
	strReturnString = CStr(Abs(intTZBiasInMinutes))
	&amp;#039; no offset is greater than three digits but RFC822 bias seems to
	&amp;#039; usually take the form of 1 alpha / 4 digit as described as 
	&amp;#039; valid in ANSI X3.51-1975

	strReturnString = zeroPad(strReturnString,4)

	GetRFC822Bias = strSign&amp;amp;strReturnString
	
	&amp;#039;Cleanup
	Set colTimeZone = Nothing
	Set objWMIService = Nothing
	
End Function &amp;#039;GetRFC822Bias</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Account Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Days Until Expiration</name>
                <index>1</index>
                <value_type>NumericInteger</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <cache_row_id>233</cache_row_id>
          </sensor>
          <sensor>
            <id>466</id>
            <name>Tanium Client Installation Time</name>
            <hash>3479253433</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>The date and time on which the currently installed Tanium Client was installed on each client machine.
Example: Wed, 13 Nov 2013 08:18:00 -0480</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client Installation Time
&amp;#039;========================================

myLocale = GetLocale()
localLocale = 2057

strComputer = &amp;quot;.&amp;quot;
    Set objRegistry = _
       GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; _
       &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

&amp;#039;Uses date math - set locale

SetLocale(1033)

    Const HKLM = &amp;amp;H80000002

    keyPath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    key64Path = &amp;quot;Software\WOW6432Node\Tanium\Tanium Client&amp;quot;

    If Not RegKeyExists(HKLM, keyPath) Then
       keyPath = key64Path

       If Not RegKeyExists(HKLM, keyPath) Then
          WScript.Echo &amp;quot;Not installed&amp;quot;
          WScript.Quit
       End If
    End If

    objRegistry.GetStringValue HKLM, keyPath, &amp;quot;FirstInstall&amp;quot;, strFirstInstall

	If Not IsNull(strFirstInstall) Then
		SetLocale(localLocale)
		strFirstInstall = CDATE(strFirstInstall)
		WScript.Echo VBTimeToRFC822(strFirstInstall,GetRFC822Bias)
		SetLocale(myLocale)
		WScript.Quit
	Else   
		WScript.Echo &amp;quot;Not installed&amp;quot;
	End If  

    Function RegKeyExists(sHive, sRegKey)
       Dim aValueNames, aValueTypes
       If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
          RegKeyExists = True
       Else
          RegKeyExists = False
       End If
    End Function
	

Function vbTimeToRFC822(myDate, offset)

   Dim myDay, myDays, myMonth, myYear
   Dim myHours, myMinutes, myMonths, mySeconds

   myDate = CDate(myDate)
   myDay = WeekdayName(Weekday(myDate),true)
   myDays = zeroPad(Day(myDate), 2)
   myMonth = MonthName(Month(myDate), true)
   myYear = Year(myDate)
   myHours = zeroPad(Hour(myDate), 2)
   myMinutes = zeroPad(Minute(myDate), 2)
   mySeconds = zeroPad(Second(myDate), 2)

   vbTimeToRFC822 = myDay&amp;amp;&amp;quot;, &amp;quot;&amp;amp; _
                                  myDays&amp;amp;&amp;quot; &amp;quot;&amp;amp; _
                                  myMonth&amp;amp;&amp;quot; &amp;quot;&amp;amp; _ 
                                  myYear&amp;amp;&amp;quot; &amp;quot;&amp;amp; _
                                  myHours&amp;amp;&amp;quot;:&amp;quot;&amp;amp; _
                                  myMinutes&amp;amp;&amp;quot;:&amp;quot;&amp;amp; _
                                  mySeconds&amp;amp;&amp;quot; &amp;quot;&amp;amp; _ 
                                  offset
End Function &amp;#039;vbTimeToRFC822


Function zeroPad(m, t)
   zeroPad = String(t-Len(m),&amp;quot;0&amp;quot;)&amp;amp;m
End Function

Function GetRFC822Bias
&amp;#039; This function returns a string which is a 
&amp;#039; timezone bias for RFC822 format
&amp;#039; considers daylight savings
&amp;#039; we choose 4 digits and a sign (+ or -)

	Dim objWMIService,colTimeZone,objTimeZone
	
	Dim intTZBiasInMinutes,strSign,strReturnString

	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
	    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
	Set colTimeZone = objWMIService.ExecQuery(&amp;quot;Select * from Win32_ComputerSystem&amp;quot;)
	 
	For Each objTimeZone in colTimeZone
	    intTZBiasInMinutes = objTimeZone.CurrentTimeZone
	Next

	&amp;#039; The offset is explicitly signed
	If intTZBiasInMinutes &amp;lt; 0 Then
		strSign = &amp;quot;-&amp;quot;
	Else
		strSign = &amp;quot;+&amp;quot;
	End If
	
	strReturnString = CStr(Abs(intTZBiasInMinutes))
	&amp;#039; no offset is greater than three digits but RFC822 bias seems to
	&amp;#039; usually take the form of 1 alpha / 4 digit as described as 
	&amp;#039; valid in ANSI X3.51-1975

	strReturnString = zeroPad(strReturnString,4)

	GetRFC822Bias = strSign&amp;amp;strReturnString
	
	&amp;#039;Cleanup
	Set colTimeZone = Nothing
	Set objWMIService = Nothing
	
End Function &amp;#039;GetRFC822Bias</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

whatlinux () {
        LINUX_TYPE=unknown
        if [ -f /etc/redhat-release ] || [ -f /etc/centos-release ]; then
              LINUX_TYPE=unknown
              if grep -qi &amp;#039;CentOS.*&amp;#039; /etc/redhat-release; then
                 LINUX_TYPE=rpm
              elif grep -qi &amp;#039;Red Hat.*&amp;#039; /etc/redhat-release; then
                 LINUX_TYPE=rpm
              fi
        fi
        if [ -f /usr/bin/lsb_release ]; then
           if lsb_release -d | grep -qi &amp;#039;CentOS.*&amp;#039;; then
                LINUX_TYPE=rpm
              elif lsb_release -d | grep -qi &amp;#039;Red Hat.*&amp;#039;; then
                LINUX_TYPE=rpm
           elif lsb_release -d | grep -qi &amp;#039;SUSE.*&amp;#039;; then
                LINUX_TYPE=rpm
           elif lsb_release -i | grep -qi &amp;#039;Ubuntu&amp;#039;; then
                LINUX_TYPE=deb
           elif lsb_release -i | grep -qi &amp;#039;Debian&amp;#039;; then
                LINUX_TYPE=deb
           fi
        fi
        echo &amp;quot;$LINUX_TYPE&amp;quot;
}

formatdate() {
   date -d &amp;quot;$1 $2 $3 $4 $5&amp;quot; +&amp;#039;%a, %d %b %Y %H:%M:%S %z&amp;#039;
}

result=$(whatlinux)
if [ $result = &amp;#039;rpm&amp;#039; ]; then
   rdate=$(rpm -qa --queryformat &amp;#039;%{installtime:date} %{name}\n&amp;#039; | grep anium | cut -d &amp;#039; &amp;#039; -f1-6)
   formatdate $rdate
elif [ $result = &amp;#039;deb&amp;#039; ]; then
   rdate=$(stat /var/lib/dpkg/info/taniumclient.postinst | grep Modify | cut -d &amp;#039; &amp;#039; -f2-6)
   formatdate $rdate
else
   echo &amp;quot;Unable to detect OS&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

formatdate() {
   date -jn &amp;quot;$2$3$4$1.$5&amp;quot; +&amp;#039;%a, %d %b %Y %H:%M:%S %z&amp;#039;
}

rdate=$(mdls -name kMDItemFSCreationDate /Library/Tanium/TaniumClient | sed -e &amp;#039;s/-/ /g&amp;#039; -e &amp;#039;s/:/ /g&amp;#039; | cut -d &amp;#039; &amp;#039; -f3-8)
formatdate $rdate</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh

formatdate () {

mo=$1
dy=$2
yr=$3
hr=$4
mn=$5

if [ $mo = &amp;quot;Jan&amp;quot; ]; then
  dmo=&amp;quot;01&amp;quot;
elif [ $mo = &amp;quot;Feb&amp;quot; ]; then
  dmo=&amp;quot;02&amp;quot;
elif [ $mo = &amp;quot;Mar&amp;quot; ]; then
  dmo=&amp;quot;03&amp;quot;
elif [ $mo = &amp;quot;Apr&amp;quot; ]; then
  dmo=&amp;quot;04&amp;quot;
elif [ $mo = &amp;quot;May&amp;quot; ]; then
  dmo=&amp;quot;05&amp;quot;
elif [ $mo = &amp;quot;Jun&amp;quot; ]; then
  dmo=&amp;quot;06&amp;quot;
elif [ $mo = &amp;quot;Jul&amp;quot; ]; then
  dmo=&amp;quot;07&amp;quot;
elif [ $mo = &amp;quot;Aug&amp;quot; ]; then
  dmo=&amp;quot;08&amp;quot;
elif [ $mo = &amp;quot;Sep&amp;quot; ]; then
  dmo=&amp;quot;09&amp;quot;
elif [ $mo = &amp;quot;Oct&amp;quot; ]; then
  dmo=&amp;quot;10&amp;quot;
elif [ $mo = &amp;quot;Nov&amp;quot; ]; then
  dmo=&amp;quot;11&amp;quot;
elif [ $mo = &amp;quot;Dec&amp;quot; ]; then
  dmo=&amp;quot;12&amp;quot;
fi

#http://www.linuxjournal.com/content/calculating-day-week
#There seems to be a bug around generating NRval/NFval values on 32/64 bit Solaris 10, added error handling.
#---
day=$dy
caldate=&amp;quot;$dmo $yr&amp;quot;
expr=&amp;quot;[^0-9]${day}[^0-9]&amp;quot;
cal $caldate | sed &amp;#039;s/^/ /;s/$/ /&amp;#039; &amp;gt; temp
NRval=$(cat temp | awk &amp;quot;/$expr/ { print NR }&amp;quot;)
NFval=$(cat temp | awk &amp;quot;/$expr/ { print NF }&amp;quot;)
if [ $NRval ]; then
   if [ $NRval -eq 3 ] ; then
      DOW=&amp;quot;$(( $day + ( 7 - $NFval ) ))&amp;quot;
   else
      DOW=$(cat temp | awk &amp;quot;/$expr/{ for (i=1;i&amp;lt;=NF;i++) { if (\$i~/${day}/) { print i }}}&amp;quot;)
   fi
fi
/bin/rm -f temp
#---
rdow=$(echo $DOW | cut -d &amp;#039; &amp;#039; -f8)
if [ $rdow ]; then
   if [ $rdow = 1 ]; then
      dow=&amp;quot;Sun&amp;quot;
   elif [ $rdow = 2 ]; then
      dow=&amp;quot;Mon&amp;quot;
   elif [ $rdow = 3 ]; then
      dow=&amp;quot;Tue&amp;quot;
   elif [ $rdow = 4 ]; then
      dow=&amp;quot;Wed&amp;quot;
   elif [ $rdow = 5 ]; then
      dow=&amp;quot;Thu&amp;quot;
   elif [ $rdow = 6 ]; then
      dow=&amp;quot;Fri&amp;quot;
   elif [ $rdow = 7 ]; then
      dow=&amp;quot;Sat&amp;quot;
   fi
else
   dow=Unk
fi

if [ $dow = &amp;quot;Unk&amp;quot; ]; then
   echo $dy $mo $yr $hr:$mn
else
   echo $dow, $dy $mo $yr $hr:$mn
fi
}
rdate=$(pkginfo -l TaniumClient | grep INSTDATE | cut -d &amp;#039; &amp;#039; -f5-10 | sed &amp;#039;s/:/ /g&amp;#039;)
formatdate $rdate</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
i=$(lslpp -hc TaniumClient | grep etc | awk -F: &amp;#039;{ print $7&amp;quot;#&amp;quot;$8 }&amp;#039; | sed &amp;#039;s/\;/:/g&amp;#039;)
idate=$(echo &amp;quot;$i&amp;quot; | cut -d# -f1)
itime=$(echo &amp;quot;$i&amp;quot; | cut -d# -f2)

m=$(echo &amp;quot;$idate&amp;quot; | cut -d/ -f1)
d=$(echo &amp;quot;$idate&amp;quot; | cut -d/ -f2)
y=$(echo &amp;quot;$idate&amp;quot; | cut -d/ -f3)

case &amp;quot;$m&amp;quot; in
 1|01) MON=Jan ;;
 2|02) MON=Feb ;;
 3|03) MON=Mar ;;
 4|04) MON=Apr ;;
 5|05) MON=May ;;
 6|06) MON=Jun ;;
 7|07) MON=Jul ;;
 8|08) MON=Aug ;;
 9|09) MON=Sep ;;
 10) MON=Oct ;;
 11) MON=Nov ;;
 12) MON=Dec ;;
esac

echo &amp;quot;,$MON $d 20$y $itime&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>BESDate</value_type>
            <max_age_seconds>1800</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>234</cache_row_id>
          </sensor>
          <sensor>
            <id>468</id>
            <name>System Directory</name>
            <hash>3482410175</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>The location of the system directory on Windows machines.
Example: C:\\Windows\\system32</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select SystemDirectory from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>235</cache_row_id>
          </sensor>
          <sensor>
            <id>470</id>
            <name>Page File Details</name>
            <hash>3499030954</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns information about the Page File(s) on a Windows system. Path, initial size, maximum size, size on disk, current used, and peak used.
Example: C:\pagefile.sys|3050 MB|3050 MB|3050 MB|413 MB|517 MB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Page File Details
&amp;#039;========================================
Option Explicit

&amp;#039;On Error Resume Next
Dim objWMIService,objItem,colItems,dictPageFileSetting,strPageFileSetting,strSizeOnDisk,objFSO

Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
Set dictPageFileSetting = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

&amp;#039; pagefilesetting class Will only return results if settings are not automatically managed

Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PageFileSetting&amp;quot;,,48)
For Each objItem in colItems
	If Not dictPageFileSetting.Exists(LCase(objItem.Name)) Then
		dictPageFileSetting.Add LCase(objItem.Name), objItem.InitialSize&amp;amp;&amp;quot; MB&amp;quot;&amp;amp;&amp;quot;|&amp;quot;&amp;amp;objItem.MaximumSize&amp;amp;&amp;quot; MB&amp;quot;
	End If
Next

&amp;#039; pull from win32_pagefile usage - will return results even if settings managed by OS

Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PageFileUsage&amp;quot;,,48)
For Each objItem in colItems
	if objFSO.FileExists(objItem.Name) Then
		strSizeOnDisk = BytesToMB(objFSO.GetFile(objItem.Name).Size)
	Else
		strSizeOnDisk = &amp;quot;Unknown&amp;quot;
	End If
	
	If dictPageFileSetting.Item(LCase(objItem.Name)) = &amp;quot;&amp;quot; Then
		strPageFileSetting = &amp;quot;Auto|Auto&amp;quot;
	Else
		strPageFileSetting = dictPageFileSetting.Item(LCase(objItem.Name))
	End If
	WScript.Echo objItem.Name&amp;amp;&amp;quot;|&amp;quot; _
	&amp;amp; strPageFileSetting&amp;amp;&amp;quot;|&amp;quot; _
	&amp;amp; strSizeOnDisk&amp;amp;&amp;quot;|&amp;quot;&amp;amp;objItem.CurrentUsage&amp;amp;&amp;quot; MB&amp;quot;&amp;amp;&amp;quot;|&amp;quot; _
	&amp;amp; objItem.PeakUsage&amp;amp;&amp;quot; MB&amp;quot;
Next

Function BytesToMB(dblSize)

	Dim strSuffix, intCommaSpot
	
	Do While InStr(dblSize,&amp;quot;,&amp;quot;) &amp;#039;Remove commas from dblSize 
	    intCommaSpot = InStr(dblSize,&amp;quot;,&amp;quot;) 
	    dblSize = Mid(dblSize,1,intCommaSpot - 1) &amp;amp; _ 
	        Mid(dblSize,intCommaSpot + 1,Len(dblSize) - intCommaSpot) 
	Loop
	
	On Error Resume Next
	dblSize = CDbl(dblSize)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		BytesConvert = &amp;quot;Invalid input&amp;quot;
		Exit Function
	End If
	On Error Goto 0
	strSuffix = &amp;quot; MB&amp;quot;
	dblSize = Round(dblSize / 1048576, 0) 
		
	BytesToMB = dblSize &amp;amp; strSuffix 
End Function &amp;#039;BytesToMB</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Path</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Initial Size</name>
                <index>1</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Maximum Size</name>
                <index>2</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Size On Disk</name>
                <index>3</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Current Used</name>
                <index>4</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Peak Used</name>
                <index>5</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>236</cache_row_id>
          </sensor>
          <sensor>
            <id>472</id>
            <name>Hosts File Entries</name>
            <hash>3518770446</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Provides a list of hosts file entries for the local operating system.
Example: myserver.com , 192.168.1.100</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Option Explicit
Class std_host_file
	Private Sub Class_Initialize()
		Set m_lines = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		Set m_ip_map = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		Set m_alias_map = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_alias_map.CompareMode = vbTextCompare
	End Sub
	Private sub Class_Terminate()
		Set m_lines = Nothing
		Set m_ip_map = Nothing
		Set m_alias_map = Nothing
	End Sub
	&amp;#039; Function returns the ip and data
	Private Sub parse_line( ByVal line , ByRef comment , ByRef ip , ByRef aliases  ) 
		Dim rx : Set rx = New RegExp
		Dim r
		rx.Global = False
		rx.IgnoreCase = True
		rx.Pattern = &amp;quot;\s*(#.*)\s*&amp;quot;
		&amp;#039; Parse Comment
		If rx.Test( line ) Then
			Set r = rx.Execute( line )
			comment = r.Item(0).subMatches.Item(0)
			line = rx.Replace( line , &amp;quot;&amp;quot; )
		End If		
		rx.Pattern = &amp;quot;\s*((\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b)|(\s*((([0-9A-F]{1,4}:){7}([0-9A-F]{1,4}|:))|(([0-9A-F]{1,4}:){6}(:[0-9A-F]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-F]{1,4}:){5}(((:[0-9A-F]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-F]{1,4}:){4}(((:[0-9A-F]{1,4}){1,3})|((:[0-9A-F]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-F]{1,4}:){3}(((:[0-9A-F]{1,4}){1,4})|((:[0-9A-F]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-F]{1,4}:){2}(((:[0-9A-F]{1,4}){1,5})|((:[0-9A-F]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-F]{1,4}:){1}(((:[0-9A-F]{1,4}){1,6})|((:[0-9A-F]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-F]{1,4}){1,7})|((:[0-9A-F]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*))\s*&amp;quot;
		&amp;#039; Parse IP
		If rx.Test( line ) Then
			Set r = rx.Execute( line )
			ip = r.Item(0).subMatches.Item(0)
			aliases = rx.Replace( line , &amp;quot;&amp;quot; )
		End If
	End Sub
	&amp;#039; Function returns the ip and data
	Private Function getip( ByRef str , ByRef ip  ) 
		getip = False 
		Dim rx_ip : Set rx_ip = New RegExp
		rx_ip.Global = False
		rx_ip.IgnoreCase = True
		rx_ip.Pattern = &amp;quot;\s*((\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b)|(\s*((([0-9A-F]{1,4}:){7}([0-9A-F]{1,4}|:))|(([0-9A-F]{1,4}:){6}(:[0-9A-F]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-F]{1,4}:){5}(((:[0-9A-F]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-F]{1,4}:){4}(((:[0-9A-F]{1,4}){1,3})|((:[0-9A-F]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-F]{1,4}:){3}(((:[0-9A-F]{1,4}){1,4})|((:[0-9A-F]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-F]{1,4}:){2}(((:[0-9A-F]{1,4}){1,5})|((:[0-9A-F]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-F]{1,4}:){1}(((:[0-9A-F]{1,4}){1,6})|((:[0-9A-F]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-F]{1,4}){1,7})|((:[0-9A-F]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*))\s*&amp;quot;
		If rx_ip.Test( str ) Then
			Dim r : Set r = rx_ip.Execute( str )
			ip = r.Item(0).subMatches.Item(0)
			str = rx_ip.Replace( str , &amp;quot;&amp;quot; )
			getip = True
		End If
	End Function
	&amp;#039; Internal function used to validate IPV4 addresses
	Private Function isipv4( ByVal ip )
		Dim rx_ipv4 : Set rx_ipv4 = New RegExp
		rx_ipv4.Global = false
		rx_ipv4.IgnoreCase = True
		rx_ipv4.Pattern = &amp;quot;^\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b$&amp;quot;
		isipv4 = rx_ipv4.Test( ip )
	End Function
	&amp;#039; Internal function used to validate IPV6 addresses
	Private Function isipv6( ip )
		Dim rx_ipv6 : Set rx_ipv6 = New RegExp
		rx_ipv6.Global = false
		rx_ipv6.IgnoreCase = True
		rx_ipv6.Pattern = &amp;quot;^\s*((([0-9A-F]{1,4}:){7}([0-9A-F]{1,4}|:))|(([0-9A-F]{1,4}:){6}(:[0-9A-F]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-F]{1,4}:){5}(((:[0-9A-F]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-F]{1,4}:){4}(((:[0-9A-F]{1,4}){1,3})|((:[0-9A-F]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-F]{1,4}:){3}(((:[0-9A-F]{1,4}){1,4})|((:[0-9A-F]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-F]{1,4}:){2}(((:[0-9A-F]{1,4}){1,5})|((:[0-9A-F]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-F]{1,4}:){1}(((:[0-9A-F]{1,4}){1,6})|((:[0-9A-F]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-F]{1,4}){1,7})|((:[0-9A-F]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$&amp;quot;			
		IsIPV6 = rx_ipv6.Test( ip )
	End Function
	&amp;#039; Internal function used to generate unique IDs
	Private Function genguid()
		Dim guidgen : Set guidgen = CreateObject(&amp;quot;Scriptlet.TypeLib&amp;quot;) 
		genguid = Mid(guidgen.Guid, 2, 36)
	End Function
	&amp;#039; Function returns true on success, otherwise false if the ip doesn&amp;#039;t exist
	Public Function GetHostEntryAliases( ByVal ip , ByRef aliases )
		GetHostEntryAliases = False
		aliases = Array
		If m_ip_map.Exists( ip ) Then 
			aliases = m_lines.Item( m_ip_map.Item(ip) )(1).Keys
			GetHostEntryAliases = True
		End If
	End Function 
	&amp;#039; Function returns true on success, otherwise false if alias doesn&amp;#039;t exist
	Public Function GetHostEntryAliasAddresses( ByVal alias , ByRef ips )
		GetHostEntryAliasAddresses = False
		ips = Array
		If m_alias_map.Exists( alias ) Then 
			ips = m_alias_map.Item( alias ).Keys
			GetHostEntryAliasAddresses = True
		End If
	End Function 
	&amp;#039; Removes a host entry by IPV4 or IPV6 address, return true
	&amp;#039; on success, otherwise false if the IP is doesn&amp;#039;t exist
	Public Function DeleteHostEntry( ByVal ip )
		DeleteHostEntry = False
		If m_ip_map.Exists( ip ) Then 
			Dim a
			Dim uid : uid = m_ip_map.Item(ip)
			&amp;#039; Remove the ip&amp;#039;s from the associated aliases
			For Each a In m_lines.Item(uid)(1).Keys 
				If m_alias_map.Item( a ).Exists( ip ) Then
					m_alias_map.Item( a ).Remove( ip )
				End If
				&amp;#039; If there are no more assoicated IPs remove the alias
				If m_alias_map.Item(a).Count = 0 Then
					m_alias_map.Remove( a )
				End If 
			Next
			&amp;#039; This *should* exist since we manage the entries and mappings
			m_lines.Remove( uid )
			m_ip_map.Remove( ip )
			DeleteHostEntry = True
		End If
	End Function
	&amp;#039; Removes a host alias by IPV4 or IPV6 address
	Public Function DeleteHostEntryAlias( ByVal ip , ByVal alias )
		DeleteHostEntryAlias = False
		&amp;#039; If the IP is valid
		If m_ip_map.Exists( ip ) Then
			Dim uid : uid = m_ip_map.Item(ip)		
			&amp;#039; If the alias exists remove the ip and if no more ip&amp;#039;s are mapped to the alias remove the alias	
			If m_alias_map.Exists( alias ) Then
				If m_alias_map.Item( alias ).Exists( ip ) Then
					m_alias_map.Item( alias ).Remove( ip )
				End If
				If m_alias_map.Item(alias).Count = 0 Then
					m_alias_map.Remove( alias )
				End If
			End If
			&amp;#039; If IP no longer has aliases associated with it remove it
			Call delalias( uid , alias )
			If m_lines.Item( uid )(1).Count = 0 Then
				m_lines.Remove( uid )
				m_ip_map.Remove( ip )
			End If
			DeleteHostEntryAlias = True
		End If
	End Function
	&amp;#039; Adds a host entry by IPV4 or IPV6 address, alias should be 
	&amp;#039; the text alias for the address. Returns true on success
	Public Function AddHostEntry( ByVal ip , ByVal alias )		
			AddHostEntry = False 		
			Dim rx : Set rx = New RegExp
			rx.Global = true
			rx.IgnoreCase = True
			rx.Pattern = &amp;quot;\s*&amp;quot;
			alias = rx.Replace( alias , &amp;quot;&amp;quot; )
			ip = rx.Replace( ip , &amp;quot;&amp;quot; )
			&amp;#039; Validate IP
			If isipv6( ip ) Or isipv4( ip ) Then 
				&amp;#039; Check for alias in the alias mapping
				If Not m_alias_map.Exists( alias ) Then	Call m_alias_map.Add( alias , CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;) )
				If Not m_alias_map.Item( alias ).Exists( ip ) Then Call m_alias_map.Item( alias ).Add( ip , &amp;quot;&amp;quot; )
				&amp;#039; Map IP -&amp;gt; alias 
				If m_ip_map.Exists( ip ) Then 
					&amp;#039; Lookup the index by ip then add aliases
					Call addalias( m_ip_map.Item(ip) , alias )
				Else
					&amp;#039; Store File Line
					Dim uid : uid = genguid
					Call m_lines.Add( uid , Array( ip , CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;) , vbNullString ) )
					Call addalias( uid , alias )
					Call m_ip_map.Add( ip , uid )
				End If
				AddHostEntry = True
			End If	
	End Function
	&amp;#039; Should be used for debugging the data
	Public Sub DumpData( )
		Dim id, a, ip, a_map
		&amp;#039; Debug dump host file out to text
		
		For Each ip In m_ip_map.Keys
			For Each a In m_lines.Item( m_ip_map.Item(ip) )(1).Keys
&amp;#039;				WScript.Echo &amp;quot;IP [&amp;quot; &amp;amp; ip &amp;amp; &amp;quot;] ID Map {&amp;quot; &amp;amp; m_ip_map.Item(ip)	&amp;amp; &amp;quot;} --&amp;gt; alias [&amp;quot; &amp;amp; a &amp;amp; &amp;quot;]&amp;quot;
				If m_alias_map.Exists( a ) Then 
					For Each a_map In m_alias_map.Item( a ).Keys
						WScript.Echo a &amp;amp; &amp;quot;,&amp;quot; &amp;amp; a_map
					Next
				End If
			Next
		Next	 
	End Sub 
	&amp;#039; Internal formattig function for padding host data
	Private Function lpad ( str , padch , padlen ) 
		If padlen - Len(str) &amp;gt;= 0 Then 
			Lpad = String(padlen - Len(str),padch) &amp;amp; str 
		Else
			Lpad = str	
		End If 	
	End Function
	&amp;#039; Returns all the IP addresses defined in the host file
	&amp;#039; Returns true on success, otherwise false
	Public Function GetAllHostEntryAddresses( ByRef ips )
		GetAllHostEntryAddresses = False
		ips = Array
		If m_ip_map.Count &amp;gt; 0 Then 
			ips = m_ip_map.Keys
			GetAllHostEntryAddresses = True
		End If
	End Function
	&amp;#039; Returns all the aliases defined in the host file
	&amp;#039; Returns true on success, otherwise false
	Public Function GetAllHostEntryAliases( ByRef aliases )
		GetAllHostEntryAliases = False
		aliases = Array
		If m_alias_map.Count &amp;gt; 0 Then 
			aliases = m_alias_map.Keys
			GetAllHostEntryAliases = True
		End If
	End Function
	
	&amp;#039; Write host file returns true if file could be opened for writing
	Public Function Save( ByVal hostfile )		
		On Error Resume Next
		Save = False
		Dim id, a
		Dim objFSO : Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
		Dim oFile : Set oFile = Nothing
		Set oFile = objFSO.OpenTextFile( hostfile , 2 , True )
		If Not oFile Is Nothing Then 
			For Each id In m_lines.Keys
				If TypeName( m_lines.Item(id) ) = &amp;quot;String&amp;quot; Then
					Call oFile.WriteLine( m_lines.Item(id) )
				ElseIf TypeName( m_lines.Item(id) ) = &amp;quot;Variant()&amp;quot; Then
					Call oFile.Write( lpad( m_lines.Item(id)(0) &amp;amp; &amp;quot;&amp;quot; , &amp;quot; &amp;quot; , 16 )  &amp;amp; Space(8) )
					For Each a In m_lines.Item(id)(1).Keys
						Call oFile.Write( a &amp;amp; &amp;quot; &amp;quot; )
					Next
					Call oFile.Write( m_lines.Item(id)(2) &amp;amp; vbCrLf )
				End If 
			Next
			Save = True
		End If
		Set objFSO = Nothing
	End Function
	
	&amp;#039; Write host file returns true if file could be opened for reading
	Public Function Load( ByVal hostfile , ByVal bmergecomments )
		On Error Resume Next		
		Load = False
		m_lines.RemoveAll()
		m_ip_map.RemoveAll()
		m_alias_map.RemoveAll()
		Dim rx : Set rx = New RegExp
		rx.Global = true
		rx.IgnoreCase = True
		rx.Pattern = &amp;quot;\s+&amp;quot;
		Dim objFSO : Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
		Dim oFile : Set oFile=Nothing
		Set oFile = objFSO.OpenTextFile( hostfile , 1 )
		If Not oFile Is Nothing Then 
		While Not oFile.AtEndOfStream
			Dim pos : pos = 0
			&amp;#039; Data will not be modified to preserve the file context
			Dim data : data = Trim(oFile.ReadLine())
			&amp;#039; Remove all the extra whitespace so we have a single spacing	
			&amp;#039; Line will be chopped up to see valid information exists
			Dim line : line = Trim(rx.Replace(data, &amp;quot; &amp;quot;))
			Dim ip : ip = vbNullString
			Dim comment : comment = vbNullString
			Dim aliases : aliases = vbNullString
			&amp;#039; Check if the line is empty
			If line &amp;lt;&amp;gt; vbNullString Then					
				Call parse_line( line , comment , ip , aliases )
				If isipv4( ip ) Or isipv6( ip ) Then 	
					Dim a, uid
					&amp;#039; Map alias -&amp;gt; IPs
					For Each a In Split(aliases)
						If Not m_alias_map.Exists( a ) Then 
							Call m_alias_map.Add( a , CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;) )
						End If
						If Not m_alias_map.Item( a ).Exists( ip ) Then Call m_alias_map.Item( a ).Add( ip , &amp;quot;&amp;quot; )
					Next
					&amp;#039; Map IP -&amp;gt; alias 
					If m_ip_map.Exists( ip ) Then
						uid = m_ip_map.Item(ip)
						&amp;#039; Lookup the index by ip then add aliases
						For Each a In Split(aliases)
							Call addalias( uid , a )
						Next
						If bmergecomments Then 
							&amp;#039; Overkill (should be first # )
							pos = InStr( 1, comment , &amp;quot;#&amp;quot; , vbTextCompare )
							If pos &amp;lt;&amp;gt; 0 Then 
								&amp;#039; Replace leading # from dual comment
								comment = Mid( comment , pos + 1 )
								&amp;#039; Merge comments
								Call setcomment( uid , m_lines.Item( uid )(2) &amp;amp; &amp;quot;,&amp;quot; &amp;amp; comment )
							End If
						End If
					Else
						&amp;#039; Store File Line
						uid = genguid
						Call m_lines.Add( uid , Array( ip , CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;) , comment ) )
						For Each a In Split(aliases)
							Call addalias( uid , a )
						Next
						Call m_ip_map.Add( ip , uid )
					End If
				Else &amp;#039; Unknown IP format or malformed file
					Call m_lines.Add(genguid,data)
				End If
			Else
				Call m_lines.Add(genguid,data)
			End If
		Wend
		Load=True
		End If
		Set objFSO = Nothing
	End Function
	Private Function setip( uid , ip )
		setip = False
		If m_lines.Exists( uid ) Then
			m_lines.Item(uid) = Array( ip , m_lines.Item(uid)(1) , m_lines.Item(uid)(2) ) 
			setip = True
		End If
	End Function
	Private Function setcomment( uid , comment )
		setcomment = False
		If m_lines.Exists( uid ) Then
			Dim a : a = m_lines.Item(uid)
			m_lines.Item(uid) = Array( m_lines.Item(uid)(0) , m_lines.Item(uid)(1) , comment )  
			setcomment = True
		End If
	End Function
	Private Function addalias( uid , alias )
		addalias = False
		If m_lines.Exists( uid ) Then
			If Not m_lines.Item(uid)(1).Exists( alias ) Then 
				Call m_lines.Item(uid)(1).Add( alias , &amp;quot;&amp;quot; )
				addalias = True
			End If
		End If
	End Function
	Private Function delalias( uid , alias )
		delalias = False
		If m_lines.Exists( uid ) Then
			If m_lines.Item(uid)(1).Exists( alias ) Then 
				Call m_lines.Item(uid)(1).Remove( alias )
				delalias = CBool( Not m_lines.Item(uid)(1).Exists( alias ) )
			End If
		End If
	End Function
	Private m_lines
	Private m_ip_map
	Private m_alias_map
End Class


Dim arr, n
Dim o_h : Set o_h = New std_host_file
Call o_h.Load( &amp;quot;C:\Windows\System32\drivers\etc\hosts&amp;quot; , False )

o_h.DumpData</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

if [ -f /etc/hosts ]; then

  file=&amp;quot;/etc/hosts&amp;quot;
  line=`cat $file`
  
  while read -r line; do
    line=`echo $line | sed &amp;#039;s/^ *//g&amp;#039; | sed &amp;#039;s/ *$//g&amp;#039;`

    if [[ &amp;quot;$line&amp;quot; =~ ^#.*$ ]]; then
	l=1 #do nothing
    else
      if [ -n &amp;quot;$line&amp;quot; ]; then
        
        COLS=( $line ); # parses columns without executing a subshell
        #RESULT=&amp;quot;${COLS[0]}&amp;quot;; # returns first column (0-based indexes)
        echo &amp;quot;${COLS[1]},${COLS[0]}&amp;quot;

      fi
    fi
  done &amp;lt;&amp;lt;&amp;lt; &amp;quot;$line&amp;quot;


fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash

if [ -f /etc/hosts ]; then

  file=&amp;quot;/etc/hosts&amp;quot;
  line=`cat $file`
  
  while read -r line; do
    line=`echo $line | sed &amp;#039;s/^ *//g&amp;#039; | sed &amp;#039;s/ *$//g&amp;#039;`

    if [[ &amp;quot;$line&amp;quot; =~ ^#.*$ ]]; then
	l=1 #do nothing
    else
      if [ -n &amp;quot;$line&amp;quot; ]; then
        
        COLS=( $line ); # parses columns without executing a subshell
        #RESULT=&amp;quot;${COLS[0]}&amp;quot;; # returns first column (0-based indexes)
        echo &amp;quot;${COLS[1]},${COLS[0]}&amp;quot;

      fi
    fi
  done &amp;lt;&amp;lt;&amp;lt; &amp;quot;$line&amp;quot;


fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
egrep -v &amp;#039;^#|::&amp;#039; /etc/hosts | awk &amp;#039;{ print $1&amp;quot;,&amp;quot;$2 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
egrep -v &amp;#039;^#|::&amp;#039; /etc/hosts | awk &amp;#039;{ print $1&amp;quot;,&amp;quot;$2 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>300</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Alias</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>IP Address</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>237</cache_row_id>
          </sensor>
          <sensor>
            <id>474</id>
            <name>Is Linux</name>
            <hash>3554080383</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns whether the machine runs a Linux-based OS.  True if so, False if not.
Example: True</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Is Linux
&amp;#039;========================================

Wscript.echo &amp;quot;False&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
echo True</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
# is AIX script
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# is AIX script
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>238</cache_row_id>
          </sensor>
          <sensor>
            <id>476</id>
            <name>Network IP Gateway</name>
            <hash>3575849436</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the default gateway for all IP enabled network adapters.
Example: 192.168.10.254</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select DefaultIPGateway from win32_networkadapterconfiguration where IPEnabled=&amp;#039;True&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>IPAddress</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>239</cache_row_id>
          </sensor>
          <sensor>
            <id>478</id>
            <name>Installed Pkgs</name>
            <hash>3603927824</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Returns a list of installed Packages by name on Solaris systems.
Example: glibc-2.5-12</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
echo &amp;quot;NA&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
pkgutil --pkgs</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>pkginfo | awk &amp;#039;{ print $2 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
echo &amp;quot;NA&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>240</cache_row_id>
          </sensor>
          <sensor>
            <id>480</id>
            <name>Human Interface Device</name>
            <hash>3605572245</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Indicates any human interface devices connected to the client machine.
Example: HID-compliant mouse</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from Win32_PnPEntity where (Status=&amp;#039;OK&amp;#039; and DeviceID like &amp;#039;%HID%&amp;#039;)</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>241</cache_row_id>
          </sensor>
          <sensor>
            <id>482</id>
            <name>Local Administrators</name>
            <hash>3622133010</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns users and groups who are members of the Local Administrators group on Windows.  Will not list the individual members of groups in the Local Administrators group.
Example: Administrator</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Local Administrators
&amp;#039;========================================

&amp;#039; output of membership (individual users and groups) of Local Administrators
&amp;#039; will not list members of sub-groups

Option Explicit

Dim strMember, dictBlacklist
Set dictBlacklist = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

&amp;#039; Add one line for each admin user that you do not want listed in the sensor output.  
&amp;#039;dictBlacklist.Add LCase(&amp;quot;LocalMgr&amp;quot;), True

For Each strMember In GetLocalAdmins
	Dim bShouldList, strItem
	bShouldList = True

	For Each strItem In dictBlacklist.Keys
		If InStr(LCase(strMember), strItem) &amp;gt; 0 Then 
			bShouldList = False
		End If
	Next

	If bShouldList Then 
		WScript.Echo strMember
	End If 
Next

Function GetLocalAdmins
    Dim objWMIService,strLocalAdminQuery,colItems,objItem,strMembers,strComputerName,arrReturn,i
    Set objWMIService = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
    
	&amp;#039; Get Computer Name
    Set colItems = objWMIService.ExecQuery( &amp;quot;Select * from Win32_ComputerSystem&amp;quot;, , 48 )
    For Each objItem in colItems
        strComputerName = objItem.Name
    Next	    
    
    strLocalAdminQuery = &amp;quot;select * from Win32_GroupUser where GroupComponent = &amp;quot; &amp;amp; chr(34) &amp;amp; &amp;quot;Win32_Group.Domain=&amp;#039;&amp;quot; &amp;amp; strComputerName &amp;amp; &amp;quot;&amp;#039;,Name=&amp;#039;Administrators&amp;#039;&amp;quot; &amp;amp; Chr(34)
    
    Set ColItems = objWMIService.ExecQuery(strLocalAdminQuery)
    strMembers = &amp;quot;&amp;quot;
    arrReturn = Array() &amp;#039; set up return array
    i = 0
    For Each objItem In colItems
    	i = i + 1
        Dim strMemberName, NamesArray, strDomainName, DomainNameArray
        NamesArray = Split(objItem.PartComponent,&amp;quot;,&amp;quot;)
        strMemberName = Replace(Replace(NamesArray(1),Chr(34),&amp;quot;&amp;quot;),&amp;quot;Name=&amp;quot;,&amp;quot;&amp;quot;)
        DomainNameArray = Split(NamesArray(0),&amp;quot;=&amp;quot;)
        strDomainName = Replace(DomainNameArray(1),Chr(34),&amp;quot;&amp;quot;)
        If strDomainName &amp;lt;&amp;gt; strComputerName Then
            strMemberName = strDomainName &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strMemberName
        End If
        ReDim Preserve arrReturn(UBound(arrReturn) + 1) &amp;#039; increase array by one
        arrReturn(UBound(arrReturn)) = strMemberName
    Next
    
    GetLocalAdmins = arrReturn
End Function &amp;#039;GetLocalAdmins</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>242</cache_row_id>
          </sensor>
          <sensor>
            <id>484</id>
            <name>CPU Cache Size</name>
            <hash>3646624356</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>CPU cache size in KB.
Example: 1024 KB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; CPU Cache Size
&amp;#039;========================================

On Error Resume Next
strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Processor&amp;quot;)
For Each objItem in colItems

	If objItem.L2CacheSize &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
		Wscript.Echo objItem.L2CacheSize &amp;amp; &amp;quot; KB&amp;quot;
	Else
		Wscript.Echo &amp;quot;Cannot calculate CPU Cache,Probably a VM&amp;quot;
	End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
line=$(cat /proc/cpuinfo | grep &amp;quot;cache size&amp;quot;)
set -- $line
echo ${line#*:}</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
system_profiler SPHardwareDataType | grep &amp;#039;L3 Cache&amp;#039; | awk -F: &amp;#039;{print $2}&amp;#039; | sed &amp;#039;s/^ *//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>243</cache_row_id>
          </sensor>
          <sensor>
            <id>486</id>
            <name>Tanium Reboot Days Ago</name>
            <hash>3652459872</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the number of days since a Tanium Reboot Action occurred.
Example: 2</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Option Explicit

GetRebootDateTimeDaysOld

Function GetRebootDateTimeDaysOld
&amp;#039;reads a date value in the Tanium Client\RebootManagment key of the registry

	Const HKLM = &amp;amp;h80000002
	
	Dim objReg,strRegPath,dtmNow,dtmLastReboot,intDaysAgo
	
	SetLocale(1033)
	
	dtmNow = Now()
	
	Set objReg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)	
	strRegPath = GetTaniumRegistryPath()&amp;amp;&amp;quot;\RebootManagement&amp;quot;
	
	If Not RegKeyExists(objReg,HKLM,strRegPath) Then
		objReg.CreateKey HKLM,strRegPath
	End If
	
	objReg.GetStringValue HKLM,strRegPath,&amp;quot;LastReboot&amp;quot;,dtmLastReboot
	
	If IsDate(dtmLastReboot) Then
		intDaysAgo = Round(Abs(DateDiff(&amp;quot;s&amp;quot;,Now(),dtmLastReboot)) / 86400,0)
		WScript.Echo intDaysAgo
	Else
		WScript.Echo &amp;quot;No Previous Reboot Date Found&amp;quot;
	End If

End Function &amp;#039;GetRebootDateTimeDaysOld

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>244</cache_row_id>
          </sensor>
          <sensor>
            <id>488</id>
            <name>File Exists</name>
            <hash>3662289857</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>A parameterized Sensor that checks to see if a file exists on a machine.  If it does, it returns back the full path of the file. Will expand environment variables, and will expand %userprofile%/file or "~/file" to search all user home directories.
Example: C:\Windows\system32\notepad.exe</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; File Exists
&amp;#039;========================================

Option Explicit

Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs
bExamineRemoteFolders = True &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFilePath, objFso, objShell

strFilePath = unescape(&amp;quot;||file||&amp;quot;)

If InStr(LCase(strFilePath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
	CheckForAllUsers strFilePath
Else
	CheckNoUserVars strFilePath
End If

	
Sub CheckNoUserVars(ByVal strFilePath)
&amp;#039; plain check if a file exists
	strFilePath = FixFileSystemRedirectionForPath(strFilePath)
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	
	strFilePath = objShell.ExpandEnvironmentStrings( strFilePath )
	
	Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	If objFso.FileExists(strFilePath) Then 
		WScript.Echo &amp;quot;File Exists: &amp;quot; &amp;amp; UnFixFileSystemRedirectionForPath(strFilePath)
	Else 
		WScript.Echo &amp;quot;File does not exist&amp;quot;
	End If
End Sub &amp;#039;CheckNoUserVars

Sub CheckForAllUsers(ByVal strFilePath)
&amp;#039; checks in every user directory

	&amp;#039; Remove %userprofile% and keep the rest
	strFilePath = Replace(LCase(strFilePath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)	
	
	On Error Resume Next &amp;#039; permissions issues, perhaps
	
	Const HKLM = &amp;amp;H80000002
	Dim objShell,objFso
	Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
	Dim strValue,strOut,bFileFound
	bFileFound = False
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	
	strFilePath = objShell.ExpandEnvironmentStrings( strFilePath )
	
	Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	Set objRegistry=Getx64RegistryProvider
 
	strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
	objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys
 

	For Each objSubkey In arrSubkeys
	    strValueName = &amp;quot;ProfileImagePath&amp;quot;
	    strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
	    objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue

	    If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
	    	&amp;#039; if user profile is not local and not examining remote profiles, ignore
	    Else 
	    	If objFSO.FileExists(strValue&amp;amp;strFilePath) Then
				bFileFound = True
				WScript.Echo &amp;quot;File Exists: &amp;quot; &amp;amp; strValue&amp;amp;strFilePath
			End If
		End If
	Next
	
	If Not bFileFound Then

		WScript.Echo &amp;quot;File does not exist&amp;quot;
	End If

	On Error Goto 0

End Sub &amp;#039;CheckForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider

Function FixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.
	
	Dim objFSO, strSystem32Location,objShell
	Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)
	
	If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
		If InStr(strFilePath,strSystem32Location) = 1 Then
			strRestOfPath = Replace(strFilePath,strSystem32Location,&amp;quot;&amp;quot;)
			strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
			strFilePath = strNewSystem32Location&amp;amp;strRestOfPath
		End If
	End If
	FixFileSystemRedirectionForPath = strFilePath
	
	&amp;#039;Cleanup
	Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will undo the changes made to a path by the 
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

	Dim objFSO,strSystem32Location,strNewSystem32Location
	
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	
	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
	
	UnFixFileSystemRedirectionForPath = Replace(strFilePath,strNewSystem32Location,strSystem32Location)
	
	&amp;#039;Cleanup
	Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash

urldecode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/\+/ /g&amp;#039; -e &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

file=&amp;quot;$(urldecode &amp;quot;||file||&amp;quot;)&amp;quot;

if [[ &amp;quot;$file&amp;quot; == *~* ]]
then
  # replace home directory with nothing
  file=&amp;quot;${file#~\/}&amp;quot;

  # Read in /etc/passwd to determine home dirs
  awk -F: &amp;#039;$6 ~ /home/ &amp;amp;&amp;amp; $7 ~ /sh/ {print $1, $6}&amp;#039; /etc/passwd |
  while read NAME homedir
  do
     if [ -e &amp;quot;$homedir/$file&amp;quot; ]
     then
        echo &amp;quot;$homedir/$file&amp;quot;
     fi
   done
else
   if [ -e &amp;quot;$file&amp;quot; ]
   then
      echo &amp;quot;$file&amp;quot;
   fi
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

urldecode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/\+/ /g&amp;#039; -e &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

filename=&amp;quot;$(urldecode &amp;quot;||file||&amp;quot;)&amp;quot;
filename=$(echo &amp;quot;$filename&amp;quot; | sed &amp;#039;s/ /\ /g&amp;#039;)

if [ ! -r &amp;quot;$filename&amp;quot; ] 
then
	echo File $filename does not exist
else
	echo File Exists $filename
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\windows\\test.txt&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;File path and name to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the file path and name to search for.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\windows\\test.txt&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;File path and name to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the file path and name to search for.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"File path and name to search for","helpString":"Enter the file path and name to search for.","defaultValue":"","promptText":"e.g. c:\\windows\\test.txt","maxChars":0,"key":"file","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>245</cache_row_id>
          </sensor>
          <sensor>
            <id>490</id>
            <name>Processes Using Module</name>
            <hash>3682298314</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Lists processes that use a module supplied to the sensor.
Example: explorer.exe</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Processes Using Module
&amp;#039;========================================

strSearch = unescape(&amp;quot;||search||&amp;quot;)
&amp;#039;strSearch = &amp;quot;wbem*&amp;quot;

strCommand = &amp;quot;tasklist /M &amp;quot; &amp;amp; strSearch

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Set objScriptExec = objShell.Exec (strCommand)
strResults = LCase(objScriptExec.StdOut.ReadAll)

arrLines = Split(strResults, vbCrLf)

isBody = False

strProcess = &amp;quot;&amp;quot;
strPid = &amp;quot;&amp;quot;

Dim moduleDictionary
Set moduleDictionary = CreateObject(&amp;quot;scripting.dictionary&amp;quot;)

Dim pidDictionary
Set pidDictionary = CreateObject(&amp;quot;scripting.dictionary&amp;quot;)

For Each line In arrLines

	If isBody Then
		If Left(line, 4) = &amp;quot;    &amp;quot; Then
			&amp;#039;is list of modules
			arrWords = Split(RemoveMultiSpaces(line), &amp;quot; &amp;quot;)
			For i = 0 To UBound(arrWords)
				PrintModule arrWords(i), strProcess
			Next

		Else
			&amp;#039;is name of process
			If line &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(line, &amp;quot;.&amp;quot;) Then
				arrWords = Split(RemoveMultiSpaces(line), &amp;quot; &amp;quot;)
				strProcess = arrWords(0)
				strPid = arrWords(1)
				&amp;#039;WScript.Echo &amp;quot;found process: &amp;quot; &amp;amp; strProcess &amp;amp; &amp;quot;, pid=&amp;quot;&amp;amp;strPid
				
				For i = 2 To UBound(arrWords)
					PrintModule arrWords(i), strProcess
				Next
				
			End If	
		End If
	End If
	
	If Left(line, 4) = &amp;quot;====&amp;quot; Then
		isBody = True 
	End If

Next

Function PrintModule(strMod, strProc)
	strMod = Replace(strMod, &amp;quot;,&amp;quot;, &amp;quot;&amp;quot;)
	WScript.Echo strProc &amp;amp; &amp;quot;: &amp;quot; &amp;amp; strMod
End Function

Function RemoveMultiSpaces(str)
	Dim regEx
	Set regEx = New RegExp
	regEx.Global = true
	regEx.IgnoreCase = True
	
	regEx.Pattern = &amp;quot;\s{2,}&amp;quot;
	
	RemoveMultiSpaces = Trim(regEx.Replace(str, &amp;quot; &amp;quot;))
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;search&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. wbem* or kernel32.dll&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the Module to search for&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Module to search for&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||search||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;search&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. wbem* or kernel32.dll&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the Module to search for&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Module to search for&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||search||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;search&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. wbem* or kernel32.dll&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the Module to search for&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Module to search for&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||search||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;search&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. wbem* or kernel32.dll&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the Module to search for&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Module to search for&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||search||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Module to search for","helpString":"Enter the Module to search for","defaultValue":"","promptText":"e.g. wbem* or kernel32.dll","maxChars":0,"key":"search","restrict":null,"validationExpressions":[],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>246</cache_row_id>
          </sensor>
          <sensor>
            <id>492</id>
            <name>Is Terminal Server</name>
            <hash>3685017662</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns Yes or No depending on whether a Windows machine is a Terminal Server
Example: Yes</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Is Terminal Server
&amp;#039;========================================

Option Explicit

Dim strOS
 
strOS = GetOSFamily()
If UCase(strOS) = &amp;quot;W2K3&amp;quot; Then
  If isTerminalServer2k3RegRead Then
    WScript.Echo &amp;quot;Yes&amp;quot;
  Else
    WScript.Echo &amp;quot;No&amp;quot;
  End If
Else
	If isTerminalServer(strOS) Then
	  WScript.Echo &amp;quot;Yes&amp;quot;
	Else
	  WScript.Echo &amp;quot;No&amp;quot;
	End If
End If

WScript.Quit(0)

Function GetOSFamily()
  Dim strComputer, oWMIService, colOSInfo, oOSProperty, strCaption, strOSFamily
  Set oWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
  Set colOSInfo = oWMIService.ExecQuery(&amp;quot;Select * from Win32_OperatingSystem&amp;quot;)
  For Each oOSProperty in colOSInfo
    strCaption = oOSProperty.Caption
  Next
  If InStr(1,strCaption, &amp;quot;2008&amp;quot;, vbTextCompare) Then strOSFamily = &amp;quot;W2K8&amp;quot;
  If InStr(1,strCaption, &amp;quot;2003&amp;quot;, vbTextCompare) Then strOSFamily = &amp;quot;W2K3&amp;quot;
  If InStr(1,strCaption, &amp;quot;2012&amp;quot;, vbTextCompare) Then strOSFamily = &amp;quot;W2K12&amp;quot;  
  GetOSFamily = strOSFamily
  Set oWMIService = Nothing
  Set colOSInfo = Nothing
End Function
 
Function isTerminalServer(strOS)
  Dim strComputer, strNameSpace, objWMIService, colItems, objItem  
  If ucase(strOS) = &amp;quot;W2K3&amp;quot; Then
    strNameSpace = &amp;quot;\root\cimv2&amp;quot;
  Else
    strNameSpace = &amp;quot;\root\cimv2\TerminalServices&amp;quot;
  End If
  On Error Resume Next
  Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _  
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.&amp;quot; &amp;amp; strNameSpace) 
  If Err.Number &amp;lt;&amp;gt; 0 Then
  	isTerminalServer = False
  	Exit Function
  End If
  Set colItems = objWMIService.ExecQuery _ 
    (&amp;quot;Select * from Win32_TerminalServiceSetting&amp;quot;) 
  For Each objItem in colItems 
    Select Case objItem.LicensingType 
      Case &amp;quot;1&amp;quot; &amp;#039; Remote Administration
        isTerminalServer = False
      Case &amp;quot;2&amp;quot; &amp;#039; Per Device
        isTerminalServer = True
      Case &amp;quot;4&amp;quot; &amp;#039; Per User
        isTerminalServer = True
      Case &amp;quot;5&amp;quot; &amp;#039; Not configured yet
        isTerminalServer = True
      Case Else
        isTerminalServer = False 
    End Select
  Next 
  Set objWMIService = Nothing 
  Set colItems = Nothing 
End Function
 
Function isTerminalServer2k3RegRead
  Dim objShell, strValue, strValueData
  strValue = &amp;quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\TSAppCompat&amp;quot;
  Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
  On Error Resume Next
  strValueData = objShell.RegRead(strValue)
  If Err.Number &amp;lt;&amp;gt; 0 Then
  	strValueData = 0
  End If
  On Error Goto 0
  If strValueData = &amp;quot;1&amp;quot; Then
    isTerminalServer2k3RegRead = True
  Else
    isTerminalServer2k3RegRead = False
  End If
  Set objShell = Nothing
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>247</cache_row_id>
          </sensor>
          <sensor>
            <id>494</id>
            <name>Client Date</name>
            <hash>3727949854</hash>
            <string_count>0</string_count>
            <category>Miscellaneous</category>
            <description>The calendar date on the managed client.
Example: 01/30/2012</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Client Date
&amp;#039;========================================

&amp;#039; This sensor will return the Date the client thinks it is

Option Explicit

SetLocale(GetTaniumLocale())

WScript.Echo FormatDateTime((Date), 2)

Function GetTaniumLocale() 
	Dim objWshShell, intLocaleID
	
	intLocaleID = &amp;quot;&amp;quot;
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\&amp;quot; &amp;amp; GetTaniumRegistryPath() &amp;amp; &amp;quot;\LocaleID&amp;quot;)
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	Set objWshShell = Nothing
End Function &amp;#039; GetTaniumLocale

&amp;#039; get-tanium-regpath.vbs

&amp;#039; Updated to always generate path so that GetTaniumDir can take multiple folder arguments
&amp;#039; Updated to always look for the Path string value and not assume a bogus entry
&amp;#039; in the wrong area is valid.  A valid entry will always have a Path string value
&amp;#039; uses objshell registry reads which should be faster and more reliable

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		GetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		GetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;GetTaniumRegistryPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
date +%d/%m/%Y</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
date +%-d/%-m/%Y</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
/usr/xpg4/bin/date +%d/%m/%Y</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
date +%d/%m/%Y</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>1800</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>248</cache_row_id>
          </sensor>
          <sensor>
            <id>496</id>
            <name>Tanium Client CPU</name>
            <hash>3734316770</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>The current cpu utilization being used by the Tanium Client process on each client machine.  The reported value will be higher than average since the Tanium Client is actively in use while evaluating this Sensor.
Example: 1%</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client CPU
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;  
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)  
Set colService = objWMIService.ExecQuery (&amp;quot;select * from win32_Service&amp;quot;)  
For Each objService in colService      
StrSQL = &amp;quot;present&amp;quot;    
Next  
if StrSQL = &amp;quot;present&amp;quot; THEN 
for each Process in GetObject(&amp;quot;winmgmts:&amp;quot;).ExecQuery(&amp;quot;Select * from Win32_Process where Name = &amp;#039;taniumclient.exe&amp;#039;&amp;quot;)   
WScript.echo CPUUSage(Process.Handle) &amp;amp; &amp;quot;%&amp;quot;  
Next  
Function CPUUSage( ProcID )   
On Error Resume Next   
Set objService = GetObject(&amp;quot;Winmgmts:{impersonationlevel=impersonate}!\Root\Cimv2&amp;quot;)     
For Each objInstance1 in objService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process where Name = &amp;#039;taniumclient&amp;#039;&amp;quot;)        
N1 = objInstance1.PercentProcessorTime        
D1 = objInstance1.TimeStamp_Sys100NS      
Exit For    
Next  
WScript.Sleep(5000)     
For Each perf_instance2 in objService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process where Name = &amp;#039;taniumclient&amp;#039;&amp;quot;)        
N2 = perf_instance2.PercentProcessorTime        
D2 = perf_instance2.TimeStamp_Sys100NS      
Exit For    
Next    
&amp;#039; CounterType - PERF_100NSEC_TIMER_INV   
&amp;#039; Formula - (1- ((N2 - N1) / (D2 - D1))) x 100     
Nd = (N2 - N1)     
Dd = (D2-D1)     
PercentProcessorTime = ( (Nd/Dd))  * 100    
CPUUSage = Round(PercentProcessorTime ,0) 
End Function 
END IF</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

pids=`ps -ef | grep -i TaniumClient | grep -v grep | awk &amp;#039;{print $2}&amp;#039; | sed &amp;#039;:a;N;$!ba;s/\n/ /g&amp;#039;`
ps -p &amp;quot;$pids&amp;quot; -o pcpu | grep -v &amp;quot;%CPU&amp;quot; | awk &amp;#039;{sum+=$1} END {print sum}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

pids=`ps -ef | grep -i TaniumClient | grep -v grep | awk &amp;#039;{print $2}&amp;#039; | tr &amp;#039;\n&amp;#039; &amp;#039; &amp;#039;`
ps -p &amp;quot;$pids&amp;quot; -o pcpu | grep -v &amp;quot;%CPU&amp;quot; | awk &amp;#039;{sum+=$1} END {print sum}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

pids=`ps -ef | grep -i TaniumClient | grep -v grep | awk &amp;#039;{print $2}&amp;#039; | tr &amp;#039;\n&amp;#039; &amp;#039; &amp;#039;`
ps -p &amp;quot;$pids&amp;quot; -o pcpu | grep -v &amp;quot;%CPU&amp;quot; | awk &amp;#039;{sum+=$1} END {print sum}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

pids=`ps -ef | grep -i TaniumClient | grep -v grep | awk &amp;#039;{print $2}&amp;#039; | tr &amp;#039;\n&amp;#039; &amp;#039; &amp;#039;`
ps -p &amp;quot;$pids&amp;quot; -o pcpu | grep -v &amp;quot;%CPU&amp;quot; | awk &amp;#039;{sum+=$1} END {print sum}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>249</cache_row_id>
          </sensor>
          <sensor>
            <id>498</id>
            <name>Is AIX</name>
            <hash>3756702099</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns whether the machine runs a AIX OS.  True if so, False if not.
Example: True</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Is AIX
&amp;#039;========================================

Wscript.echo &amp;quot;False&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
echo True</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>250</cache_row_id>
          </sensor>
          <sensor>
            <id>500</id>
            <name>CPU Family</name>
            <hash>3763483691</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The family of the processor or CPU (Windows provides a family ID).
Example: Xeon, Family 198</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; CPU Family
&amp;#039;========================================

On Error Resume Next
strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Processor&amp;quot;)
For Each objItem in colItems
 	Wscript.Echo objItem.Family &amp;amp; &amp;quot; Processor Family&amp;quot;
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
#dmidecode -s processor-family | grep -v &amp;quot;Unknown&amp;quot;
line=$(grep -m 1 -i &amp;quot;cpu family&amp;quot; /proc/cpuinfo)
set -- $line
echo ${line#*:}</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>uname -p</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
uname -p</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>251</cache_row_id>
          </sensor>
          <sensor>
            <id>502</id>
            <name>SCSI Controller Driver Name</name>
            <hash>3764526140</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Name for SCSI Controller Driver as provided by the manufacturer.
Example: VClone</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select DriverName from win32_SCSIController</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>252</cache_row_id>
          </sensor>
          <sensor>
            <id>504</id>
            <name>Is Solaris</name>
            <hash>3792181176</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns whether the machine runs a Solaris-based OS.  True if so, False if not.
Example: True</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Is Linux
&amp;#039;========================================

Wscript.echo &amp;quot;False&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
# is AIX script
echo True</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# is AIX script
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>253</cache_row_id>
          </sensor>
          <sensor>
            <id>506</id>
            <name>Registry Key Value Names with Data</name>
            <hash>3799348944</hash>
            <string_count>0</string_count>
            <category>Registry</category>
            <description>Returns the data and values in a supplied registry key.  If the hive is HKEY_USERS, it will attempt to output the user name associated with the key.  HKEY_CURRENT_USER will only return data for the SYSTEM account which the Tanium Client runs as.
Example: John | 4.1.314.7020 | REG_SZ | 32-bit | HKLM\Software\Tanium\Tanium Client | Version</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Registry Key Value Names with Data
&amp;#039;========================================

&amp;#039;Columns:
&amp;#039; User | Data | Type | Architecture | KeyPath | Value

&amp;#039; Value is a hidden column for later use in sensor-fed actions (modify, delete)

strKey = unescape(&amp;quot;||strKey||&amp;quot;)

&amp;#039; Pass (Default) in for value name to indicate default value
If LCase(strValue) = &amp;quot;(default)&amp;quot; Then strValue = &amp;quot;&amp;quot;


&amp;#039; strKey = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
&amp;#039; strValue = &amp;quot;Version&amp;quot;

&amp;#039;strKey = &amp;quot;HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Internet Settings&amp;quot;
&amp;#039;strValue = &amp;quot;Emailname&amp;quot;
strSep = &amp;quot;~~&amp;quot;


&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive

&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)

If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
	For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserName = GetUserForSIDLocal(objReg,strUserKey)
			If strUserName = False Then strUserName = strUserKey
			strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
			hasValues32 = DoEchoValueAndDatas(objReg, objCTX, constHive, strFullUserKey, 32)
			If hasValues32 Then hasAnyResult = True
		End If
	Next
Else &amp;#039; was another hive
	hasValues32 = DoEchoValueAndDatas(objReg, objCtx, constHive, strKey, 32)
	If hasValues32 Then hasAnyResult = True
End If

&amp;#039; Do not return second value set in different context unnecessarily
Dim strKeyPrefix,bSkipSecondContextCheck
bSkipSecondContextCheck = False
strKeyPrefix = Split(strKey,&amp;quot;\&amp;quot;)(0) &amp;#039; Software, for instance, even for HEKY_USERS

Select Case Ucase(strKeyPrefix)
	Case &amp;quot;SOFTWARE&amp;quot;
		bSkipSecondContextCheck = False
	Case Else
		bSkipSecondContextCheck = True
End Select

If Is64 And Not bSkipSecondContextCheck Then
	Set objCtx = GetObjCtx(64)
	Set objReg = GetObjReg(objCtx)
	If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
	&amp;#039; go through each User&amp;#039;s hive in 64-bit context
		For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
				strUserName = GetUserForSIDLocal(objReg,strUserKey)
				If strUserName = False Then strUserName = strUserKey
				strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
				hasValues64 = DoEchoValueAndDatas(objReg, objCTX, constHive, strFullUserKey, 64)
				If hasValues64 Then hasAnyResult = True	
			End If
		Next
	Else &amp;#039; was another hive
		hasValues64 = DoEchoValueAndDatas(objReg, objCtx, constHive, strKey, 64)
		If hasValues64 Then hasAnyResult = True
	End If
End If

If Not (hasAnyResult) Then
	WScript.Echo &amp;quot;Key/Value not found&amp;quot;
End If


&amp;#039;Echo&amp;#039;s all values in a key (no recurse). Returns True if any values echoed
Function DoEchoValueAndDatas(objReg, objCtx, constHive, strKey, intBit)
	Dim Inparams, Outparams

	DoEchoValueAndDatas = False
	Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
	
	arrNames = Outparams.sNames
	arrTypes = Outparams.Types

	If Not IsNull(arrNames) Then
		For i = LBound(arrNames) To UBound(arrNames)
			strValueName = arrNames(i)
			EchoValueAndData objReg, objCtx, constHive, strKey, strValueName, arrTypes(i), intBit
			DoEchoValueAndDatas = True
		Next
	End If

End Function &amp;#039;DoEchoValueAndDatas

Function GetDisplayString(strKey, strType, strValue, intBit)
	If intBit = 64 Then
		strArch = &amp;quot;64-bit&amp;quot;
	Else
		strArch = &amp;quot;32-bit&amp;quot;
	End If
	If strValue = &amp;quot;&amp;quot; Then strValue = &amp;quot;(default)&amp;quot;
	GetDisplayString = _
		strValue &amp;amp; strSep &amp;amp; _
		strType &amp;amp; strSep &amp;amp; _
		strArch
End Function

Function EchoValueAndData(objReg, objCtx, constHive, strKey, strValue, constType, intBit)
	&amp;#039; Note the key that was being searched, will be a hidden column
	strOutputKey = strHive&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
	Dim objInParams, objOutParams
	Select Case constType
		Case REG_SZ
			Set objInParams = objReg.Methods_(&amp;quot;GetStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetStringValue&amp;quot;, objInParams, , objCtx)
			
			WScript.Echo strUserName _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue _
				&amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_SZ&amp;quot;, objOutParams.sValue, intBit)
		Case REG_EXPAND_SZ
			Set objInParams = objReg.Methods_(&amp;quot;GetExpandedStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetExpandedStringValue&amp;quot;, objInParams, , objCtx)
	
			WScript.Echo strUserName  _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue _ 
				&amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_EXPAND_SZ&amp;quot;, objOutParams.sValue, intBit)
		Case REG_BINARY
			Set objInParams = objReg.Methods_(&amp;quot;GetBinaryValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetBinaryValue&amp;quot;, objInParams, , objCtx)

			strBytes = &amp;quot;&amp;quot;
			For Each uByte in objOutParams.uValue
				strTemp = Hex(uByte)
				If Len(strTemp) &amp;lt; 2 Then
					strTemp = &amp;quot;0&amp;quot; &amp;amp; strTemp
				End If	
				strBytes = strBytes &amp;amp; strTemp &amp;amp; &amp;quot; &amp;quot;
			Next
			
			WScript.Echo strUserName _ 
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue _
				&amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_BINARY&amp;quot;, strBytes, intBit)
		Case REG_DWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetDWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetDWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo strUserName _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue _
				&amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_DWORD&amp;quot;, CStr(objOutParams.uValue), intBit)
		Case REG_QWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetQWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetQWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo strUserName _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue _
				&amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_QWORD&amp;quot;, CStr(objOutParams.uValue), intBit)
		Case REG_MULTI_SZ
		    Set objInParams = objReg.Methods_(&amp;quot;GetMultiStringValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetMultiStringValue&amp;quot;, objInParams, , objCtx)
		
			arrValues = objOutParams.sValue
			strResponse = &amp;quot;&amp;quot;

			For Each strTemp In arrValues
				WScript.Echo strUserName  _
					&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; strSep &amp;amp; strValue _
					&amp;amp; strSep &amp;amp; GetDisplayString(strKey, &amp;quot;REG_MULTI_SZ&amp;quot;, strTemp, intBit)
			Next

	End Select
End Function


Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	GetSubKeys = Outparams.sNames
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function


Function GetHiveConst(hive)
	Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
	Const HKEY_CURRENT_USER   = &amp;amp;H80000001
	Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
	Const HKEY_USERS          = &amp;amp;H80000003

	Select Case UCase(hive)
		Case &amp;quot;HKLM&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKCR&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
			GetHiveConst = HKEY_CURRENT_USER
		Case &amp;quot;HKEY_USERS&amp;quot;
			GetHiveConst = HKEY_USERS
	End Select
	
	If IsEmpty(GetHiveConst) Then
		WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
		WScript.Quit
	End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
			strUserData = Left(strUserData,intDatPos - 1)
			&amp;#039; find last backslash
			intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
			&amp;#039; get right from that pos
			strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
			GetUserForSIDLocal = strUserData
		Else
			strUserData = False
		End If
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the key path to query&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Registry Key","helpString":"Enter the key path to query","defaultValue":"","promptText":"e.g. HKEY_LOCAL_MACHINE\\Software\\Microsoft","maxChars":0,"key":"strKey","restrict":null,"validationExpressions":[{"helpString":"Value must be at least 5 characters","expression":"\\S{5}","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>~~</delimiter>
            <subcolumns>
              <subcolumn>
                <name>User</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Data</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Type</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Architecture</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>KeyPath</name>
                <index>4</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Value</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <cache_row_id>254</cache_row_id>
          </sensor>
          <sensor>
            <id>508</id>
            <name>Used Swap</name>
            <hash>3868118771</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Swap space in use in MB by the client machine.
Example: 2164 MB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
memLine=$(free -m | grep &amp;quot;Swap&amp;quot;)
set -- $memLine
echo $3 MB</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
swap -s | awk &amp;#039;{ print $9 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>255</cache_row_id>
          </sensor>
          <sensor>
            <id>510</id>
            <name>Folder Contents</name>
            <hash>3881863289</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>Returns the contents of the specified folder.
Example: 0.log</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;||folderPath||&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||folderPath||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||folderPath||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||folderPath||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||folderPath||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>256</cache_row_id>
          </sensor>
          <sensor>
            <id>512</id>
            <name>System UUID</name>
            <hash>3891170751</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>System unique identifier UUID on Mac or Linux machines.
Example: 3e6be9de-8139-11d1-9106-a43f08d823a6</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode -s system-uuid</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
system_profiler SPHardwareDataType | awk &amp;#039;/Hardware UUID/ {print $NF}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>257</cache_row_id>
          </sensor>
          <sensor>
            <id>514</id>
            <name>Tanium Client NAT IP Address</name>
            <hash>3898138660</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>The IP address the Tanium Client is communicating to the server with.  This can be a public IP, or IP of a NAT device, for example.
Example: 65.128.25.253</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client NAT IP Address
&amp;#039;========================================


Dim strTaniumPath, strStatusPath
Dim strClientAddress, arrClientAddress, strIPAddress
Dim objReg


Set objReg = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)

Const HKLM = &amp;amp;h80000002

&amp;#039;Tanium registry key paths
strTaniumPath = GetTaniumRegistryPath()
strStatusPath = strTaniumPath &amp;amp; &amp;quot;\Status&amp;quot;

&amp;#039;Pull the registry value out
objReg.GetStringValue HKLM, strStatusPath, &amp;quot;ClientAddress&amp;quot;, strClientAddress

arrClientAddress = Split(strClientAddress,&amp;quot;0:&amp;quot;)

&amp;#039; Final output
strIPAddress = arrClientAddress(1)

WScript.Echo strIPAddress

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function ParseTaniumIPEntry(strIPEntry)
&amp;#039; This function will parse a Tanium IP address entry in the registry
	
	Dim strLeftSplit
	
	strLeftSplit = Left(strIPEntry,InStr(strIPEntry,&amp;quot;_&amp;quot;)-1)
	ParseTaniumIPEntry = Right(strLeftSplit,len(strLeftSplit)-InStrRev(strLeftSplit,&amp;quot;:&amp;quot;))

End Function &amp;#039;ParseTaniumIPEntry</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>258</cache_row_id>
          </sensor>
          <sensor>
            <id>516</id>
            <name>Power Plans Active</name>
            <hash>3910101228</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description></description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; Display the currently active Power plan settings 
&amp;#039; Define our variables  
    Dim colPlan 
    Dim strPlanName 
    Dim strPlanDescription 
    Dim strPlanStatus 
     
&amp;#039; Get the winmanagment system power 
    Set objWMI = GetObject(&amp;quot;winmgmts:\\.\root\cimv2\power&amp;quot;)  
&amp;#039; Do a search on win32_PowerPlan 
    Set colPlans = objWMI.ExecQuery(&amp;quot;Select * From Win32_PowerPlan&amp;quot;)  
    intCounter=0 
 
&amp;#039; Go through each of the returned plans objPlan contains the current plan 
    For Each objPlan in colPlans 
        strPlanStatus = objPlan.isActive=True 
        strPlanName = objPlan.ElementName  
        strPlanDescription = objPlan.Description
        If strPlanStatus=True Then  
           strOutput=strPlanName &amp;amp;vbcrlf 
        End If
    Next  
    WScript.Echo strOutput</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>14400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>259</cache_row_id>
          </sensor>
          <sensor>
            <id>518</id>
            <name>SQL Server Agent Long Running Jobs</name>
            <hash>391368340</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description>Returns a list of long running SQL Server jobs on the client machine.  Details include job name, start date, and duration.
Example: backupjob | 22-july-12 12:00 Am | 00:01:00:00</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Server Agent Log Running Jobs
&amp;#039;========================================
&amp;#039;@INCLUDE=sql/mssql_connection_utils.vbs

Option Explicit

Dim dictInstances, strInstance, objConnection

Set dictInstances = GetMSSQLInstances()

For Each strInstance In dictInstances.Keys
	
	Dim objRecordSet, Record, strJob, strDate, strDur
	Set objConnection = CreateObject(&amp;quot;ADODB.Connection&amp;quot;)   
	Set objRecordSet = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;)    
	
	On Error Resume Next
	objConnection.Open GenMSSQLConnectionStr(strInstance, &amp;quot;master&amp;quot;)
	
	If objConnection.Errors.Count &amp;gt; 0 Then 
		WScript.Echo &amp;quot;Access Error (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
		Exit For
	End If 
	On Error Goto 0
	
	objRecordSet.Open &amp;quot;select job_name, run_datetime, run_duration from (select job_name, run_datetime,SUBSTRING(run_duration, 1, 2) + &amp;#039;:&amp;#039; + SUBSTRING(run_duration, 3, 2) + &amp;#039;:&amp;#039; +SUBSTRING(run_duration, 5, 2) AS run_duration from(select DISTINCT j.name as job_name, run_datetime = CONVERT(DATETIME, RTRIM(run_date)) +  (run_time * 9 + run_time % 10000 * 6 + run_time % 100 * 10) / 216e4, run_duration = RIGHT(&amp;#039;000000&amp;#039; + CONVERT(varchar(6), run_duration), 6) from msdb..sysjobhistory h inner join msdb..sysjobs j on h.job_id = j.job_id) t) t where (run_datetime &amp;gt; (GETDATE()-10) and run_duration &amp;gt; &amp;#039;00:01:00&amp;#039;) order by job_name, run_datetime &amp;quot;, objConnection, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC    
	
	If (objRecordset.EOF = True) Then
		WScript.Echo &amp;quot;None&amp;quot; &amp;amp; GetMSSQLSensorInstanceStr(strInstance) 
	Else 
		objRecordSet.MoveFirst    
		For Each Record In objRecordSet.Properties      
			strJob = objRecordSet(&amp;quot;job_name&amp;quot;)     
			strDate = objRecordSet(&amp;quot;run_datetime&amp;quot;)     
			strDur = objRecordSet(&amp;quot;run_duration&amp;quot;)      
			WScript.echo strJob &amp;amp; &amp;quot; at: &amp;quot; &amp;amp; strDate &amp;amp; &amp;quot;, duration:&amp;quot; &amp;amp; strDur &amp;amp; GetMSSQLSensorInstanceStr(strInstance)    
			objRecordSet.MoveNext      
			If (objRecordset.EOF = True) Then         
				objRecordSet.Close         
				Exit For      
			End If  
		Next   
	End If
Next
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: sql/mssql_connection_utils.vbs

&amp;#039; Common constants for MSSQL lookups
Const AD_OPEN_STATIC = 3 
Const AD_LOCK_OPTIMISTIC = 3  


Function GetMSSQLInstances()
    Dim dictResult, objWMIService, colServices, objService
    Dim strCaption, strInstance, intStartIndex, intStopIndex
    Set dictResult = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

    Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
    Set colServices = objWMIService.ExecQuery (&amp;quot;select * from win32_Service&amp;quot;)  
    For Each objService In colServices
        strCaption = objService.Caption
    
        If (InStr(strCaption,&amp;quot;SQL Server&amp;quot;) &amp;lt;&amp;gt; 0 And ObjService.State = &amp;quot;Running&amp;quot;) Then    
            &amp;#039; OK -- found SQL Server on this machien, now we need to find the instance name
            &amp;#039; if this is the correct service
            strInstance = &amp;quot;.&amp;quot;
            intStartIndex = InStr(strCaption, &amp;quot;(&amp;quot;)
            intStopIndex = InStr(strCaption, &amp;quot;)&amp;quot;)
            
            If(intStartIndex &amp;lt;&amp;gt; 0) And (intStopIndex &amp;lt;&amp;gt; 0) Then 
                strInstance = Mid(strCaption, intStartIndex + 1, intStopIndex - intStartIndex - 1)
                    
                If strInstance = &amp;quot;MSSQLSERVER&amp;quot; Then 
                    strInstance = &amp;quot;.&amp;quot;
                End If 

                If Not dictResult.Exists(strInstance) Then
                    dictResult.Add strInstance, True
                End if
            End If             
        End If  
    Next  
    
    Set GetMSSQLInstances = dictResult

End Function &amp;#039; GetMSSQLInstances

Function GenMSSQLConnectionStr(strInstance, strCatalog) 
    Dim strDataSource, strConnection

    If strInstance = &amp;quot;.&amp;quot; Then 
        strDataSource = strInstance
    Else 
        strDataSource = &amp;quot;.\&amp;quot; &amp;amp; strInstance
    End If 

    strConnection = &amp;quot;Provider=SQLOLEDB;Data Source=&amp;quot; &amp;amp; strDataSource &amp;amp; &amp;quot;;Trusted_Connection=Yes;Initial Catalog=&amp;quot; &amp;amp; strCatalog &amp;amp; &amp;quot;;&amp;quot;

    GenMSSQLConnectionStr = strConnection
End Function &amp;#039; OpenMSSQLConnection

Function GetMSSQLSensorInstanceStr(strInstance)
    If strInstance = &amp;quot;.&amp;quot; Then
        GetMSSQLSensorInstanceStr = &amp;quot;&amp;quot;
    Else
        GetMSSQLSensorInstanceStr = &amp;quot; (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
    End If
End Function &amp;#039; GetMSSQLSensorInstanceStr
&amp;#039;- End file: sql/mssql_connection_utils.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>260</cache_row_id>
          </sensor>
          <sensor>
            <id>520</id>
            <name>CD-ROM Drive Loaded</name>
            <hash>3914171274</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Checks if CD-ROM/DVD-ROM drive is loaded.
Example:  True or False</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; CD-ROM Drive Loaded
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_CDROMDrive&amp;quot;)

hasDisc = False
For Each objItem in colItems
	If objItem.MediaLoaded Then
		hasDisc = True
	End If
Next

If hasDisc Then
	WScript.Echo &amp;quot;True&amp;quot;
Else
	WScript.Echo &amp;quot;False&amp;quot;	
End If</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>261</cache_row_id>
          </sensor>
          <sensor>
            <id>522</id>
            <name>Attached Battery</name>
            <hash>3963156324</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Device name for any attached batteries for a machine, commonly found in laptops.
Example: DELL V57XN24</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Select Name from Win32_Battery where availability &amp;gt; 0</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

if ! out=$(system_profiler SPPowerDataType| grep -C 10 &amp;#039;Battery Information&amp;#039;) 
then
	echo &amp;quot;No Battery&amp;quot;
else
	mfg=$(system_profiler SPPowerDataType| grep -C 10 &amp;#039;Battery Information&amp;#039; | grep &amp;#039;Manufacturer&amp;#039; | awk -F: &amp;#039;{print $2}&amp;#039; | sed &amp;#039;s/^ *//&amp;#039;)
	model=$(system_profiler SPPowerDataType| grep -C 10 &amp;#039;Battery Information&amp;#039; | grep &amp;#039;Device Name&amp;#039; | awk -F: &amp;#039;{print $2}&amp;#039; | sed &amp;#039;s/^ *//&amp;#039;)
	echo &amp;quot;$mfg $model&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>262</cache_row_id>
          </sensor>
          <sensor>
            <id>524</id>
            <name>User Profile Directory Details</name>
            <hash>3999173666</hash>
            <string_count>0</string_count>
            <category>User</category>
            <description>Returns the location of all user profiles and their sizes
Example:C:\Users\John.Doe 28.2 GB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; User Profile Directory Details
&amp;#039;========================================
Option Explicit
&amp;#039;@INCLUDE=utils/SensorRandomization/SensorRandomizationFunctions.vbs

SensorRandomize()

SetLocale(GetTaniumLocale)

On Error Resume Next &amp;#039; permissions issues, perhaps

Const HKLM = &amp;amp;H80000002
Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
Dim objFSO,objFolder,strValue,strSize,strSep

strSep = &amp;quot;|&amp;quot;

Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

Set objRegistry=GetObject(&amp;quot;winmgmts:\\.\root\default:StdRegProv&amp;quot;)
 
strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys
 
For Each objSubkey In arrSubkeys
    strValueName = &amp;quot;ProfileImagePath&amp;quot;
    strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
    objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
    
    If Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
    	strSize = &amp;quot;Unknown&amp;quot;
    ElseIf Not objFSO.FolderExists(strValue) Then
    	strSize = &amp;quot;Folder not found&amp;quot;
    Else
    	Set objFolder = objFSO.GetFolder(strValue)
  		strSize = GetAccessibleFolderSize(strValue)
  		strSize = GetPrettyFileSize(strSize)
	End If
    Wscript.Echo strValue &amp;amp; strSep &amp;amp; strSize
Next
On Error Goto 0


&amp;#039; --- end main --- &amp;#039;
Function GetPrettyFileSize(strSize)
Dim dblSize
	dblSize = CDbl(strSize)

	If dblSize &amp;gt; 1024*1024*1024 Then &amp;#039;&amp;#039;Should be GB
		strSize = CStr(Round(dblSize / 1024 / 1024 / 1024, 1)) &amp;amp; &amp;quot; GB&amp;quot;	
	ElseIf dblsize &amp;gt; 1024*1024 Then  &amp;#039;&amp;#039;Should be MB
		strSize = CStr(Round(dblSize / 1024 / 1024, 1)) &amp;amp; &amp;quot; MB&amp;quot;
	ElseIf dblSize &amp;gt; 1024 Then  &amp;#039;&amp;#039;Should be kB
		strSize = CStr(Round(dblSize / 1024)) &amp;amp; &amp;quot; kB&amp;quot;
	Else
		strSize = CStr(dblSize) &amp;amp; &amp;quot; B&amp;quot;	
	End If	
	GetPrettyFileSize = strSize
End Function &amp;#039;GetPrettyFileSize


Function GetAccessibleFolderSize(strFolderPath)
&amp;#039; Gets the folder sizes that it is able to
&amp;#039; and skips those it has no rights to see
    On Error Resume Next &amp;#039; Permissions Errors potentially

	Dim objFSO
    Dim objFolder,objSubfolder,intSize,bHasSubfolders	
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	    
    bHasSubfolders = False

    Set objFolder = objFSO.GetFolder(strFolderPath)
    Err.Clear
    intSize = objFolder.Size
    If Err.Number &amp;lt;&amp;gt; 0 Then
        For Each objSubfolder in objFolder.SubFolders
            intSize = intSize + GetAccessibleFolderSize(objSubfolder.Path)
            bHasSubfolders = True
        Next

        If Not bHasSubfolders Then
            intSize = objFolder.Size
        End If
    End If

    GetAccessibleFolderSize = intSize
    
    On Error Goto 0

End Function &amp;#039;GetAccessibleFolderSize

Function GetTaniumLocale
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

	Dim objWshShell
	Dim intLocaleID
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Tanium\Tanium Client\LocaleID&amp;quot;)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client\LocaleID&amp;quot;)
	End If
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	&amp;#039; Cleanup
	Set objWshShell = Nothing

End Function &amp;#039;GetTaniumLocale
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039;&amp;#039; -- Begin Random Sleep Functions -- &amp;#039;&amp;#039;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &amp;#039; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&amp;#039; sleeps for a random period of time, intSleepTime is in seconds
&amp;#039; if the sensor randomize flag is on
&amp;#039; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&amp;#039; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;amp;&amp;quot;\Sensor Data\Random Sleep&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeFlag&amp;quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeScalingPercentage&amp;quot;)
	On Error Goto 0
	If intRandomizeFlag &amp;gt; 0 Then
		If intRandomizeScalingPercentage &amp;gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &amp;quot;Randomize scaling percentage of &amp;quot; _ 
				&amp;amp; intRandomizeScalingPercentage &amp;amp; &amp;quot; applied, new sleep time is &amp;quot; &amp;amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &amp;#039; convert to milliseconds
		&amp;#039; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&amp;#039; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &amp;quot;Sleeping for &amp;quot; &amp;amp; intSensorRandomizeWaitTime &amp;amp; &amp;quot; milliseconds&amp;quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &amp;quot;Done sleeping, continuing ...&amp;quot;
	Else 
		SensorRandomizeEcho &amp;quot;SensorRandomize Not Enabled - No Op&amp;quot;
	End If
End Function &amp;#039;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&amp;#039; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &amp;lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID / Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID / Timer
	End If
End Function &amp;#039;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&amp;#039;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&amp;#039;&amp;#039; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &amp;quot;ComputerID&amp;quot;
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strKeyPath&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strValueName)
    If Err.Number &amp;lt;&amp;gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &amp;#039;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &amp;lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &amp;#039;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &amp;#039;SensorRandomizeEcho
&amp;#039; -- End Random Sleep Functions --&amp;#039;
&amp;#039;- End file: utils/SensorRandomization/SensorRandomizationFunctions.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Profile Location</name>
                <index>0</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Size</name>
                <index>1</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>263</cache_row_id>
          </sensor>
          <sensor>
            <id>526</id>
            <name>Primary WINS Server</name>
            <hash>4018912755</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the primary WINS server of a machine.
Example: WINS1</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select WINSPrimaryServer from win32_networkadapterconfiguration where IPEnabled=&amp;#039;True&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>IPAddress</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>264</cache_row_id>
          </sensor>
          <sensor>
            <id>528</id>
            <name>Run Keys</name>
            <hash>4058321794</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the run keys that define which programs will be started when a user logs in.
Example:  System|GlobalProtect|"C:\Program Files\Palo Alto Networks\GlobalProtect\PanGPA.exe"</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Run Keys
&amp;#039;========================================

&amp;#039; returns the system and user keys for a given key

Option Explicit

Const strSep = &amp;quot;|&amp;quot;

Dim dictBlacklist, strKeyPath, strKeyPath32, dictResults, strValue, bShouldList, strItem

Set dictBlacklist = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

&amp;#039; Add one line for each admin user that you do not want listed in the sensor output.  
&amp;#039; dictBlacklist.Add LCase(&amp;quot;VMWare User Process&amp;quot;), True


strKeyPath = &amp;quot;Software\Microsoft\Windows\CurrentVersion\Run&amp;quot;
strKeyPath32 = &amp;quot;Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Run&amp;quot;
    
Set dictResults = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

AddValuesForKey dictResults, strKeyPath
AddValuesForKey dictResults, strKeyPath32

For Each strValue In dictResults.Keys
	bShouldList = True
    For Each strItem In dictBlacklist.Keys
        If InStr(LCase(strValue), strItem) &amp;gt; 0 Then 
            bShouldList = False
        End If
    Next

    If bShouldList Then 
        WScript.Echo strValue
    End If 
Next

Sub AddValuesForKey(dictResults, strKey)
&amp;#039; This function will output the two values

    Const HKLM = &amp;amp;h80000002
	Const HKEY_USERS = &amp;amp;H80000003
    
    Dim objRegistry
    Dim arrUserKeys,strUserKey, strUserKeyPath
    
    &amp;#039; get System Keys
    Set objRegistry = Getx64RegistryProvider()
    If RegKeyExists(HKLM, strKey, objRegistry) Then  
        GetValues objRegistry, HKLM, strKey, dictResults, &amp;quot;System&amp;quot;
    End If
    
    &amp;#039; get User Keys
    objRegistry.EnumKey HKEY_USERS, &amp;quot;&amp;quot;,arrUserKeys
	For Each strUserKey In arrUserKeys
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserKeyPath = strUserKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strKey
			If RegKeyExists(HKEY_USERS,strUserKeyPath, objRegistry) Then
		        GetValues objRegistry, HKEY_USERS, strUserKeyPath, dictResults, &amp;quot;User&amp;quot;
		 	End If
		 End If 
	Next 
End Sub &amp;#039;AddValuesForKey

Sub GetValues(objRegistry, hiveConst, keyPath, dictValues, strPrefix)
    Dim arrKeyNames, arrTypes, arrValueNames, strValueName
    Dim strValueData, i, strEntry
        
    objRegistry.EnumValues hiveConst, keyPath, arrValueNames, arrTypes
    
    If Not IsArray(arrValueNames) Then
        arrValueNames = Array(&amp;quot;&amp;quot;)
        arrTypes = Array(1)
    End If
    
    For i = LBound(arrValueNames) To UBound(arrValueNames)
        strValueName = arrValueNames(i)
        strValueData = GetRegValue(objRegistry, hiveConst, keyPath, strValueName, arrTypes(i))
        If Not ( IsNull(strValueName) Or IsNull(strValueData) ) Then
        	strEntry = strPrefix &amp;amp; strSep &amp;amp; strValueName &amp;amp; strSep &amp;amp; strValueData
        	If Not dictValues.Exists(strEntry) Then 
        		dictValues.Add strEntry, True
        	End If 
        End If
    Next    
End Sub &amp;#039;GetValues

Function GetRegValue(objRegistry, hiveConst, keyPath, strValueName, constType)

    Const REG_SZ        = 1
    Const REG_EXPAND_SZ = 2
    Const REG_BINARY    = 3
    Const REG_DWORD     = 4
    Const REG_MULTI_SZ  = 7
    Const REG_QWORD     = 11

    Dim strValue, arrBytes, uValue, arrValues

    Select Case constType
        Case REG_SZ  
            objRegistry.GetStringValue hiveConst, keyPath, strValueName, strValue
            GetRegValue =  strValue
            Exit Function
        Case REG_EXPAND_SZ
            objRegistry.GetExpandedStringValue hiveConst, keyPath, strValueName, strValue
            GetRegValue =  strValue
            Exit Function
        Case REG_BINARY
            objRegistry.GetBinaryValue hiveConst, keyPath, strValueName, arrBytes
            strBytes = &amp;quot;&amp;quot;
            For Each uByte in arrBytes
                strBytes = strBytes &amp;amp; Hex(uByte) &amp;amp; &amp;quot; &amp;quot;
            Next
            GetRegValue =  strBytes
            Exit Function
        Case REG_DWORD
            objRegistry.GetDWORDValue hiveConst, keyPath, strValueName, uValue
            GetRegValue =  CStr(uValue)               
            Exit Function
        Case REG_QWORD
            objRegistry.GetQWORDValue hiveConst, keyPath, strValueName, uValue
            GetRegValue =  CStr(uValue)               
            Exit Function
        Case REG_MULTI_SZ
            objRegistry.GetMultiStringValue hiveConst, keyPath, strValueName, arrValues                             
            For Each strValue in arrValues
                GetRegValue =  strValue 
            Next
            Exit Function
    End Select
End Function &amp;#039;GetRegValue

Function RegKeyExists(sHive, sRegKey, objReg)
    Dim aValueNames, aValueTypes
    If objReg.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
        RegKeyExists = True
    Else
        RegKeyExists = False
    End If
End Function &amp;#039; RegKeyExists


Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Type</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Command Line</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>265</cache_row_id>
          </sensor>
          <sensor>
            <id>530</id>
            <name>Tanium File Contents</name>
            <hash>4070262781</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Provided with a parameter indicating the path to a file in the Tanium current directory, this sensor will return the contents of that file.
Example: &lt;arbitrary file output&gt;</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium File Contents
&amp;#039;========================================

Option Explicit

Dim fso, strFilePath, strClientPath, strAbsoluteFilePath, objTextFile

strFilePath = unescape(&amp;quot;||filePath||&amp;quot;)
strFilePath =  GetTaniumDir(&amp;quot;&amp;quot;) &amp;amp; strFilePath
strClientPath = GetTaniumDir(&amp;quot;&amp;quot;)

Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

If fso.FileExists(strFilePath) Then
	strAbsoluteFilePath = fso.GetAbsolutePathName(strFilePath)
	
	If LCase(Left(strAbsoluteFilePath, Len(strClientPath))) = LCase(strClientPath) Then 
		Set objTextFile = fso.OpenTextFile(strFilePath, 1)
		WScript.Echo Replace(objTextFile.Read(4096),vbLf,&amp;quot;&amp;quot;)
		objTextFile.Close
	Else
		WScript.Echo &amp;quot;Not Within Client Directory&amp;quot;
	End If
Else
	WScript.Echo &amp;quot;File does not exist&amp;quot;
End If


Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
    
    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
            strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
        End If  
    
        Dim fso
        Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
        If fso.FolderExists(strPath) Then
            If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
                &amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
                GeneratePath strPath &amp;amp; strSubDir, fso
            End If
            GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
        Else
            &amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
            WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
            GetTaniumDir = False
        End If
    Else
        WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
        GetTaniumDir = False
    End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
    GeneratePath = False

    If Not fso.FolderExists(pFolderPath) Then
        If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
            GeneratePath = True
            Call fso.CreateFolder(pFolderPath)
        End If
    Else
        GeneratePath = True
    End If
End Function &amp;#039;GeneratePath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;filePath&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Tools\\MyTool\\MyLog.txt&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Relative file path from &amp;lt;Tanium Client Installation Dir&amp;gt;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Starting from the Client installation directory, complete the file path to get contents for.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filePath||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;filePath&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Tools\\MyTool\\MyLog.txt&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Relative file path from &amp;lt;Tanium Client Installation Dir&amp;gt;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Starting from the Client installation directory, complete the file path to get contents for.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filePath||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;filePath&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Tools\\MyTool\\MyLog.txt&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Relative file path from &amp;lt;Tanium Client Installation Dir&amp;gt;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Starting from the Client installation directory, complete the file path to get contents for.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filePath||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;filePath&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. Tools\\MyTool\\MyLog.txt&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Relative file path from &amp;lt;Tanium Client Installation Dir&amp;gt;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Starting from the Client installation directory, complete the file path to get contents for.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filePath||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Relative file path from &lt;Tanium Client Installation Dir&gt;","helpString":"Starting from the Client installation directory, complete the file path to get contents for.","defaultValue":"","promptText":"e.g. Tools\\MyTool\\MyLog.txt","maxChars":0,"key":"filePath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>266</cache_row_id>
          </sensor>
          <sensor>
            <id>532</id>
            <name>Tanium Server Name</name>
            <hash>4076878703</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Retrieves the Tanium Server Name from the Client's Registry
Example: server.domain.com</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Server Name
&amp;#039;========================================


Option Explicit

Const HKLM = &amp;amp;h80000002

Dim objReg
Dim strTaniumRegPath, strCurrentTaniumServerValue
Dim strComputer

strComputer = &amp;quot;.&amp;quot;

Set objReg = _ 
	GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; _ 
	&amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

strTaniumRegPath = GetTaniumRegistryPath()
&amp;#039;retrieve current server name value
objReg.GetStringValue HKLM, strTaniumRegPath, &amp;quot;ServerName&amp;quot;, strCurrentTaniumServerValue

WScript.Echo strCurrentTaniumServerValue

&amp;#039;Cleanup
Set objReg = Nothing

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

grep &amp;quot;^ServerName=&amp;quot; TaniumClient.ini  | awk -F= &amp;#039;{print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

grep &amp;quot;^ServerName=&amp;quot; TaniumClient.ini  | awk -F= &amp;#039;{print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

grep &amp;quot;^ServerName=&amp;quot; TaniumClient.ini  | awk -F= &amp;#039;{print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

grep &amp;quot;^ServerName=&amp;quot; TaniumClient.ini  | awk -F= &amp;#039;{print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>267</cache_row_id>
          </sensor>
          <sensor>
            <id>534</id>
            <name>File Modification Date</name>
            <hash>4080631087</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>Returns the modification date of the file specified by the parameter.
Example: 12/12/2014 18:00</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; File Modification Date
&amp;#039;========================================
Option Explicit

SetLocale(1033)

Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFilePath,o
strFilePath = unescape(&amp;quot;||filepath||&amp;quot;)
&amp;#039; Testing strings
&amp;#039;strFilePath = unescape(&amp;quot;%userprofile%\AppData\afile.txt&amp;quot;)
&amp;#039;strFilePath = unescape(&amp;quot;c:\Windows\regedit.exe&amp;quot;)

strFilePath = FixFileSystemRedirectionForPath(strFilePath)

Set o = New TaniumOutput

If InStr(LCase(strFilePath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFilePath
Else
    ListNoUserVars strFilePath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict

Sub ListFileModificationDate(strFilePath,strUserProfileName)
	Dim bUserDirsFlag, fso, objFile, dLastModified, strLastModified
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FileExists(strFilePath) Then
		Set objFile = fso.GetFile(strFilePath)
   		dLastModified = objFile.DateLastModified
   		strLastModified = FormatDateTime(dLastModified, vbShortDate) &amp;amp; &amp;quot; &amp;quot; &amp;amp; FormatDateTime(dLastModified, vbShortTime)

		If bUserDirsFlag Then
			o.AddLine &amp;quot;User Profile: &amp;quot; &amp;amp; strUserProfileName &amp;amp; &amp;quot; : &amp;quot; &amp;amp; strLastModified
		Else
			o.AddLine strLastModified
		End If
	Else
		If Not bUserDirsFlag Then
			o.AddLine &amp;quot;File &amp;quot; &amp;amp; strFilePath &amp;amp; &amp;quot; not found&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFilePath)
&amp;#039; plain check if a file exists
    strFilePath = FixFileSystemRedirectionForPath(strFilePath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFilePath = objShell.ExpandEnvironmentStrings( strFilePath )
	
	ListFileModificationDate strFilePath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFilePath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFilePath = Replace(LCase(strFilePath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFilePath = objShell.ExpandEnvironmentStrings( strFilePath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFileModificationDate strValue&amp;amp;strFilePath, strValue
        End If
    Next

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {   &amp;quot;parameters&amp;quot;:[      {         &amp;quot;validationExpressions&amp;quot;:[            {               &amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,               &amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,               &amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,               &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,               &amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;            }         ],         &amp;quot;key&amp;quot;:&amp;quot;filepath&amp;quot;,         &amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\windows\\test.txt, or %userprofile%\\test.txt&amp;quot;,         &amp;quot;label&amp;quot;:&amp;quot;File path and name to search for&amp;quot;,         &amp;quot;helpString&amp;quot;:&amp;quot;Enter the file path of which to return the modification date.  Only %userprofile% is acceptable to loop through user directories.&amp;quot;,         &amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;restrict&amp;quot;:null,         &amp;quot;maxChars&amp;quot;:0,         &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,         &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;      }   ],   &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,   &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filepath||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {   &amp;quot;parameters&amp;quot;:[      {         &amp;quot;validationExpressions&amp;quot;:[            {               &amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,               &amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,               &amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,               &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,               &amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;            }         ],         &amp;quot;key&amp;quot;:&amp;quot;filepath&amp;quot;,         &amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\windows\\test.txt, or %userprofile%\\test.txt&amp;quot;,         &amp;quot;label&amp;quot;:&amp;quot;File path and name to search for&amp;quot;,         &amp;quot;helpString&amp;quot;:&amp;quot;Enter the file path of which to return the modification date.  Only %userprofile% is acceptable to loop through user directories.&amp;quot;,         &amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;restrict&amp;quot;:null,         &amp;quot;maxChars&amp;quot;:0,         &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,         &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;      }   ],   &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,   &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filepath||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {   &amp;quot;parameters&amp;quot;:[      {         &amp;quot;validationExpressions&amp;quot;:[            {               &amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,               &amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,               &amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,               &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,               &amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;            }         ],         &amp;quot;key&amp;quot;:&amp;quot;filepath&amp;quot;,         &amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\windows\\test.txt, or %userprofile%\\test.txt&amp;quot;,         &amp;quot;label&amp;quot;:&amp;quot;File path and name to search for&amp;quot;,         &amp;quot;helpString&amp;quot;:&amp;quot;Enter the file path of which to return the modification date.  Only %userprofile% is acceptable to loop through user directories.&amp;quot;,         &amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;restrict&amp;quot;:null,         &amp;quot;maxChars&amp;quot;:0,         &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,         &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;      }   ],   &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,   &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filepath||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {   &amp;quot;parameters&amp;quot;:[      {         &amp;quot;validationExpressions&amp;quot;:[            {               &amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,               &amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,               &amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,               &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,               &amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;            }         ],         &amp;quot;key&amp;quot;:&amp;quot;filepath&amp;quot;,         &amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\windows\\test.txt, or %userprofile%\\test.txt&amp;quot;,         &amp;quot;label&amp;quot;:&amp;quot;File path and name to search for&amp;quot;,         &amp;quot;helpString&amp;quot;:&amp;quot;Enter the file path of which to return the modification date.  Only %userprofile% is acceptable to loop through user directories.&amp;quot;,         &amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,         &amp;quot;restrict&amp;quot;:null,         &amp;quot;maxChars&amp;quot;:0,         &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,         &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;      }   ],   &amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,   &amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||filepath||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"File path and name to search for","helpString":"Enter the file path of which to return the modification date.  Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\windows\\test.txt, or %userprofile%\\test.txt","maxChars":0,"key":"filepath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>BESDate</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>268</cache_row_id>
          </sensor>
          <sensor>
            <id>536</id>
            <name>RAM Slots Used and Unused</name>
            <hash>4086041268</hash>
            <string_count>0</string_count>
            <category>Miscellaneous</category>
            <description>Returns the number of used and unused RAM slots.
Example:2 6</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; RAM Slots Used and Unused
&amp;#039;========================================

&amp;#039; This sensor will return the number of free RAM slots

Option Explicit

Dim strSep: strSep = &amp;quot;|&amp;quot;
&amp;#039; This is a multi-column sensor
&amp;#039; The output is 
&amp;#039; Slots Used | Slots Unused

RAM_SlotsUsedAndUnused(strSep)

Function RAM_SlotsUsedAndUnused(strSep)
&amp;#039; This function returns the number of used and unused RAM slots
	Dim strComputer
	Dim objWMIService, colPMAs, objPMA
	Dim colPMs, objPM

	&amp;#039; How many slots exist
	Dim intSlots: intSlots = 0
	&amp;#039; How many MemoryDevices are present
	Dim intMemorySticks: intMemorySticks = 0
	&amp;#039; How many slots are free
	Dim intFreeSlots: intFreeSlots = 0
	
	strComputer = &amp;quot;.&amp;quot;
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
	&amp;#039;Use = 3 is system RAM
	&amp;#039; This is the number of slots in the system.
	Set colPMAs = objWMIService.ExecQuery(&amp;quot;Select MemoryDevices from Win32_PhysicalMemoryArray where use=&amp;#039;3&amp;#039;&amp;quot;,,48)
	
	For Each objPMA In colPMAs
		&amp;#039; There should be only one
		&amp;#039; but just in case
		intSlots = intSlots + objPMA.MemoryDevices
		&amp;#039; WScript.Echo &amp;quot;objPMA.MemoryDevices is total slots: &amp;quot; &amp;amp; objPMA.MemoryDevices
	Next
	
	&amp;#039; Cleanup
	Set colPMAs = Nothing
	
	&amp;#039; A new query - asking for DeviceLocator where memory type does not 
	&amp;#039; equal 11 (Flash RAM)
	&amp;#039; DeviceLocator is the label of the socket that holds the memory
	&amp;#039; So this is the number of sockets in the system
	Set colPMs = objWMIService.ExecQuery(&amp;quot;Select DeviceLocator from Win32_PhysicalMemory where MemoryType!=&amp;#039;11&amp;#039;&amp;quot;)
	
	For Each objPM In colPMs
		&amp;#039;Each loop through indicates another slot
		intMemorySticks = intMemorySticks + 1
	Next
	
	&amp;#039; output is number of used slots, separator, and number of free slots
	intFreeSlots = intSlots - intMemorySticks
	
	WScript.Echo intMemorySticks &amp;amp; strSep &amp;amp; intFreeSlots
	
	&amp;#039;Cleanup
	Set colPMs = Nothing
	Set objWMIService = Nothing
End Function &amp;#039;RAM_SlotsUsedAndUnused</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>NumericInteger</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Slots Used</name>
                <index>0</index>
                <value_type>NumericInteger</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Slots Unused</name>
                <index>1</index>
                <value_type>NumericInteger</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>269</cache_row_id>
          </sensor>
          <sensor>
            <id>538</id>
            <name>SCSI Controller Caption</name>
            <hash>4105783647</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>A short description of the SCSI Controller as provided by the manufacturer.
Example: Dell PERC S100 S300 Controller</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from win32_SCSIController</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>270</cache_row_id>
          </sensor>
          <sensor>
            <id>540</id>
            <name>AD Forest</name>
            <hash>4165545489</hash>
            <string_count>0</string_count>
            <category>Active Directory</category>
            <description>Returns the name of the Active Directory Forest that a machine is a member of.  This may produce the same value that the Sensor named AD Domain produces.
Example: corp.domain.com</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; AD Forest
&amp;#039;========================================

Option Explicit
On Error Resume Next 
Dim objSysInfo
Set objSysInfo = CreateObject(&amp;quot;ADSystemInfo&amp;quot;) 

If IsNull(objSysInfo.ForestDNSName) Then
	WScript.Echo &amp;quot;N/A&amp;quot;
Else
	WScript.Echo objSysInfo.ForestDNSName
End If</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>271</cache_row_id>
          </sensor>
          <sensor>
            <id>542</id>
            <name>System Disk Free Space</name>
            <hash>4180356655</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>The amount of free disk space on the main system drive.
Example: C:|4 GB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Disk Free Space of System Drive
&amp;#039;========================================

&amp;#039; This sensor uses the Disk Free Space sensor code
&amp;#039; but limits output to the drive that is designated the system
&amp;#039; drive

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;) 
Set objEnv = objShell.Environment(&amp;quot;PROCESS&amp;quot;) 

strSystemDrive = objEnv(&amp;quot;SystemDrive&amp;quot;)

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; _
    &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colDisks = objWMIService.ExecQuery _
    (&amp;quot;Select * from Win32_LogicalDisk&amp;quot;)

For Each objDisk in colDisks
	If LCase(objDisk.DeviceID) = LCase(strSystemDrive) Then
		FreeMB = objDisk.FreeSpace/1024000
	  	If (FreeMB &amp;lt;&amp;gt; &amp;quot;&amp;quot; and FreeMB &amp;lt;&amp;gt; 0) THEN
	    	FreeGB = FreeMB/1000
	    	WScript.Echo objDisk.DeviceID &amp;amp; &amp;quot;|&amp;quot; &amp;amp; Round(FreeGB) &amp;amp; &amp;quot; GB&amp;quot;
	  	End If
	End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Disk</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Free Space</name>
                <index>1</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>272</cache_row_id>
          </sensor>
          <sensor>
            <id>544</id>
            <name>Free Swap</name>
            <hash>4201347922</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Indicates the free swap space available to the operating system.
Example: 640MB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
memLine=$(free -m | grep &amp;quot;Swap&amp;quot;)
set -- $memLine
echo $4 MB</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
#swapfile             dev    swaplo   blocks     free
#/dev/zvol/dsk/rpool/swap 195,1         8  2097144  2097144

swap=$(swap -l | grep -v swapfile | awk &amp;#039;{ print $5 }&amp;#039;)
swapMB=$(expr $swap \* 512 \/ 1024 \/ 1024)
echo &amp;quot;${swapMB}MB&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
swap -l | grep -v &amp;#039;device&amp;#039; | awk &amp;#039;{ print $5  }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>273</cache_row_id>
          </sensor>
          <sensor>
            <id>546</id>
            <name>Disk Total Size of System Drive</name>
            <hash>4212162125</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>The amount of total disk space on the main system drive.
Example: C: 100 GB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Disk Total Size of System Drive
&amp;#039;========================================

&amp;#039; This sensor uses the Disk Total Space sensor code
&amp;#039; but limits output to the drive that is designated the system
&amp;#039; drive

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;) 
Set objEnv = objShell.Environment(&amp;quot;PROCESS&amp;quot;) 

strSystemDrive = objEnv(&amp;quot;SystemDrive&amp;quot;)

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; _
    &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colDisks = objWMIService.ExecQuery _
    (&amp;quot;Select * from Win32_LogicalDisk&amp;quot;)
For Each objDisk in colDisks
 &amp;#039;   Wscript.Echo &amp;quot;DeviceID: &amp;quot; &amp;amp; objDisk.DeviceID
    If LCase(objDisk.DeviceID) = LCase(strSystemDrive) Then
	    If Not IsNull(objDisk.Size) Then
		    dblSize = CDbl(objDisk.Size)
		    dblSize = dblSize / 1024 / 1024 / 1024
		    intSize = CInt(dblSize)
			WScript.Echo objDisk.DeviceID &amp;amp; &amp;quot; &amp;quot; &amp;amp; intSize &amp;amp; &amp;quot; GB&amp;quot;
	    End If
	End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>274</cache_row_id>
          </sensor>
          <sensor>
            <id>548</id>
            <name>Tanium Current Directory</name>
            <hash>4225957259</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Installation directory of the Tanium Client on the client machine.
Example: C:\Program Files\Tanium\Tanium Client</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Current Directory
&amp;#039;========================================

set wshell = createobject(&amp;quot;wscript.shell&amp;quot;)
wscript.echo wshell.currentdirectory</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
pwd</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
pwd</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
pwd</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
pwd</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>275</cache_row_id>
          </sensor>
          <sensor>
            <id>550</id>
            <name>Static IP Addresses</name>
            <hash>422662332</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>A list of the static IP addresses currently held by the client machine.
Example: 192.168.1.1</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select IPAddress from win32_networkadapterconfiguration where DHCPEnabled = False and IPEnabled=True</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>IPAddress</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>276</cache_row_id>
          </sensor>
          <sensor>
            <id>552</id>
            <name>Run Level</name>
            <hash>4244179900</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the set run level of Linux systems
Example: 3</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
line=$(who -r)
set -- $line
echo $2</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
# Get Unix current run level
who -r | awk &amp;#039;{ print $3 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get current AIX run level
who -r | awk &amp;#039;{ print $3 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>NumericInteger</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>277</cache_row_id>
          </sensor>
          <sensor>
            <id>554</id>
            <name>System Slots Available</name>
            <hash>4254566410</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the number of open slots in the system on Windows client machines.
Example: 3</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; System Slots Available
&amp;#039;========================================

&amp;#039; This sensor will return the number of slots open in the system

Option Explicit

WScript.Echo GetSystemSlotsAvailable

Function GetSystemSlotsAvailable
	
	Dim objWMIService, colSystemSlots
	Dim strComputer, objSystemSlots

	strComputer = &amp;quot;.&amp;quot;
	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
		&amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;) 

	&amp;#039;SlotDesignation is like &amp;quot;PCI-I&amp;quot; and CurrentUsage=3 means available
	Set colSystemSlots = objWMIService.ExecQuery _ 
		(&amp;quot;Select SlotDesignation from Win32_SystemSlot where CurrentUsage=3&amp;quot;) 
	If Not IsNull(colSystemSlots) Then
		GetSystemSlotsAvailable = colSystemSlots.Count
	Else
		GetSystemSlotsInAvailable = &amp;quot;WMI Error&amp;quot;
	End If
	
	&amp;#039;Cleanup
	Set colSystemSlots = Nothing
	Set objWMIService = Nothing
End Function &amp;#039;GetSystemSlotsAvailable</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>NumericInteger</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>278</cache_row_id>
          </sensor>
          <sensor>
            <id>556</id>
            <name>Tanium Peer Address</name>
            <hash>4261354259</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Returns the IP address of the peer specified in th Tanium registry entry at HKLM\SOFTWARE\Tanium\Tanium Client\Status\PeerAddress on windows and TaniumClientStatus.ini on non-windows endpoints.
Example: 192.168.1.123</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Peer Address
&amp;#039;========================================

Option Explicit

Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

Dim strKeyPath, strValueName, strValue, strTaniumClientVersion, oReg

strKeyPath = GetTaniumRegistryPath &amp;amp; &amp;quot;\Status&amp;quot;
strValueName = &amp;quot;PeerAddress&amp;quot; 
strTaniumClientVersion = GetTaniumClientVersion()

If InStr(strTaniumClientVersion,&amp;quot;6.0.314.&amp;quot; ) &amp;gt; 0 Then
	&amp;#039; This may seem exactly opposite, but the 6.0 client does not 
	&amp;#039; correctly keep up with these values in status, but does the
	&amp;#039; &amp;quot;reverse&amp;quot; connection.  So to know who is forward, we need to look
	&amp;#039; up the previous back, to know who is backwards, we need the previous
	&amp;#039; peer.  Very confusing
	strValueName = &amp;quot;BackPreviousPeerAddress&amp;quot;
End If

Set oReg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;) 

oReg.GetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue

Wscript.Echo strValue


Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		GetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		GetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;GetTaniumRegistryPath

Function GetTaniumClientVersion

	Dim fso, filePath, objFile
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	If GetTaniumDir(&amp;quot;&amp;quot;) = False Then 
		WScript.Echo &amp;quot;Not installed&amp;quot;
		WScript.Quit
	End If 
	
	filePath = GetTaniumDir(&amp;quot;&amp;quot;) &amp;amp; &amp;quot;taniumclient.exe&amp;quot;
	
	If fso.FileExists(filePath) Then
		Set objFile = fso.GetFile(filePath)
		GetTaniumClientVersion = fso.GetFileVersion(objFile)
	Else
		GetTaniumClientVersion &amp;quot;Not installed&amp;quot;
	End If

End Function &amp;#039;GetTaniumClientVersion		

Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
		If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
			strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
		End If	
	
		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		If fso.FolderExists(strPath) Then
			If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
				&amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
				GeneratePath strPath &amp;amp; strSubDir, fso
			End If
			GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
		Else
			&amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
			WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
			GetTaniumDir = False
		End If
	Else
		WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
		GetTaniumDir = False
	End If
End Function &amp;#039;GetTaniumDir</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

grep -w &amp;quot;^PeerAddress&amp;quot; TaniumClientStatus.ini | cut -d= -f2</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

grep -w &amp;quot;^PeerAddress&amp;quot; TaniumClientStatus.ini | cut -d= -f2</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>279</cache_row_id>
          </sensor>
          <sensor>
            <id>558</id>
            <name>AD User Groups</name>
            <hash>4264207873</hash>
            <string_count>0</string_count>
            <category>Active Directory</category>
            <description>Any Active Directory groups that the currently logged in user is a member of.
Example: CN=Domain Admins,CN=Users,DC=corp,DC=com</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; AD User Groups
&amp;#039;========================================

On Error Resume Next 
ScanUsers
 
Function ScanUsers()
	Dim strComputer, objWMIService, colComputer, objComputer, strId
	strComputer = &amp;quot;.&amp;quot;    
	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp;  &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)  
	Set colComputer = objWMIService.ExecQuery (&amp;quot;Select UserName from Win32_ComputerSystem&amp;quot;)    
	If colComputer.Count = 0 Then
		WScript.Echo &amp;quot;No User&amp;quot;
		WScript.quit
	End If
	For Each objComputer in colComputer     
		if objComputer.UserName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
			words = Split(objComputer.UserName, &amp;quot;\&amp;quot;)
			
			If UBound(words) &amp;gt; 0 Then
				strId = words(UBound(words))
				dn = GetDN(strId)
				GetGroups(dn)
			End If
		End If  
	Next
End Function

Function GetGroups(strDn)
&amp;#039;	WScript.Echo &amp;quot;looking at: &amp;quot;&amp;amp; strDN
	&amp;#039;	On Error Resume Next
	Const E_ADS_PROPERTY_NOT_FOUND  = &amp;amp;h8000500D
	 
	Set objUser = GetObject _
	    (&amp;quot;LDAP://&amp;quot; &amp;amp; strDn)
	 
	intPrimaryGroupID = objUser.Get(&amp;quot;primaryGroupID&amp;quot;)
	arrMemberOf = objUser.GetEx(&amp;quot;memberOf&amp;quot;)
	 
	If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
	    WScript.Echo &amp;quot;The memberOf attribute is not set.&amp;quot;
	Else
	    For Each Group in arrMemberOf
	        WScript.Echo Group
	    Next
	End If
End Function

Function GetDN(strUserId)
	Const ADS_SCOPE_SUBTREE = 2
	
	Set objConnection = CreateObject(&amp;quot;ADODB.Connection&amp;quot;)
	Set objCommand =   CreateObject(&amp;quot;ADODB.Command&amp;quot;)
	objConnection.Provider = &amp;quot;ADsDSOObject&amp;quot;
	objConnection.Open &amp;quot;Active Directory Provider&amp;quot;
	Set objCommand.ActiveConnection = objConnection
	
	objCommand.Properties(&amp;quot;Page Size&amp;quot;) = 1000
	objCommand.Properties(&amp;quot;Searchscope&amp;quot;) = ADS_SCOPE_SUBTREE 
	
	Set objRootDSE = GetObject(&amp;quot;LDAP://RootDSE&amp;quot;)
	strDNSDomain = objRootDSE.Get(&amp;quot;defaultNamingContext&amp;quot;)
	
	objCommand.CommandText = _
	    &amp;quot;SELECT distinguishedName FROM &amp;#039;LDAP://&amp;quot;&amp;amp;strDNSDomain&amp;amp;&amp;quot;&amp;#039; WHERE objectCategory=&amp;#039;user&amp;#039; &amp;quot; &amp;amp; _
	        &amp;quot;AND sAMAccountName=&amp;#039;&amp;quot;&amp;amp;strUserId&amp;amp;&amp;quot;&amp;#039;&amp;quot;
	Set objRecordSet = objCommand.Execute
	
	objRecordSet.MoveFirst
	Do Until objRecordSet.EOF
	    &amp;#039;Wscript.Echo objRecordSet.Fields(&amp;quot;distinguishedName&amp;quot;).Value
	    GetDN = objRecordSet.Fields(&amp;quot;distinguishedName&amp;quot;).Value
		Exit Function
	    objRecordSet.MoveNext
	Loop
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>280</cache_row_id>
          </sensor>
          <sensor>
            <id>560</id>
            <name>Registry Key Value Names</name>
            <hash>4276555360</hash>
            <string_count>0</string_count>
            <category>Registry</category>
            <description>Returns all values contained in a supplied key.  If the hive is HKEY_USERS, it will attempt to output the user name associated with the key.  HKEY_CURRENT_USER will only return data for the SYSTEM account which the Tanium Client runs as.
Example: John | Version | 32-bit</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Registry Key Value Names
&amp;#039;========================================

&amp;#039;Columns:
&amp;#039; User | Value Name | Architecture | KeyPath

strKey = unescape(&amp;quot;||strKey||&amp;quot;)

&amp;#039;strKey = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
&amp;#039;strKey = &amp;quot;HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Internet Settings&amp;quot;

strSep = &amp;quot;|&amp;quot;


&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive


&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)
If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
	For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserName = GetUserForSIDLocal(objReg,strUserKey)
			If strUserName = False Then strUserName = strUserKey
			strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
			hasValues32 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 32)
			If hasValues32 Then hasAnyResult = True
		End If
	Next
Else &amp;#039; was another hive
	hasValues32 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 32)
	If hasValues32 Then hasAnyResult = True
End If

If Is64 Then
	Set objCtx = GetObjCtx(64)
	Set objReg = GetObjReg(objCtx)
	If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
	&amp;#039; go through each User&amp;#039;s hive in 64-bit context
		For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
				strUserName = GetUserForSIDLocal(objReg,strUserKey)
				If strUserName = False Then strUserName = strUserKey
				strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
				hasValues64 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 64)
				If hasValues64 Then hasAnyResult = True	
			End If
		Next
	Else &amp;#039; was another hive	
		hasValues64 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 64)
		If hasValues64 Then hasAnyResult = True	
	End If
End If

If Not (hasAnyResult) Then
	WScript.Echo &amp;quot;Key/Value not found&amp;quot;
End If

&amp;#039;Goes through all values in a key, returns True if strValue is found
Function CheckValues(objReg, objCtx, constHive, strKey, strValue, intBit)

	&amp;#039; Note the key that was being searched, will be a hidden column
	strOutputKey = strHive&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
	
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
	
	arrNames = Outparams.sNames

	If Not IsNull(arrNames) Then
		For i = LBound(arrNames) To UBound(arrNames)
			strValueName = arrNames(i)
			WScript.Echo strUserName &amp;amp; strSep &amp;amp; strValueName &amp;amp; strSep &amp;amp; intBit &amp;amp; &amp;quot;-bit&amp;quot; _
				&amp;amp; strSep &amp;amp; strOutputKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strValueName
		Next
		CheckValues = True

	Else
		CheckValues = False
	End If
End Function


Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	GetSubKeys = Outparams.sNames
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function


Function GetHiveConst(hive)
	Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
	Const HKEY_CURRENT_USER   = &amp;amp;H80000001
	Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
	Const HKEY_USERS          = &amp;amp;H80000003

	Select Case UCase(hive)
		Case &amp;quot;HKLM&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKCR&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
			GetHiveConst = HKEY_CURRENT_USER
		Case &amp;quot;HKEY_USERS&amp;quot;
			GetHiveConst = HKEY_USERS
	End Select
	
	If IsEmpty(GetHiveConst) Then
		WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
		WScript.Quit
	End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
			strUserData = Left(strUserData,intDatPos - 1)
			&amp;#039; find last backslash
			intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
			&amp;#039; get right from that pos
			strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
			GetUserForSIDLocal = strUserData
		Else
			strUserData = False
		End If
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value must be at least 5 characters&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;\\S{5}&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strKey&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. HKEY_USERS\\Software\\Key&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Registry Key&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the registry key to query&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strKey||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Registry Key","helpString":"Enter the registry key to query","defaultValue":"","promptText":"e.g. HKEY_USERS\\Software\\Key","maxChars":0,"key":"strKey","restrict":null,"validationExpressions":[{"helpString":"Value must be at least 5 characters","expression":"\\S{5}","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>User</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Value Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Architecture</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>KeyPath</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>281</cache_row_id>
          </sensor>
          <sensor>
            <id>562</id>
            <name>Power Plans Available</name>
            <hash>4287813257</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description></description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; Display all of the available Power plans with status
&amp;#039; Define our variables  
Dim colPlan 
Dim strPlanName, strPlanDescription, strPlanStatus 
     
&amp;#039; Get the winmanagment system power 
    
Set objWMI = GetObject(&amp;quot;winmgmts:\\.\root\cimv2\power&amp;quot;)  

&amp;#039; Do a search on win32_PowerPlan 
    
Set colPlans = objWMI.ExecQuery(&amp;quot;Select * From Win32_PowerPlan&amp;quot;)  
intCounter=0 
 
&amp;#039; Go through each of the returned plans objPlan contains the current plan 

For Each objPlan in colPlans 
       strPlanStatus = objPlan.isActive=True 
       strPlanName = objPlan.ElementName  
       WScript.Echo strPlanName 
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>14400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>282</cache_row_id>
          </sensor>
          <sensor>
            <id>564</id>
            <name>Tanium Back Peer Address</name>
            <hash>4293389196</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Returns the IP address of the back peer specified in th Tanium registry entry at HKLM\SOFTWARE\Tanium\Tanium Client\Status\PeerAddress on windows and TaniumClientStatus.ini on non-windows endpoints.
Example: 192.168.1.123</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Back Peer Address
&amp;#039;========================================

Option Explicit

Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

Dim strKeyPath, strValueName, strValue, strTaniumClientVersion, oReg

strKeyPath = GetTaniumRegistryPath &amp;amp; &amp;quot;\Status&amp;quot;
strValueName = &amp;quot;BackPeerAddress&amp;quot; 
strTaniumClientVersion = GetTaniumClientVersion()

If InStr(strTaniumClientVersion,&amp;quot;6.0.314.&amp;quot; ) &amp;gt; 0 Then
	strValueName = &amp;quot;PreviousPeerAddress&amp;quot;
End If

Set oReg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;) 

oReg.GetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue

Wscript.Echo strValue


Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		GetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		GetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;GetTaniumRegistryPath

Function GetTaniumClientVersion

	Dim fso, filePath, objFile
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	If GetTaniumDir(&amp;quot;&amp;quot;) = False Then 
		WScript.Echo &amp;quot;Not installed&amp;quot;
		WScript.Quit
	End If 
	
	filePath = GetTaniumDir(&amp;quot;&amp;quot;) &amp;amp; &amp;quot;taniumclient.exe&amp;quot;
	
	If fso.FileExists(filePath) Then
		Set objFile = fso.GetFile(filePath)
		GetTaniumClientVersion = fso.GetFileVersion(objFile)
	Else
		GetTaniumClientVersion &amp;quot;Not installed&amp;quot;
	End If

End Function &amp;#039;GetTaniumClientVersion		

Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
		If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
			strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
		End If	
	
		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		If fso.FolderExists(strPath) Then
			If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
				&amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
				GeneratePath strPath &amp;amp; strSubDir, fso
			End If
			GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
		Else
			&amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
			WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
			GetTaniumDir = False
		End If
	Else
		WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
		GetTaniumDir = False
	End If
End Function &amp;#039;GetTaniumDir</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

grep -w &amp;quot;^BackPeerAddress&amp;quot; TaniumClientStatus.ini | cut -d= -f2</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

grep -w &amp;quot;^BackPeerAddress&amp;quot; TaniumClientStatus.ini | cut -d= -f2</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>283</cache_row_id>
          </sensor>
          <sensor>
            <id>566</id>
            <name>SQL Buffer Hit Ratio</name>
            <hash>432766313</hash>
            <string_count>0</string_count>
            <category>SQL</category>
            <description>Returns the buffer cache hit ratio from SQL Server on the client machine.
Example: .5</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; SQL Buffer Hit Ratio
&amp;#039;========================================
&amp;#039;@INCLUDE=sql/mssql_connection_utils.vbs

Option Explicit

Dim dictInstances, strInstance, objConnection

Set dictInstances = GetMSSQLInstances()

For Each strInstance In dictInstances.Keys

	Dim objRecordSet, objRecordSet2, strNumerator, strDenominator, intNum, intDen, result
	Set objConnection = CreateObject(&amp;quot;ADODB.Connection&amp;quot;) 
	Set objRecordSet = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;) 
	Set objRecordSet2 = CreateObject(&amp;quot;ADODB.Recordset&amp;quot;)  
	
	On Error Resume Next
	objConnection.Open GenMSSQLConnectionStr(strInstance, &amp;quot;master&amp;quot;)
	
	If objConnection.Errors.Count &amp;gt; 0 Then 
		WScript.Echo &amp;quot;Access Error (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
		Exit For
	End If 
	
	objRecordSet.Open &amp;quot;select cntr_value from master..sysperfinfo where (counter_name=&amp;#039;Buffer cache hit ratio&amp;#039;)&amp;quot;, objConnection, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC 
	objRecordSet2.Open &amp;quot;select cntr_value from master..sysperfinfo where (counter_name=&amp;#039;Buffer cache hit ratio base&amp;#039;)&amp;quot;, objConnection, AD_OPEN_STATIC, AD_LOCK_OPTIMISTIC  
	strNumerator = objRecordSet(&amp;quot;cntr_value&amp;quot;) 
	strDenominator = objRecordSet2(&amp;quot;cntr_value&amp;quot;) 

	If objConnection.Errors.Count &amp;gt; 0 Then 
		WScript.Echo &amp;quot;SQL Error (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
		Exit For
	End If 

	On Error Goto 0
	
	intNum = CInt(strNumerator) 
	intDen = CInt(StrDenominator) 
	result = intNum/IntDen 
	if result &amp;gt; 1 then 
		result = 1 
	End If 
	WScript.echo result &amp;amp; GetMSSQLSensorInstanceStr(strInstance)
Next

&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: sql/mssql_connection_utils.vbs

&amp;#039; Common constants for MSSQL lookups
Const AD_OPEN_STATIC = 3 
Const AD_LOCK_OPTIMISTIC = 3  


Function GetMSSQLInstances()
    Dim dictResult, objWMIService, colServices, objService
    Dim strCaption, strInstance, intStartIndex, intStopIndex
    Set dictResult = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

    Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)  
    Set colServices = objWMIService.ExecQuery (&amp;quot;select * from win32_Service&amp;quot;)  
    For Each objService In colServices
        strCaption = objService.Caption
    
        If (InStr(strCaption,&amp;quot;SQL Server&amp;quot;) &amp;lt;&amp;gt; 0 And ObjService.State = &amp;quot;Running&amp;quot;) Then    
            &amp;#039; OK -- found SQL Server on this machien, now we need to find the instance name
            &amp;#039; if this is the correct service
            strInstance = &amp;quot;.&amp;quot;
            intStartIndex = InStr(strCaption, &amp;quot;(&amp;quot;)
            intStopIndex = InStr(strCaption, &amp;quot;)&amp;quot;)
            
            If(intStartIndex &amp;lt;&amp;gt; 0) And (intStopIndex &amp;lt;&amp;gt; 0) Then 
                strInstance = Mid(strCaption, intStartIndex + 1, intStopIndex - intStartIndex - 1)
                    
                If strInstance = &amp;quot;MSSQLSERVER&amp;quot; Then 
                    strInstance = &amp;quot;.&amp;quot;
                End If 

                If Not dictResult.Exists(strInstance) Then
                    dictResult.Add strInstance, True
                End if
            End If             
        End If  
    Next  
    
    Set GetMSSQLInstances = dictResult

End Function &amp;#039; GetMSSQLInstances

Function GenMSSQLConnectionStr(strInstance, strCatalog) 
    Dim strDataSource, strConnection

    If strInstance = &amp;quot;.&amp;quot; Then 
        strDataSource = strInstance
    Else 
        strDataSource = &amp;quot;.\&amp;quot; &amp;amp; strInstance
    End If 

    strConnection = &amp;quot;Provider=SQLOLEDB;Data Source=&amp;quot; &amp;amp; strDataSource &amp;amp; &amp;quot;;Trusted_Connection=Yes;Initial Catalog=&amp;quot; &amp;amp; strCatalog &amp;amp; &amp;quot;;&amp;quot;

    GenMSSQLConnectionStr = strConnection
End Function &amp;#039; OpenMSSQLConnection

Function GetMSSQLSensorInstanceStr(strInstance)
    If strInstance = &amp;quot;.&amp;quot; Then
        GetMSSQLSensorInstanceStr = &amp;quot;&amp;quot;
    Else
        GetMSSQLSensorInstanceStr = &amp;quot; (&amp;quot; &amp;amp; strInstance &amp;amp; &amp;quot;)&amp;quot;
    End If
End Function &amp;#039; GetMSSQLSensorInstanceStr
&amp;#039;- End file: sql/mssql_connection_utils.vbs</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>284</cache_row_id>
          </sensor>
          <sensor>
            <id>568</id>
            <name>IP Route Details</name>
            <hash>435227963</hash>
            <string_count>10</string_count>
            <category>Network</category>
            <description>Returns IPv4 network routes, filtered to exclude noise. With Flags, Metric, Interface columns.
Example:  172.16.0.0|192.168.1.1|255.255.0.0|UG|100|eth0</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)

Set collip = objWMIService.ExecQuery(&amp;quot;select * from win32_networkadapterconfiguration where IPEnabled=&amp;#039;True&amp;#039;&amp;quot;)
dim ipaddrs()
ipcount = 0
for each ipItem in collip
    for each ipaddr in ipItem.IPAddress
        ipcount = ipcount + 1
    next
next
redim ipaddrs(ipcount)
ipcount = 0
for each ipItem in collip
    for each ipaddr in ipItem.IPAddress
        ipcount = ipcount + 1
        ipaddrs(ipcount) = ipaddr
    next
next
localhost = &amp;quot;127.0.0.1&amp;quot;

Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_IP4RouteTable&amp;quot;)

For Each objItem in colItems
    dest = objItem.Destination
    gw = objItem.NextHop
    mask = objItem.Mask
    metric = objItem.Metric1
    flags = objItem.Type
    intf = objItem.InterfaceIndex
    For i = 0 to ipcount
        if gw = ipaddrs(i) and gw &amp;lt;&amp;gt; localhost then
            gw = &amp;quot;0.0.0.0&amp;quot;
        end if
    Next
    if gw &amp;lt;&amp;gt; localhost and dest &amp;lt;&amp;gt; &amp;quot;224.0.0.0&amp;quot; and right(dest,3) &amp;lt;&amp;gt; &amp;quot;255&amp;quot; then
        Wscript.Echo dest &amp;amp; &amp;quot;|&amp;quot; &amp;amp; gw &amp;amp; &amp;quot;|&amp;quot; &amp;amp; mask &amp;amp; &amp;quot;|&amp;quot; &amp;amp; &amp;quot;-&amp;quot; &amp;amp; &amp;quot;|&amp;quot; &amp;amp; metric &amp;amp; &amp;quot;|&amp;quot; &amp;amp; &amp;quot;-&amp;quot;
    end if
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>route -n | grep -v Kernel | grep -v Destination | awk &amp;#039;{ print $1 &amp;quot;|&amp;quot; $2 &amp;quot;|&amp;quot; $3 &amp;quot;|&amp;quot; $4 &amp;quot;|&amp;quot; $5 &amp;quot;|&amp;quot; $8 }&amp;#039; | grep -v &amp;quot;|127.0.0.1|&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>netstat -rn | grep -v &amp;quot;:&amp;quot; | grep -v Destination | grep -v Routing | grep -v -e &amp;quot;^$&amp;quot; | awk &amp;#039;{ print $1 &amp;quot;|&amp;quot; $2 &amp;quot;||&amp;quot; $3 &amp;quot;||&amp;quot; $6 }&amp;#039; | grep -v &amp;quot;|127.0.0.1|&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
netstat -nr | egrep -v &amp;#039;Routing|Destination|---|^$|::&amp;#039; | awk &amp;#039;{ print $1&amp;quot;,&amp;quot;$2&amp;quot;,,&amp;quot;$3&amp;quot;,,&amp;quot;$5 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>60</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Destination</name>
                <index>0</index>
                <value_type>IPAddress</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Gateway</name>
                <index>1</index>
                <value_type>IPAddress</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Mask</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Flags</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Metric</name>
                <index>4</index>
                <value_type>NumericInteger</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Interface</name>
                <index>5</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>285</cache_row_id>
          </sensor>
          <sensor>
            <id>570</id>
            <name>AD Domain</name>
            <hash>462732724</hash>
            <string_count>0</string_count>
            <category>Active Directory</category>
            <description>The Active Directory domain name (if any) that the computer is joined to.
Example: intra.company.com</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Domain from win32_ComputerSystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>286</cache_row_id>
          </sensor>
          <sensor>
            <id>572</id>
            <name>IP Routes</name>
            <hash>487354270</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns IPv4 network routes, filtered to exclude noise.
Example:  172.16.0.0|192.168.1.1|255.255.0.0</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)

&amp;#039;Build list of local IP addresses
&amp;#039;For identifying locally connected networks
&amp;#039;(which show local IP address as gateway)
Set collip = objWMIService.ExecQuery(&amp;quot;select * from win32_networkadapterconfiguration where IPEnabled=&amp;#039;True&amp;#039;&amp;quot;)
dim ipaddrs()
ipcount = 0
for each ipItem in collip
    for each ipaddr in ipItem.IPAddress
        ipcount = ipcount + 1
    next
next
redim ipaddrs(ipcount)
ipcount = 0
for each ipItem in collip
    for each ipaddr in ipItem.IPAddress
        ipcount = ipcount + 1
        ipaddrs(ipcount) = ipaddr
    next
next
localhost = &amp;quot;127.0.0.1&amp;quot;

Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_IP4RouteTable&amp;quot;)

For Each objItem in colItems
    dest = objItem.Destination
    gw = objItem.NextHop
    mask = objItem.Mask
    For i = 0 to ipcount
        if gw = ipaddrs(i) and gw &amp;lt;&amp;gt; localhost then
            &amp;#039;Show single gateway for local networks
            &amp;#039;to allow proper clustering
            gw = &amp;quot;0.0.0.0&amp;quot;
        end if
    Next
    if gw &amp;lt;&amp;gt; localhost and dest &amp;lt;&amp;gt; &amp;quot;224.0.0.0&amp;quot; and right(dest,3) &amp;lt;&amp;gt; &amp;quot;255&amp;quot; then
        &amp;#039;Exclude local, multicast and broadcast
        Wscript.Echo dest &amp;amp; &amp;quot;|&amp;quot; &amp;amp; gw &amp;amp; &amp;quot;|&amp;quot; &amp;amp; mask
    end if
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>route -n | grep -v Kernel | grep -v Destination | awk &amp;#039;{ print $1 &amp;quot;|&amp;quot; $2 &amp;quot;|&amp;quot; $3 }&amp;#039; | grep -v &amp;quot;|127.0.0.1|&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>netstat -rn | grep -v &amp;quot;:&amp;quot; | grep -v Destination | grep -v Routing | grep -v -e &amp;quot;^$&amp;quot; | awk &amp;#039;{ print $1 &amp;quot;|&amp;quot; $2 &amp;quot;|&amp;quot; &amp;quot;-&amp;quot; }&amp;#039; | grep -v &amp;quot;|127.0.0.1|&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
for i in `netstat -nr | grep UG | awk &amp;#039;{ print $1&amp;quot;:&amp;quot;$2 }&amp;#039;`
do
   dest=$(echo &amp;quot;$i&amp;quot; | cut -d: -f1)
   ip=$(echo &amp;quot;$i&amp;quot; | cut -d: -f2)
   mask=$(netstat -np -f inet | grep &amp;quot;$ip &amp;quot; | awk &amp;#039;{ print $3 }&amp;#039;)
   echo &amp;quot;$dest,$ip,$mask&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>60</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Destination</name>
                <index>0</index>
                <value_type>IPAddress</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Gateway</name>
                <index>1</index>
                <value_type>IPAddress</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Subnet Mask</name>
                <index>2</index>
                <value_type>IPAddress</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>287</cache_row_id>
          </sensor>
          <sensor>
            <id>574</id>
            <name>Application Event Log IDs</name>
            <hash>502812713</hash>
            <string_count>0</string_count>
            <category>Windows Event Logs</category>
            <description>Recent event codes from the application event logs in Windows.
Example: 1001</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select EventCode from Win32_NTLogEvent where LogFile = &amp;#039;Application&amp;#039;  and TimeWritten &amp;gt; &amp;#039;$$GETUTCDATE$$86000$$&amp;#039;</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>288</cache_row_id>
          </sensor>
          <sensor>
            <id>576</id>
            <name>Disk Used Space</name>
            <hash>508127351</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The amount of used disk space per partition.
Example: C: 40 GB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Disk Used Space
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
    &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; _
    &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colDisks = objWMIService.ExecQuery _
    (&amp;quot;Select * from Win32_LogicalDisk&amp;quot;)
For Each objDisk in colDisks
 &amp;#039;   Wscript.Echo &amp;quot;DeviceID: &amp;quot; &amp;amp; objDisk.DeviceID
    
    If Not IsNull(objDisk.Size) And Not IsNull(objDisk.FreeSpace) Then
	    dblSize = CDbl(objDisk.Size) - CDbl(objDisk.FreeSpace)
	    dblSize = dblSize / 1024 / 1024 / 1024
	    intSize = CInt(dblSize)
		WScript.Echo objDisk.DeviceID &amp;amp; &amp;quot; &amp;quot; &amp;amp; intSize &amp;amp; &amp;quot; GB&amp;quot;
    End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
df -TPh |grep -vE &amp;quot;Use%|tmpfs&amp;quot; |while read line
do
	set -- $line
	echo $7: $4
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
df -Hl | grep -vE &amp;#039;^Filesystem|tmpfs|cdrom&amp;#039; | awk &amp;#039;/^\// { print $9&amp;quot;: &amp;quot; $3 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
df -k |grep -vE &amp;quot;Filesystem|/proc|tmpfs&amp;quot; |while read line
do
    set -- $line
    echo &amp;quot;$7: $4&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>289</cache_row_id>
          </sensor>
          <sensor>
            <id>578</id>
            <name>Share Folder Permissions</name>
            <hash>542266296</hash>
            <string_count>0</string_count>
            <category>Security</category>
            <description>A list of all shared folders and the permissions currently enabled for those folders.
Example: Downloads, BUILTIN\Administrators-FULL | \CREATOR OWNER-FULL | NT AUTHORITY\SYSTEM-FULL</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Share Folder Permissions
&amp;#039;========================================

&amp;#039;Script will return permissions on each enabled share

strComputer = &amp;quot;.&amp;quot;
Set objWMI = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMI.ExecQuery(&amp;quot;Select * from win32_share&amp;quot;)

For Each i In colItems
strDir = i.path
strName = i.name
result = Trim (Replace(CollectAceInfo(strDir),&amp;quot;|&amp;quot;,&amp;quot;&amp;quot;, 1 , 1))
wscript.echo strName &amp;amp; &amp;quot;,&amp;quot; &amp;amp; result
Next

Function CollectAceInfo(strDir)
Dim ArrayStrAce()
i=0 
strDir = Replace(strDir,&amp;quot;\&amp;quot;,&amp;quot;\\&amp;quot;)
Set colItems = objWMI.ExecQuery(&amp;quot;Select * from win32_logicalFileSecuritySetting WHERE Path=&amp;#039;&amp;quot; &amp;amp; strDir &amp;amp; &amp;quot;&amp;#039;&amp;quot;,,48)
	for each objItem in colItems
		If objItem.GetSecurityDescriptor(wmiSecurityDescriptor) Then
		CollectAceInfo = &amp;quot;GetSecurityDescriptor failed&amp;quot;
		DisplayFileSecurity = False
		Exit Function
		End if

For each wmiAce in wmiSecurityDescriptor.DACL
strACE = wmiAce.Trustee.Domain &amp;amp; &amp;quot;\&amp;quot; &amp;amp; wmiAce.Trustee.Name
strAceMask = wmiAce.AccessMask

strMask = GetMaskValue(strAceMask)
If strMask &amp;lt;&amp;gt; &amp;quot;1&amp;quot; then
i = i + 1
ReDim Preserve ArrayStrAce(i)
ArrayStrAce(i) = strAce &amp;amp; &amp;quot;-&amp;quot; &amp;amp; strMask
CollectAceInfo = Join(ArrayStrAce,&amp;quot; | &amp;quot;)
end if
next
next
End Function

Function GetMaskValue(StrAceMask)
&amp;#039;Dim MaskArray()
Select Case StrAceMask
Case &amp;quot;1179817&amp;quot;
	GetMaskValue = &amp;quot;READ&amp;quot;
Case &amp;quot;1245631&amp;quot;
	GetMaskValue = &amp;quot;CHANGE&amp;quot;
Case &amp;quot;2032127&amp;quot;
	GetMaskValue = &amp;quot;FULL&amp;quot;
Case Else
	GetMaskValue = &amp;quot;1&amp;quot;
End Select

&amp;#039;i=0
&amp;#039;If StrAceMask AND 16 Then
&amp;#039;	i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;	MaskArray(i) =  &amp;quot;Write extended attributes&amp;quot;
&amp;#039;End If
&amp;#039;if StrAceMask AND 1048576 Then
&amp;#039;	i=i + 1
&amp;#039;    ReDim Preserve MaskArray(i)
&amp;#039;	MaskArray(i) =  &amp;quot;Synchronize&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 524288 Then
&amp;#039;    i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;	MaskArray(i) =  &amp;quot;Write owner&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 262144 Then
&amp;#039;	i=i + 1
&amp;#039;   ReDim Preserve MaskArray(i)
&amp;#039;	MaskArray(i) =  &amp;quot;Write ACL&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 131072 Then
&amp;#039;	i=i + 1
&amp;#039;    ReDim Preserve MaskArray(i)
&amp;#039;	MaskArray(i) =  &amp;quot;Read security&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 65536 Then
&amp;#039;    i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;	MaskArray(i) =  &amp;quot;Delete&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 256 Then
&amp;#039;    i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;	MaskArray(i) =  &amp;quot;Write attributes&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 128 Then
&amp;#039;	i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;    MaskArray(i) =  &amp;quot;Read attributes&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 64 Then
&amp;#039;	i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;    MaskArray(i) =  &amp;quot;Delete dir&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 32 Then
&amp;#039;	i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;    MaskArray(i) =  &amp;quot;Execute&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 16 Then
&amp;#039;	i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;    MaskArray(i) =  &amp;quot;Write extended attributes&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 8 Then
&amp;#039;	i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;   MaskArray(i) =  &amp;quot;Read extended attributes&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 4 Then
&amp;#039;	i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;    MaskArray(i) =  &amp;quot;Append&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 2 Then
&amp;#039;    i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;	MaskArray(i) =  &amp;quot;Write&amp;quot;
&amp;#039;End If
&amp;#039;If StrAceMask AND 1 Then
&amp;#039;	i=i + 1
&amp;#039;	ReDim Preserve MaskArray(i)
&amp;#039;    MaskArray(i) =  &amp;quot;Read&amp;quot;
&amp;#039;End If
&amp;#039;GetMaskValue = Join(MaskArray,&amp;quot; : &amp;quot;)
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Share</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Permissions</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>290</cache_row_id>
          </sensor>
          <sensor>
            <id>580</id>
            <name>Operating System Language</name>
            <hash>549503533</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns the OS language along with any Language Packs installed.
Example: English-United States en-US</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Operating System Language
&amp;#039;========================================

&amp;#039; This sensor will output the language of the installed OS along with
&amp;#039; any language packs installed.
&amp;#039; it is a multi-column sensor that looks like:
&amp;#039; OS Language | Language Packs Installed

Option Explicit

Dim strSep
strSep = &amp;quot;|&amp;quot;

WScript.Echo GetOSLanguage(strSep)

&amp;#039;-----------End Main-------------&amp;#039;
Function GetOSLanguage(strSep)
&amp;#039; Retrieves the OS language and whether there are any MUI packs installed.
&amp;#039; Will only retrieve MUI packs on Vista+

	Const HKLM = &amp;amp;H80000002
	
	Dim strComputer
	Dim strWMILanguageCode, arrLangKeys, strLangKey
	Dim strLanguagesRegPath1, strLanguagesRegPath2
	Dim strLanguagePacksInstalled
	Dim objRegistry, objWMIService, objOperatingSystem
	Dim colOperatingSystems

	
	strComputer = &amp;quot;.&amp;quot;

	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
	&amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;) 
	Set colOperatingSystems = objWMIService.ExecQuery _ 
		(&amp;quot;Select * from Win32_OperatingSystem&amp;quot;) 
	For Each objOperatingSystem in colOperatingSystems 	
		strWMILanguageCode = objOperatingSystem.OSLanguage
	Next
			
	Set objRegistry = _
		GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; _ 
		&amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)
	
	strLanguagePacksInstalled = &amp;quot;&amp;quot;
	strLanguagesRegPath1 = &amp;quot;SYSTEM\CurrentControlSet\Control\MUI\UILanguages&amp;quot;
	strLanguagesRegPath2 = &amp;quot;SYSTEM\CurrentControlSet\Control\Nls\MUILanguages&amp;quot;	
	
	&amp;#039; This works on newer OS&amp;#039;s
	objRegistry.EnumKey HKLM, strLanguagesRegPath1, arrLangKeys
	If Not IsNull(arrLangKeys) Then
		For Each strLangKey In arrLangKeys
			If strLanguagePacksInstalled = &amp;quot;&amp;quot; Then
				strLanguagePacksInstalled = strLangKey
			Else
				strLanguagePacksInstalled = strLanguagePacksInstalled &amp;amp; &amp;quot;,&amp;quot; &amp;amp; strLangKey
			End If
		Next
	End If
	
	If strLanguagePacksInstalled = &amp;quot;&amp;quot; Then strLanguagePacksInstalled = &amp;quot;XP or Earlier OS&amp;quot;
	
	GetOSLanguage = LocaleCodeToLanguage(strWMILanguageCode) &amp;amp; strSep &amp;amp; strLanguagePacksInstalled
	
	&amp;#039; need to : cleanup
	&amp;#039; map language codes to readable english
	&amp;#039;Cleanup

	Set objRegistry = Nothing		
End Function &amp;#039;GetOSLanguage

Function LocaleCodeToLanguage(strCode)
&amp;#039; This function takes an numeric locale code and returns
&amp;#039; a readable language mapping

	Dim arrLangCodes, i

	arrLangCodes = array(&amp;quot;1078&amp;quot;,&amp;quot;Afrikaans&amp;quot;,&amp;quot;1052&amp;quot;,&amp;quot;Albanian&amp;quot;,&amp;quot;14337&amp;quot;,&amp;quot;Arabic - United Arab Emirates&amp;quot;,&amp;quot;15361&amp;quot;,&amp;quot;Arabic - Bahrain&amp;quot;,&amp;quot;5121&amp;quot;,&amp;quot;Arabic - Algeria&amp;quot;,&amp;quot;3073&amp;quot;,_
	&amp;quot;Arabic - Egypt&amp;quot;,&amp;quot;2049&amp;quot;,&amp;quot;Arabic - Iraq&amp;quot;,&amp;quot;11265&amp;quot;,&amp;quot;Arabic - Jordan&amp;quot;,&amp;quot;13313&amp;quot;,&amp;quot;Arabic - Kuwait&amp;quot;,&amp;quot;12289&amp;quot;,&amp;quot;Arabic - Lebanon&amp;quot;,&amp;quot;4097&amp;quot;,&amp;quot;Arabic - Libya&amp;quot;,&amp;quot;6145&amp;quot;,_
	&amp;quot;Arabic - Morocco&amp;quot;,&amp;quot;8193&amp;quot;,&amp;quot;Arabic - Oman&amp;quot;,&amp;quot;16385&amp;quot;,&amp;quot;Arabic - Qatar&amp;quot;,&amp;quot;1025&amp;quot;,&amp;quot;Arabic - Saudi Arabia&amp;quot;,&amp;quot;10241&amp;quot;,&amp;quot;Arabic - Syria&amp;quot;,&amp;quot;7169&amp;quot;,&amp;quot;Arabic - Tunisia&amp;quot;,&amp;quot;9217&amp;quot;,_
	&amp;quot;Arabic - Yemen&amp;quot;,&amp;quot;1067&amp;quot;,&amp;quot;Armenian&amp;quot;,&amp;quot;1068&amp;quot;,&amp;quot;Azeri - Latin&amp;quot;,&amp;quot;2092&amp;quot;,&amp;quot;Azeri - Cyrillic&amp;quot;,&amp;quot;1069&amp;quot;,&amp;quot;Basque&amp;quot;,&amp;quot;1059&amp;quot;,&amp;quot;Belarusian&amp;quot;,&amp;quot;1026&amp;quot;,&amp;quot;Bulgarian&amp;quot;,&amp;quot;1027&amp;quot;,&amp;quot;Catalan&amp;quot;,&amp;quot;2052&amp;quot;,_
	&amp;quot;Chinese - China&amp;quot;,&amp;quot;3076&amp;quot;,&amp;quot;Chinese - Hong Kong S.A.R.&amp;quot;,&amp;quot;5124&amp;quot;,&amp;quot;Chinese - Macau S.A.R&amp;quot;,&amp;quot;4100&amp;quot;,&amp;quot;Chinese - Singapore&amp;quot;,&amp;quot;1028&amp;quot;,&amp;quot;Chinese - Taiwan&amp;quot;,&amp;quot;1050&amp;quot;,&amp;quot;Croatian&amp;quot;,&amp;quot;1029&amp;quot;,_
	&amp;quot;Czech&amp;quot;,&amp;quot;1030&amp;quot;,&amp;quot;Danish&amp;quot;,&amp;quot;1043&amp;quot;,&amp;quot;Dutch - The Netherlands&amp;quot;,&amp;quot;2067&amp;quot;,&amp;quot;Dutch - Belgium&amp;quot;,&amp;quot;3081&amp;quot;,&amp;quot;English - Australia&amp;quot;,&amp;quot;10249&amp;quot;,&amp;quot;English - Belize&amp;quot;,&amp;quot;4105&amp;quot;,&amp;quot;English - Canada&amp;quot;,&amp;quot;9225&amp;quot;,_
	&amp;quot;English - Carribbean&amp;quot;,&amp;quot;6153&amp;quot;,&amp;quot;English - Ireland&amp;quot;,&amp;quot;8201&amp;quot;,&amp;quot;English - Jamaica&amp;quot;,&amp;quot;5129&amp;quot;,&amp;quot;English - New Zealand&amp;quot;,&amp;quot;13321&amp;quot;,&amp;quot;English - Phillippines&amp;quot;,&amp;quot;7177&amp;quot;,_
	&amp;quot;English - South Africa&amp;quot;,&amp;quot;11273&amp;quot;,&amp;quot;English - Trinidad&amp;quot;,&amp;quot;2057&amp;quot;,&amp;quot;English - United Kingdom&amp;quot;,&amp;quot;1033&amp;quot;,&amp;quot;English - United States&amp;quot;,&amp;quot;1061&amp;quot;,&amp;quot;Estonian&amp;quot;,&amp;quot;1065&amp;quot;,&amp;quot;Farsi&amp;quot;,&amp;quot;1035&amp;quot;,_
	&amp;quot;Finnish&amp;quot;,&amp;quot;1080&amp;quot;,&amp;quot;Faroese&amp;quot;,&amp;quot;1036&amp;quot;,&amp;quot;French - France&amp;quot;,&amp;quot;2060&amp;quot;,&amp;quot;French - Belgium&amp;quot;,&amp;quot;3084&amp;quot;,&amp;quot;French - Canada&amp;quot;,&amp;quot;5132&amp;quot;,&amp;quot;French - Luxembourg&amp;quot;,&amp;quot;4108&amp;quot;,&amp;quot;French - Switzerland&amp;quot;,&amp;quot;2108&amp;quot;,_
	&amp;quot;Gaelic - Ireland&amp;quot;,&amp;quot;1084&amp;quot;,&amp;quot;Gaelic - Scotland&amp;quot;,&amp;quot;1031&amp;quot;,&amp;quot;German - Germany&amp;quot;,&amp;quot;3079&amp;quot;,&amp;quot;German - Austria&amp;quot;,&amp;quot;5127&amp;quot;,&amp;quot;German - Liechtenstein&amp;quot;,&amp;quot;4103&amp;quot;,&amp;quot;German - Luxembourg&amp;quot;,&amp;quot;2055&amp;quot;,_
	&amp;quot;German - Switzerland&amp;quot;,&amp;quot;1032&amp;quot;,&amp;quot;Greek&amp;quot;,&amp;quot;1037&amp;quot;,&amp;quot;Hebrew&amp;quot;,&amp;quot;1081&amp;quot;,&amp;quot;Hindi&amp;quot;,&amp;quot;1038&amp;quot;,&amp;quot;Hungarian&amp;quot;,&amp;quot;1039&amp;quot;,&amp;quot;Icelandic&amp;quot;,&amp;quot;1057&amp;quot;,&amp;quot;Indonesian&amp;quot;,&amp;quot;1040&amp;quot;,&amp;quot;Italian - Italy&amp;quot;,&amp;quot;2064&amp;quot;,_
	&amp;quot;Italian - Switzerland&amp;quot;,&amp;quot;1041&amp;quot;,&amp;quot;Japanese&amp;quot;,&amp;quot;1042&amp;quot;,&amp;quot;Korean&amp;quot;,&amp;quot;1062&amp;quot;,&amp;quot;Latvian&amp;quot;,&amp;quot;1063&amp;quot;,&amp;quot;Lithuanian&amp;quot;,&amp;quot;1071&amp;quot;,&amp;quot;FYRO Macedonian&amp;quot;,&amp;quot;1086&amp;quot;,&amp;quot;Malay - Malaysia&amp;quot;,&amp;quot;2110&amp;quot;,_
	&amp;quot;Malay - Brunei&amp;quot;,&amp;quot;1082&amp;quot;,&amp;quot;Maltese&amp;quot;,&amp;quot;1102&amp;quot;,&amp;quot;Marathi&amp;quot;,&amp;quot;1044&amp;quot;,&amp;quot;Norwegian - Bokm-l&amp;quot;,&amp;quot;2068&amp;quot;,&amp;quot;Norwegian - Nynorsk&amp;quot;,&amp;quot;1045&amp;quot;,&amp;quot;Polish&amp;quot;,&amp;quot;2070&amp;quot;,&amp;quot;Portuguese - Portugal&amp;quot;,&amp;quot;1046&amp;quot;,_
	&amp;quot;Portuguese - Brazil&amp;quot;,&amp;quot;1047&amp;quot;,&amp;quot;Raeto-Romance&amp;quot;,&amp;quot;1048&amp;quot;,&amp;quot;Romanian - Romania&amp;quot;,&amp;quot;2072&amp;quot;,&amp;quot;Romanian - Moldova&amp;quot;,&amp;quot;1049&amp;quot;,&amp;quot;Russian&amp;quot;,&amp;quot;2073&amp;quot;,&amp;quot;Russian - Moldova&amp;quot;,&amp;quot;1103&amp;quot;,&amp;quot;Sanskrit&amp;quot;,&amp;quot;3098&amp;quot;,_
	&amp;quot;Serbian - Cyrillic&amp;quot;,&amp;quot;2074&amp;quot;,&amp;quot;Serbian - Latin&amp;quot;,&amp;quot;1074&amp;quot;,&amp;quot;Setsuana&amp;quot;,&amp;quot;1060&amp;quot;,&amp;quot;Slovenian&amp;quot;,&amp;quot;1051&amp;quot;,&amp;quot;Slovak&amp;quot;,&amp;quot;1070&amp;quot;,&amp;quot;Sorbian&amp;quot;,&amp;quot;1034&amp;quot;,&amp;quot;Spanish - Spain&amp;quot;,&amp;quot;11274&amp;quot;,_
	&amp;quot;Spanish - Argentina&amp;quot;,&amp;quot;16394&amp;quot;,&amp;quot;Spanish - Bolivia&amp;quot;,&amp;quot;13322&amp;quot;,&amp;quot;Spanish - Chile&amp;quot;,&amp;quot;9226&amp;quot;,&amp;quot;Spanish - Colombia&amp;quot;,&amp;quot;5130&amp;quot;,&amp;quot;Spanish - Costa Rica&amp;quot;,&amp;quot;7178&amp;quot;,_
	&amp;quot;Spanish - Dominican Republic&amp;quot;,&amp;quot;12298&amp;quot;,&amp;quot;Spanish - Ecuador&amp;quot;,&amp;quot;4106&amp;quot;,&amp;quot;Spanish - Guatemala&amp;quot;,&amp;quot;18442&amp;quot;,&amp;quot;Spanish - Honduras&amp;quot;,&amp;quot;2058&amp;quot;,&amp;quot;Spanish - Mexico&amp;quot;,&amp;quot;19466&amp;quot;,_
	&amp;quot;Spanish - Nicaragua&amp;quot;,&amp;quot;6154&amp;quot;,&amp;quot;Spanish - Panama&amp;quot;,&amp;quot;10250&amp;quot;,&amp;quot;Spanish - Peru&amp;quot;,&amp;quot;20490&amp;quot;,&amp;quot;Spanish - Puerto Rico&amp;quot;,&amp;quot;15370&amp;quot;,&amp;quot;Spanish - Paraguay&amp;quot;,&amp;quot;17418&amp;quot;,&amp;quot;Spanish - El Salvador&amp;quot;,&amp;quot;14346&amp;quot;,_
	&amp;quot;Spanish - Uruguay&amp;quot;,&amp;quot;8202&amp;quot;,&amp;quot;Spanish - Venezuela&amp;quot;,&amp;quot;1072&amp;quot;,&amp;quot;Sutu&amp;quot;,&amp;quot;1089&amp;quot;,&amp;quot;Swahili&amp;quot;,&amp;quot;1053&amp;quot;,&amp;quot;Swedish - Sweden&amp;quot;,&amp;quot;2077&amp;quot;,&amp;quot;Swedish - Finland&amp;quot;,&amp;quot;1097&amp;quot;,&amp;quot;Tamil&amp;quot;,&amp;quot;1092&amp;quot;,&amp;quot;Tatar&amp;quot;,&amp;quot;1054&amp;quot;,_
	&amp;quot;Thai&amp;quot;,&amp;quot;1055&amp;quot;,&amp;quot;Turkish&amp;quot;,&amp;quot;1073&amp;quot;,&amp;quot;Tsonga&amp;quot;,&amp;quot;1058&amp;quot;,&amp;quot;Ukrainian&amp;quot;,&amp;quot;1056&amp;quot;,&amp;quot;Urdu&amp;quot;,&amp;quot;2115&amp;quot;,&amp;quot;Uzbek - Cyrillic&amp;quot;,&amp;quot;1091&amp;quot;,&amp;quot;Uzbek - Latin&amp;quot;,&amp;quot;1066&amp;quot;,&amp;quot;Vietnamese&amp;quot;,&amp;quot;1076&amp;quot;,&amp;quot;Xhosa&amp;quot;,&amp;quot;1085&amp;quot;,&amp;quot;Yiddish&amp;quot;,&amp;quot;1077&amp;quot;,&amp;quot;Zulu&amp;quot;)

	For i = 0 To UBound(arrLangCodes)
		If CStr(arrLangCodes(i)) = CStr(strCode) Then
			&amp;#039;Return the value immediately after the found code
			LocaleCodeToLanguage = arrLangCodes(i+1)
		End If	
	Next
End Function &amp;#039;LocaleCodeToLanguage</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>OS Language</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Language Packs Installed</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>291</cache_row_id>
          </sensor>
          <sensor>
            <id>582</id>
            <name>Number of Fixed Drives</name>
            <hash>590837956</hash>
            <string_count>0</string_count>
            <category>Miscellaneous</category>
            <description>Returns the number of fixed drives installed in the system.
Example:4</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Number of Fixed Drives
&amp;#039;========================================

&amp;#039; This sensor will output the number of fixed disk drives

Option Explicit

WScript.Echo GetNumberOfFixedDrives

Function GetNumberOfFixedDrives
	
	Dim objWMIService, colDiskDrives
	Dim strComputer, objDiskDrive, intDriveCount

	strComputer = &amp;quot;.&amp;quot;
	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
		&amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;) 

	&amp;#039;SlotDesignation is like &amp;quot;PCI-I&amp;quot; and CurrentUsage=4 means occupied
	Set colDiskDrives = objWMIService.ExecQuery _ 
		(&amp;quot;Select MediaType from Win32_DiskDrive&amp;quot;) 
	If Not IsNull(colDiskDrives) Then
		intDriveCount = 0
		For Each objDiskDrive In colDiskDrives	
			If InStr(LCase(objDiskDrive.MediaType), &amp;quot;fixed&amp;quot; ) &amp;gt; 0 Then	
				intDriveCount = intDriveCount + 1
			End If
		Next
		GetNumberOfFixedDrives = intDriveCount
	Else
		GetNumberOfFixedDrives = &amp;quot;WMI Error&amp;quot;
	End If
	
	&amp;#039;Cleanup
	Set colDiskDrives = Nothing
	Set objWMIService = Nothing
End Function &amp;#039;GetNumberOfFixedDrives</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>NumericInteger</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>292</cache_row_id>
          </sensor>
          <sensor>
            <id>584</id>
            <name>CPU by Process</name>
            <hash>600562575</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>A multi-column sensor that lists every running process and the amount of CPU usage they are taking up.
Example: svchost | 15</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; CPU by Process
&amp;#039;========================================

&amp;#039; a multi-column sensor whose output looks like:
&amp;#039; Process Name | Percentage

Option Explicit

Dim objWMIService,colItems
Dim objItem,strSep,strName,intPoundPos

Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfFormattedData_PerfProc_Process&amp;quot;,,48)

strSep = &amp;quot;|&amp;quot;

For Each objItem in colItems

	strName = LCase(objItem.Name)
	intPoundPos = InStr(strName,&amp;quot;#&amp;quot;)
	If intPoundPos &amp;gt; 0 Then
		&amp;#039; if it&amp;#039;s a duplicate process, the name may put a #x after it
		&amp;#039; as in 
		&amp;#039; chome#9
		&amp;#039; Remove everything after a #
		strName = Left(strName,intPoundPos - 1)
	End If
	&amp;#039; ignore _Total Entry or Idle Entry
	If Not (strName = &amp;quot;_total&amp;quot; Or strName = &amp;quot;idle&amp;quot; Or strName = &amp;quot;taniumclient&amp;quot;)  Then
		WScript.Echo strName &amp;amp; strSep &amp;amp; objItem.PercentProcessorTime
	End If
Next

&amp;#039;Cleanup
Set objWMIService = Nothing
Set colItems = Nothing</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

ps -e -o pmem,comm | tail -n +2 | while read line
do
        pct=`echo &amp;quot;$line&amp;quot; | awk &amp;#039;{print $1}&amp;#039;`
        name=`echo &amp;quot;$line&amp;quot; | awk &amp;#039;{print substr($0,length($1)+2)}&amp;#039; `
        echo &amp;quot;$name|$pct&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

ps -e -o pmem,comm | tail -n +2 | while read line
do
        pct=`echo &amp;quot;$line&amp;quot; | awk &amp;#039;{print $1}&amp;#039;`
        name=`echo &amp;quot;$line&amp;quot; | awk &amp;#039;{print substr($0,length($1)+2)}&amp;#039; `
        echo &amp;quot;$name|$pct&amp;quot;
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
# Get list of running process and CPU %
myzone=$(zonename)
if [ -z &amp;quot;$myzone&amp;quot; ]; then
  PSCMD=&amp;quot;ps -eo pcpu,comm&amp;quot;
else
  PSCMD=&amp;quot;ps -z $myzone -o pcpu,comm&amp;quot;
fi

P=$($PSCMD)

/usr/bin/printf %s &amp;quot;$P&amp;quot; | while IFS= read -r line
do
   PCNT=$(echo $line | cut -d &amp;#039; &amp;#039; -f1)
   PNME=$(echo $line | cut -d &amp;#039; &amp;#039; -f2)
   #echo &amp;quot;$line&amp;quot;
   if [ &amp;quot;$PCNT&amp;quot; != &amp;quot;%CPU&amp;quot; ]; then
     echo &amp;quot;$PNME|$PCNT&amp;quot;
   fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# Get list of running process and CPU %
P=$(ps -eo pcpu,comm)

/usr/bin/printf %s &amp;quot;$P&amp;quot; | while IFS= read -r line
do
   PCNT=$(echo $line | cut -d &amp;#039; &amp;#039; -f1)
   PNME=$(echo $line | cut -d &amp;#039; &amp;#039; -f2)
   if [ &amp;quot;$PCNT&amp;quot; != &amp;quot;%CPU&amp;quot; ]; then
     echo &amp;quot;$PNME|$PCNT&amp;quot;
   fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Name</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>CPU %</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>293</cache_row_id>
          </sensor>
          <sensor>
            <id>586</id>
            <name>Open Port</name>
            <hash>601571508</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>Returns the ports which are listening on a local machine and the IP address the port is bound to.  0.0.0.0 indicates that the port is bound to all IP addresses.
Example: 0.0.0.0:80</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Open Port
&amp;#039;========================================

port = &amp;quot;*&amp;quot;

If port = &amp;quot;*&amp;quot; Then
   strcommand = &amp;quot;cmd /c netstat -an | find &amp;quot; &amp;amp; chr(34) &amp;amp; &amp;quot;LISTENING&amp;quot; &amp;amp; Chr(34)
Else 
   strcommand = &amp;quot;cmd /c netstat -an | find &amp;quot; &amp;amp; chr(34) &amp;amp; &amp;quot;LISTENING&amp;quot; &amp;amp; Chr(34) &amp;amp; _
        &amp;quot;| find &amp;quot; &amp;amp; chr(34) &amp;amp; &amp;quot;:&amp;quot; &amp;amp; port &amp;amp; &amp;quot; &amp;quot; &amp;amp; Chr(34)
End If

Dim bHasOutput : bHasOutput = False

Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
Set objScriptExec = objShell.Exec (strCommand)
strPingResults = LCase(objScriptExec.StdOut.ReadAll)

results = Split(strPingResults, vbCrLf)
for Each line in results
    &amp;#039;WScript.Echo &amp;quot;parsing line: &amp;quot; &amp;amp; line
    
    line = cleanWhitespace(Trim(line))
    
    lineResults = Split(line)
    i = 0
    For Each word In lineResults
    &amp;#039;   WScript.Echo &amp;quot;    word &amp;quot;&amp;amp;i&amp;amp; &amp;quot;: &amp;quot; &amp;amp; word
       If i = 1 Then
          WScript.Echo word
          bHasOutput = True
       End If
       i = i + 1
    Next
next

If Not bHasOutput Then
	If GetLocale() &amp;lt;&amp;gt; 1033 Then
		WScript.Echo &amp;quot;English Language OS Required&amp;quot;
	End If
End If

&amp;#039;if len (strPingResults) &amp;gt; 0 then
&amp;#039; WScript.Echo strPingResults
&amp;#039;WScript.Echo &amp;quot;results: &amp;quot; &amp;amp; strPingResults
&amp;#039;End If

Function cleanWhitespace(strStarter)
   intStarter = Len(strStarter)
   For i = intStarter to 2 Step -1
       strChars = Space(i)
       strStarter = Replace(strStarter, strChars, &amp;quot; &amp;quot;)
   Next
   cleanWhitespace = strStarter
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
netstat -tulpn | grep &amp;quot;LISTEN&amp;quot; | grep &amp;quot;0.0.0.0&amp;quot; | grep &amp;quot;tcp&amp;quot; |while read line
do
 set -- $line
	echo $4
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
netstat -a | grep tcp4 | grep LISTEN |while read line
do
 set -- $line
	echo $4
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
# Get Open Ports
netstat -an -P tcp | grep LISTEN | grep &amp;#039;*&amp;#039; | awk &amp;#039;{ print $1 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
netstat -na |grep LISTEN | awk &amp;#039;{ print $4 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>294</cache_row_id>
          </sensor>
          <sensor>
            <id>588</id>
            <name>Logical Volumes</name>
            <hash>617084407</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>Display Logical Volume Names</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039; THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
&amp;#039; 
&amp;#039; 

WScript.Echo &amp;quot;N/A on Windows&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
# get LVM Logical volumes
/usr/sbin/lvdisplay 2&amp;gt; /dev/null | grep &amp;quot;LV Name&amp;quot; | awk &amp;#039;{ print $3 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
# get VG physical volumes
lsvg</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>295</cache_row_id>
          </sensor>
          <sensor>
            <id>590</id>
            <name>File Size</name>
            <hash>63201224</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>Returns the size of the file specified by the parameter.
Example: 69120</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; File Size
&amp;#039;========================================

Dim filesys, filename, file, createdate 

filename = unescape(&amp;quot;||filename||&amp;quot;)

filename = FixFileSystemRedirectionForPath(filename)

Set filesys = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

If filesys.FileExists(filename) Then
   Set file = filesys.GetFile(filename)
   WScript.Echo file.Size   
Else
   WScript.Echo &amp;quot;File &amp;quot; &amp;amp; filename &amp;amp; &amp;quot; not found.&amp;quot;
End If


Function FixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.
    
    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFilePath = LCase(strFilePath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)
    
    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFilePath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFilePath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFilePath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFilePath
    
    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will undo the changes made to a path by the 
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location
    
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    
    strFilePath = LCase(strFilePath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
    
    UnFixFileSystemRedirectionForPath = Replace(strFilePath,strNewSystem32Location,strSystem32Location)
    
    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
urldecode() 
 {
   # decode everything between 0x20-0x7E except:
   #0 1 2 3 4 5 6 7 8 9 (0x30-0x39)
   #A B C D E F G H I J K L M N O P Q R S T U V W X Y Z (0x41-0x5A)
   #a b c d e f g h i j k l m n o p q r s t u v w x y z (0x61-0x7A)
   echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/%20/ /g&amp;#039; \
   -e &amp;#039;s/%21/!/g;s/%22/&amp;quot;/g;s/%23/#/g;s/%24/$/g;s/%25/%/g;s/%26/\&amp;amp;/g&amp;#039; \
   -e &amp;#039;s/%28/(/g;s/%29/)/g;s/%2[aA]/*/g;s/%2[bB]/+/g;s/%2[cC]/,/g&amp;#039; \
   -e &amp;#039;s/%2[dD]/-/g;s/%2[eE]/./g;s#%2[fF]#/#g;s/%3[aA]/:/g;s/%3[bB]/;/g;s/%3[cC]/&amp;lt;/g&amp;#039; \
   -e &amp;#039;s/%3[dD]/=/g;s/%3[eE]/&amp;gt;/g;s/%3[fF]/?/g;s/%40/@/g;s/%5[bB]/[/g&amp;#039; \
   -e &amp;#039;s/%5[cC]/\\/g;s/%5[dD]/]/g;s/%5[eE]/^/g;s/%5[fF]/_/g;s/%60/`/g&amp;#039; \
   -e &amp;#039;s/%7[bB]/{/g;s/%7[cC]/|/g;s/%7[dD]/}/g;s/%7[eE]/-/g&amp;#039; \
   -e &amp;quot;s/%27/&amp;#039;/g&amp;quot;
 }

filename=$(urldecode &amp;quot;||filename||&amp;quot;)
filename=$(echo &amp;quot;$filename&amp;quot; | sed &amp;#039;s/ /\ /g&amp;#039;)

if [ ! -r &amp;quot;$filename&amp;quot; ]
then
        echo &amp;quot;File $filename does not exist&amp;quot;
else
        stat -c &amp;quot;%s&amp;quot; &amp;quot;$filename&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

urldecode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/\+/ /g&amp;#039; -e &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

filename=$(urldecode &amp;quot;||filename||&amp;quot;)
filename=$(echo &amp;quot;$filename&amp;quot; | sed &amp;#039;s/ /\ /g&amp;#039;)

if [ ! -r &amp;quot;$filename ]
then
	echo File $filename does not exist
else
	stat -f &amp;quot;%z&amp;quot; &amp;quot;$filename&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
# solaris 10 doesn&amp;#039;t have stat

urldecode() 
 {
   # decode everything between 0x20-0x7E except:
   #0 1 2 3 4 5 6 7 8 9 (0x30-0x39)
   #A B C D E F G H I J K L M N O P Q R S T U V W X Y Z (0x41-0x5A)
   #a b c d e f g h i j k l m n o p q r s t u v w x y z (0x61-0x7A)
   echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/%20/ /g&amp;#039; \
   -e &amp;#039;s/%21/!/g;s/%22/&amp;quot;/g;s/%23/#/g;s/%24/$/g;s/%25/%/g;s/%26/\&amp;amp;/g&amp;#039; \
   -e &amp;#039;s/%28/(/g;s/%29/)/g;s/%2[aA]/*/g;s/%2[bB]/+/g;s/%2[cC]/,/g&amp;#039; \
   -e &amp;#039;s/%2[dD]/-/g;s/%2[eE]/./g;s#%2[fF]#/#g;s/%3[aA]/:/g;s/%3[bB]/;/g;s/%3[cC]/&amp;lt;/g&amp;#039; \
   -e &amp;#039;s/%3[dD]/=/g;s/%3[eE]/&amp;gt;/g;s/%3[fF]/?/g;s/%40/@/g;s/%5[bB]/[/g&amp;#039; \
   -e &amp;#039;s/%5[cC]/\\/g;s/%5[dD]/]/g;s/%5[eE]/^/g;s/%5[fF]/_/g;s/%60/`/g&amp;#039; \
   -e &amp;#039;s/%7[bB]/{/g;s/%7[cC]/|/g;s/%7[dD]/}/g;s/%7[eE]/-/g&amp;#039; \
   -e &amp;quot;s/%27/&amp;#039;/g&amp;quot; 
 }

filename=$(urldecode &amp;quot;||filename||&amp;quot;)
filename=$(echo &amp;quot;$filename&amp;quot; | sed &amp;#039;s/ /\ /g&amp;#039;)

if [ ! -r &amp;quot;$filename&amp;quot; ]
then
        echo &amp;quot;File $filename does not exist&amp;quot;
else
        ls -l &amp;quot;$filename&amp;quot; | awk &amp;#039;{ print $5 }&amp;#039;
        #stat -c &amp;quot;%s&amp;quot; &amp;quot;$filename&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
urldecode() 
 {
   # decode everything between 0x20-0x7E except:
   #0 1 2 3 4 5 6 7 8 9 (0x30-0x39)
   #A B C D E F G H I J K L M N O P Q R S T U V W X Y Z (0x41-0x5A)
   #a b c d e f g h i j k l m n o p q r s t u v w x y z (0x61-0x7A)
   echo &amp;quot;$1&amp;quot; | sed -e &amp;#039;s/%20/ /g&amp;#039; \
   -e &amp;#039;s/%21/!/g;s/%22/&amp;quot;/g;s/%23/#/g;s/%24/$/g;s/%25/%/g;s/%26/\&amp;amp;/g&amp;#039; \
   -e &amp;#039;s/%28/(/g;s/%29/)/g;s/%2[aA]/*/g;s/%2[bB]/+/g;s/%2[cC]/,/g&amp;#039; \
   -e &amp;#039;s/%2[dD]/-/g;s/%2[eE]/./g;s#%2[fF]#/#g;s/%3[aA]/:/g;s/%3[bB]/;/g;s/%3[cC]/&amp;lt;/g&amp;#039; \
   -e &amp;#039;s/%3[dD]/=/g;s/%3[eE]/&amp;gt;/g;s/%3[fF]/?/g;s/%40/@/g;s/%5[bB]/[/g&amp;#039; \
   -e &amp;#039;s/%5[cC]/\\/g;s/%5[dD]/]/g;s/%5[eE]/^/g;s/%5[fF]/_/g;s/%60/`/g&amp;#039; \
   -e &amp;#039;s/%7[bB]/{/g;s/%7[cC]/|/g;s/%7[dD]/}/g;s/%7[eE]/-/g&amp;#039; \
   -e &amp;quot;s/%27/&amp;#039;/g&amp;quot;
 }

filename=$(urldecode &amp;quot;||filename||&amp;quot;)
filename=$(echo &amp;quot;$filename&amp;quot; | sed &amp;#039;s/ /\ /g&amp;#039;)

if [ ! -r &amp;quot;$filename&amp;quot; ]; then
  echo &amp;quot;File $filename does not exist&amp;quot;
else
  ls -l &amp;quot;$filename&amp;quot; | awk &amp;#039;{ print $5 }&amp;#039;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"File name to search for","helpString":"Enter the full drive letter, folder path and file name of the file.","defaultValue":"","promptText":"e.g. c:\\windows\\test.txt","maxChars":0,"key":"filename","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>296</cache_row_id>
          </sensor>
          <sensor>
            <id>592</id>
            <name>Folder Size</name>
            <hash>632662206</hash>
            <string_count>0</string_count>
            <category>File System</category>
            <description>Folder size (in GB, MB, KB, or B)
Example: 62 GB</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Size
&amp;#039;========================================

&amp;#039; TAG: REDIRECTION

Dim strFolder
strFolder = unescape(&amp;quot;||strFolder||&amp;quot;)

strFolder = FixFileSystemRedirectionForPath(strFolder)

Dim intRound
intRound = 0

Dim fso
Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

Dim objFolder

If fso.FolderExists(strFolder) Then
	intSize = GetFolderSize(strFolder)
	
	intKB = 1024
	intMB = 1024*1024
	intGB = 1024*1024*1024
	
	If intSize &amp;gt; intGB Then
		WScript.Echo Int(intSize / intGB) &amp;amp; &amp;quot; GB&amp;quot;
	ElseIf intSize &amp;gt; intMB Then
		WScript.Echo Int(intSize / intMB) &amp;amp; &amp;quot; MB&amp;quot;
	ElseIf intSize &amp;gt; intKB Then
		WScript.Echo Int(intSize / intKB) &amp;amp; &amp;quot; KB&amp;quot;
	Else
		WScript.Echo intSize &amp;amp; &amp;quot; B&amp;quot;
	End If
Else
	WScript.Echo &amp;quot;Folder not found&amp;quot;
End If

Function GetFolderSize(folderName)
	&amp;#039; Some directories have files which are never accessible.  
	&amp;#039; This allows retrieving the values for those type of directories
    On Error Resume Next

    Dim fso, folder, subfolder, size, hasSubfolders

	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    size = 0
    hasSubfolders = False

    Set folder = fso.GetFolder(folderName)
    &amp;#039; Try the non-recursive way first (potentially faster?)
    Err.Clear
    size = folder.Size
    If Err.Number &amp;lt;&amp;gt; 0 then     &amp;#039; Did not work; do recursive way:
        For Each subfolder in folder.SubFolders
            size = size + getFolderSize(subfolder.Path)
            hasSubfolders = True
        Next

        If not hasSubfolders then
            size = folder.Size
        End If
    End If

	On Error Goto 0
    GetFolderSize = size
End Function

Function FixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.
    
    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFilePath = LCase(strFilePath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)
    
    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFilePath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFilePath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFilePath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFilePath
    
    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFilePath)
&amp;#039; This function will undo the changes made to a path by the 
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location
    
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    
    strFilePath = LCase(strFilePath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
    
    UnFixFileSystemRedirectionForPath = Replace(strFilePath,strNewSystem32Location,strSystem32Location)
    
    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strFolder&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Program Files\\MyApp&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strFolder||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strFolder&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Program Files\\MyApp&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strFolder||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strFolder&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Program Files\\MyApp&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strFolder||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;strFolder&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Program Files\\MyApp&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||strFolder||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder","defaultValue":"","promptText":"e.g. c:\\Program Files\\MyApp","maxChars":0,"key":"strFolder","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>297</cache_row_id>
          </sensor>
          <sensor>
            <id>594</id>
            <name>Application Run Time</name>
            <hash>664237249</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Shows applications that are currently running and how long they have been running for.
Example: Dropbox - 3 days</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Application Run Time
&amp;#039;========================================

&amp;#039;On Error Resume Next
strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select Name, ExecutablePath, CreationDate from Win32_Process&amp;quot;,,48)

&amp;#039;Uses date math - set locale

SetLocale(1033)

Dim nameDictionary, processDictionary
Set nameDictionary = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
Set processDictionary = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)

&amp;#039;ADD PROCESS NAME IN LOWER CASE
nameDictionary.Add &amp;quot;hppusg.exe&amp;quot;, &amp;quot;Some HP Application&amp;quot;
nameDictionary.Add &amp;quot;taniumclient.exe&amp;quot;, &amp;quot;TANIUM CLIENT&amp;quot;

&amp;#039;array used to print output (no dictionary since we need duplicates)
Dim arrOutput()
intSize = 0
ReDim Preserve arrOutput(intSize)

strComputer = &amp;quot;.&amp;quot;
Const HKLM = &amp;amp;h80000002
Set reg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\default:StdRegProv&amp;quot;)

regPath = GetTaniumRegistryPath() &amp;amp; &amp;quot;\Sensor Data\Applications&amp;quot;
If Not RegKeyExists(reg, HKLM, regPath) Then
	reg.createKey HKLM, regPath
End If

For Each objItem in colItems
	If InStr(LCase(objItem.ExecutablePath), &amp;quot;windows\system32\&amp;quot;) = 0 Then
	    Dim fso
	    Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	    If fso.FileExists(objItem.ExecutablePath) Then
    		Dim strOutput, fullName

	    	Set execFile = fso.GetFile(objItem.ExecutablePath)
	    	
   			fullName = nameDictionary.Item(LCase(objItem.Name))

			If IsEmpty(fullName) Then
	    		fullName = GetProcName(objItem.Name, reg, HKLM, regPath)
    		End If
    					
    		If fullName = &amp;quot;&amp;quot; Then
    			fullName = objItem.Name
    		End If

&amp;#039;			If InStr(LCase(fullName), LCase(appName)) &amp;gt; 0 Then
			lastStart = GetLastStart(objItem.Name, reg, HKLM, regPath)
			If lastStart &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then				
	   			strOutput = fullName &amp;amp; &amp;quot; - &amp;quot; &amp;amp; GetDaysOld(lastStart)
	   		Else
	   			strOutput = fullName &amp;amp; &amp;quot; - Launch date unknown&amp;quot;	
			End If

 			If not ArrayContains(arrOutput, strOutput) Then
				arrOutput(intSize) = strOutput
				intSize = intSize + 1
				ReDim Preserve arrOutput(intSize)
			End If
	    End If
	End If
Next

For Each output In arrOutput 
	If Not IsEmpty(output) Then
		WScript.Echo output
	End If
Next

Function GetLastStart(strProc, objReg, hive, baseRegKey) 
	words = Split(strProc, &amp;quot;.&amp;quot;)	
	regKey = baseRegKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; words(0)
	If RegKeyExists(objReg, hive, regKey) Then
		objReg.GetStringValue hive, regKey, &amp;quot;Last Start&amp;quot;, GetLastStart
	End If
End Function

Function GetProcName(strProc, objReg, hive, baseRegKey) 
	words = Split(strProc, &amp;quot;.&amp;quot;)	
	regKey = baseRegKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; words(0)
	If RegKeyExists(objReg, hive, regKey) Then
		objReg.GetStringValue hive, regKey, &amp;quot;Description&amp;quot;, GetProcName
	End If
End Function

Function ArrayContains(arr, str)
	For Each obj In arr 
		If obj = str Then
			ArrayContains = True
			Exit Function
		End If
	Next
	ArrayContains = False
End Function

&amp;#039;date format is MM/DD/YYYY
function GetDaysOld(strDate)
	patternDate = CDate( strDate )
	today = CDate( Month(Now) &amp;amp; &amp;quot;/&amp;quot; &amp;amp; Day(Now) &amp;amp; &amp;quot;/&amp;quot; &amp;amp; Year(Now))
	days = DateDiff(&amp;quot;d&amp;quot;, patternDate, today)
	
	If days = 1 Then
		GetDaysOld = &amp;quot;1 day&amp;quot;
	Else 
		GetDaysOld = days &amp;amp; &amp;quot; days&amp;quot;
	End If
End Function

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
for ps in `ps -eo comm,etime | awk &amp;#039;{ print $1&amp;quot;_&amp;quot;$2 &amp;#039;}`
do
   p=$(basename &amp;quot;$ps&amp;quot; | awk -F_ &amp;#039;{ print $1 &amp;#039;})
   e=$(echo &amp;quot;$ps&amp;quot; | awk -F_ &amp;#039;{ print $2 &amp;#039;})
   days=$(echo &amp;quot;$e&amp;quot; | awk -F\- &amp;#039;{ print $1 }&amp;#039;)
   hours=$(echo &amp;quot;$e&amp;quot; | awk -F\- &amp;#039;{ print $2 }&amp;#039;)
   if [ -z &amp;quot;$hours&amp;quot; ]; then
     hours=$days
     days=&amp;quot;&amp;quot;
   else
     days=&amp;quot;$days days&amp;quot;
   fi
   echo &amp;quot;$p - $days $hours&amp;quot; | sed s/\ \ /\ /g
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/usr/xpg4/bin/sh
myzone=$(zonename)
if [ -z &amp;quot;$myzone&amp;quot; ]; then
  PSCMD=&amp;quot;ps -eo comm,etime&amp;quot;
else
  PSCMD=&amp;quot;ps -z $myzone -o comm,etime&amp;quot;
fi

for ps in `$PSCMD | awk &amp;#039;{ print $1&amp;quot;_&amp;quot;$2 &amp;#039;}`
do
   p=$(basename &amp;quot;$ps&amp;quot; | awk -F_ &amp;#039;{ print $1 &amp;#039;})
   e=$(echo &amp;quot;$ps&amp;quot; | awk -F_ &amp;#039;{ print $2 &amp;#039;})
   days=$(echo &amp;quot;$e&amp;quot; | awk -F\- &amp;#039;{ print $1 }&amp;#039;)
   hours=$(echo &amp;quot;$e&amp;quot; | awk -F\- &amp;#039;{ print $2 }&amp;#039;)
   if [ -z &amp;quot;$hours&amp;quot; ]; then
     hours=$days
     days=&amp;quot;&amp;quot;
   else
     days=&amp;quot;$days days&amp;quot;
   fi
   echo &amp;quot;$p - $days $hours&amp;quot; | sed s/\ \ /\ /g
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
for ps in `ps -eo comm,etime | awk &amp;#039;{ print $1&amp;quot;_&amp;quot;$2 &amp;#039;}`
do
   p=$(basename &amp;quot;$ps&amp;quot; | awk -F_ &amp;#039;{ print $1 &amp;#039;})
   e=$(echo &amp;quot;$ps&amp;quot; | awk -F_ &amp;#039;{ print $2 &amp;#039;})
   days=$(echo &amp;quot;$e&amp;quot; | awk -F\- &amp;#039;{ print $1 }&amp;#039;)
   hours=$(echo &amp;quot;$e&amp;quot; | awk -F\- &amp;#039;{ print $2 }&amp;#039;)
   if [ -z &amp;quot;$hours&amp;quot; ]; then
     hours=$days
     days=&amp;quot;&amp;quot;
   else
     days=&amp;quot;$days days&amp;quot;
   fi
   echo &amp;quot;$p - $days $hours&amp;quot; | sed s/\ \ /\ /g
done</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>298</cache_row_id>
          </sensor>
          <sensor>
            <id>596</id>
            <name>Installed RPMs</name>
            <hash>676468157</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Returns a list of installed RPMs by name on Linux systems.
Example: glibc-2.5-12</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
if ! which rpm &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
then
	echo rpm command not found
else
	rpm -qa
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
rpm -qa</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>299</cache_row_id>
          </sensor>
          <sensor>
            <id>598</id>
            <name>Target</name>
            <hash>740857544</hash>
            <string_count>0</string_count>
            <category>Miscellaneous</category>
            <description>Simple sensor that returns the word "Target" that is used when targeting actions within Tanium.
Example: Target</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Target
&amp;#039;========================================

WScript.Echo &amp;quot;Target&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>300</cache_row_id>
          </sensor>
          <sensor>
            <id>600</id>
            <name>Cached AD Logins</name>
            <hash>745447734</hash>
            <string_count>0</string_count>
            <category>Active Directory</category>
            <description>Returns information on AD accounts which are logged in using cached credentials.
Example:john.doe Cached - RDP</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Cached AD Logins
&amp;#039;========================================
&amp;#039; This sensor will enumerate the Usernames of all accounts which are
&amp;#039; cached

Option Explicit

Dim strSep : strSep = &amp;quot;|&amp;quot;
&amp;#039; This is a multi-column sensor whose output looks like
&amp;#039; Username|Type
&amp;#039; Where account type is Cached - Interactive or Cached - RDP

ListCachedAccounts

Function ListCachedAccounts

	Dim objWMI, colSessions, colProcesses, objProcess
	Dim objSession, colList, objItem, colOwner, strProcessOwner
	Dim strAccountType, dictProcessOwners, strOwnerUser, strOwnerDomain
	Dim bDisplay, objReg
	
	Set objWMI = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
	              &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;) 
	Set objReg = GetObject(&amp;quot;winmgmts:\\.\root\default:StdRegProv&amp;quot;)              
	
	&amp;#039; Get owner information for running processes to filter out stale user results
	&amp;#039; because Win32_LogonSession can have days old logins in there.
	
	&amp;#039; store in dictionary object
	Set dictProcessOwners = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
	
	Set colProcesses = objWMI.ExecQuery(&amp;quot;Select * from Win32_Process&amp;quot;,,48)
	On Error Resume Next &amp;#039; some processes may not have owner and domain properties
	For Each objProcess in colProcesses
		colOwner = objProcess.GetOwner(strOwnerUser,strOwnerDomain)
			
		If Not dictProcessOwners.Exists(strOwnerDomain&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strOwnerUser) Then
			dictProcessOwners.Add strOwnerDomain&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strOwnerUser,1 &amp;#039; for uniqueness
		End If
	Next
	On Error Goto 0 &amp;#039;back to normal
	

	Set colSessions = objWMI.ExecQuery(&amp;quot;Select * from Win32_LogonSession&amp;quot;) 
		
	If colSessions.Count = 0 Then 
		&amp;#039; Do Nothing
	Else 
	   For Each objSession in colSessions
	     Set colList = objWMI.ExecQuery(&amp;quot;Associators of &amp;quot; _ 
	         &amp;amp; &amp;quot;{Win32_LogonSession.LogonId=&amp;#039;&amp;quot; &amp;amp; objSession.LogonId &amp;amp; &amp;quot;&amp;#039;} &amp;quot; _ 
	         &amp;amp; &amp;quot;Where AssocClass=Win32_LoggedOnUser Role=Dependent&amp;quot; ) 
	     For Each objItem in colList
	     	Select Case objSession.LogonType
	     		Case 11
	     			strAccountType = &amp;quot;:Cached: :Interactive:&amp;quot;
	     			bDisplay = True
	     		Case 12
	     			strAccountType = &amp;quot;:Cached: :RDP:&amp;quot;
	     			bDisplay = True	     			
	     		Case Else
	     		&amp;#039; There are more cases that we shouldn&amp;#039;t really see
	     			strAccountType = objSession.LogonType
	     	End Select
	     	
 			For Each strProcessOwner In dictProcessOwners.Keys
	      		If bDisplay And InStr(LCase(objItem.Caption),LCase(Split(strProcessOwner,&amp;quot;\&amp;quot;)(0))) &amp;gt; 0 And InStr(LCase(objItem.Caption),LCase(Split(strProcessOwner,&amp;quot;\&amp;quot;)(1))) &amp;gt; 0 Then
		       		WScript.Echo GetUserForSIDLocal(objReg,objItem.SID) &amp;amp; strSep &amp;amp; strAccountType
		       		Exit For
		       	End If
		   bDisplay = False
		   Next
	     	
	     Next
	  Next
	End If
		     	
End Function &amp;#039;ListCachedAccounts


Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		strUserData = Left(strUserData,intDatPos - 1)
		&amp;#039; find last backslash
		intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
		&amp;#039; get right from that pos
		strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
		GetUserForSIDLocal = strUserData
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>User</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Type</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>301</cache_row_id>
          </sensor>
          <sensor>
            <id>602</id>
            <name>Windows OS Type</name>
            <hash>74624344</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Will output "Windows Server" or "Windows Workstation" depending on the OS type.
Example: Windows Server</description>
            <creation_time>2015-09-14T13:39:12</creation_time>
            <modification_time>2015-09-14T13:39:12</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Windows OS Type
&amp;#039;========================================

Option Explicit

Select Case (LCase(GetProductType))
	&amp;#039; Workstations will always output WinNT
	Case &amp;quot;winnt&amp;quot;
		WScript.Echo &amp;quot;Windows Workstation&amp;quot;
	Case &amp;quot;servernt&amp;quot;
		WScript.Echo &amp;quot;Windows Server&amp;quot;
	Case &amp;quot;lanmannt&amp;quot;
		WScript.Echo &amp;quot;Windows Server&amp;quot;		
	Case Else
		WScript.Echo &amp;quot;Error: Cannot determine OS type&amp;quot;
End Select
	
Function GetProductType

	Dim objShell
	Dim keyPath, strPath, strFoundPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyPath = &amp;quot;SYSTEM\CurrentControlSet\Control\ProductOptions&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyPath&amp;amp;&amp;quot;\ProductType&amp;quot;)
    On Error Goto 0
	strFoundPath = strPath
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		GetProductType = strFoundPath
  	Else
  		GetProductType = False
  		WScript.Echo &amp;quot;Error: Cannot determine OS type&amp;quot;
  		WScript.Quit
  	End If
End Function &amp;#039;GetProductType</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
echo Non-Windows</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
echo Non-Windows</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>302</cache_row_id>
          </sensor>
          <sensor>
            <id>604</id>
            <name>System Slots In Use</name>
            <hash>747106243</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the number of used slots in the system on Windows client machines.
Example: 1</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; System Slots in Use
&amp;#039;========================================

&amp;#039; This sensor will return the number of slots in use

Option Explicit

WScript.Echo GetSystemSlotsInUse

Function GetSystemSlotsInUse
	
	Dim objWMIService, colSystemSlots
	Dim strComputer, objSystemSlots

	strComputer = &amp;quot;.&amp;quot;
	Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
		&amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;) 

	&amp;#039;SlotDesignation is like &amp;quot;PCI-I&amp;quot; and CurrentUsage=4 means occupied
	Set colSystemSlots = objWMIService.ExecQuery _ 
		(&amp;quot;Select SlotDesignation from Win32_SystemSlot where CurrentUsage=4&amp;quot;) 
	If Not IsNull(colSystemSlots) Then
		GetSystemSlotsInUse = colSystemSlots.Count
	Else
		GetSystemSlotsInUse = &amp;quot;WMI Error&amp;quot;
	End If
	
	&amp;#039;Cleanup
	Set colSystemSlots = Nothing
	Set objWMIService = Nothing
End Function &amp;#039;GetSystemSlotsInUse</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>NumericInteger</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>303</cache_row_id>
          </sensor>
          <sensor>
            <id>606</id>
            <name>RAM Max Capacity</name>
            <hash>782305667</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the size of the maximum amount of RAM a machine can carry.
Example: 8 GB</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; RAM Max Capacity
&amp;#039;========================================

&amp;#039; This sensor will pull the maximum amount of RAM a machine can carry via WMI

Option Explicit
Dim objWMIService, colItems, objItem
Dim strWMIQuery, strItem, strComputer, cap

If Left(GetOSMajorVersion(), 1) = &amp;quot;5&amp;quot; Then 
	&amp;#039; This function does not work on Windows XP or 2003, return Not Available
	WScript.Echo &amp;quot;Not Available&amp;quot;
	WScript.Quit
End If

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
	&amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)

&amp;#039; 3 is system memory (not video or flash mem)
strWMIQuery = &amp;quot;Select MaxCapacity from Win32_PhysicalMemoryArray where Use=&amp;#039;3&amp;#039;&amp;quot;

Set colItems = objWMIService.ExecQuery(strWMIQuery)
cap = 0
For Each objItem In colItems
	cap = CDbl(objItem.MaxCapacity)
	If cap &amp;gt; 0 Then
		WScript.Echo PrettyFileSize(cap * 1024)
	Else
		WScript.Echo &amp;quot;Error / Unknown&amp;quot;
	End If
Next

Function PrettyFileSize(strBytes)

	Dim size,intKB,intMB,intGB
	
	If IsNumeric(strBytes) Then
		size = CDbl(strBytes)
		
		intKB = 1024
		intMB = 1024*1024
		intGB = 1024*1024*1024
	
		If size &amp;gt; intGB Then
			PrettyFileSize = Int(size / intGB) &amp;amp; &amp;quot; GB&amp;quot;
		ElseIf size &amp;gt; intMB Then
			PrettyFileSize = Int(size / intMB) &amp;amp; &amp;quot; MB&amp;quot;
		ElseIf size &amp;gt; intKB Then
			PrettyFileSize = Int(size / intKB) &amp;amp; &amp;quot; KB&amp;quot;
		Else
			PrettyFileSize = size &amp;amp; &amp;quot; B&amp;quot;
		End If
	Else
		PrettyFileSize = &amp;quot;Error / Unknown&amp;quot;
	End If

End Function &amp;#039;PrettyFileSize

Function GetOSMajorVersion
&amp;#039; Returns the OS Major Version
&amp;#039; A different way to examine the OS instead of by name

	Dim objWMIService,colItems,objItem
	Dim strVersion

	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;select Version from win32_operatingsystem&amp;quot;)    
	For Each objItem In colItems
		strVersion = objItem.Version &amp;#039; like 6.2.9200
		strVersion = Left(strVersion,Len(strVersion) - 5)
	Next
	
	GetOSMajorVersion = strVersion
	
End Function &amp;#039;GetOSMajorVersion</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>304</cache_row_id>
          </sensor>
          <sensor>
            <id>608</id>
            <name>Defrag Needed</name>
            <hash>801419063</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Indicates whether the machine's harddrive requires defragmentation
Example: Yes</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Defrag Needed
&amp;#039;========================================

&amp;#039; will output whether a machine needs a defrag for a particular volume
&amp;#039; and some statistics about the volume.
&amp;#039; A defrag has no meaning to an SSD, but there is no way to link
&amp;#039; a volume object property to a disk_drive property
&amp;#039; Not cleanly, anyway.  Perhaps in Windows 8 :)
Option Explicit

Dim strComputer: strComputer = &amp;quot;.&amp;quot;
Dim strSep: strSep = &amp;quot;|&amp;quot;

Dim bRecommended, errResult
Dim objWMIService, colVolumes, objVolume, objReport

&amp;#039; output looks like: Defrag Recommended|DriveLetter|Volume Size|% Fragmented


Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _
	&amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colVolumes = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Volume&amp;quot;)

For Each objVolume In colVolumes
	errResult = objVolume.DefragAnalysis(bRecommended, objReport)
		If bRecommended = True Then
			WScript.Echo &amp;quot;Yes&amp;quot; &amp;amp; strSep &amp;amp; objVolume.DriveLetter &amp;amp; _
				strSep &amp;amp; objReport.VolumeSize &amp;amp; strSep &amp;amp; _
				objReport.TotalPercentFragmentation
		End If
		If bRecommended = False Then
			&amp;#039; Do nothing.  If you echo No, you get multiple results for each machine.
		End If
Next

&amp;#039; cleanup
Set objWMIService = Nothing
Set colVolumes = Nothing
Set objVolume = Nothing
Set objReport = Nothing</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Recommended</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Drive Letter</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Volume Size</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>% Fragmented</name>
                <index>3</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>305</cache_row_id>
          </sensor>
          <sensor>
            <id>610</id>
            <name>User Details</name>
            <hash>801908140</hash>
            <string_count>0</string_count>
            <category>User</category>
            <description>Returns a list of local users to the Windows machine and the user's full name.
Example:johndoe|John Doe</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;=================================
&amp;#039; User Details
&amp;#039; Don&amp;#039;t try this on a domain controller because all domain users are local users on a DC!
&amp;#039;=================================

sComputer = &amp;quot;.&amp;quot;
Function DomainRole(sNode)
	Set oWMI = GetObject(&amp;quot;winmgmts:&amp;quot; &amp;amp; &amp;quot;{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; sNode &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
	Set colComputer = oWMI.ExecQuery(&amp;quot;Select DomainRole from Win32_ComputerSystem&amp;quot;)
	For Each oComputer in colComputer
		iDR = oComputer.DomainRole
	Next
	Select Case iDR
	Case 0
		&amp;#039; standalone workstation
		DomainRole = &amp;quot;SW&amp;quot;
	Case 1
		&amp;#039; member workstation
		DomainRole = &amp;quot;MW&amp;quot;
	Case 2
		&amp;#039; standalone server
		DomainRole = &amp;quot;SS&amp;quot;
	Case 3
		&amp;#039; member server
		DomainRole = &amp;quot;MS&amp;quot;
	Case 4
		&amp;#039; backup domain controller
		DomainRole = &amp;quot;BDC&amp;quot;
	Case 5
		&amp;#039; primary domain controller
		DomainRole = &amp;quot;PDC&amp;quot;
	Case Else
		&amp;#039;; unknown
		DomainRole = &amp;quot;UNK&amp;quot;
	End Select
End Function
	
If DomainRole(sComputer) = &amp;quot;PDC&amp;quot; Or DomainRole(sComputer) = &amp;quot;BDC&amp;quot; Then
	WScript.Echo &amp;quot;Domain Controller, Can&amp;#039;t Enumerate users&amp;quot;
Else
	Set objNetwork = CreateObject(&amp;quot;Wscript.Network&amp;quot;)
	strComputer = objNetwork.ComputerName
	Set colAccounts = GetObject(&amp;quot;WinNT://&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;&amp;quot;)
	colAccounts.Filter = Array(&amp;quot;user&amp;quot;)
	For Each objUser In colAccounts
	    	strFullName = objUser.FullName
    		If strFullName = &amp;quot;&amp;quot; Then
    			strFullName = objUser.Name
    		End If
    		WScript.Echo objUser.Name &amp;amp; &amp;quot;|&amp;quot; &amp;amp; strFullName
	Next
End If</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
awk -F: &amp;#039;{print $1&amp;quot;|&amp;quot;$5}&amp;#039; /etc/passwd</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh
awk -F: &amp;#039;$1 !~ &amp;quot;^#&amp;quot; {print $1&amp;quot;|&amp;quot;$5}&amp;#039; /etc/passwd</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
awk -F: &amp;#039;{print $1&amp;quot;|&amp;quot;$5}&amp;#039; /etc/passwd</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>User Account</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Full Name</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>306</cache_row_id>
          </sensor>
          <sensor>
            <id>612</id>
            <name>Video Driver Version</name>
            <hash>8168018</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>The version number of the video driver on the client machine.
Example: 6.1.7600.16385</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select DriverVersion from win32_VideoController</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Version</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>307</cache_row_id>
          </sensor>
          <sensor>
            <id>614</id>
            <name>PST Information</name>
            <hash>856087598</hash>
            <string_count>0</string_count>
            <category>Office</category>
            <description>Returns details of PST files that have been mounted by users on a system.
Example: c:\psts\huge.pst 4088 MB</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; PST Information
&amp;#039;========================================

&amp;#039; This sensor will return data about attached PST files in all profiles.
&amp;#039; This sensor should run in either 32-bit or 64-bit mode without issue
&amp;#039; And will work properly when run in system context of course.
&amp;#039; Times returned are local to the client.

Option Explicit
 &amp;#039;On Error Resume Next 
 Const HKEY_CURRENT_USER = &amp;amp;H80000001 
 Const HKEY_USERS = &amp;amp;H80000003
 Const r_PSTGuidLocation = &amp;quot;01023d00&amp;quot; 
 Const r_MasterConfig = &amp;quot;01023d0e&amp;quot; 
 Const r_PSTCheckFile = &amp;quot;00033009&amp;quot; 
 Const r_PSTFile = &amp;quot;001f6700&amp;quot; 
 Const r_keyMaster = &amp;quot;9207f3e0a3b11019908b08002b2a56c2&amp;quot; 
 Const r_ProfilesRoot = &amp;quot;Software\Microsoft\Windows NT\CurrentVersion\Windows Messaging Subsystem\Profiles&amp;quot; 
 Const r_DefaultOutlookProfile = &amp;quot;Software\Microsoft\Windows NT\CurrentVersion\Windows Messaging Subsystem\Profiles&amp;quot; 
 Const r_DefaultProfileString = &amp;quot;DefaultProfile&amp;quot; 
 Dim oReg        :Set oReg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)   
 Dim arrSubKeys, subkey, strValue, i, pstFile, arrPSTs, DefaultProfileName, arrUserKeys, strUserKey
 Dim profileName
 Dim strSep: strSep = &amp;quot;|&amp;quot; &amp;#039; This is a multi-column sensor

&amp;#039; This sensor uses dates and should have locale set
SetLocale(GetTaniumLocale) &amp;#039; Default is US/English


&amp;#039; first get all users from HKEY_USERS
oReg.EnumKey HKEY_USERS,&amp;quot;&amp;quot;,arrUserKeys

&amp;#039;And loop through those SIDs
For Each strUserKey In arrUserKeys
	&amp;#039; WScript.Echo userKey &amp;amp; &amp;quot; is current user SID key&amp;quot;
	&amp;#039; return the keys under HKEY_USERS
	&amp;#039; WScript.Echo &amp;quot;We&amp;#039;re in &amp;quot; &amp;amp; strUserKey
	oReg.EnumKey HKEY_USERS,strUserKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; r_ProfilesRoot,arrSubKeys
	&amp;#039; and loop through those looking for outlook profiles
	&amp;#039; there may be multiple profiles per user.
	If Not IsNull(arrSubKeys) Then
		For Each profileName In arrSubKeys
			&amp;#039;WScript.Echo profileName &amp;amp; &amp;quot; Is profilename&amp;quot;
			&amp;#039;WScript.Echo &amp;quot;We&amp;#039;re going to try to get PSTs for this profile: &amp;quot; &amp;amp; strUserKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; r_ProfilesRoot &amp;amp; &amp;quot;\&amp;quot; &amp;amp; profileName
			ShowPSTsForProfile strUserKey &amp;amp; &amp;quot;\&amp;quot; &amp;amp; r_ProfilesRoot, profileName
		Next &amp;#039; end inner loop
	End If
Next &amp;#039; end outer loop

&amp;#039;&amp;#039; End Main Line


 &amp;#039;_____________________________________________________________________________________________________________________________ 
 Function ShowPSTsForProfile(profilePath, p_profileName)
 Dim strHexNumber, strPSTGuid
 Dim HexCount    :HexCount = 0
 Dim strPSTFile, arrBinValue 

 &amp;#039; WScript.Echo &amp;quot;ProfilePath is &amp;quot; &amp;amp; profilePath
 &amp;#039; WScript.Echo &amp;quot;And we&amp;#039;re fetching &amp;quot; &amp;amp; profilePath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; p_profileName &amp;amp; &amp;quot;\&amp;quot; &amp;amp; r_keyMaster &amp;amp; &amp;quot;-&amp;quot; &amp;amp; r_MasterConfig
 oReg.GetBinaryValue HKEY_USERS,profilePath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; p_profileName &amp;amp; &amp;quot;\&amp;quot; &amp;amp; r_keyMaster,r_MasterConfig,arrBinValue

     For i = lBound(arrBinValue) to uBound(arrBinValue)     
             If Len(Hex(arrBinValue(i))) = 1 Then  
                 strHexNumber = &amp;quot;0&amp;quot; &amp;amp; Hex(arrBinValue(i)) 
             Else 
                 strHexNumber = Hex(arrBinValue(i)) 
             End If         
         strPSTGuid = strPSTGuid + strHexNumber 
         HexCount = HexCount + 1 
             If HexCount = 16 Then  
                     If IsAPST(profilePath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; p_profileName &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strPSTGuid) Then 
                         &amp;#039; WScript.Echo &amp;quot;It is a PST!!&amp;quot; &amp;amp; profilePath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; p_profileName &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strPSTGuid
                         strPSTFile = PSTFileName(profilePath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; p_profileName &amp;amp; &amp;quot;\&amp;quot; &amp;amp; PSTlocation(profilePath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; p_profileName &amp;amp; &amp;quot;\&amp;quot; &amp;amp; strPSTGuid))
                         WScript.Echo GetFileInfo (strPSTFile, strSep)                         
                     End If     
                 HexCount = 0 
                 strPSTGuid = &amp;quot;&amp;quot; 
             End If             
     Next
 End Function 
 &amp;#039;_____________________________________________________________________________________________________________________________ 
 Function IsAPST(p_PSTGuid) 
 Dim x, P_PSTGuidValue 
 Dim P_PSTCheck:P_PSTCheck=0 
 IsAPST=False 
 oReg.GetBinaryValue HKEY_USERS,p_PSTGuid,r_PSTCheckFile,P_PSTGuidValue 
     For x = lBound(P_PSTGuidValue) to uBound(P_PSTGuidValue)     
         P_PSTCheck = P_PSTCheck + Hex(P_PSTGuidValue(x)) 
     Next     
     If P_PSTCheck=20 Then 
         IsAPST=True 
     End If     
 End Function  
 &amp;#039;_____________________________________________________________________________________________________________________________ 
 Function PSTlocation(p_PSTGuid) 
 Dim y, P_PSTGuidValue, t_strHexNumber 
 oReg.GetBinaryValue HKEY_USERS,p_PSTGuid,r_PSTGuidLocation,P_PSTGuidValue
 	If Not IsNull(P_PSTGuidValue) Then 
     For y = lBound(P_PSTGuidValue) to uBound(P_PSTGuidValue)     
         If Len(Hex(P_PSTGuidValue(y))) = 1 Then 
             PSTlocation = PSTlocation + &amp;quot;0&amp;quot; &amp;amp; Hex(P_PSTGuidValue(y)) 
         Else 
             PSTlocation = PSTlocation + Hex(P_PSTGuidValue(y))     
         End If     
     Next
   End If     
 End Function  
 &amp;#039;_____________________________________________________________________________________________________________________________ 
 Function PSTFileName(p_PSTGuid) 
 Dim z, P_PSTName 
 Dim strString:strString = &amp;quot;&amp;quot; 
 &amp;#039; WScript.Echo &amp;quot;In PSTFileName, p_PSTGUID is : &amp;quot; &amp;amp; p_PSTGuid
 oReg.GetBinaryValue HKEY_USERS,p_PSTGuid,r_PSTFile,P_PSTName 
     For z = lBound(P_PSTName) to uBound(P_PSTName)     
         If P_PSTName(z) &amp;gt; 0 Then 
             strString = strString &amp;amp; Chr(P_PSTName(z)) 
         End If     
     Next     
     PSTFileName = strString 
 Set z = nothing 
 Set P_PSTName = nothing 
 End Function  
 &amp;#039;_________________________________________________________________________________________________________ 
 Function GetFileInfo(strFilePath, strSep)
 &amp;#039; This will return the file name
 &amp;#039; The file size
  
  
 	Dim objFSO
 	Dim file
 
 	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
 	Set file = objFSO.GetFile(strFilePath)
 	&amp;#039; let&amp;#039;s just return a separated string with all kinds of information in it
 	&amp;#039;GetFileInfo = strFilePath &amp;amp; strSep &amp;amp; file.DateCreated &amp;amp; strSep &amp;amp; _ 
 	&amp;#039;	file.DateLastAccessed &amp;amp; strSep &amp;amp; file.DateLastModified _
 	&amp;#039;	&amp;amp; strSep &amp;amp; file.Size &amp;amp; &amp;quot; bytes&amp;quot;
 
  	GetFileInfo = strFilePath &amp;amp; strSep &amp;amp; BytesConvert(file.Size)
 	
 	&amp;#039;cleanup
 	Set file = Nothing
 	Set objFSO = Nothing
 	
 End Function &amp;#039;GetFileInfo
 
Function GetTaniumLocale
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

	Dim objWshShell
	Dim intLocaleID
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Tanium\Tanium Client\LocaleID&amp;quot;)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client\LocaleID&amp;quot;)
	End If
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	&amp;#039; Cleanup
	Set objWshShell = Nothing

End Function &amp;#039;GetTaniumLocale

Function BytesConvert(dblSize)

	Dim strSuffix, intCommaSpot
	
	Do While InStr(dblSize,&amp;quot;,&amp;quot;) &amp;#039;Remove commas from dblSize 
	    intCommaSpot = InStr(dblSize,&amp;quot;,&amp;quot;) 
	    dblSize = Mid(dblSize,1,intCommaSpot - 1) &amp;amp; _ 
	        Mid(dblSize,intCommaSpot + 1,Len(dblSize) - intCommaSpot) 
	Loop
	
	On Error Resume Next
	dblSize = CDbl(dblSize)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		BytesConvert = &amp;quot;Invalid input&amp;quot;
		Exit Function
	End If
	On Error Goto 0

	strSuffix = &amp;quot; Bytes&amp;quot; 
	If dblSize &amp;gt;= 1024 Then strSuffix = &amp;quot; KB&amp;quot; 
	If dblSize &amp;gt;= 1048576 Then strSuffix = &amp;quot; MB&amp;quot; 
	If dblSize &amp;gt;= 1073741824 Then strSuffix = &amp;quot; GB&amp;quot; 
	If dblSize &amp;gt;= 1099511627776 Then strSuffix = &amp;quot; TB&amp;quot; 
	
	Select Case strSuffix 
	    Case &amp;quot; KB&amp;quot; dblSize = Round(dblSize / 1024, 1) 
	    Case &amp;quot; MB&amp;quot; dblSize = Round(dblSize / 1048576, 1) 
	    Case &amp;quot; GB&amp;quot; dblSize = Round(dblSize / 1073741824, 1) 
	    Case &amp;quot; TB&amp;quot; dblSize = Round(dblSize / 1099511627776, 1) 
	End Select
	
	BytesConvert = dblSize &amp;amp; strSuffix 
End Function &amp;#039;BytesConvert</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>File</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Size</name>
                <index>1</index>
                <value_type>DataSize</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>308</cache_row_id>
          </sensor>
          <sensor>
            <id>616</id>
            <name>Shared Network Printer Details</name>
            <hash>861367460</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Details on any shared printers available from the client machine.  Details include printer name, print server, and share name.
Example: \\PRINTSERVER1\PRINTER2 | netserver | \\PRINTSERVER1\PRINTER2</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Shared Network Printer Details
&amp;#039;========================================

&amp;#039; This is a multi-column sensor that returns details on
&amp;#039; printers that are served by a print server.
&amp;#039; The columns look like:
&amp;#039; Printer|Server|Share Name

strSep = &amp;quot;|&amp;quot;
 
strComputer =&amp;quot;.&amp;quot;

Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\CIMV2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;SELECT * FROM Win32_Printer&amp;quot;)

For Each objItem In colItems
	If (objitem.Servername &amp;lt;&amp;gt; &amp;quot;&amp;quot;) Then
		WScript.Echo objItem.name &amp;amp; strSep &amp;amp; objitem.ServerName _
		&amp;amp; strSep &amp;amp; objitem.ShareName
	End If
Next

Set objWMIService = Nothing
Set colItems = Nothing</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Printer</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Server</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Share Name</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>309</cache_row_id>
          </sensor>
          <sensor>
            <id>618</id>
            <name>Kernel Modules</name>
            <hash>865123401</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns loaded kernel modules on Linux systems.
Example:dcdbas</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>WScript.Echo &amp;quot;Not a Windows Sensor&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
cat /proc/modules | while read line
do
        set -- $line
	echo $1
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
modinfo | awk &amp;#039;{ print $6 }&amp;#039;| sort -u</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>310</cache_row_id>
          </sensor>
          <sensor>
            <id>620</id>
            <name>Hyperthreading Enabled</name>
            <hash>867160258</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Indicates whether hyperthreading is enabled on the client machine.  This is not supported on all OS patch levels.
Example: Yes</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Hyperthreading Enabled
&amp;#039;========================================

&amp;#039; checking if the number of logical processors is greater than
&amp;#039; the number of cores on each physical, socketed processor.
On Error Resume Next

Set objWMIService = GetObject(&amp;quot;Winmgmts:{impersonationlevel=impersonate}!\Root\Cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;SELECT * FROM Win32_Processor&amp;quot;) 
intNumCores = 0

For Each objItem in colItems
	intNumCores = intNumCores + CInt(objItem.NumberOfCores)
	&amp;#039;decide whether to continue for unsupported OS patch levels
	If intNumCores = 0 Then &amp;#039; machine does not support counting cores
		strOs = GetOS
		&amp;#039;Windows 2000 isn&amp;#039;t supported for core count, can&amp;#039;t determine hyperthreading
		If InStr(strOs, &amp;quot;2000&amp;quot;) &amp;gt; 0 Then
			WScript.Echo &amp;quot;Windows 2000 - Cannot determine&amp;quot;
		ElseIf InStr(strOs, &amp;quot;XP&amp;quot;) &amp;gt; 0 Then
			WScript.Echo &amp;quot;XP SP3 Required to determine&amp;quot;
		ElseIf InStr(strOs, &amp;quot;2003&amp;quot;) &amp;gt; 0 Then
			&amp;#039;For Win Server 2003 SEE KB 932370
			&amp;#039;http://support.microsoft.com/kb/932370/
			WScript.Echo &amp;quot;KB932370 Required to determine&amp;quot;
		Else
			WScript.Echo &amp;quot;N/A&amp;quot;
		End If
	ElseIf intNumCores &amp;lt; objItem.NumberOfLogicalProcessors Then
		WScript.Echo &amp;quot;Yes&amp;quot;
	ElseIf intNumCores = objItem.NumberOfLogicalProcessors Then
		WScript.Echo &amp;quot;No&amp;quot;
	Else
		WScript.Echo &amp;quot;Unsure&amp;quot;
	End If
	WScript.Quit &amp;#039;if reported once, it will be the same value across all CPUs
Next

Function GetOS
	Set oWsh = WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)    
	Set oWshSysEnv = oWsh.Environment(&amp;quot;PROCESS&amp;quot;)    
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)    
	Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;select Caption from win32_operatingsystem&amp;quot;)    
	For Each objItem In colItems       
	strStrip1 = Right(ObjItem.Caption, (Len(objItem.Caption) - Instr(objItem.Caption, &amp;quot; &amp;quot;)))   
	&amp;#039;strStrip2 = Right(strStrip1, (Len(strStrip1) - Instr(strStrip1, &amp;quot; &amp;quot;)))   
	if Instr(strStrip1,&amp;quot;Server&amp;quot; &amp;amp; Unescape(&amp;quot;%AE&amp;quot;)) &amp;lt;&amp;gt; 0 THEN   
	strOS = Replace(strStrip1,&amp;quot;Server&amp;quot; &amp;amp; Unescape(&amp;quot;%AE&amp;quot;),&amp;quot;Server&amp;quot;)   
	Else   
	strOS = strStrip1
	End IF   
	GetOS = Trim(strOS)
	Next
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>311</cache_row_id>
          </sensor>
          <sensor>
            <id>622</id>
            <name>Network Printer Details</name>
            <hash>876725971</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the connected network printers.
Example: printer_name | driver | port</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Network Printer Details
&amp;#039;========================================

On Error Resume Next
strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
Set colItems = objWMIService.ExecQuery(&amp;quot;Select PortName,Caption,DriverName from Win32_Printer&amp;quot;,,48)

strSep = &amp;quot;|&amp;quot;

For Each objItem in colItems
	If InStr(objItem.PortName, &amp;quot;.&amp;quot;) Then
	
		WScript.Echo objItem.Caption &amp;amp; strSep &amp;amp; _
			objItem.DriverName &amp;amp; strSep &amp;amp; _
			objItem.PortName
	End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Printer</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Driver</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Port</name>
                <index>2</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
            </subcolumns>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>312</cache_row_id>
          </sensor>
          <sensor>
            <id>624</id>
            <name>Motherboard Manufacturer</name>
            <hash>885259283</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Returns the Motherboard Manufacturer of a system.
Example:Lenovo</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Motherboard Manufacturer
&amp;#039;========================================

Set objWMIService = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
Set colMB = objWMIService.ExecQuery(&amp;quot;Select * from Win32_BaseBoard&amp;quot;)
For Each mb In colMB
mbManufacturer = mb.Manufacturer
WScript.Echo mbManufacturer
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode -s baseboard-manufacturer</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
echo Apple</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>313</cache_row_id>
          </sensor>
          <sensor>
            <id>626</id>
            <name>Country Code</name>
            <hash>902205018</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Shows the currently specified country code used by the operating system.
Example: 1    (United States)</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select CountryCode from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>314</cache_row_id>
          </sensor>
          <sensor>
            <id>628</id>
            <name>Data Execution Prevention Enabled</name>
            <hash>916410332</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Whether data execution prevention is enabled for 32-bit machines.  If disabled, code can be executed from a non-executable memory region.
Example: TRUE, FALSE</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Data Execution Prevention Enabled
&amp;#039;========================================

strComputer = &amp;quot;.&amp;quot; 
Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\CIMV2&amp;quot;) 
Set colItems = objWMIService.ExecQuery( _
    &amp;quot;SELECT * FROM Win32_OperatingSystem&amp;quot;,,48) 
For Each objItem in colItems 
    If objItem.DataExecutionPrevention_32BitApplications Then
        Wscript.Echo &amp;quot;True&amp;quot;
    Else
        Wscript.Echo &amp;quot;False&amp;quot;
    End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>315</cache_row_id>
          </sensor>
          <sensor>
            <id>630</id>
            <name>CD-ROM Drive</name>
            <hash>923740265</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Name of any installed CD-ROM or DVD-ROM drives.
Example: SONY DVD-ROM DDU1615 ATA Device</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from win32_CDROMDRIVE</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh
LINUX=`uname -o | grep -c -i linux`

if [ $LINUX -eq 1 ]
then
lshal | grep -i info.product | grep CD | sed &amp;#039;s/info.product = &amp;#039;\&amp;#039;&amp;#039;\(.*\)&amp;#039;\&amp;#039;&amp;#039;.*/\1/g&amp;#039;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>316</cache_row_id>
          </sensor>
          <sensor>
            <id>632</id>
            <name>Service</name>
            <hash>926119908</hash>
            <string_count>0</string_count>
            <category>Applications</category>
            <description>Gets a list of all Services on the client machine.
Example: Task Scheduler</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Caption from win32_Service</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

whatlinux () {
        LINUX_TYPE=unknown
        if [ -f /etc/redhat-release ]; then
              LINUX_TYPE=unknown
              if grep -qie &amp;#039;CentOS.*release 7&amp;#039; /etc/redhat-release; then
                 LINUX_TYPE=systemctl
              elif grep -qie &amp;#039;Red Hat.*release 5&amp;#039; /etc/redhat-release; then
                 LINUX_TYPE=chkconfig
              elif grep -qie &amp;#039;Red Hat.*release 7&amp;#039; /etc/redhat-release; then
                 LINUX_TYPE=systemctl
              fi
        fi
        if [ -f /usr/bin/lsb_release ]; then
           if lsb_release -d | grep -qi &amp;#039;CentOS.*release 5&amp;#039;; then
                LINUX_TYPE=chkconfig
           elif lsb_release -d | grep -qi &amp;#039;CentOS.*release 6&amp;#039;; then
                LINUX_TYPE=chkconfig
           elif lsb_release -d | grep -qi &amp;#039;Red Hat.*release 6&amp;#039;; then
                LINUX_TYPE=chkconfig
           elif lsb_release -d | grep -qi &amp;#039;SUSE.*12&amp;#039;; then
                LINUX_TYPE=systemctl
           elif lsb_release -d | grep -qi &amp;#039;SUSE.*11&amp;#039;; then
                LINUX_TYPE=suse11
           elif lsb_release -i | grep -qi &amp;#039;Ubuntu&amp;#039;; then
                LINUX_TYPE=ubuntu
           elif lsb_release -i | grep -qi &amp;#039;Debian&amp;#039;; then
                LINUX_TYPE=debian
           fi
        fi
        echo &amp;quot;$LINUX_TYPE&amp;quot;
}

result=$(whatlinux)
if [ $result = &amp;#039;ubuntu&amp;#039; ]; then
   UBUS=$(ls /etc/init)
   /usr/bin/printf %s &amp;quot;$UBUS&amp;quot; | cut -d &amp;#039; &amp;#039; -f1 | while IFS= read -r line
   do
      SNME=$(echo $line | cut -d &amp;#039;.&amp;#039; -f1)
      echo $SNME 
   done
elif [ $result = &amp;#039;chkconfig&amp;#039; ]; then
   /sbin/chkconfig --list | sed -e &amp;#039;/^xinetd.*$/d&amp;#039; -e &amp;#039;/^\s*$/d&amp;#039; | cut -d &amp;#039;:&amp;#039; -f1 | while read line
      do
        set -- $line
	echo $1
      done
elif [ $result = &amp;#039;suse11&amp;#039; ]; then
      chkconfig --list | cut -d &amp;#039; &amp;#039; -f1 | while read line
      do
         set -- $line
 	 echo $1 | grep -v skeleton
      done
elif [ $result = &amp;#039;systemctl&amp;#039; ]; then
      SUSS=$(systemctl list-unit-files --type=service)
      /usr/bin/printf %s &amp;quot;$SUSS&amp;quot; | while IFS= read -r line
      do
	 SUSS=$(echo $line | cut -d &amp;#039; &amp;#039; -f1)
         echo $SUSS | grep -v UNIT
      done
elif [ $result = &amp;#039;debian&amp;#039; ]; then
   DEBS=$(ls /etc/init.d)
   /usr/bin/printf %s &amp;quot;$DEBS&amp;quot; | cut -d &amp;#039;:&amp;#039; -f1 | while IFS= read -r line
   do
      SNME=$(echo $line)
      echo $SNME | grep -v skeleton | grep -v README | grep -v &amp;#039;{1-9}.*&amp;#039;
   done
else
	echo &amp;quot;Unable to detect OS&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
first=true
launchctl list | while read line
do
    set -- $line
if ( $first ); 
then
	first=false
else
	echo $3
fi
done</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh
svcs | awk &amp;#039;{ print $3 }&amp;#039; | sed &amp;#039;s#svc:/##g;s/:default//g&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh
lssrc -a | awk &amp;#039;{ print $1 }&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>317</cache_row_id>
          </sensor>
          <sensor>
            <id>634</id>
            <name>Tanium File Exists</name>
            <hash>95001259</hash>
            <string_count>0</string_count>
            <category>Tanium</category>
            <description>Provided with a parameter indicating the path to a file in the Tanium current directory, returns True or False based on whether that file exists in the specified location.
Example: True</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium File Exists
&amp;#039;========================================

filePath = unescape(&amp;quot;||file||&amp;quot;)
strTaniumDir = GetTaniumDir(&amp;quot;&amp;quot;)

Dim fso
Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

filePath = strTaniumDir &amp;amp; filePath

If fso.FileExists(filePath) Then 
	&amp;#039;WScript.Echo filePath
	WScript.Echo &amp;quot;True&amp;quot;
Else 
	WScript.Echo &amp;quot;File does not exist&amp;quot;
End If

Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
    
    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
            strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
        End If  
    
        Dim fso
        Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
        If fso.FolderExists(strPath) Then
            If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
                &amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
                GeneratePath strPath &amp;amp; strSubDir, fso
            End If
            GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
        Else
            &amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
            WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
            GetTaniumDir = False
        End If
    Else
        WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
        GetTaniumDir = False
    End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
    GeneratePath = False

    If Not fso.FolderExists(pFolderPath) Then
        If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
            GeneratePath = True
            Call fso.CreateFolder(pFolderPath)
        End If
    Else
        GeneratePath = True
    End If
End Function &amp;#039;GeneratePath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. uninst.exe or Tools\\Wsusscn2.cab&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Relative file path from &amp;lt;Tanium Client Installation Dir&amp;gt;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Starting from the Client installation directory, complete the file path to get contents for.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. uninst.exe or Tools\\Wsusscn2.cab&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Relative file path from &amp;lt;Tanium Client Installation Dir&amp;gt;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Starting from the Client installation directory, complete the file path to get contents for.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. uninst.exe or Tools\\Wsusscn2.cab&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Relative file path from &amp;lt;Tanium Client Installation Dir&amp;gt;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Starting from the Client installation directory, complete the file path to get contents for.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;e.g. uninst.exe or Tools\\Wsusscn2.cab&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Relative file path from &amp;lt;Tanium Client Installation Dir&amp;gt;&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Starting from the Client installation directory, complete the file path to get contents for.&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:0,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||file||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Relative file path from &lt;Tanium Client Installation Dir&gt;","helpString":"Starting from the Client installation directory, complete the file path to get contents for.","defaultValue":"","promptText":"e.g. uninst.exe or Tools\\Wsusscn2.cab","maxChars":0,"key":"file","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>318</cache_row_id>
          </sensor>
          <sensor>
            <id>636</id>
            <name>Video/Graphics Card</name>
            <hash>953427826</hash>
            <string_count>0</string_count>
            <category>Hardware</category>
            <description>Description of the video card in the client machine.
Example: ATI Radeon HD 2400 Pro</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select Name from Win32_VideoController</script>
                <script_type>WMIQuery</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
dmidecode | grep -A2 &amp;quot;Type: Video&amp;quot; | awk -F&amp;quot;: &amp;quot; &amp;#039;$1 ~ &amp;quot;Description&amp;quot; {print $2}&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
video=$(system_profiler SPDisplaysDataType | grep Chipset | awk -F&amp;#039;: &amp;#039; &amp;#039;{print $2}&amp;#039;)
if [ &amp;quot;&amp;quot; = &amp;quot;$video&amp;quot; ]
then
	echo &amp;quot;Unknown&amp;quot;
else
	echo &amp;quot;$video&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>319</cache_row_id>
          </sensor>
          <sensor>
            <id>638</id>
            <name>Tanium Action Log</name>
            <hash>969736519</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Provided with an action number as a parameter, this sensor returns the log from the action from each client machine that executed the action.
Example: 2012-11-02 03:30:17 +0000|Command Completed</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Action Log
&amp;#039;========================================

Option Explicit

Const MAX_LINES_TO_RETURN = 100

Dim strAction, strTaniumPath, strFilePath

strAction = &amp;quot;||actionNumber||&amp;quot;
strTaniumPath = GetTaniumDir(&amp;quot;Downloads&amp;quot;)

strFilePath = strTaniumPath &amp;amp; &amp;quot;\Action_&amp;quot;&amp;amp;strAction&amp;amp;&amp;quot;.log&amp;quot;

Dim fso
Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

If fso.FileExists(strFilePath) Then
	Dim objTextFile, strLine, intLineNumber
	Set objTextFile = fso.OpenTextFile(strFilePath, 1)
	
	intLineNumber = 1
	Do Until objTextFile.AtEndOfStream
		WScript.Echo zeroPad(intLineNumber,3) &amp;amp; &amp;quot;|&amp;quot; &amp;amp; objTextFile.ReadLine
		intLineNumber = intLineNumber + 1
		
		If(intLineNumber &amp;gt; MAX_LINES_TO_RETURN) Then
			WScript.Echo zeroPad(intLineNumber,3) &amp;amp; &amp;quot;|Max number of lines reached in Action Log Sensor&amp;quot;
			WScript.Quit
		End If
	Loop 
	
Else
	WScript.Echo &amp;quot;File does not exist&amp;quot;
End If

Function zeroPad(m, t)
   zeroPad = String(t-Len(m),&amp;quot;0&amp;quot;)&amp;amp;m
End Function

Function GetTaniumDir(strSubDir)
&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
&amp;#039;looks for a valid Path value
    
    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
            strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
        End If  
    
        Dim fso
        Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
        If fso.FolderExists(strPath) Then
            If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
                &amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
                GeneratePath strPath &amp;amp; strSubDir, fso
            End If
            GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
        Else
            &amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
            WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
            GetTaniumDir = False
        End If
    Else
        WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
        GetTaniumDir = False
    End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
    GeneratePath = False

    If Not fso.FolderExists(pFolderPath) Then
        If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
            GeneratePath = True
            Call fso.CreateFolder(pFolderPath)
        End If
    Else
        GeneratePath = True
    End If
End Function &amp;#039;GeneratePath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

MAXRESULTS=100
ACTIONID=||actionNumber||

if [ -f /opt/Tanium/TaniumClient/Downloads/Action_$ACTIONID.log ]; then
   tail -n $MAXRESULTS /opt/Tanium/TaniumClient/Downloads/Action_$ACTIONID.log
else
   echo &amp;quot;File does not exist&amp;quot;
fi</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;actionNumber&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;[0-9]+&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. 1234&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter a valid Action ID Number from the Action History tab&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Action ID Number&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||actionNumber||  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;actionNumber&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;[0-9]+&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. 1234&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter a valid Action ID Number from the Action History tab&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Action ID Number&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||actionNumber||  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;actionNumber&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;[0-9]+&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. 1234&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Enter a valid Action ID Number from the Action History tab&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Action ID Number&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# ||actionNumber||  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition>{"parameters":[{"label":"Action ID Number","helpString":"Enter a valid Action ID Number from the Action History tab","defaultValue":"","promptText":"e.g. 1234","maxChars":0,"key":"actionNumber","restrict":null,"validationExpressions":[{"helpString":"","expression":"[0-9]+","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>320</cache_row_id>
          </sensor>
          <sensor>
            <id>640</id>
            <name>Boot Time</name>
            <hash>98057726</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>The amount of time, in seconds, that the last boot of this machine took.
Example:  100</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Boot Time in Minutes
&amp;#039;========================================
&amp;#039;

Option Explicit

Dim strBootTimeInSec

If Left(GetOSMajorVersion(), 1) &amp;lt; 6 Then 
	WScript.Echo &amp;quot;Not Available&amp;quot;
Else
	strBootTimeInSec = GetBootTimeInSec
	WScript.Echo strBootTimeInSec
End If

Function GetBootTimeInSec() 
	Dim objShell, objShellExec, strCmd, strCmdOutput, strBootTime
	Dim xmlDoc, bLoadSuccess, objList, objNode
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	
	strCmd = &amp;quot;wevtutil.exe qe Microsoft-Windows-Diagnostics-Performance/Operational /rd:true /f:xml /c:1 /q:&amp;quot;&amp;quot;*[System[(EventID = 100)]]&amp;quot;&amp;quot; /e:Events&amp;quot;
	
	Set objShellExec = objShell.Exec(strCmd)
	strCmdOutput = objShellExec.StdOut.ReadAll

	&amp;#039; the command gave us back XML -- put the XML into an xml object, then find what we are looking for.
	
	Set xmlDoc = CreateObject(&amp;quot;Msxml2.DOMDocument&amp;quot;)
	bLoadSuccess = xmlDoc.loadXml(strCmdOutput)
	
	If Not bLoadSuccess Then
	    &amp;#039; On Server machines, the above will report that the channel can not be found,
	    &amp;#039; and return nothing.  (that log is only available on clients)  The XML won&amp;#039;t parse,
	    &amp;#039; so return Not Available
		WScript.Echo &amp;quot;Not Available&amp;quot;
		WScript.Quit
	End If
	
	Set objList = xmlDoc.getElementsByTagName(&amp;quot;Data&amp;quot;)
	If objList.length &amp;gt; 0 Then
        For Each objNode In objList
        	Dim strAttribute
        	strAttribute = objNode.getAttribute(&amp;quot;Name&amp;quot;)
        	
        	If strAttribute = &amp;quot;BootTime&amp;quot; Then
        		strBootTime = objNode.text
        	End If
        Next
    End If

	GetBootTimeInSec = Round(strBootTime / 1000)
End Function &amp;#039; GetBootTimeInSec
	
Function GetOSMajorVersion
&amp;#039; Returns the OS Major Version
&amp;#039; A different way to examine the OS instead of by name

	Dim objWMIService,colItems,objItem
	Dim strVersion

	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = GetObject(&amp;quot;WinMgmts:root/cimv2&amp;quot;).ExecQuery(&amp;quot;select Version from win32_operatingsystem&amp;quot;)    
	For Each objItem In colItems
		strVersion = objItem.Version &amp;#039; like 6.2.9200
		strVersion = Left(strVersion,Len(strVersion) - 5)
	Next
	
	GetOSMajorVersion = strVersion
	
End Function &amp;#039;GetOSMajorVersion</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>Numeric</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>321</cache_row_id>
          </sensor>
          <sensor>
            <id>642</id>
            <name>Workgroup</name>
            <hash>991644931</hash>
            <string_count>0</string_count>
            <category>Network</category>
            <description>The configured workgroup or computer domain for each client machine.
Example: mycompanydomain</description>
            <creation_time>2015-09-14T13:39:13</creation_time>
            <modification_time>2015-09-14T13:39:13</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Workgroup
&amp;#039;========================================

Set objWMISvc = GetObject( &amp;quot;winmgmts:\\.\root\cimv2&amp;quot; )
Set colItems = objWMISvc.ExecQuery(&amp;quot;Select * From Win32_ComputerSystem&amp;quot;)
For Each objItem in colItems
	strComputerDomain = objItem.Domain
	If Not objItem.PartOfDomain Then
    	&amp;#039; If the machine is not part of a domain, then the &amp;quot;Domain&amp;quot; is the workgroup
    	&amp;#039; Don&amp;#039;t print domain, only workgroup
    	WScript.Echo  strComputerDomain
	End If
Next</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>322</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967295</id>
            <name>Number of Application Crashes in Last X Days[7]</name>
            <hash>3478889353</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Number of Application Crashes in Last X Days
&amp;#039;========================================

Option Explicit
Dim strSep
Dim objWMIService, colEvents, objEvent
Dim dtmStart

strSep = &amp;quot;|&amp;quot;

&amp;#039;Uses date math - set locale

SetLocale(1033)


dtmStart = GetTimeWrittenByDaysOld(7)

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
    &amp;amp; &amp;quot;{impersonationLevel=impersonate,authenticationLevel=Pkt,(Security)}!\\.\root\cimv2&amp;quot;) 

Set colEvents = objWMIService.ExecQuery _
    (&amp;quot;SELECT * FROM Win32_NTLogEvent WHERE Message like &amp;#039;Faulting application %&amp;#039; AND Logfile = &amp;#039;Application&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;TimeWritten &amp;gt;= &amp;#039;&amp;quot; &amp;amp; dtmStart &amp;amp; &amp;quot;&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;(EventCode = &amp;#039;1000&amp;#039;)&amp;quot;)

Dim numCrashes
numCrashes = 0

For Each objEvent In colEvents
    Dim strMessage, arrLines, strLine, strApp, strModule, strTime
    
    strMessage = objEvent.Message
    arrLines = Split(strMessage, vbCrLf)
    
    Dim strIndex, strIndexXp

	&amp;#039;just go through first line of log to grab app name
	strLine = arrLines(0)
	
	&amp;#039;strIndex is for new OSes, strIndexXP for older...
	strIndex = &amp;quot;Faulting application name: &amp;quot;
	strIndexXp = &amp;quot;Faulting application &amp;quot;
	If Left(strLine, Len(strIndex)) = strIndex Then
		strApp = Mid(strLine, Len(strIndex) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndex) - 1)
	ElseIf Left(strLine, Len(strIndexXp)) = strIndexXp Then
		strApp = Mid(strLine, Len(strIndexXp) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndexXp) - 1)
	End If
	
    strTime = DatetimeToDate(objEvent.TimeWritten)
    	 
	If Not IsNull(strApp) And Not IsEmpty(strApp) Then
		numCrashes = numCrashes + 1
	End If
Next

WScript.Echo numCrashes

Function DatetimeToDate(strDate)
   DatetimeToDate = _
       CDate(Mid(strDate, 5, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Mid(strDate, 7, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Left(strDate, 4) &amp;amp; _
       &amp;quot; &amp;quot; &amp;amp; _
       Mid (strDate, 9, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 11, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 13, 2))
End Function

Function GetTimeWrittenByDaysOld(days)
   &amp;#039;subtract &amp;quot;days&amp;quot; days worth of seconds

	Dim epoc, monthAgo   
   	epoc = date2epoch(Now()) - days*24*60*60
   	monthAgo = epoch2date(epoc)
   
	Dim dateTime
	Set dateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
	dateTime.SetVarDate monthAgo, True
	 
  	GetTimeWrittenByDaysOld = dateTime
End Function

function date2epoch(myDate)
   date2epoch = DateDiff(&amp;quot;s&amp;quot;, &amp;quot;01/01/1970 00:00:00&amp;quot;, myDate)
end Function

function epoch2date(myEpoch)
   epoch2date = DateAdd(&amp;quot;s&amp;quot;, myEpoch, &amp;quot;01/01/1970 00:00:00&amp;quot;)
end Function</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>126</source_id>
            <parameters>
              <parameter>
                <key>||days||</key>
                <value>7</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query for Application Crashes","defaultValue":"5","key":"days","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>323</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967294</id>
            <name>Linux:tempsensor_1</name>
            <hash>3478888048</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 7  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 7  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 7  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 7  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>126</source_id>
            <parameters>
              <parameter>
                <key>||days||</key>
                <value>7</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query for Application Crashes","defaultValue":"5","key":"days","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>324</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967293</id>
            <name>Number of Application Crashes in Last X Days[5]</name>
            <hash>3478888483</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Number of Application Crashes in Last X Days
&amp;#039;========================================

Option Explicit
Dim strSep
Dim objWMIService, colEvents, objEvent
Dim dtmStart

strSep = &amp;quot;|&amp;quot;

&amp;#039;Uses date math - set locale

SetLocale(1033)


dtmStart = GetTimeWrittenByDaysOld(5)

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
    &amp;amp; &amp;quot;{impersonationLevel=impersonate,authenticationLevel=Pkt,(Security)}!\\.\root\cimv2&amp;quot;) 

Set colEvents = objWMIService.ExecQuery _
    (&amp;quot;SELECT * FROM Win32_NTLogEvent WHERE Message like &amp;#039;Faulting application %&amp;#039; AND Logfile = &amp;#039;Application&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;TimeWritten &amp;gt;= &amp;#039;&amp;quot; &amp;amp; dtmStart &amp;amp; &amp;quot;&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;(EventCode = &amp;#039;1000&amp;#039;)&amp;quot;)

Dim numCrashes
numCrashes = 0

For Each objEvent In colEvents
    Dim strMessage, arrLines, strLine, strApp, strModule, strTime
    
    strMessage = objEvent.Message
    arrLines = Split(strMessage, vbCrLf)
    
    Dim strIndex, strIndexXp

	&amp;#039;just go through first line of log to grab app name
	strLine = arrLines(0)
	
	&amp;#039;strIndex is for new OSes, strIndexXP for older...
	strIndex = &amp;quot;Faulting application name: &amp;quot;
	strIndexXp = &amp;quot;Faulting application &amp;quot;
	If Left(strLine, Len(strIndex)) = strIndex Then
		strApp = Mid(strLine, Len(strIndex) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndex) - 1)
	ElseIf Left(strLine, Len(strIndexXp)) = strIndexXp Then
		strApp = Mid(strLine, Len(strIndexXp) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndexXp) - 1)
	End If
	
    strTime = DatetimeToDate(objEvent.TimeWritten)
    	 
	If Not IsNull(strApp) And Not IsEmpty(strApp) Then
		numCrashes = numCrashes + 1
	End If
Next

WScript.Echo numCrashes

Function DatetimeToDate(strDate)
   DatetimeToDate = _
       CDate(Mid(strDate, 5, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Mid(strDate, 7, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Left(strDate, 4) &amp;amp; _
       &amp;quot; &amp;quot; &amp;amp; _
       Mid (strDate, 9, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 11, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 13, 2))
End Function

Function GetTimeWrittenByDaysOld(days)
   &amp;#039;subtract &amp;quot;days&amp;quot; days worth of seconds

	Dim epoc, monthAgo   
   	epoc = date2epoch(Now()) - days*24*60*60
   	monthAgo = epoch2date(epoc)
   
	Dim dateTime
	Set dateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
	dateTime.SetVarDate monthAgo, True
	 
  	GetTimeWrittenByDaysOld = dateTime
End Function

function date2epoch(myDate)
   date2epoch = DateDiff(&amp;quot;s&amp;quot;, &amp;quot;01/01/1970 00:00:00&amp;quot;, myDate)
end Function

function epoch2date(myEpoch)
   epoch2date = DateAdd(&amp;quot;s&amp;quot;, myEpoch, &amp;quot;01/01/1970 00:00:00&amp;quot;)
end Function</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>126</source_id>
            <parameters>
              <parameter>
                <key>||days||</key>
                <value>5</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query for Application Crashes","defaultValue":"5","key":"days","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>325</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967292</id>
            <name>Linux:tempsensor_3</name>
            <hash>3478890658</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>126</source_id>
            <parameters>
              <parameter>
                <key>||days||</key>
                <value>5</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query for Application Crashes","defaultValue":"5","key":"days","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>326</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967291</id>
            <name>Application Crashes in Last X Days[5]</name>
            <hash>3478891093</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Application Crashes in Last X Days
&amp;#039;========================================
&amp;#039;@INCLUDE=utils/SensorRandomization/SensorRandomizationFunctions.vbs
Option Explicit
Dim strSep
Dim objWMIService, colEvents, objEvent, intCount
Dim dtmStart

strSep = &amp;quot;|&amp;quot;
intCount = 0

&amp;#039;Uses date math - set locale

SetLocale(1033)

dtmStart = GetTimeWrittenByDaysOld(5)
&amp;#039;dtmStart = GetTimeWrittenByDaysOld(7)

Set objWMIService = GetObject(&amp;quot;winmgmts:&amp;quot; _ 
    &amp;amp; &amp;quot;{impersonationLevel=impersonate,authenticationLevel=Pkt,(Security)}!\\.\root\cimv2&amp;quot;) 

Set colEvents = objWMIService.ExecQuery _
    (&amp;quot;SELECT * FROM Win32_NTLogEvent WHERE Message like &amp;#039;Faulting application %&amp;#039; AND Logfile = &amp;#039;Application&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;TimeWritten &amp;gt;= &amp;#039;&amp;quot; &amp;amp; dtmStart &amp;amp; &amp;quot;&amp;#039; AND &amp;quot; _
        &amp;amp; &amp;quot;(EventCode = &amp;#039;1000&amp;#039;)&amp;quot;)

For Each objEvent In colEvents
    Dim strMessage, arrLines, strLine, strApp, strModule, strTime
    
    strMessage = objEvent.Message
    arrLines = Split(strMessage, vbCrLf)
    
    Dim strIndex, strIndexXp

	&amp;#039;just go through first line of log to grab app name
	strLine = arrLines(0)
	
	&amp;#039;strIndex is for new OSes, strIndexXP for older...
	strIndex = &amp;quot;Faulting application name: &amp;quot;
	strIndexXp = &amp;quot;Faulting application &amp;quot;
	If Left(strLine, Len(strIndex)) = strIndex Then
		strApp = Mid(strLine, Len(strIndex) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndex) - 1)
	ElseIf Left(strLine, Len(strIndexXp)) = strIndexXp Then
		strApp = Mid(strLine, Len(strIndexXp) + 1, InStr(strLine, &amp;quot;,&amp;quot;) - Len(strIndexXp) - 1)
	End If
	
    strTime = DatetimeToDate(objEvent.TimeWritten)
    
    Dim strDate, arrTemp
    arrTemp = Split(strTime)
    strDate = arrTemp(0)
	WScript.Echo strApp &amp;amp; strSep &amp;amp; strDate
	intCount = intCount + 1
Next

If intCount = 0 Then
	WScript.Echo &amp;quot;No Application Crashes Found&amp;quot; &amp;amp; strSep
End if

Function DatetimeToDate(strDate)
   DatetimeToDate = _
       CDate(Mid(strDate, 5, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Mid(strDate, 7, 2) &amp;amp; _
       &amp;quot;/&amp;quot; &amp;amp; _
       Left(strDate, 4) &amp;amp; _
       &amp;quot; &amp;quot; &amp;amp; _
       Mid (strDate, 9, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 11, 2) &amp;amp; _
       &amp;quot;:&amp;quot; &amp;amp; _
       Mid(strDate, 13, 2))
End Function

Function GetTimeWrittenByDaysOld(days)
   &amp;#039;subtract &amp;quot;days&amp;quot; days worth of seconds

	Dim epoc, monthAgo   
   	epoc = date2epoch(Now()) - days*24*60*60
   	monthAgo = epoch2date(epoc)
   
	Dim dateTime
	Set dateTime = CreateObject(&amp;quot;WbemScripting.SWbemDateTime&amp;quot;)
	dateTime.SetVarDate monthAgo, True
	 
  	GetTimeWrittenByDaysOld = dateTime
End Function

function date2epoch(myDate)
   date2epoch = DateDiff(&amp;quot;s&amp;quot;, &amp;quot;01/01/1970 00:00:00&amp;quot;, myDate)
end Function

function epoch2date(myEpoch)
   epoch2date = DateAdd(&amp;quot;s&amp;quot;, myEpoch, &amp;quot;01/01/1970 00:00:00&amp;quot;)
end Function
&amp;#039;------------ INCLUDES after this line. Do not edit past this point -----
&amp;#039;- Begin file: utils/SensorRandomization/SensorRandomizationFunctions.vbs
&amp;#039;&amp;#039; -- Begin Random Sleep Functions -- &amp;#039;&amp;#039;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &amp;#039; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &amp;#039; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&amp;#039; sleeps for a random period of time, intSleepTime is in seconds
&amp;#039; if the sensor randomize flag is on
&amp;#039; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&amp;#039; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;amp;&amp;quot;\Sensor Data\Random Sleep&amp;quot;
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeFlag&amp;quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strRandomizeRegPath&amp;amp;&amp;quot;\SensorRandomizeScalingPercentage&amp;quot;)
	On Error Goto 0
	If intRandomizeFlag &amp;gt; 0 Then
		If intRandomizeScalingPercentage &amp;gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &amp;quot;Randomize scaling percentage of &amp;quot; _ 
				&amp;amp; intRandomizeScalingPercentage &amp;amp; &amp;quot; applied, new sleep time is &amp;quot; &amp;amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &amp;#039; convert to milliseconds
		&amp;#039; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&amp;#039; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &amp;quot;Sleeping for &amp;quot; &amp;amp; intSensorRandomizeWaitTime &amp;amp; &amp;quot; milliseconds&amp;quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &amp;quot;Done sleeping, continuing ...&amp;quot;
	Else 
		SensorRandomizeEcho &amp;quot;SensorRandomize Not Enabled - No Op&amp;quot;
	End If
End Function &amp;#039;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&amp;#039; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &amp;lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID / Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID / Timer
	End If
End Function &amp;#039;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&amp;#039;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
	keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &amp;quot;&amp;quot; Then
  		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &amp;quot;&amp;quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
  	End If
End Function &amp;#039;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&amp;#039;&amp;#039; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &amp;quot;ComputerID&amp;quot;
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;strKeyPath&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strValueName)
    If Err.Number &amp;lt;&amp;gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &amp;#039;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &amp;lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &amp;#039;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &amp;#039;SensorRandomizeEcho
&amp;#039; -- End Random Sleep Functions --&amp;#039;
&amp;#039;- End file: utils/SensorRandomization/SensorRandomizationFunctions.vbs</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>124</source_id>
            <parameters>
              <parameter>
                <key>||days||</key>
                <value>5</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query for Application Crashes","defaultValue":"5","key":"days","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Process</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Date</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>1</hidden_flag>
              </subcolumn>
            </subcolumns>
            <cache_row_id>327</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967290</id>
            <name>Linux:tempsensor_5</name>
            <hash>3478889788</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;days&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query for Application Crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>124</source_id>
            <parameters>
              <parameter>
                <key>||days||</key>
                <value>5</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query for Application Crashes","defaultValue":"5","key":"days","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>|</delimiter>
            <subcolumns>
              <subcolumn>
                <name>Process</name>
                <index>0</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>0</hidden_flag>
              </subcolumn>
              <subcolumn>
                <name>Date</name>
                <index>1</index>
                <value_type>String</value_type>
                <ignore_case_flag>1</ignore_case_flag>
                <hidden_flag>1</hidden_flag>
              </subcolumn>
            </subcolumns>
            <cache_row_id>328</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967289</id>
            <name>Last System Crash in X Days[7]</name>
            <hash>3478890223</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Last System Crash in X Days
&amp;#039;========================================

dayThresh = LCase(Trim(Unescape(&amp;quot;7&amp;quot;)))
&amp;#039;dayThresh = LCase(Trim(Unescape(&amp;quot;1&amp;quot;)))
If Not IsNumeric(dayThresh) Then 
    WScript.Echo &amp;quot;Parameter Not Number&amp;quot;
    WScript.Quit
End If 
dayThresh = Cint(dayThresh)

Dim strValueName, strKey

strValueName = &amp;quot;DumpFile&amp;quot;
strDumpsDirName = &amp;quot;MinidumpDir&amp;quot;

strKey = &amp;quot;SYSTEM\CurrentControlSet\Control\CrashControl&amp;quot;

Set objReg=GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&amp;quot;)
Const HKLM = &amp;amp;h80000002

&amp;#039;Uses date math - set locale

SetLocale(GetTaniumLocale)

Dim fso
Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

&amp;#039;Get main dump file
Dim mainDumpDate
If RegKeyExists(objReg, HKLM, strKey) Then
	objReg.GetExpandedStringValue HKLM, strKey, strValueName, strValue

	If fso.FileExists(strValue) Then
		
		Set objFile = fso.GetFile(strValue)
		mainDumpDate = objfile.DateLastModified
	End If
Else
	WScript.Echo &amp;quot;Error, Dump key not found: HKLM\SYSTEM\CurrentControlSet\Control\CrashControl&amp;quot;
End If


&amp;#039;Examine minidump folder
Dim newestMini

If RegKeyExists(objReg, HKLM, strKey) Then
	objReg.GetExpandedStringValue HKLM, strKey, strDumpsDirName, strDumpDir

	If fso.FolderExists(strDumpDir) Then
		Set oFolder = fso.GetFolder(strDumpDir)
		For Each sFile In oFolder.Files
		    If newestMini = &amp;quot;&amp;quot; Then
		        Set newestMini = sFile
		    Else
		        If newestMini.DateLastModified &amp;lt; sFile.DateLastModified Then
		          Set newestMini = sFile
		        End If
		    End If
		Next
	End If
End If



If newestMini = &amp;quot;&amp;quot; And mainDumpDate = &amp;quot;&amp;quot; Then
	WScript.Echo &amp;quot;No system crashes found&amp;quot;
	WScript.Quit
End If

Dim responseDate
If newestMini = &amp;quot;&amp;quot; Then	
	responseDate = mainDumpDate
ElseIf mainDumpDate = &amp;quot;&amp;quot; Then
	responseDate = newestMini.DateLastModified
Else
	If newestMini.DateLastModified &amp;lt; mainDumpDate Then
		responseDate = mainDumpDate
	Else
		responseDate = newestMini.DateLastModified	
	End If
End If

current = Now()
dayDiff = DateDiff(&amp;quot;d&amp;quot;, responseDate, current)

Dim arrTemp
If dayDiff &amp;lt;= dayThresh Then
	arrTemp = Split(responseDate)
	responseDate = arrTemp(0)

	WScript.Echo responseDate
Else 
	WScript.Echo &amp;quot;No system crashes in day range&amp;quot;
End If	

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function GetTaniumLocale
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

	Dim objWshShell
	Dim intLocaleID
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Tanium\Tanium Client\LocaleID&amp;quot;)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client\LocaleID&amp;quot;)
	End If
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	&amp;#039; Cleanup
	Set objWshShell = Nothing

End Function &amp;#039;GetTaniumLocale</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>122</source_id>
            <parameters>
              <parameter>
                <key>||dayThresh||</key>
                <value>7</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query and return system crashes","defaultValue":"5","key":"dayThresh","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>329</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967288</id>
            <name>Linux:tempsensor_7</name>
            <hash>3478892398</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;dayThresh&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query and return system crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 7  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;dayThresh&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query and return system crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 7  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;dayThresh&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query and return system crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 7  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Days&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;dayThresh&amp;quot;,&amp;quot;maximum&amp;quot;:365,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of days to query and return system crashes&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 7  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>122</source_id>
            <parameters>
              <parameter>
                <key>||dayThresh||</key>
                <value>7</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Days","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of days to query and return system crashes","defaultValue":"5","key":"dayThresh","maximum":365,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>330</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967287</id>
            <name>High Memory Processes[5]</name>
            <hash>3478892833</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; High Memory Processes
&amp;#039;========================================

topNum = Trim(Unescape(&amp;quot;5&amp;quot;))
If Not IsNumeric(topNum) Then 
	WScript.Echo &amp;quot;Parameter Not Number&amp;quot;
	WScript.Quit
End If 
topNum = Cint(topNum)

printMemory = false

Dim objWMIService, objItem, colItems, query
Dim strComputer, strList


strComputer = &amp;quot;.&amp;quot;
Set objWMIService = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\&amp;quot; &amp;amp; strComputer&amp;amp; &amp;quot;\root\cimv2&amp;quot;)

Const MaxCharacters = 255
Const adBSTR = 8 
Const adDouble = 5
Set DataList = CreateObject(&amp;quot;ADOR.Recordset&amp;quot;)
DataList.Fields.Append &amp;quot;ProcessName&amp;quot;, adBSTR, MaxCharacters
DataList.Fields.Append &amp;quot;ProcessMemory&amp;quot;, adDouble

DataList.Open

Set colProcs = objWMIService.ExecQuery(&amp;quot;Select Name, WorkingSetSize From Win32_Process&amp;quot;)
For Each proc in colProcs
   DataList.AddNew
   DataList(&amp;quot;ProcessName&amp;quot;) = proc.Name
   DataList(&amp;quot;ProcessMemory&amp;quot;) = round(cdbl(proc.WorkingSetSize)/1024/1024, 0)
   DataList.Update
Next
DataList.Sort = &amp;quot;ProcessMemory DESC&amp;quot;
DataList.MoveFirst
i = 1
Do Until DataList.EOF Or i &amp;gt; topNum
   Set field = DataList.Fields
   strPrint = CleanString(DataList.Fields.Item(&amp;quot;ProcessName&amp;quot;))
   If printMemory Then
      strPrint = strPrint &amp;amp; &amp;quot; (&amp;quot; &amp;amp; DataList.Fields.Item(&amp;quot;ProcessMemory&amp;quot;) &amp;amp; &amp;quot; Mb)&amp;quot;
   End if   
   WScript.Echo strPrint
   DataList.MoveNext
   i = i + 1
Loop

WScript.Quit

&amp;#039;removes .exe and process number at end of process
Function CleanString(str)
	words = Split(str, &amp;quot;#&amp;quot;)
	str = words(0)

	If Right(str, 4) = &amp;quot;.exe&amp;quot; Then
		str = Left(str, Len(str) - 4)
	End If 
	CleanString = str
End Function</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>82</source_id>
            <parameters>
              <parameter>
                <key>||numOutput||</key>
                <value>5</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Processes","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of processes to return","defaultValue":"5","key":"numOutput","maximum":50,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>331</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967286</id>
            <name>Linux:tempsensor_9</name>
            <hash>1488401243</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

COLUMNS=200 
percent_decode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

howMany=$(percent_decode &amp;quot;5&amp;quot;)
ps -eo &amp;quot;%mem comm&amp;quot; | grep -v &amp;#039;^%CPU&amp;#039; | sort -rn | head -&amp;quot;$howMany&amp;quot; | sed &amp;#039;s/^[ ]*[^ ]*[ ]*//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

COLUMNS=200 
percent_decode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

howMany=$(percent_decode &amp;quot;5&amp;quot;)
ps -eo &amp;quot;%mem comm&amp;quot; | grep -v &amp;#039;^%CPU&amp;#039; | sort -rn | head -&amp;quot;$howMany&amp;quot; | sed &amp;#039;s/^[ ]*[^ ]*[ ]*//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Processes&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;numOutput&amp;quot;,&amp;quot;maximum&amp;quot;:50,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of processes to return&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Processes&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;numOutput&amp;quot;,&amp;quot;maximum&amp;quot;:50,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of processes to return&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>82</source_id>
            <parameters>
              <parameter>
                <key>||numOutput||</key>
                <value>5</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Processes","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of processes to return","defaultValue":"5","key":"numOutput","maximum":50,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>332</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967285</id>
            <name>High CPU Processes[5]</name>
            <hash>1488400808</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; High CPU Processes
&amp;#039;========================================

topNum = Trim(Unescape(&amp;quot;5&amp;quot;))
If Not IsNumeric(topNum) Then 
	WScript.Echo &amp;quot;Parameter Not Number&amp;quot;
	WScript.Quit
End If 
topNum = Cint(topNum)

printPercent = false
Const HKLM = &amp;amp;H80000002 
strComputer = &amp;quot;.&amp;quot;

Set objWMIService = GetObject(&amp;quot;Winmgmts:{impersonationlevel=impersonate}!\Root\Cimv2&amp;quot;)

Const MaxCharacters = 255
Const adBSTR = 8 
Const adDouble = 5

Set DataList = CreateObject(&amp;quot;ADOR.Recordset&amp;quot;)
DataList.Fields.Append &amp;quot;ProcessName&amp;quot;, adBSTR, MaxCharacters
DataList.Fields.Append &amp;quot;ProcessCPU1&amp;quot;, adDouble
DataList.Fields.Append &amp;quot;ProcessCPU2&amp;quot;, adDouble
DataList.Fields.Append &amp;quot;ProcessCPUDiff&amp;quot;, adDouble
DataList.Open

Dim total1, total2, totalDiff

Set colProcItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process&amp;quot;)   
For Each objItem in colProcItems
   If objItem.Name &amp;lt;&amp;gt; &amp;quot;Idle&amp;quot; And objItem.Name &amp;lt;&amp;gt; &amp;quot;_Total&amp;quot; Then
      DataList.AddNew
      DataList(&amp;quot;ProcessName&amp;quot;) = objItem.Name
      DataList(&amp;quot;ProcessCPU1&amp;quot;) = objItem.PercentProcessorTime
      DataList.Update
   ElseIf objItem.Name = &amp;quot;_Total&amp;quot; Then 
      total1 = CDbl(objItem.PercentProcessorTime)
   End If
Next

sleep = 5
WScript.Sleep(sleep * 1000)

Set colProcItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_PerfRawData_PerfProc_Process&amp;quot;)   
For Each objItem in colProcItems
   If objItem.Name &amp;lt;&amp;gt; &amp;quot;Idle&amp;quot; And objItem.Name &amp;lt;&amp;gt; &amp;quot;_Total&amp;quot; Then
      
      DataList.MoveFirst
      DataList.Find(&amp;quot;ProcessName = &amp;#039;&amp;quot;&amp;amp; objItem.Name&amp;amp;&amp;quot;&amp;#039;&amp;quot;)

      If DataList.EOF Then
              WScript.Echo &amp;quot;** Not Found **&amp;quot;
      Else
         DataList(&amp;quot;ProcessCPU2&amp;quot;) = objItem.PercentProcessorTime
         DataList(&amp;quot;ProcessCPUDiff&amp;quot;) = DataList(&amp;quot;ProcessCPU2&amp;quot;) - DataList(&amp;quot;ProcessCPU1&amp;quot;)
         DataList.Update
           &amp;#039;WScript.Echo &amp;quot;name: &amp;quot; &amp;amp; DataList.Fields.Item(&amp;quot;ProcessName&amp;quot;) &amp;amp; &amp;quot;, cpu 1: &amp;quot; &amp;amp; DataList.Fields.Item(&amp;quot;ProcessCPU1&amp;quot;) &amp;amp; &amp;quot;, cpu 2: &amp;quot; &amp;amp; DataList.Fields.Item(&amp;quot;ProcessCPU2&amp;quot;)
      End if
   ElseIf objItem.Name = &amp;quot;_Total&amp;quot; Then 
      total2 = CDbl(objItem.PercentProcessorTime)
      totalDiff = total2 - total1
   End If
Next

DataList.Sort = &amp;quot;ProcessCPUDiff DESC&amp;quot;
DataList.MoveFirst
i = 1
Do Until DataList.EOF  Or i &amp;gt; topNum
   strPrint = CleanString(DataList.Fields.Item(&amp;quot;ProcessName&amp;quot;))
   If printPercent Then
      strPrint = strPrint &amp;amp; &amp;quot; (&amp;quot; &amp;amp; Round(DataList.Fields.Item(&amp;quot;ProcessCPUDiff&amp;quot;) / totalDiff * 100, 0) &amp;amp; &amp;quot;%)&amp;quot;
   End if   
   WScript.Echo strPrint
   DataList.MoveNext
   i = i + 1
Loop

WScript.Quit

&amp;#039;removes .exe and process number at end of 
Function CleanString(str)
	words = Split(str, &amp;quot;#&amp;quot;)
	str = words(0)
	CleanString = str

	If Right(str, 4) = &amp;quot;.exe&amp;quot; Then
		str = Left(str, Len(str) - 4)
	End If 
End Function</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>80</source_id>
            <parameters>
              <parameter>
                <key>||numOutput||</key>
                <value>5</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Processes","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of processes to return","defaultValue":"5","key":"numOutput","maximum":50,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>333</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967284</id>
            <name>Linux:tempsensor_11</name>
            <hash>1488402113</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

COLUMNS=200 
percent_decode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

howMany=$(percent_decode &amp;quot;5&amp;quot;)
ps -eo &amp;quot;%cpu comm&amp;quot; | grep -v &amp;#039;^%CPU&amp;#039; | sort -rn | head -&amp;quot;$howMany&amp;quot; | sed &amp;#039;s/^[ ]*[^ ]*[ ]*//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

COLUMNS=200 
percent_decode() {
        local data=$(echo &amp;quot;$1&amp;quot; | sed &amp;#039;s/%/\\x/g&amp;#039;)
        /usr/bin/printf &amp;#039;%b&amp;#039; &amp;quot;$data&amp;quot;
}

howMany=$(percent_decode &amp;quot;5&amp;quot;)
ps -eo &amp;quot;%cpu comm&amp;quot; | grep -v &amp;#039;^%CPU&amp;#039; | sort -rn | head -&amp;quot;$howMany&amp;quot; | sed &amp;#039;s/^[ ]*[^ ]*[ ]*//&amp;#039;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Processes&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;numOutput&amp;quot;,&amp;quot;maximum&amp;quot;:50,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of processes to return&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;label&amp;quot;:&amp;quot;Number of Processes&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;numOutput&amp;quot;,&amp;quot;maximum&amp;quot;:50,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the number of processes to return&amp;quot;,&amp;quot;stepSize&amp;quot;:1,&amp;quot;minimum&amp;quot;:1,&amp;quot;snapInterval&amp;quot;:1,&amp;quot;defaultValue&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::NumericParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# 5  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>80</source_id>
            <parameters>
              <parameter>
                <key>||numOutput||</key>
                <value>5</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Number of Processes","snapInterval":1,"stepSize":1,"minimum":1,"helpString":"Enter the number of processes to return","defaultValue":"5","key":"numOutput","maximum":50,"value":"5","parameterType":"com.tanium.components.parameters::NumericParameter","model":"com.tanium.components.parameters::NumericParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>334</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967283</id>
            <name>Tanium Client Explicit Setting[LogVerbosityLevel]</name>
            <hash>1488401678</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Registry Value Data
&amp;#039;========================================

&amp;#039;Columns:
&amp;#039; User | Data | Type | Architecture | KeyPath | Value

&amp;#039; Value is a hidden column for later use in sensor-fed actions (modify, delete)

strKey = &amp;quot;HKLM\&amp;quot;&amp;amp;GetTaniumRegistryPath()
strValue = unescape(&amp;quot;LogVerbosityLevel&amp;quot;)

&amp;#039;strKey = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
&amp;#039;strValue = &amp;quot;Version&amp;quot;

&amp;#039;strKey = &amp;quot;HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Internet Settings&amp;quot;
&amp;#039;strValue = &amp;quot;Emailname&amp;quot;
strSep = &amp;quot;~~&amp;quot;


&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive

&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)

If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
	For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserName = GetUserForSIDLocal(objReg,strUserKey)
			If strUserName = False Then strUserName = strUserKey
			strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
			hasValues32 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 32)
			If hasValues32 Then hasAnyResult = True
		End If
	Next
Else &amp;#039; was another hive
	hasValues32 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 32)
	If hasValues32 Then hasAnyResult = True
End If


If Is64 Then
	Set objCtx = GetObjCtx(64)
	Set objReg = GetObjReg(objCtx)
	If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
	&amp;#039; go through each User&amp;#039;s hive in 64-bit context
		For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
				strUserName = GetUserForSIDLocal(objReg,strUserKey)
				If strUserName = False Then strUserName = strUserKey
				strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
				hasValues64 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 64)
				If hasValues64 Then hasAnyResult = True	
			End If
		Next
	Else &amp;#039; was another hive
		hasValues64 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 64)
		If hasValues64 Then hasAnyResult = True
	End If
End If

If Not (hasAnyResult) Then
	WScript.Echo &amp;quot;Key/Value not found&amp;quot;
End If

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists

&amp;#039;Goes through all values in a key, returns True if strValue is found
Function CheckValues(objReg, objCtx, constHive, strKey, strValue, intBit)

	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
	
	arrNames = Outparams.sNames
	arrTypes = Outparams.Types

	If Not IsNull(arrNames) Then
		For i = LBound(arrNames) To UBound(arrNames)
			strValueName = arrNames(i)
			
			&amp;#039;if strValue is found, echo
			If LCase(strValueName) = LCase(strValue) Then
				EchoValue objReg, objCtx, constHive, strKey, strValue, arrTypes(i), intBit
				CheckValues = True
				Exit Function
			End If
		Next
	End If
	CheckValues = False
End Function

Function GetDisplayString(strKey, strType, strValue, intBit)
	If intBit = 64 Then
		strArch = &amp;quot;64-bit&amp;quot;
	Else
		strArch = &amp;quot;32-bit&amp;quot;
	End If
			
	GetDisplayString = strValue
End Function

Function EchoValue(objReg, objCtx, constHive, strKey, strValue, constType, intBit)
	&amp;#039; Note the key that was being searched, will be a hidden column
	strOutputKey = strHive&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
	
	Dim objInParams, objOutParams
	Select Case constType
		Case REG_SZ  
			Set objInParams = objReg.Methods_(&amp;quot;GetStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetStringValue&amp;quot;, objInParams, , objCtx)
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_SZ&amp;quot;, objOutParams.sValue, intBit)
		Case REG_EXPAND_SZ
			Set objInParams = objReg.Methods_(&amp;quot;GetExpandedStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetExpandedStringValue&amp;quot;, objInParams, , objCtx)
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_EXPAND_SZ&amp;quot;, objOutParams.sValue, intBit)
		Case REG_BINARY
			Set objInParams = objReg.Methods_(&amp;quot;GetBinaryValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetBinaryValue&amp;quot;, objInParams, , objCtx)

			strBytes = &amp;quot;&amp;quot;
			For Each uByte in objOutParams.uValue
				strTemp = Hex(uByte)
				If Len(strTemp) &amp;lt; 2 Then
					strTemp = &amp;quot;0&amp;quot; &amp;amp; strTemp
				End If	
				strBytes = strBytes &amp;amp; strTemp &amp;amp; &amp;quot; &amp;quot;
			Next
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_BINARY&amp;quot;, strBytes, intBit)
		Case REG_DWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetDWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetDWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_DWORD&amp;quot;, CStr(objOutParams.uValue), intBit)
		Case REG_QWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetQWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetQWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_QWORD&amp;quot;, CStr(objOutParams.uValue), intBit)
		Case REG_MULTI_SZ
		    Set objInParams = objReg.Methods_(&amp;quot;GetMultiStringValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetMultiStringValue&amp;quot;, objInParams, , objCtx)
		
			arrValues = objOutParams.sValue
			strResponse = &amp;quot;&amp;quot;

			For Each strTemp In arrValues
				If strResponse = &amp;quot;&amp;quot; Then
					strResponse = strTemp
				Else
					strResponse = strResponse &amp;amp; vbCrLf &amp;amp; strTemp
				End If
			Next
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_MULTI_SZ&amp;quot;, strResponse, intBit)
	End Select
End Function


Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	GetSubKeys = Outparams.sNames
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function


Function GetHiveConst(hive)
	Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
	Const HKEY_CURRENT_USER   = &amp;amp;H80000001
	Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
	Const HKEY_USERS          = &amp;amp;H80000003

	Select Case UCase(hive)
		Case &amp;quot;HKLM&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKCR&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
			GetHiveConst = HKEY_CURRENT_USER
		Case &amp;quot;HKEY_USERS&amp;quot;
			GetHiveConst = HKEY_USERS
	End Select
	
	If IsEmpty(GetHiveConst) Then
		WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
		WScript.Quit
	End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
			strUserData = Left(strUserData,intDatPos - 1)
			&amp;#039; find last backslash
			intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
			&amp;#039; get right from that pos
			strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
			GetUserForSIDLocal = strUserData
		Else
			strUserData = False
		End If
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>26</source_id>
            <parameters>
              <parameter>
                <key>||setting||</key>
                <value>LogVerbosityLevel</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Client Setting Name","helpString":"The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)","defaultValue":"","promptText":"Enter the Client Setting Name","maxChars":64,"key":"setting","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>335</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967282</id>
            <name>Linux:tempsensor_13</name>
            <hash>1488402983</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# LogVerbosityLevel  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# LogVerbosityLevel  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# LogVerbosityLevel  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# LogVerbosityLevel  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>26</source_id>
            <parameters>
              <parameter>
                <key>||setting||</key>
                <value>LogVerbosityLevel</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Client Setting Name","helpString":"The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)","defaultValue":"","promptText":"Enter the Client Setting Name","maxChars":64,"key":"setting","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>336</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967281</id>
            <name>Tanium Client Explicit Setting[SaveClientStateIntervalInSeconds]</name>
            <hash>1488402548</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Registry Value Data
&amp;#039;========================================

&amp;#039;Columns:
&amp;#039; User | Data | Type | Architecture | KeyPath | Value

&amp;#039; Value is a hidden column for later use in sensor-fed actions (modify, delete)

strKey = &amp;quot;HKLM\&amp;quot;&amp;amp;GetTaniumRegistryPath()
strValue = unescape(&amp;quot;SaveClientStateIntervalInSeconds&amp;quot;)

&amp;#039;strKey = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
&amp;#039;strValue = &amp;quot;Version&amp;quot;

&amp;#039;strKey = &amp;quot;HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Internet Settings&amp;quot;
&amp;#039;strValue = &amp;quot;Emailname&amp;quot;
strSep = &amp;quot;~~&amp;quot;


&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive

&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)

If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
	For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserName = GetUserForSIDLocal(objReg,strUserKey)
			If strUserName = False Then strUserName = strUserKey
			strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
			hasValues32 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 32)
			If hasValues32 Then hasAnyResult = True
		End If
	Next
Else &amp;#039; was another hive
	hasValues32 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 32)
	If hasValues32 Then hasAnyResult = True
End If


If Is64 Then
	Set objCtx = GetObjCtx(64)
	Set objReg = GetObjReg(objCtx)
	If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
	&amp;#039; go through each User&amp;#039;s hive in 64-bit context
		For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
				strUserName = GetUserForSIDLocal(objReg,strUserKey)
				If strUserName = False Then strUserName = strUserKey
				strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
				hasValues64 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 64)
				If hasValues64 Then hasAnyResult = True	
			End If
		Next
	Else &amp;#039; was another hive
		hasValues64 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 64)
		If hasValues64 Then hasAnyResult = True
	End If
End If

If Not (hasAnyResult) Then
	WScript.Echo &amp;quot;Key/Value not found&amp;quot;
End If

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists

&amp;#039;Goes through all values in a key, returns True if strValue is found
Function CheckValues(objReg, objCtx, constHive, strKey, strValue, intBit)

	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
	
	arrNames = Outparams.sNames
	arrTypes = Outparams.Types

	If Not IsNull(arrNames) Then
		For i = LBound(arrNames) To UBound(arrNames)
			strValueName = arrNames(i)
			
			&amp;#039;if strValue is found, echo
			If LCase(strValueName) = LCase(strValue) Then
				EchoValue objReg, objCtx, constHive, strKey, strValue, arrTypes(i), intBit
				CheckValues = True
				Exit Function
			End If
		Next
	End If
	CheckValues = False
End Function

Function GetDisplayString(strKey, strType, strValue, intBit)
	If intBit = 64 Then
		strArch = &amp;quot;64-bit&amp;quot;
	Else
		strArch = &amp;quot;32-bit&amp;quot;
	End If
			
	GetDisplayString = strValue
End Function

Function EchoValue(objReg, objCtx, constHive, strKey, strValue, constType, intBit)
	&amp;#039; Note the key that was being searched, will be a hidden column
	strOutputKey = strHive&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
	
	Dim objInParams, objOutParams
	Select Case constType
		Case REG_SZ  
			Set objInParams = objReg.Methods_(&amp;quot;GetStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetStringValue&amp;quot;, objInParams, , objCtx)
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_SZ&amp;quot;, objOutParams.sValue, intBit)
		Case REG_EXPAND_SZ
			Set objInParams = objReg.Methods_(&amp;quot;GetExpandedStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetExpandedStringValue&amp;quot;, objInParams, , objCtx)
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_EXPAND_SZ&amp;quot;, objOutParams.sValue, intBit)
		Case REG_BINARY
			Set objInParams = objReg.Methods_(&amp;quot;GetBinaryValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetBinaryValue&amp;quot;, objInParams, , objCtx)

			strBytes = &amp;quot;&amp;quot;
			For Each uByte in objOutParams.uValue
				strTemp = Hex(uByte)
				If Len(strTemp) &amp;lt; 2 Then
					strTemp = &amp;quot;0&amp;quot; &amp;amp; strTemp
				End If	
				strBytes = strBytes &amp;amp; strTemp &amp;amp; &amp;quot; &amp;quot;
			Next
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_BINARY&amp;quot;, strBytes, intBit)
		Case REG_DWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetDWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetDWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_DWORD&amp;quot;, CStr(objOutParams.uValue), intBit)
		Case REG_QWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetQWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetQWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_QWORD&amp;quot;, CStr(objOutParams.uValue), intBit)
		Case REG_MULTI_SZ
		    Set objInParams = objReg.Methods_(&amp;quot;GetMultiStringValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetMultiStringValue&amp;quot;, objInParams, , objCtx)
		
			arrValues = objOutParams.sValue
			strResponse = &amp;quot;&amp;quot;

			For Each strTemp In arrValues
				If strResponse = &amp;quot;&amp;quot; Then
					strResponse = strTemp
				Else
					strResponse = strResponse &amp;amp; vbCrLf &amp;amp; strTemp
				End If
			Next
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_MULTI_SZ&amp;quot;, strResponse, intBit)
	End Select
End Function


Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	GetSubKeys = Outparams.sNames
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function


Function GetHiveConst(hive)
	Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
	Const HKEY_CURRENT_USER   = &amp;amp;H80000001
	Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
	Const HKEY_USERS          = &amp;amp;H80000003

	Select Case UCase(hive)
		Case &amp;quot;HKLM&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKCR&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
			GetHiveConst = HKEY_CURRENT_USER
		Case &amp;quot;HKEY_USERS&amp;quot;
			GetHiveConst = HKEY_USERS
	End Select
	
	If IsEmpty(GetHiveConst) Then
		WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
		WScript.Quit
	End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
			strUserData = Left(strUserData,intDatPos - 1)
			&amp;#039; find last backslash
			intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
			&amp;#039; get right from that pos
			strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
			GetUserForSIDLocal = strUserData
		Else
			strUserData = False
		End If
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>26</source_id>
            <parameters>
              <parameter>
                <key>||setting||</key>
                <value>SaveClientStateIntervalInSeconds</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Client Setting Name","helpString":"The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)","defaultValue":"","promptText":"Enter the Client Setting Name","maxChars":64,"key":"setting","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>337</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967280</id>
            <name>Linux:tempsensor_15</name>
            <hash>1488403853</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# SaveClientStateIntervalInSeconds  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# SaveClientStateIntervalInSeconds  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# SaveClientStateIntervalInSeconds  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# SaveClientStateIntervalInSeconds  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>26</source_id>
            <parameters>
              <parameter>
                <key>||setting||</key>
                <value>SaveClientStateIntervalInSeconds</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Client Setting Name","helpString":"The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)","defaultValue":"","promptText":"Enter the Client Setting Name","maxChars":64,"key":"setting","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>338</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967279</id>
            <name>Tanium Client Explicit Setting[RandomSensorDelayInSeconds]</name>
            <hash>1488403418</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Registry Value Data
&amp;#039;========================================

&amp;#039;Columns:
&amp;#039; User | Data | Type | Architecture | KeyPath | Value

&amp;#039; Value is a hidden column for later use in sensor-fed actions (modify, delete)

strKey = &amp;quot;HKLM\&amp;quot;&amp;amp;GetTaniumRegistryPath()
strValue = unescape(&amp;quot;RandomSensorDelayInSeconds&amp;quot;)

&amp;#039;strKey = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
&amp;#039;strValue = &amp;quot;Version&amp;quot;

&amp;#039;strKey = &amp;quot;HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Internet Settings&amp;quot;
&amp;#039;strValue = &amp;quot;Emailname&amp;quot;
strSep = &amp;quot;~~&amp;quot;


&amp;#039;Constants for value types
Const REG_SZ        = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY    = 3
Const REG_DWORD     = 4
Const REG_MULTI_SZ  = 7
Const REG_QWORD     = 11


&amp;#039;Split up strKey into the hive constant and the registry key
words = Split(strKey, &amp;quot;\&amp;quot;)
strHive = words(0)
constHive = GetHiveConst(strHive)

strKey = Right(strKey, Len(strKey) - Len(strHive) -1)

&amp;#039;Global for Username
Dim strUserName
strUserName = &amp;quot;N/A&amp;quot; &amp;#039; default value, overridden if HKEY_USERS hive

&amp;#039;Set up registry objects for 32-bit, then check value
&amp;#039;Need to check all values of key in order to get type
Set objCtx = GetObjCtx(32)
Set objReg = GetObjReg(objCtx)

If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
&amp;#039; go through each User&amp;#039;s hive
	For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
			strUserName = GetUserForSIDLocal(objReg,strUserKey)
			If strUserName = False Then strUserName = strUserKey
			strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
			hasValues32 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 32)
			If hasValues32 Then hasAnyResult = True
		End If
	Next
Else &amp;#039; was another hive
	hasValues32 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 32)
	If hasValues32 Then hasAnyResult = True
End If


If Is64 Then
	Set objCtx = GetObjCtx(64)
	Set objReg = GetObjReg(objCtx)
	If strHive = &amp;quot;HKEY_USERS&amp;quot; Then
	&amp;#039; go through each User&amp;#039;s hive in 64-bit context
		For Each strUserKey In GetSubKeys(objReg, objCtx, constHive, &amp;quot;&amp;quot;)
		If Not InStr(strUserKey,&amp;quot;_Classes&amp;quot;) &amp;gt; 0 Then &amp;#039; ignore _Classes entries
				strUserName = GetUserForSIDLocal(objReg,strUserKey)
				If strUserName = False Then strUserName = strUserKey
				strFullUserKey = strUserKey&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
				hasValues64 = CheckValues(objReg, objCTX, constHive, strFullUserKey, strValue, 64)
				If hasValues64 Then hasAnyResult = True	
			End If
		Next
	Else &amp;#039; was another hive
		hasValues64 = CheckValues(objReg, objCtx, constHive, strKey, strValue, 64)
		If hasValues64 Then hasAnyResult = True
	End If
End If

If Not (hasAnyResult) Then
	WScript.Echo &amp;quot;Key/Value not found&amp;quot;
End If

Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function &amp;#039;RegKeyExists

&amp;#039;Goes through all values in a key, returns True if strValue is found
Function CheckValues(objReg, objCtx, constHive, strKey, strValue, intBit)

	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumValues&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumValues&amp;quot;, Inparams,,objCtx)
	
	arrNames = Outparams.sNames
	arrTypes = Outparams.Types

	If Not IsNull(arrNames) Then
		For i = LBound(arrNames) To UBound(arrNames)
			strValueName = arrNames(i)
			
			&amp;#039;if strValue is found, echo
			If LCase(strValueName) = LCase(strValue) Then
				EchoValue objReg, objCtx, constHive, strKey, strValue, arrTypes(i), intBit
				CheckValues = True
				Exit Function
			End If
		Next
	End If
	CheckValues = False
End Function

Function GetDisplayString(strKey, strType, strValue, intBit)
	If intBit = 64 Then
		strArch = &amp;quot;64-bit&amp;quot;
	Else
		strArch = &amp;quot;32-bit&amp;quot;
	End If
			
	GetDisplayString = strValue
End Function

Function EchoValue(objReg, objCtx, constHive, strKey, strValue, constType, intBit)
	&amp;#039; Note the key that was being searched, will be a hidden column
	strOutputKey = strHive&amp;amp;&amp;quot;\&amp;quot;&amp;amp;strKey
	
	Dim objInParams, objOutParams
	Select Case constType
		Case REG_SZ  
			Set objInParams = objReg.Methods_(&amp;quot;GetStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetStringValue&amp;quot;, objInParams, , objCtx)
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_SZ&amp;quot;, objOutParams.sValue, intBit)
		Case REG_EXPAND_SZ
			Set objInParams = objReg.Methods_(&amp;quot;GetExpandedStringValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetExpandedStringValue&amp;quot;, objInParams, , objCtx)
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_EXPAND_SZ&amp;quot;, objOutParams.sValue, intBit)
		Case REG_BINARY
			Set objInParams = objReg.Methods_(&amp;quot;GetBinaryValue&amp;quot;).InParameters
			objInParams.hDefKey = constHive
			objInParams.sSubKeyName = strKey
			objInParams.sValueName = strValue			
			Set objOutParams = objReg.ExecMethod_(&amp;quot;GetBinaryValue&amp;quot;, objInParams, , objCtx)

			strBytes = &amp;quot;&amp;quot;
			For Each uByte in objOutParams.uValue
				strTemp = Hex(uByte)
				If Len(strTemp) &amp;lt; 2 Then
					strTemp = &amp;quot;0&amp;quot; &amp;amp; strTemp
				End If	
				strBytes = strBytes &amp;amp; strTemp &amp;amp; &amp;quot; &amp;quot;
			Next
			
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_BINARY&amp;quot;, strBytes, intBit)
		Case REG_DWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetDWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetDWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_DWORD&amp;quot;, CStr(objOutParams.uValue), intBit)
		Case REG_QWORD
		    Set objInParams = objReg.Methods_(&amp;quot;GetQWordValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetQWordValue&amp;quot;, objInParams, , objCtx)
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_QWORD&amp;quot;, CStr(objOutParams.uValue), intBit)
		Case REG_MULTI_SZ
		    Set objInParams = objReg.Methods_(&amp;quot;GetMultiStringValue&amp;quot;).InParameters
		    objInParams.hDefKey = constHive
		    objInParams.sSubKeyName = strKey
		    objInParams.sValueName = strValue
		    Set objOutParams = objReg.ExecMethod_(&amp;quot;GetMultiStringValue&amp;quot;, objInParams, , objCtx)
		
			arrValues = objOutParams.sValue
			strResponse = &amp;quot;&amp;quot;

			For Each strTemp In arrValues
				If strResponse = &amp;quot;&amp;quot; Then
					strResponse = strTemp
				Else
					strResponse = strResponse &amp;amp; vbCrLf &amp;amp; strTemp
				End If
			Next
		
			WScript.Echo GetDisplayString(strKey, &amp;quot;REG_MULTI_SZ&amp;quot;, strResponse, intBit)
	End Select
End Function


Function GetObjCtx(intArch)
	Dim objCtx
	Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
	objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, intArch
	objCtx.Add &amp;quot;__RequiredArchitecture&amp;quot;, TRUE
	Set GetObjCtx = objCtx
End Function

Function GetObjReg(objCtx)
	Dim objLocator, objServices
	Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
	Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
	Set GetObjReg = objServices.Get(&amp;quot;StdRegProv&amp;quot;) 
End Function

Function GetSubKeys(objReg, objCtx, constHive, strKey)
	Dim Inparams, Outparams
	Set Inparams = objReg.Methods_(&amp;quot;EnumKey&amp;quot;).Inparameters
	Inparams.Hdefkey = constHive
	Inparams.sSubkeyname = strKey
	Set Outparams = objReg.ExecMethod_(&amp;quot;EnumKey&amp;quot;, Inparams,,objCtx)
	GetSubKeys = Outparams.sNames
End Function

Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If		
	Next
End Function


Function GetHiveConst(hive)
	Const HKEY_CLASSES_ROOT   = &amp;amp;H80000000
	Const HKEY_CURRENT_USER   = &amp;amp;H80000001
	Const HKEY_LOCAL_MACHINE  = &amp;amp;H80000002
	Const HKEY_USERS          = &amp;amp;H80000003

	Select Case UCase(hive)
		Case &amp;quot;HKLM&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;
			GetHiveConst = HKEY_LOCAL_MACHINE
		Case &amp;quot;HKCR&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CLASSES_ROOT&amp;quot;
			GetHiveConst = HKEY_CLASSES_ROOT
		Case &amp;quot;HKEY_CURRENT_USER&amp;quot;
			GetHiveConst = HKEY_CURRENT_USER
		Case &amp;quot;HKEY_USERS&amp;quot;
			GetHiveConst = HKEY_USERS
	End Select
	
	If IsEmpty(GetHiveConst) Then
		WScript.Echo &amp;quot;Invalid registry hive: &amp;quot; &amp;amp; hive
		WScript.Quit
	End If
End Function

Function GetUserForSIDLocal(objReg,strSID)
&amp;#039; This function converts a SID to a user name
&amp;#039; by doing a registry lookup, avoiding an LDAP query
&amp;#039; this will fail in the case where the user&amp;#039;s name was changed in AD
&amp;#039; as they will still have their old home directory name

	Const HKLM = &amp;amp;h80000002
	
	Dim strHiveListKey,strUserData,intDatPos,intFinalBackslashPos
	
	strHiveListKey = &amp;quot;SYSTEM\CurrentControlSet\Control\hivelist&amp;quot;
	objReg.GetStringValue HKLM,strHiveListKey,&amp;quot;\Registry\User\&amp;quot;&amp;amp;strSID,strUserData
	If Not IsNull(strUserData) Then
	&amp;#039; strUserData would look like
	&amp;#039; \Device\HarddiskVolume2\Users\user.name\NTUSER.DAT
		intDatPos = InStr(UCase(strUserData),&amp;quot;\NTUSER.DAT&amp;quot;)
		&amp;#039; strip off the dat file
		If intDatPos &amp;gt; 0 Then &amp;#039; must be in string
			strUserData = Left(strUserData,intDatPos - 1)
			&amp;#039; find last backslash
			intFinalBackslashPos = InStrRev(strUserData,&amp;quot;\&amp;quot;)
			&amp;#039; get right from that pos
			strUserData = Right(strUserData,Len(strUserData) - intFinalBackslashPos)
			GetUserForSIDLocal = strUserData
		Else
			strUserData = False
		End If
	Else
		GetUserForSIDLocal = False
	End If
End Function &amp;#039;GetUserForSIDLocal</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>26</source_id>
            <parameters>
              <parameter>
                <key>||setting||</key>
                <value>RandomSensorDelayInSeconds</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Client Setting Name","helpString":"The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)","defaultValue":"","promptText":"Enter the Client Setting Name","maxChars":64,"key":"setting","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>339</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967278</id>
            <name>Linux:tempsensor_17</name>
            <hash>1488397763</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# RandomSensorDelayInSeconds  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# RandomSensorDelayInSeconds  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# RandomSensorDelayInSeconds  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;key&amp;quot;:&amp;quot;setting&amp;quot;,&amp;quot;promptText&amp;quot;:&amp;quot;Enter the Client Setting Name&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Client Setting Name&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;restrict&amp;quot;:null,&amp;quot;maxChars&amp;quot;:64,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# RandomSensorDelayInSeconds  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>26</source_id>
            <parameters>
              <parameter>
                <key>||setting||</key>
                <value>RandomSensorDelayInSeconds</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Client Setting Name","helpString":"The Client Setting Name must be typed exactly as it appears in the client registry, including necessary underscores. NOTE: most settings have no spaces (Example: LogVerbosityLevel)","defaultValue":"","promptText":"Enter the Client Setting Name","maxChars":64,"key":"setting","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>340</cache_row_id>
          </sensor>
          <sensor>
            <id>643</id>
            <name>Has Stale Tanium Client Data</name>
            <hash>3005061811</hash>
            <string_count>2</string_count>
            <category>Tanium Diagnostics</category>
            <description>Evaluates whether a machine has stale Tanium Client data - long running processes, old action status/log files, action folders, or sensor output.
Example: Yes</description>
            <creation_time>2015-09-14T13:39:26</creation_time>
            <modification_time>2015-09-14T13:39:26</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Has Stale Tanium Client Data
&amp;#039;========================================
&amp;#039; This  sensor  will  return  Yes  if   a
&amp;#039; machine has processes running from  the
&amp;#039; Tanium sensor or action directory  that
&amp;#039; have been running longer than a day,
&amp;#039; has  stale  action  status or log files 
&amp;#039; older than 4 days, has stale sensor 
&amp;#039; output data older than a day, has old
&amp;#039; action folders, has stale string /node data

Option Explicit

Dim intProcessesThreshold,intSensorDataThreshold,intStaleStatusFilesThreshold,dictDumps,bExtraDumpFiles
Dim intStaleActionFoldersThreshold,intStaleFilesWantedDownloadThreshold,intStaleQNAThreshold,intMaxClientRAMInMB,MIN_CLIENT_STRING_NODE_THRESHOLD

intProcessesThreshold = 1440  &amp;#039; one day in minutes
intSensorDataThreshold = 1440  &amp;#039; one day in minutes
intStaleStatusFilesThreshold = 5670 &amp;#039; 4 days in minutes
intStaleQNAThreshold = 1440 &amp;#039; one day in minutes
intStaleActionFoldersThreshold = 2880 &amp;#039;two days in minutes
&amp;#039;intStaleFilesWantedDownloadThreshold = 0 &amp;#039;uncomment out this line and comment next to disable
intStaleFilesWantedDownloadThreshold = 5670 &amp;#039;4 days in minutes
&amp;#039; report stale string data when Client RAM is above this value
&amp;#039; intMaxClientRAMInMB = 0 &amp;#039; uncomment out this line and comment next to disable
intMaxClientRAMInMB = 200 &amp;#039; check for client &amp;gt; 200
&amp;#039;set a minimum value which must match the value
&amp;#039; MIN_CLIENT_MEMORY_RESTART_THRESHOLD
&amp;#039; in the corresponding Clean Stale Client Data Action
MIN_CLIENT_STRING_NODE_THRESHOLD = 50

SetLocale(1033) &amp;#039; Uses Date Math which may require us/english to work correctly

&amp;#039; count and remove dump files
Set dictDumps = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
PopulateDumpFilesDict dictDumps
bExtraDumpFiles = HasOldDumpFiles(dictDumps)


If HasStaleProcesses(intProcessesThreshold) Or _
		HasStaleSensorData(intSensorDataThreshold) Or _
		HasStaleActionStatusAndLogFiles(intStaleStatusFilesThreshold) Or _ 
		HasStaleActionFolders(intStaleActionFoldersThreshold) Or _
		HasStaleQNAFiles(intStaleQNAThreshold) Or _ 
		HasStaleFilesWantedDownloads(intStaleFilesWantedDownloadThreshold) Or _
		ClientRAMThresholdHitNoRestart(intMaxClientRAMInMB) Or _
		bExtraDumpFiles Then
	WScript.Echo &amp;quot;Yes&amp;quot;
Else
	WScript.Echo &amp;quot;No&amp;quot;
End If

Sub PopulateDumpFilesDict(ByRef dictDump)
	&amp;#039; builds a dictionary of dump files

	Dim objFSO,strTaniumDir,objFolder,objFile,strFileName
	Dim strFilePath,strFileCreated
	
	strTaniumDir = GetTaniumDir(&amp;quot;&amp;quot;)
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	
	For Each objFile In objFSO.GetFolder(strTaniumDir).Files
		strFileName = objFile.Name
		If Mid(strFileName,Len(strFileName) - 3,Len(strFileName)) = &amp;quot;.dmp&amp;quot; Then
			If Not dictDump.Exists(objFile.Path) Then
				dictDump.Add objFile.Path,objFile.DateCreated
			End If
		End If
	Next

End Sub &amp;#039;PopulateDumpFilesDict

Function HasOldDumpFiles(ByRef dictDumps)

	&amp;#039; keep last dump file
	Dim objFSO : Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	Dim strDumpPath,dtmLatestDate,strLastDumpPath,strDumpDate,intCount
	
	&amp;#039; which dump file was the latest - do not delete
	dtmLatestDate = CDate(&amp;quot;07/06/1978&amp;quot;)
	For Each strDumpPath In dictDumps.Keys
		strDumpDate = dictDumps.Item(strDumpPath)
		If IsDate(strDumpDate) Then
			If CDate(strDumpDate) &amp;gt; dtmLatestDate Then
				dtmLatestDate = CDate(strDumpDate)
				strLastDumpPath = strDumpPath
			End If
		End If
	Next
	
	intCount = 0
	For Each strDumpPath In dictDumps.Keys
		If Not strDumpPath = strLastDumpPath Then
			intCount = intCount + 1
		End If
	Next
	
	If intCount &amp;gt; 0 Then
		HasOldDumpFiles = True
		WScript.Echo &amp;quot;Unnecessary Dump Files&amp;quot;
	Else
		HasOldDumpFiles = False
	End If
	
End Function &amp;#039;HasOldDumpFiles

Function HasStaleProcesses(intThreshold)
	
	Dim bHasStaleProcesses,objWMIService,strPID,colItems,objItem
	Dim intAge,strCmd
	
	bHasStaleProcesses = False &amp;#039; assume false until tested
	&amp;#039; We may get errors getting the age of some system processes
	On Error Resume Next
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
	
	Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Process&amp;quot;,,48)
	For Each objItem In colItems
		strCmd = LCase(objItem.CommandLine)
		If (InStr(strCmd, &amp;quot;tanium client\vb\&amp;quot;) &amp;gt; 0 Or InStr(strCmd, &amp;quot;tanium client\downloads\&amp;quot;) &amp;gt; 0) Then
			intAge = GetAgeInMinutesWMI(objItem.CreationDate)
			strPid = objItem.ProcessId
			If intAge &amp;gt;= intThreshold Then
				bHasStaleProcesses = True
				Exit For
			End If
		End If
	Next
	On Error Goto 0
	
	If bHasStaleProcesses Then WScript.Echo &amp;quot;Stale Processes&amp;quot;
	HasStaleProcesses = bHasStaleProcesses
	
End Function &amp;#039;HasStaleProcesses

Function HasStaleSensorData(intThreshold)
	&amp;#039; returns true or false
	
	Dim bHasStaleSensorData,fso,strVBDir,intAge,objFolder,file
	
	bHasStaleSensorData = False &amp;#039; assume false until tested
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	strVBDir = GetTaniumDir(&amp;quot;VB&amp;quot;)
	
	If fso.FolderExists(strVBDir) Then
		Set objFolder = fso.GetFolder(strVBDir)
		
		For Each file In objFolder.Files
			intAge = GetMinutesOld(file.DateLastModified)
			If intAge &amp;gt;= intThreshold Then
				bHasStaleSensorData = True
				Exit For
			End If
		Next
	End If
	
	If bHasStaleSensorData Then WScript.Echo &amp;quot;Stale Sensor Data&amp;quot;
	HasStaleSensorData = bHasStaleSensorData
	
End Function &amp;#039;HasStaleSensorData

Function HasStaleActionStatusAndLogFiles(intThreshold)
	&amp;#039; returns true or false
	
	Dim bHasStaleActionStatusAndLogFiles,fso,strVBDir,intAge,objFolder,file
	Dim arrWords1,strExt,arrWords2,strDownloadsDir
	bHasStaleActionStatusAndLogFiles = False &amp;#039;assume false until tested
	
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	strDownloadsDir = GetTaniumDir(&amp;quot;Downloads&amp;quot;)
	
	If fso.FolderExists(strDownloadsDir) Then
		Set objFolder = fso.GetFolder(strDownloadsDir)
		
		For Each file In objFolder.Files
			If Left(file.Name, 6) = &amp;quot;Action&amp;quot; Then
				arrWords1 = Split(file.Name, &amp;quot;.&amp;quot;)
				strExt = arrWords1(UBound(arrWords1))
				If LCase(strExt) = &amp;quot;log&amp;quot; Or LCase(strExt) = &amp;quot;status&amp;quot; Then
					intAge = GetMinutesOld(file.DateLastModified)
					If intAge &amp;gt;= intThreshold Then
						bHasStaleActionStatusAndLogFiles = True
						Exit For
					End If
				End If
			End If
		Next
	End If
	
	If bHasStaleActionStatusAndLogFiles Then WScript.Echo &amp;quot;Stale Action Status/Log Files&amp;quot;
	HasStaleActionStatusAndLogFiles = bHasStaleActionStatusAndLogFiles
	
End Function &amp;#039;HasStaleActionStatusAndLogFiles

Function HasStaleFilesWantedDownloads(intThreshold)
	&amp;#039; returns true or false
		
	Dim bHasStaleFilesWantedDownloads,fso,strCacheDir,objFolder,objFile
	Dim strFileName, intAge
	bHasStaleFilesWantedDownloads = False &amp;#039;assume false until tested
	
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	strCacheDir = GetTaniumDir(&amp;quot;Downloads\Cache&amp;quot;)
	
	If fso.FolderExists(strCacheDir) And intThreshold &amp;lt;&amp;gt; 0 Then
		Set objFolder = fso.GetFolder(strCacheDir)
		
		For Each objFile In objFolder.Files
			strFileName = objFile.Name
	
			If strFileName &amp;lt;&amp;gt; &amp;quot;Catalog&amp;quot; And _
			   strFileName &amp;lt;&amp;gt; &amp;quot;FullCacheFile&amp;quot; And _
			   strFileName &amp;lt;&amp;gt; &amp;quot;HotCacheFile&amp;quot; And _
			   InStr(strFileName, &amp;quot;-&amp;quot;) &amp;gt; 0 Then 		
				intAge = GetMinutesOld(objFile.DateLastModified)
				If intAge &amp;gt;= intThreshold Then
					bHasStaleFilesWantedDownloads = True
					Exit For
				End If
			End If
		Next
	End If
	
	If bHasStaleFilesWantedDownloads Then WScript.Echo &amp;quot;Stalled Downloads&amp;quot;
	HasStaleFilesWantedDownloads = bHasStaleFilesWantedDownloads
	
End Function &amp;#039;HasStaleFilesWantedDownloads

Function HasStaleActionFolders(intThreshold)
&amp;#039; returns true or false
&amp;#039; threshold value recommended &amp;gt; 2 days for long running actions.
	Dim intCount,fso,strVBDir,intAge,objFolder,folder
	Dim arrWords1,strExt,strDownloadsDir,bHasStaleActionStatusAndLogFiles
	bHasStaleActionStatusAndLogFiles = False &amp;#039;assume false until tested
	
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	
	strDownloadsDir = GetTaniumDir(&amp;quot;Downloads&amp;quot;)
	
	intCount = 0
	If fso.FolderExists(strDownloadsDir) Then
		Set objFolder = fso.GetFolder(strDownloadsDir)
		For Each folder In objFolder.Subfolders
			If Left(folder.Name, 7) = &amp;quot;Action_&amp;quot; Then
				intAge = GetMinutesOld(folder.DateLastModified)
				If intAge &amp;gt;= intThreshold Then
					bHasStaleActionStatusAndLogFiles = True
					Exit For
				End If
			End If
		Next
	End If
	
	If bHasStaleActionStatusAndLogFiles Then WScript.Echo &amp;quot;Stale Action Folders&amp;quot;
	HasStaleActionFolders = bHasStaleActionStatusAndLogFiles
		
End Function &amp;#039;HasStaleActionFolders

Function HasStaleQNAFiles(intThreshold)
&amp;#039; returns true or false
	Dim intCount,fso,strVBDir,intAge,objFolder,file
	Dim strQNADir,strTaniumDir,bHasStaleQNAFiles
	bHasStaleQNAFiles = False &amp;#039;assume false until tested
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	&amp;#039; Do not point gettaniumdir at tools\qna directly or it would create the folder
	strTaniumDir = GetTaniumDir(&amp;quot;&amp;quot;)
	strQNADir = strTaniumDir&amp;amp;&amp;quot;QNA&amp;quot;
	
	intCount = 0
	If fso.FolderExists(strQNADir) Then
		Set objFolder = fso.GetFolder(strQNADir)
		On Error Resume Next
		For Each file In objFolder.Files
			If Instr(file.name,&amp;quot;.qna&amp;quot;) &amp;gt; 0 Then
				intAge = GetMinutesOld(file.DateLastModified)
				If intAge &amp;gt;= intThreshold Then
					bHasStaleQNAFiles = True
				End If
			End If
		Next
		On Error Goto 0
	End If
	
	If bHasStaleQNAFiles Then WScript.Echo &amp;quot;Stale QNA Files&amp;quot;
	HasStaleQNAFiles = bHasStaleQNAFiles
	
End Function &amp;#039;HasStaleQNAFiles

Function GetAgeInMinutesWMI(strWMI)
	Dim strProcessStart,strYear,strMonth,strDate,strHours,strMin,strSec
	Dim dtmProcessStart
	
	strYear = Left(strWMI, 4)
	strMonth = Mid(strWmi, 5, 2)
	strDate = Mid(strWMI, 7, 2)
	strHours = Mid(strWMI, 9, 2)
	strMin = Mid(strWMI, 11, 2)
	strSec = Mid(strWMI, 13, 2)
	strProcessStart = 	strMonth&amp;amp;&amp;quot;/&amp;quot;&amp;amp;strDate&amp;amp;&amp;quot;/&amp;quot;&amp;amp;strYear&amp;amp;&amp;quot; &amp;quot; &amp;amp; _
	strhours&amp;amp;&amp;quot;:&amp;quot;&amp;amp;strMin&amp;amp;&amp;quot;:&amp;quot;&amp;amp;strSec
	On Error Resume Next
	dtmProcessStart = FormatDateTime(strProcessStart, 0)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		GetAgeInMinutesWMI = False
		On Error Goto 0
		Exit Function
	End If
	On Error Goto 0
	GetAgeInMinutesWMI = DateDiff(&amp;quot;n&amp;quot;, dtmProcessStart, Now())
End Function &amp;#039;GetAgeInMinutesWMI

Function GetOffset
	Dim objSWbemServices,colTimeZone,objTimeZone
	
	Set objSWbemServices = GetObject(&amp;quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2&amp;quot;)
	Set colTimeZone = objSWbemServices.ExecQuery(&amp;quot;SELECT * FROM Win32_TimeZone&amp;quot;)
	For Each objTimeZone In colTimeZone
		GetOffset = objTimeZone.Bias
	Next	
End Function

Function GetMinutesOld(strDate)
	Dim patternDate
	On Error Resume Next
	patternDate = CDate( strDate )
	If Err.Number &amp;lt;&amp;gt; 0 Then
		GetMinutesOld = False
		On Error Goto 0
		Exit Function
	End If
	On Error Goto 0		
	GetMinutesOld = Abs(DateDiff(&amp;quot;n&amp;quot;, patternDate, Now()))
End Function &amp;#039;GetMinutesOld


Function GetTaniumDir(strSubDir)
	&amp;#039;GetTaniumDir with GeneratePath, works in x64 or x32
	&amp;#039;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath
	
	Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	
	keyNativePath = &amp;quot;HKLM\Software\Tanium\Tanium Client&amp;quot;
	keyWoWPath = &amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
	
	&amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
	On Error Resume Next
	strPath = objShell.RegRead(keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
	On Error Goto 0
	
	If strPath = &amp;quot;&amp;quot; Then
		&amp;#039; Could not find 32-bit mode path, checking Wow6432Node
		On Error Resume Next
		strPath = objShell.RegRead(keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
		On Error Goto 0
	End If
	
	If Not strPath = &amp;quot;&amp;quot; Then
		If strSubDir &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then
			strSubDir = &amp;quot;\&amp;quot; &amp;amp; strSubDir
		End If  
		
		Dim fso
		Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
		If fso.FolderExists(strPath) Then
			If Not fso.FolderExists(strPath &amp;amp; strSubDir) Then
				&amp;#039;&amp;#039;Need to loop through strSubDir and create all sub directories
				GeneratePath strPath &amp;amp; strSubDir, fso
			End If
			GetTaniumDir = strPath &amp;amp; strSubDir &amp;amp; &amp;quot;\&amp;quot;
		Else
			&amp;#039; Specified Path doesn&amp;#039;t exist on the filesystem
			WScript.Echo &amp;quot;Error: &amp;quot; &amp;amp; strPath &amp;amp; &amp;quot; does not exist on the filesystem&amp;quot;
			GetTaniumDir = False
		End If
	Else
		WScript.Echo &amp;quot;Error: Cannot find Tanium Client path in Registry&amp;quot;
		GetTaniumDir = False
	End If
End Function &amp;#039;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
	GeneratePath = False
	
	If Not fso.FolderExists(pFolderPath) Then
		If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
			GeneratePath = True
			Call fso.CreateFolder(pFolderPath)
		End If
	Else
		GeneratePath = True
	End If
End Function &amp;#039;GeneratePath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function ClientRAMThresholdHitNoRestart(intMaxClientRAMInMB)
&amp;#039; Checks the Client RAM and will restart the client

	If intMaxClientRAMInMB = 0 Then
		ClientRAMThresholdHitNoRestart = False
		Exit Function
	End If
	
	Dim objWMIService,colItems,objItem,strProcess,intClientRAMUsedInMB
	Dim strClientExeName,strMem,strProcessMem,strProcessCmdLine
	Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\cimv2&amp;quot;)
	strClientExeName = &amp;quot;taniumclient.exe&amp;quot;

	Set colItems = objWMIService.ExecQuery(&amp;quot;Select * from Win32_Process where Caption=&amp;#039;&amp;quot;&amp;amp;strClientExeName&amp;amp;&amp;quot;&amp;#039;&amp;quot;,,48)
	strMem = 0
	On Error Resume Next
	For Each objItem in colItems
		strProcessMem = objItem.WorkingSetSize
		strProcessCmdLine = objItem.CommandLine
		If Err.Number = 0 And (Right(strProcessCmdLine, 2) &amp;lt;&amp;gt; &amp;quot;-m&amp;quot;) Then
			If IsInteger(strProcessMem) Then
				strMem = strProcessMem + strMem
			End If
		End If
		Err.Clear()
	Next
	On Error Goto 0
	intClientRAMUsedInMB = 0
	strMem = CLng(strMem)
	intClientRAMUsedInMB = Int(strMem / (1024 * 1024))
	If intClientRAMUsedInMB &amp;gt; intMaxClientRAMInMB And intClientRAMUsedInMB &amp;gt; MIN_CLIENT_STRING_NODE_THRESHOLD Then
		WScript.Echo &amp;quot;Stale String/Node Data&amp;quot;
		ClientRAMThresholdHitNoRestart = True
	Else
		ClientRAMThresholdHitNoRestart = False
	End If
	
End Function &amp;#039;ClientRAMThresholdHitNoRestart</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <metadata>
              <item>
                <name>defined</name>
                <value>Tanium</value>
                <admin_flag>0</admin_flag>
              </item>
            </metadata>
            <cache_row_id>341</cache_row_id>
          </sensor>
          <sensor>
            <id>645</id>
            <name>Tanium Client Action Folder Sizes</name>
            <hash>2290387752</hash>
            <string_count>0</string_count>
            <category>Tanium Diagnostics</category>
            <description>Returns the combined size of all Action_XXXX subdirectories in the Tanium Client\Downloads directory.
Example: 351 MB</description>
            <creation_time>2015-09-14T13:39:26</creation_time>
            <modification_time>2015-09-14T13:39:26</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Tanium Client Action Folder Sizes
&amp;#039;========================================

Option Explicit

SetLocale(GetTaniumLocale)

Const HKLM = &amp;amp;H80000002
Dim objRegistry,strTaniumClientKey
Dim objFSO,objFolder,strTaniumClientPath,strDownloadsDir
Dim lngSize,intCount,folder
Dim strSize,strSep

strSep = &amp;quot;|&amp;quot;

Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

Set objRegistry=GetObject(&amp;quot;winmgmts:\\.\root\default:StdRegProv&amp;quot;)

strTaniumClientKey = GetTaniumRegistryPath()
If Not strTaniumClientKey = &amp;quot;&amp;quot; Then
	objRegistry.GetStringValue HKLM,strTaniumClientKey,&amp;quot;Path&amp;quot;,strTaniumClientPath
End If

If ( IsNull(strTaniumClientPath) Or strTaniumClientPath = &amp;quot;&amp;quot;) Or ( Not objFSO.FolderExists(strTaniumClientPath)) Then
	WScript.Echo &amp;quot;Tanium Client Directory Not Found&amp;quot;
Else
	On Error Resume Next
	strDownloadsDir = strTaniumClientPath&amp;amp;&amp;quot;\Downloads&amp;quot;
	lngSize = 0
	intCount = 0
	If objFso.FolderExists(strDownloadsDir) Then
		Set objFolder = objFso.GetFolder(strDownloadsDir)

		For Each folder In objFolder.SubFolders
			If Left(folder.Name, 7) = &amp;quot;Action_&amp;quot; Then
				lngSize = lngSize + GetAccessibleFolderSize(folder.Path)
				intCount = intCount + 1
			End If
		Next
		On Error Goto 0
		If intCount &amp;gt; 0 Then
			WScript.Echo GetPrettyFileSize(CStr(lngSize))
		Else
			WScript.Echo &amp;quot;No Action Folders Found in Downloads dir&amp;quot;
		End If
	
	Else
		WScript.Echo &amp;quot;Tanium Client Downloads Directory Not Found&amp;quot;
	End If


End If

&amp;#039; --- end main --- &amp;#039;

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function
	
Function GetTaniumRegistryPath
&amp;#039;GetTaniumRegistryPath works in x64 or x32
&amp;#039;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    keyNativePath = &amp;quot;Software\Tanium\Tanium Client&amp;quot;
    keyWoWPath = &amp;quot;Software\Wow6432Node\Tanium\Tanium Client&amp;quot;
    
    &amp;#039; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyNativePath&amp;amp;&amp;quot;\Path&amp;quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &amp;quot;&amp;quot; Then
        &amp;#039; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&amp;quot;HKLM\&amp;quot;&amp;amp;keyWoWPath&amp;amp;&amp;quot;\Path&amp;quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &amp;quot;&amp;quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &amp;quot;Error: Cannot locate Tanium Registry Path&amp;quot;
    End If
End Function &amp;#039;GetTaniumRegistryPath

Function GetPrettyFileSize(strSize)
Dim dblSize
	dblSize = CDbl(strSize)

	If dblSize &amp;gt; 1024*1024*1024 Then &amp;#039;&amp;#039;Should be GB
		strSize = CStr(Round(dblSize / 1024 / 1024 / 1024, 1)) &amp;amp; &amp;quot; GB&amp;quot;	
	ElseIf dblsize &amp;gt; 1024*1024 Then  &amp;#039;&amp;#039;Should be MB
		strSize = CStr(Round(dblSize / 1024 / 1024, 1)) &amp;amp; &amp;quot; MB&amp;quot;
	ElseIf dblSize &amp;gt; 1024 Then  &amp;#039;&amp;#039;Should be kB
		strSize = CStr(Round(dblSize / 1024)) &amp;amp; &amp;quot; KB&amp;quot;
	Else
		strSize = CStr(dblSize) &amp;amp; &amp;quot; B&amp;quot;	
	End If	
	GetPrettyFileSize = strSize
End Function &amp;#039;GetPrettyFileSize


Function GetAccessibleFolderSize(strFolderPath)
&amp;#039; Gets the folder sizes that it is able to
&amp;#039; and skips those it has no rights to see
    On Error Resume Next &amp;#039; Permissions Errors potentially

	Dim objFSO
    Dim objFolder,objSubfolder,intSize,bHasSubfolders	
	Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
	    
    bHasSubfolders = False

    Set objFolder = objFSO.GetFolder(strFolderPath)
    Err.Clear
    intSize = objFolder.Size
    If Err.Number &amp;lt;&amp;gt; 0 Then
        For Each objSubfolder in objFolder.SubFolders
            intSize = intSize + GetAccessibleFolderSize(objSubfolder.Path)
            bHasSubfolders = True
        Next

        If Not bHasSubfolders Then
            intSize = objFolder.Size
        End If
    End If

    GetAccessibleFolderSize = intSize
    
    On Error Goto 0

End Function &amp;#039;GetAccessibleFolderSize

Function GetTaniumLocale
&amp;#039;&amp;#039; This function will retrieve the locale value
&amp;#039; previously set which governs Tanium content that
&amp;#039; is locale sensitive.

	Dim objWshShell
	Dim intLocaleID
	
	Set objWshShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
	On Error Resume Next
	intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Tanium\Tanium Client\LocaleID&amp;quot;)
	If Err.Number &amp;lt;&amp;gt; 0 Then
		intLocaleID = objWshShell.RegRead(&amp;quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client\LocaleID&amp;quot;)
	End If
	On Error Goto 0
	If intLocaleID = &amp;quot;&amp;quot; Then
		GetTaniumLocale = 1033 &amp;#039; default to us/English
	Else
		GetTaniumLocale = intLocaleID
	End If

	&amp;#039; Cleanup
	Set objWshShell = Nothing

End Function &amp;#039;GetTaniumLocale</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

size=$(find Downloads/Action* -type d | xargs du -sk | awk &amp;#039;{sum+=$1} END{print sum}&amp;#039;)
echo $size KB</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>DataSize</value_type>
            <max_age_seconds>900</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>342</cache_row_id>
          </sensor>
          <sensor>
            <id>646</id>
            <name>Action Statuses CMDLINE TEST 2119</name>
            <hash>500014594</hash>
            <string_count>0</string_count>
            <category>Reserved</category>
            <description>The recorded state of each action a client has taken recently in the form of id:status.
Example: 1:Completed</description>
            <creation_time>2015-09-14T18:13:55</creation_time>
            <modification_time>2015-09-14T18:13:55</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Reserved</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>343</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967277</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488397328</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>344</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967276</id>
            <name>Linux:tempsensor_19</name>
            <hash>1487791808</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>345</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967275</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1487792243</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>346</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967274</id>
            <name>Linux:tempsensor_21</name>
            <hash>1487792678</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>347</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967273</id>
            <name>Folder Contents[C:\Program Files, test]</name>
            <hash>1487793113</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>348</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967272</id>
            <name>Linux:tempsensor_23</name>
            <hash>1487793548</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>349</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967271</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1487793983</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>350</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967270</id>
            <name>Linux:tempsensor_25</name>
            <hash>1487794418</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>351</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967269</id>
            <name>Folder Contents[C:\Program Files, test]</name>
            <hash>1487794853</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>352</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967268</id>
            <name>Linux:tempsensor_27</name>
            <hash>1487795288</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>353</cache_row_id>
          </sensor>
          <sensor>
            <id>647</id>
            <name>Action Statuses CMDLINE TEST 3725</name>
            <hash>1043293198</hash>
            <string_count>0</string_count>
            <category>Reserved</category>
            <description>The recorded state of each action a client has taken recently in the form of id:status.
Example: 1:Completed</description>
            <creation_time>2015-09-14T18:33:59</creation_time>
            <modification_time>2015-09-14T18:33:59</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Reserved</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>354</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967267</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1487795723</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>355</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967266</id>
            <name>Linux:tempsensor_29</name>
            <hash>1487994953</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>356</cache_row_id>
          </sensor>
          <sensor>
            <id>670</id>
            <name>Is Mac API TEST</name>
            <hash>2387245230</hash>
            <string_count>0</string_count>
            <category>Operating System</category>
            <description>Returns whether the machine is a Mac.  True if so, False if not.
Example: True</description>
            <creation_time>2015-09-14T19:57:39</creation_time>
            <modification_time>2015-09-14T19:57:39</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Is Mac
&amp;#039;========================================

Wscript.echo &amp;quot;False&amp;quot;</script>
                <script_type>VBScript</script_type>
              </query>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/bash
echo True</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/bash
echo False</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>0</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>357</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967265</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1487994518</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>358</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967264</id>
            <name>Linux:tempsensor_31</name>
            <hash>1487994083</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>359</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967263</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1487993648</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>360</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967262</id>
            <name>Linux:tempsensor_33</name>
            <hash>1487996693</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>361</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967261</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1487996258</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>362</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967260</id>
            <name>Linux:tempsensor_35</name>
            <hash>1487995823</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>363</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967259</id>
            <name>Folder Contents[]</name>
            <hash>1487995388</hash>
            <string_count>3</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value></value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>364</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967258</id>
            <name>Linux:tempsensor_37</name>
            <hash>1487998433</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value></value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>365</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967257</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1487997998</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>366</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967256</id>
            <name>Linux:tempsensor_39</name>
            <hash>1488941078</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>367</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967255</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488941513</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>368</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967254</id>
            <name>Linux:tempsensor_41</name>
            <hash>1488940208</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>369</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967253</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488940643</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>370</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967252</id>
            <name>Linux:tempsensor_43</name>
            <hash>1488942818</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>371</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967251</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488943253</hash>
            <string_count>18</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>372</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967250</id>
            <name>Linux:tempsensor_45</name>
            <hash>1488941948</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>373</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967249</id>
            <name>Folder Contents[]</name>
            <hash>1488942383</hash>
            <string_count>3</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value></value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>374</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967248</id>
            <name>Linux:tempsensor_47</name>
            <hash>1488944558</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value></value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>375</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967247</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488944993</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>376</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967246</id>
            <name>Linux:tempsensor_49</name>
            <hash>1489144223</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>377</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967245</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489143788</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>378</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967244</id>
            <name>Linux:tempsensor_51</name>
            <hash>1489145093</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>379</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967243</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489144658</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>380</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967242</id>
            <name>Linux:tempsensor_53</name>
            <hash>1489142483</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>381</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967241</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489142048</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>382</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967240</id>
            <name>Linux:tempsensor_55</name>
            <hash>1489143353</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>383</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967239</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489142918</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>384</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967238</id>
            <name>Linux:tempsensor_57</name>
            <hash>1489147703</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>385</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967237</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489147268</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>386</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967236</id>
            <name>Linux:tempsensor_59</name>
            <hash>1488548708</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>387</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967235</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488549143</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>388</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967234</id>
            <name>Linux:tempsensor_61</name>
            <hash>1488549578</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>389</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967233</id>
            <name>Folder Contents[C:\Program Files, test]</name>
            <hash>1488550013</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>390</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967232</id>
            <name>Linux:tempsensor_63</name>
            <hash>1488546968</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>391</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967231</id>
            <name>Folder Contents[]</name>
            <hash>1488547403</hash>
            <string_count>3</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value></value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>392</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967230</id>
            <name>Linux:tempsensor_65</name>
            <hash>1488547838</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value></value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>393</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967229</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488548273</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>394</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967228</id>
            <name>Linux:tempsensor_67</name>
            <hash>1488545228</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>395</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967227</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488545663</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>396</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967226</id>
            <name>Linux:tempsensor_69</name>
            <hash>1488751853</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>397</cache_row_id>
          </sensor>
          <sensor>
            <id>658</id>
            <name>Action Statuses CMDLINE TEST 2368</name>
            <hash>652712644</hash>
            <string_count>0</string_count>
            <category>Reserved</category>
            <description>The recorded state of each action a client has taken recently in the form of id:status.
Example: 1:Completed</description>
            <creation_time>2015-09-14T19:06:26</creation_time>
            <modification_time>2015-09-14T19:06:26</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Reserved</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>398</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967225</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488751418</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>399</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967224</id>
            <name>Linux:tempsensor_71</name>
            <hash>1488750983</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>400</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967223</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488750548</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>401</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967222</id>
            <name>Linux:tempsensor_73</name>
            <hash>1488750113</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>402</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967221</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488749678</hash>
            <string_count>18</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>403</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967220</id>
            <name>Linux:tempsensor_75</name>
            <hash>1488749243</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>404</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967219</id>
            <name>Folder Contents[]</name>
            <hash>1488748808</hash>
            <string_count>3</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value></value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>405</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967218</id>
            <name>Linux:tempsensor_77</name>
            <hash>1488748373</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value></value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>406</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967217</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1488747938</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>407</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967216</id>
            <name>Linux:tempsensor_79</name>
            <hash>1489697978</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>408</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967215</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489698413</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>409</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967214</id>
            <name>Linux:tempsensor_81</name>
            <hash>1489697108</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>410</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967213</id>
            <name>Folder Contents[C:\Program Files, test]</name>
            <hash>1489697543</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>411</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967212</id>
            <name>Linux:tempsensor_83</name>
            <hash>1489696238</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>412</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967211</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489696673</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>413</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967210</id>
            <name>Linux:tempsensor_85</name>
            <hash>1489695368</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>414</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967209</id>
            <name>Computer Name[Dweedle]</name>
            <hash>1489695803</hash>
            <string_count>3</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select CSName from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>3</source_id>
            <parameters>
              <parameter>
                <key>||fake||</key>
                <value>Dweedle</value>
              </parameter>
            </parameters>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>415</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967208</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489694498</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>416</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967207</id>
            <name>Linux:tempsensor_88</name>
            <hash>1489694933</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>417</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967206</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489887203</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>418</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967205</id>
            <name>Linux:tempsensor_90</name>
            <hash>1489886768</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>419</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967204</id>
            <name>Folder Contents[C:\Program Files, test]</name>
            <hash>1489888073</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>420</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967203</id>
            <name>Linux:tempsensor_92</name>
            <hash>1489887638</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>421</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967202</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489888943</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>422</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967201</id>
            <name>Linux:tempsensor_94</name>
            <hash>1489888508</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>423</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967200</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>1489889813</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>424</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967199</id>
            <name>Linux:tempsensor_96</name>
            <hash>1489889378</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>425</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967198</id>
            <name>Folder Contents[]</name>
            <hash>1489890683</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value></value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>426</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967197</id>
            <name>Linux:tempsensor_98</name>
            <hash>1489890248</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
#   

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value></value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>427</cache_row_id>
          </sensor>
          <sensor>
            <id>663</id>
            <name>Action Statuses CMDLINE TEST 3082</name>
            <hash>783082288</hash>
            <string_count>0</string_count>
            <category>Reserved</category>
            <description>The recorded state of each action a client has taken recently in the form of id:status.
Example: 1:Completed</description>
            <creation_time>2015-09-14T19:33:44</creation_time>
            <modification_time>2015-09-14T19:33:44</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Reserved</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>428</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967196</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209453265</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>429</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967195</id>
            <name>Linux:tempsensor_100</name>
            <hash>3209452830</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>430</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967194</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209452395</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>431</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967193</id>
            <name>Linux:tempsensor_102</name>
            <hash>3209451960</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>432</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967192</id>
            <name>Folder Contents[C:\Program Files, test]</name>
            <hash>3209455005</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>433</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967191</id>
            <name>Linux:tempsensor_104</name>
            <hash>3209454570</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>434</cache_row_id>
          </sensor>
          <sensor>
            <id>664</id>
            <name>Action Statuses CMDLINE TEST 6173</name>
            <hash>3293515538</hash>
            <string_count>0</string_count>
            <category>Reserved</category>
            <description>The recorded state of each action a client has taken recently in the form of id:status.
Example: 1:Completed</description>
            <creation_time>2015-09-14T19:50:32</creation_time>
            <modification_time>2015-09-14T19:50:32</modification_time>
            <last_modified_by>Administrator</last_modified_by>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>Reserved</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>0</source_id>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>3600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>435</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967190</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209454135</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>436</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967189</id>
            <name>Linux:tempsensor_106</name>
            <hash>3209453700</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>437</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967188</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209449785</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>438</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967187</id>
            <name>Linux:tempsensor_108</name>
            <hash>3209449350</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>439</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967186</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209250120</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>440</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967185</id>
            <name>Linux:tempsensor_110</name>
            <hash>3209250555</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>441</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967184</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209250990</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>442</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967183</id>
            <name>Linux:tempsensor_112</name>
            <hash>3209251425</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>443</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967182</id>
            <name>Folder Contents[C:\Program Files, test]</name>
            <hash>3209251860</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>444</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967181</id>
            <name>Linux:tempsensor_114</name>
            <hash>3209252295</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
              <parameter>
                <key>|| invalidparam||</key>
                <value>test</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>445</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967180</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209252730</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>446</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967179</id>
            <name>Linux:tempsensor_116</name>
            <hash>3209253165</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>447</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967178</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209246640</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>448</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967177</id>
            <name>Linux:tempsensor_118</name>
            <hash>3209247075</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>449</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967176</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209845635</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>450</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967175</id>
            <name>Linux:tempsensor_120</name>
            <hash>3209845200</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>451</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967174</id>
            <name>Computer Name[Dweedle]</name>
            <hash>3209846505</hash>
            <string_count>3</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>select CSName from win32_operatingsystem</script>
                <script_type>WMIQuery</script_type>
              </query>
            </queries>
            <source_id>3</source_id>
            <parameters>
              <parameter>
                <key>||fake||</key>
                <value>Dweedle</value>
              </parameter>
            </parameters>
            <parameter_definition></parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>86400</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter></delimiter>
            <cache_row_id>452</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967173</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209846070</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>453</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967172</id>
            <name>Linux:tempsensor_123</name>
            <hash>3209847375</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>454</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967171</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209846940</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>455</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967170</id>
            <name>Linux:tempsensor_125</name>
            <hash>3209848245</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>456</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967169</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209847810</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>457</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967168</id>
            <name>Linux:tempsensor_127</name>
            <hash>3209849115</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>458</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967167</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209848680</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>459</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967166</id>
            <name>Linux:tempsensor_129</name>
            <hash>3209656410</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>460</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967165</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209656845</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>461</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967164</id>
            <name>Linux:tempsensor_131</name>
            <hash>3209655540</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>462</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967163</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209655975</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>463</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967162</id>
            <name>Linux:tempsensor_133</name>
            <hash>3209654670</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>464</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967161</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209655105</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>465</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967160</id>
            <name>Linux:tempsensor_135</name>
            <hash>3209653800</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>466</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967159</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209654235</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>467</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967158</id>
            <name>Linux:tempsensor_137</name>
            <hash>3209652930</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>468</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967157</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3209653365</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>469</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967156</id>
            <name>Linux:tempsensor_139</name>
            <hash>3210196245</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>470</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967155</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3210195810</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>471</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967154</id>
            <name>Linux:tempsensor_141</name>
            <hash>3210195375</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>472</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967153</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3210194940</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>473</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967152</id>
            <name>Linux:tempsensor_143</name>
            <hash>3210194505</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>474</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967151</id>
            <name>Folder Contents[C:\Program Files]</name>
            <hash>3210194070</hash>
            <string_count>19</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Windows</platform>
                <script>&amp;#039;========================================
&amp;#039; Folder Contents
&amp;#039;========================================


Dim bExamineRemoteFolders &amp;#039; boolean to decide whether to consider non-local dirs

bExamineRemoteFolders = False &amp;#039; attempt to look at remote folders, may fail due to access

Dim strFolderPath,o
strFolderPath = unescape(&amp;quot;C%3a%5cProgram%20Files&amp;quot;)
strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)

Set o = New TaniumOutput

If InStr(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;) &amp;gt; 0 Then
    ListForAllUsers strFolderPath
Else
    ListNoUserVars strFolderPath
End If

&amp;#039; Protect against too much string output

o.MaxLines = 500
o.EchoOutputDict


Sub ListFolderContents(strFolderPath,strUserProfileName)
	Dim bUserDirsFlag
	bUserDirsFlag = False
	If strUserProfileName &amp;lt;&amp;gt; &amp;quot;&amp;quot; Then bUserDirsFlag = True
	Dim fso
	Set fso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)
	If fso.FolderExists(strFolderPath) Then
		Set objFolder = fso.GetFolder(strFolderPath)
		Set objSubDir = objFolder.SubFolders
		Set objFiles = objFolder.Files
		If objSubDir.Count = 0 AND objFiles.Count = 0 Then
			&amp;#039; Do not change output for original, non-user case
			If bUserDirsFlag Then
				o.AddLine &amp;quot;Folder &amp;quot; &amp;amp; strFolderPath &amp;amp; &amp;quot; is Empty&amp;quot;
				Exit Sub
			Else
				WScript.Echo &amp;quot;Folder is Empty&amp;quot;
				WScript.quit()
			End If
		End If
		If objSubDir.Count &amp;gt; 0 Then
			For Each ObjSubFolder In objSubDir
				&amp;#039; Do not change output for original, non-user case
				&amp;#039; which was show only the folder name
				If bUserDirsFlag Then
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : Folder : &amp;quot;&amp;amp; ObjSubFolder.Name
				Else
					o.AddLine &amp;quot;Folder : &amp;quot; &amp;amp; ObjSubFolder.Name
				End If
			Next
		End If
	
		If objFiles.Count &amp;gt; 0 Then
			&amp;#039; Do not change output for original, non-user case
			&amp;#039; which was show only the folder name
			If bUserDirsFlag Then		
				For Each objFile In objFiles
					o.AddLine &amp;quot;User Profile : &amp;quot;&amp;amp;strUserProfileName&amp;amp;&amp;quot; : File : &amp;quot;&amp;amp; objFile.Name
				Next
			Else
				For Each objFile In objFiles
					o.AddLine objFile.Name
				Next
			End If
		End If
	Else
		If bUserDirsFlag Then		
			o.AddLine &amp;quot;Folder &amp;quot; &amp;amp;strFolderPath &amp;amp;&amp;quot; does not exist&amp;quot;
		Else
			o.AddLine &amp;quot;Folder does not exist&amp;quot;
		End If
	End If
End Sub &amp;#039;ListFolderContents


Sub ListNoUserVars(ByVal strFolderPath)
&amp;#039; plain check if a file exists
    strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
    Dim objShell
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)

    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	ListFolderContents strFolderPath, &amp;quot;&amp;quot;
End Sub &amp;#039;ListNoUserVars

Sub ListForAllUsers(ByVal strFolderPath)
&amp;#039; checks in every user directory
    &amp;#039; Remove %userprofile% and keep the rest
    strFolderPath = Replace(LCase(strFolderPath),&amp;quot;%userprofile%&amp;quot;,&amp;quot;&amp;quot;)
    On Error Resume Next &amp;#039; permissions issues, perhaps

    Const HKLM = &amp;amp;H80000002
    Dim objShell,objFso
    Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
    Dim strValue
    
    Set objShell = CreateObject(&amp;quot;WScript.Shell&amp;quot;)
    
    strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )

    Set objFso = WScript.CreateObject(&amp;quot;Scripting.Filesystemobject&amp;quot;)

    Set objRegistry=Getx64RegistryProvider

    strKeyPath = &amp;quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&amp;quot;
    objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys


    For Each objSubkey In arrSubkeys
        strValueName = &amp;quot;ProfileImagePath&amp;quot;
        strSubPath = strKeyPath &amp;amp; &amp;quot;\&amp;quot; &amp;amp; objSubkey
        objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue
        If Not bExamineRemoteFolders And Not InStr(strValue,&amp;quot;:&amp;quot;) &amp;gt; 0 Then &amp;#039; Not Local, don&amp;#039;t get size of remote dirs
            &amp;#039; if user profile is not local and not examining remote profiles, ignore
        Else
            ListFolderContents strValue&amp;amp;strFolderPath, strValue
        End If
    Next

    On Error Goto 0

End Sub &amp;#039;ListForAllUsers

Function Getx64RegistryProvider
    &amp;#039; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\.\root\CIMV2&amp;quot;)
    Set colItems = objWMIService.ExecQuery(&amp;quot;Select SystemType from Win32_ComputerSystem&amp;quot;)
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &amp;quot;x64&amp;quot;) &amp;gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next

    Set objCtx = CreateObject(&amp;quot;WbemScripting.SWbemNamedValueSet&amp;quot;)
    objCtx.Add &amp;quot;__ProviderArchitecture&amp;quot;, iArchType
    Set objLocator = CreateObject(&amp;quot;Wbemscripting.SWbemLocator&amp;quot;)
    Set objServices = objLocator.ConnectServer(&amp;quot;&amp;quot;,&amp;quot;root\default&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&amp;quot;StdRegProv&amp;quot;)

    Set Getx64RegistryProvider = objRegProv
End Function &amp;#039; Getx64RegistryProvider


Function FixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will fix a folder location so that
&amp;#039; a 32-bit program can be passed the windows\system32 directory
&amp;#039; as a parameter.
&amp;#039; Even if the sensor or action runs in 64-bit mode, a 32-bit
&amp;#039; program called in a 64-bit environment cannot access
&amp;#039; the system32 directory - it would be redirected to syswow64.
&amp;#039; you would not want to do this for 64-bit programs.

    Dim objFSO, strSystem32Location,objShell
    Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)
    Set objShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)

    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles%&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strProgramFilesx86=objShell.ExpandEnvironmentStrings(&amp;quot;%ProgramFiles(x86)%&amp;quot;)

    If objFSO.FolderExists(strProgramFilesx86) Then &amp;#039; quick check for x64
        If InStr(strFolderPath,strSystem32Location) = 1 Then
            strRestOfPath = Replace(strFolderPath,strSystem32Location,&amp;quot;&amp;quot;)
            strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)
            strFolderPath = strNewSystem32Location&amp;amp;strRestOfPath
        End If
    End If
    FixFileSystemRedirectionForPath = strFolderPath

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFolderPath)
&amp;#039; This function will undo the changes made to a path by the
&amp;#039; FixFileSystemRedirectionForPath function
&amp;#039; if a path is passed in with the sysnative string in it
&amp;#039; it will simply change it to system32, regardless of whether
&amp;#039; the OS is 64-bit.  A path will only be changed when it&amp;#039;s
&amp;#039; necessary, so this has no effect when it&amp;#039;s not changed.

    Dim objFSO,strSystem32Location,strNewSystem32Location

    Set objFSO = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;)

    strFolderPath = LCase(strFolderPath)
    strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
    strNewSystem32Location = Replace(strSystem32Location,&amp;quot;system32&amp;quot;,&amp;quot;sysnative&amp;quot;)

    UnFixFileSystemRedirectionForPath = Replace(strFolderPath,strNewSystem32Location,strSystem32Location)

    &amp;#039;Cleanup
    Set objFSO = Nothing
End Function &amp;#039;UnFixFileSystemRedirectionForPath


&amp;#039; :::VBLib:TaniumOutput:Begin:::
Class TaniumOutput
	Private m_dict
	Private m_intMaxlines
	Private m_strWarning
	Private m_libVersion
	Private m_blacklistString
	Private m_whitelistString	

	Private Sub Class_Initialize
		m_libVersion = &amp;quot;6.2.314.3262&amp;quot;	
		Set m_dict = CreateObject(&amp;quot;Scripting.Dictionary&amp;quot;)
		m_intMaxLines = 300
		m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
    End Sub
	
	Private Sub Class_Terminate
		Set m_dict = Nothing
	End Sub
		   
	Public Property Let WarningMessage(strWarning)
		m_strWarning = strWarning
	End Property
	
	Public Property Let MaxLines(intMaxLines)
		If CLng(intMaxLines) = intMaxLines Then
			m_intMaxlines = intMaxLines
			m_strWarning = &amp;quot;Warning: Maximum number of output lines (&amp;quot;&amp;amp;m_intMaxLines&amp;amp;&amp;quot;) reached&amp;quot;
		End If
	End Property
    
    Public Property Let WhitelistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_whitelistString = strIn
    	Else
    		m_whitelistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;WhitelistString


    Public Property Let BlacklistString(strIn)
    	If VarType(strIn) = vbString Then
    		m_blacklistString = strIn
    	Else
    		m_blacklistString = &amp;quot;&amp;quot;
    	End If
    End Property &amp;#039;BlacklistString


    Public Property Get LibVersion
    	LibVersion = m_libVersion
    End Property

    Public Property Get OutputLineCount
    	OutputLineCount = m_dict.Count
    End Property
    
	Public Sub EchoOutputDict
		Dim strOutLine,bEcho
		For Each strOutLine In m_dict.Keys
			bEcho = True
			If m_blacklistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And InStr(1,strOutLine,m_blacklistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If	
			If m_whitelistString &amp;lt;&amp;gt; &amp;quot;&amp;quot; And Not InStr(1,strOutLine,m_whitelistString,vbTextCompare) &amp;gt; 0 Then
				bEcho = False
			End If
			If bEcho Then WScript.Echo strOutLine
		Next
	End Sub &amp;#039;EchoOutputDict    

	Public Sub AddLine(strLine)
		If m_intMaxLines &amp;lt;= m_dict.Count Then
			If Not m_dict.Exists(m_strWarning) Then
				m_dict.Add m_strWarning,1
			End If
		Else
			If Not m_dict.Exists(strLine) Then
				m_dict.Add strLine, 1
			End If
		End If
	End Sub &amp;#039;AddToOutputDict

End Class &amp;#039;TaniumOutput
&amp;#039; :::VBLib:TaniumOutput:End:::</script>
                <script_type>VBScript</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>475</cache_row_id>
          </sensor>
          <sensor>
            <id>4294967150</id>
            <name>Linux:tempsensor_145</name>
            <hash>3210193635</hash>
            <string_count>0</string_count>
            <category></category>
            <description></description>
            <queries>
              <query>
                <platform>Linux</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Linux&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Mac</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Mac&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>Solaris</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on Solaris&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
              <query>
                <platform>AIX</platform>
                <script>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {&amp;quot;parameters&amp;quot;:[{&amp;quot;restrict&amp;quot;:null,&amp;quot;helpString&amp;quot;:&amp;quot;Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.&amp;quot;,&amp;quot;maxChars&amp;quot;:0,&amp;quot;defaultValue&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;validationExpressions&amp;quot;:[{&amp;quot;expression&amp;quot;:&amp;quot;^\\S&amp;quot;,&amp;quot;helpString&amp;quot;:&amp;quot;Value can not be blank&amp;quot;,&amp;quot;flags&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.models::ValidationExpression&amp;quot;}],&amp;quot;promptText&amp;quot;:&amp;quot;e.g. c:\\Temp, or %userprofile%\\Desktop&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Folder path to search for&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;folderPath&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::TextInputParameter&amp;quot;}],&amp;quot;model&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;,&amp;quot;parameterType&amp;quot;:&amp;quot;com.tanium.components.parameters::ParametersArray&amp;quot;}
# C%3a%5cProgram%20Files  

echo &amp;quot;N/A on AIX&amp;quot;</script>
                <script_type>UnixShell</script_type>
              </query>
            </queries>
            <source_id>510</source_id>
            <parameters>
              <parameter>
                <key>||folderPath||</key>
                <value>C:\Program Files</value>
              </parameter>
            </parameters>
            <parameter_definition>{"parameters":[{"label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Only %userprofile% is acceptable to loop through user directories.","defaultValue":"","promptText":"e.g. c:\\Temp, or %userprofile%\\Desktop","maxChars":0,"key":"folderPath","restrict":null,"validationExpressions":[{"helpString":"Value can not be blank","expression":"^\\S","flags":"","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"value":"","parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}</parameter_definition>
            <value_type>String</value_type>
            <max_age_seconds>600</max_age_seconds>
            <ignore_case_flag>1</ignore_case_flag>
            <hidden_flag>0</hidden_flag>
            <exclude_from_parse_flag>1</exclude_from_parse_flag>
            <delimiter>,</delimiter>
            <cache_row_id>476</cache_row_id>
          </sensor>
          <cache_info>
            <cache_id>3906464842</cache_id>
            <page_row_count>476</page_row_count>
            <filtered_row_count>476</filtered_row_count>
            <cache_row_count>476</cache_row_count>
            <expiration>2015-09-14T20:10:21</expiration>
          </cache_info>
        </sensors>
      </result_object>
      <ResultXML></ResultXML>
      <options>
        <suppress_object_list>1</suppress_object_list>
      </options>
    </t:return>
  </soap:Body>
</soap:Envelope>